
stm32c0_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004afc  08004afc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004afc  08004afc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004afc  08004afc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000074  08004b78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  08004b78  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d75c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee5  00000000  00000000  0003d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012da3  00000000  00000000  000416dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00054480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c0  00000000  00000000  00055630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e78  00000000  00000000  000567f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021358  00000000  00000000  00070668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092ee3  00000000  00000000  000919c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001248a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003284  00000000  00000000  001248f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004790 	.word	0x08004790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004790 	.word	0x08004790

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <ledISR>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void ledISR(void *arg)
{
 800041c:	b510      	push	{r4, lr}
	ledToggle(_DEF_CH1);
 800041e:	2000      	movs	r0, #0
 8000420:	f000 fa16 	bl	8000850 <ledToggle>
}
 8000424:	bd10      	pop	{r4, pc}
	...

08000428 <infoCli>:
* Inputs        : uint8_t,  const char
* Outputs       :
* Return        : void
*****************************************************************************/
void infoCli(uint8_t argc, const char **argv)
{
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	46c6      	mov	lr, r8
 800042c:	b500      	push	{lr}
 800042e:	0004      	movs	r4, r0
 8000430:	000f      	movs	r7, r1
	bool ret = false;

	//1.1. info - test
	if (argc == 1 && cliIsStr(argv[0], "test") == 0)
 8000432:	2801      	cmp	r0, #1
 8000434:	d009      	beq.n	800044a <infoCli+0x22>
	bool ret = false;
 8000436:	2600      	movs	r6, #0
		ret = true;
	}


	//1.2. info - print
	if (argc == 2 && cliIsStr(argv[0], "print"))
 8000438:	2c02      	cmp	r4, #2
 800043a:	d013      	beq.n	8000464 <infoCli+0x3c>
		ret= true;
	}


	//1.3. info - button
	if (argc == 1 && cliIsStr(argv[0], "button"))
 800043c:	2c01      	cmp	r4, #1
 800043e:	d029      	beq.n	8000494 <infoCli+0x6c>
		ret = true;
	}



	if (ret == false)
 8000440:	2e00      	cmp	r6, #0
 8000442:	d046      	beq.n	80004d2 <infoCli+0xaa>
		cliPrintf("info test\n");
		cliPrintf("info print 0~10\n");
		cliPrintf("info button\n");
	}

}
 8000444:	bc80      	pop	{r7}
 8000446:	46b8      	mov	r8, r7
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc == 1 && cliIsStr(argv[0], "test") == 0)
 800044a:	4927      	ldr	r1, [pc, #156]	; (80004e8 <infoCli+0xc0>)
 800044c:	6838      	ldr	r0, [r7, #0]
 800044e:	f000 f951 	bl	80006f4 <cliIsStr>
 8000452:	2800      	cmp	r0, #0
 8000454:	d001      	beq.n	800045a <infoCli+0x32>
	bool ret = false;
 8000456:	2600      	movs	r6, #0
 8000458:	e7ee      	b.n	8000438 <infoCli+0x10>
		cliPrintf("infoCli run test\n");
 800045a:	4824      	ldr	r0, [pc, #144]	; (80004ec <infoCli+0xc4>)
 800045c:	f000 f91c 	bl	8000698 <cliPrintf>
		ret = true;
 8000460:	2601      	movs	r6, #1
 8000462:	e7e9      	b.n	8000438 <infoCli+0x10>
	if (argc == 2 && cliIsStr(argv[0], "print"))
 8000464:	4922      	ldr	r1, [pc, #136]	; (80004f0 <infoCli+0xc8>)
 8000466:	6838      	ldr	r0, [r7, #0]
 8000468:	f000 f944 	bl	80006f4 <cliIsStr>
 800046c:	4680      	mov	r8, r0
 800046e:	2800      	cmp	r0, #0
 8000470:	d0e4      	beq.n	800043c <infoCli+0x14>
		count = (uint8_t)cliGetData(argv[1]);
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 f947 	bl	8000706 <cliGetData>
 8000478:	0006      	movs	r6, r0
		for (int i = 0; i < count; i++)
 800047a:	2500      	movs	r5, #0
 800047c:	e004      	b.n	8000488 <infoCli+0x60>
			cliPrintf("print %d/%d\n", i+1, count);
 800047e:	3501      	adds	r5, #1
 8000480:	0029      	movs	r1, r5
 8000482:	481c      	ldr	r0, [pc, #112]	; (80004f4 <infoCli+0xcc>)
 8000484:	f000 f908 	bl	8000698 <cliPrintf>
		for (int i = 0; i < count; i++)
 8000488:	22ff      	movs	r2, #255	; 0xff
 800048a:	4032      	ands	r2, r6
 800048c:	4295      	cmp	r5, r2
 800048e:	dbf6      	blt.n	800047e <infoCli+0x56>
		ret= true;
 8000490:	4646      	mov	r6, r8
 8000492:	e7d3      	b.n	800043c <infoCli+0x14>
	if (argc == 1 && cliIsStr(argv[0], "button"))
 8000494:	6838      	ldr	r0, [r7, #0]
 8000496:	4918      	ldr	r1, [pc, #96]	; (80004f8 <infoCli+0xd0>)
 8000498:	f000 f92c 	bl	80006f4 <cliIsStr>
 800049c:	1e05      	subs	r5, r0, #0
 800049e:	d110      	bne.n	80004c2 <infoCli+0x9a>
 80004a0:	e7ce      	b.n	8000440 <infoCli+0x18>
				cliPrintf("%d", buttonGetPressed(i));
 80004a2:	b2e0      	uxtb	r0, r4
 80004a4:	f000 f8a2 	bl	80005ec <buttonGetPressed>
 80004a8:	0001      	movs	r1, r0
 80004aa:	4814      	ldr	r0, [pc, #80]	; (80004fc <infoCli+0xd4>)
 80004ac:	f000 f8f4 	bl	8000698 <cliPrintf>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 80004b0:	3401      	adds	r4, #1
 80004b2:	2c04      	cmp	r4, #4
 80004b4:	ddf5      	ble.n	80004a2 <infoCli+0x7a>
			cliPrintf("\n");
 80004b6:	4812      	ldr	r0, [pc, #72]	; (8000500 <infoCli+0xd8>)
 80004b8:	f000 f8ee 	bl	8000698 <cliPrintf>
			delay(100);
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f000 fc5e 	bl	8000d7e <delay>
		while (cliKeepLoop())
 80004c2:	f000 f926 	bl	8000712 <cliKeepLoop>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d001      	beq.n	80004ce <infoCli+0xa6>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 80004ca:	2400      	movs	r4, #0
 80004cc:	e7f1      	b.n	80004b2 <infoCli+0x8a>
		ret = true;
 80004ce:	002e      	movs	r6, r5
 80004d0:	e7b6      	b.n	8000440 <infoCli+0x18>
		cliPrintf("info test\n");
 80004d2:	480c      	ldr	r0, [pc, #48]	; (8000504 <infoCli+0xdc>)
 80004d4:	f000 f8e0 	bl	8000698 <cliPrintf>
		cliPrintf("info print 0~10\n");
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <infoCli+0xe0>)
 80004da:	f000 f8dd 	bl	8000698 <cliPrintf>
		cliPrintf("info button\n");
 80004de:	480b      	ldr	r0, [pc, #44]	; (800050c <infoCli+0xe4>)
 80004e0:	f000 f8da 	bl	8000698 <cliPrintf>
}
 80004e4:	e7ae      	b.n	8000444 <infoCli+0x1c>
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	080047a8 	.word	0x080047a8
 80004ec:	080047b0 	.word	0x080047b0
 80004f0:	080047c4 	.word	0x080047c4
 80004f4:	080047cc 	.word	0x080047cc
 80004f8:	080047dc 	.word	0x080047dc
 80004fc:	080047e4 	.word	0x080047e4
 8000500:	08004928 	.word	0x08004928
 8000504:	080047e8 	.word	0x080047e8
 8000508:	080047f4 	.word	0x080047f4
 800050c:	08004808 	.word	0x08004808

08000510 <apInit>:
{
 8000510:	b510      	push	{r4, lr}
 8000512:	b084      	sub	sp, #16
	cliInit();
 8000514:	f000 f8a6 	bl	8000664 <cliInit>
	swtimerInit();
 8000518:	f000 fb14 	bl	8000b44 <swtimerInit>
	rtcInit();
 800051c:	f000 f9ce 	bl	80008bc <rtcInit>
  ledInit();
 8000520:	f000 f97e 	bl	8000820 <ledInit>
  pwmInit();
 8000524:	f000 f9ac 	bl	8000880 <pwmInit>
  adcInit();
 8000528:	f000 f83c 	bl	80005a4 <adcInit>
  buttonInit();
 800052c:	f000 f85b 	bl	80005e6 <buttonInit>
  uartInit();
 8000530:	f000 fb9e 	bl	8000c70 <uartInit>
  cliAdd("info", infoCli);
 8000534:	490d      	ldr	r1, [pc, #52]	; (800056c <apInit+0x5c>)
 8000536:	480e      	ldr	r0, [pc, #56]	; (8000570 <apInit+0x60>)
 8000538:	f000 f874 	bl	8000624 <cliAdd>
  if (swtimerGetCh(&timer_ch) == true)
 800053c:	200f      	movs	r0, #15
 800053e:	4468      	add	r0, sp
 8000540:	f000 fb1a 	bl	8000b78 <swtimerGetCh>
 8000544:	2800      	cmp	r0, #0
 8000546:	d101      	bne.n	800054c <apInit+0x3c>
}
 8000548:	b004      	add	sp, #16
 800054a:	bd10      	pop	{r4, pc}
  	swtimerSet(timer_ch, ledISR, NULL, SWTIMER_LOOP, 500);
 800054c:	240f      	movs	r4, #15
 800054e:	446c      	add	r4, sp
 8000550:	7820      	ldrb	r0, [r4, #0]
 8000552:	23fa      	movs	r3, #250	; 0xfa
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	2200      	movs	r2, #0
 800055c:	4905      	ldr	r1, [pc, #20]	; (8000574 <apInit+0x64>)
 800055e:	f000 fb19 	bl	8000b94 <swtimerSet>
  	swtimerStart(timer_ch);
 8000562:	7820      	ldrb	r0, [r4, #0]
 8000564:	f000 fb2e 	bl	8000bc4 <swtimerStart>
}
 8000568:	e7ee      	b.n	8000548 <apInit+0x38>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	08000429 	.word	0x08000429
 8000570:	08004818 	.word	0x08004818
 8000574:	0800041d 	.word	0x0800041d

08000578 <apMain>:
{
 8000578:	b510      	push	{r4, lr}
  ledSetDuty(_DEF_CH1, 100);
 800057a:	2164      	movs	r1, #100	; 0x64
 800057c:	2000      	movs	r0, #0
 800057e:	f000 f977 	bl	8000870 <ledSetDuty>
  pre_time = millis();
 8000582:	f000 fc00 	bl	8000d86 <millis>
 8000586:	0004      	movs	r4, r0
 8000588:	e004      	b.n	8000594 <apMain+0x1c>
      pre_time = millis();
 800058a:	f000 fbfc 	bl	8000d86 <millis>
 800058e:	0004      	movs	r4, r0
    cliMain();
 8000590:	f000 f8ca 	bl	8000728 <cliMain>
    if (millis() - pre_time >= 500)
 8000594:	f000 fbf7 	bl	8000d86 <millis>
 8000598:	1b00      	subs	r0, r0, r4
 800059a:	22fa      	movs	r2, #250	; 0xfa
 800059c:	0052      	lsls	r2, r2, #1
 800059e:	4290      	cmp	r0, r2
 80005a0:	d2f3      	bcs.n	800058a <apMain+0x12>
 80005a2:	e7f5      	b.n	8000590 <apMain+0x18>

080005a4 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 80005a4:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 80005a6:	4c05      	ldr	r4, [pc, #20]	; (80005bc <adcInit+0x18>)
 80005a8:	0020      	movs	r0, r4
 80005aa:	f001 fc0b 	bl	8001dc4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 80005ae:	2203      	movs	r2, #3
 80005b0:	4903      	ldr	r1, [pc, #12]	; (80005c0 <adcInit+0x1c>)
 80005b2:	0020      	movs	r0, r4
 80005b4:	f001 fb62 	bl	8001c7c <HAL_ADC_Start_DMA>
  return true;
}
 80005b8:	2001      	movs	r0, #1
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	20000344 	.word	0x20000344
 80005c0:	20000090 	.word	0x20000090

080005c4 <adcRead>:
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;

  ret = adc_data[ch];
 80005c4:	0040      	lsls	r0, r0, #1
 80005c6:	4b01      	ldr	r3, [pc, #4]	; (80005cc <adcRead+0x8>)
 80005c8:	5ac0      	ldrh	r0, [r0, r3]

  return ret;
}
 80005ca:	4770      	bx	lr
 80005cc:	20000090 	.word	0x20000090

080005d0 <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 80005d0:	b510      	push	{r4, lr}
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 80005d2:	f7ff fff7 	bl	80005c4 <adcRead>
 80005d6:	0003      	movs	r3, r0
  ret = (330 * adc_data) / 4096;
 80005d8:	0080      	lsls	r0, r0, #2
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	0143      	lsls	r3, r0, #5
 80005de:	18c0      	adds	r0, r0, r3
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 80005e4:	bd10      	pop	{r4, pc}

080005e6 <buttonInit>:
* Return        : bool
*****************************************************************************/
bool buttonInit(void)
{
  return true;
}
 80005e6:	2001      	movs	r0, #1
 80005e8:	4770      	bx	lr
	...

080005ec <buttonGetPressed>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool buttonGetPressed(uint8_t ch)
{
 80005ec:	b510      	push	{r4, lr}
 80005ee:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if (ch >= BUTTON_MAX_CH)
 80005f0:	2804      	cmp	r0, #4
 80005f2:	d901      	bls.n	80005f8 <buttonGetPressed+0xc>
  {
    return false;
 80005f4:	2000      	movs	r0, #0
    ret = true;
  }


  return ret;
}
 80005f6:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff ffe9 	bl	80005d0 <adcReadVoltage>
  if (adc_voltage >= button_adc[ch].adc_min  &&  adc_voltage <= button_adc[ch].adc_max)
 80005fe:	00a3      	lsls	r3, r4, #2
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <buttonGetPressed+0x34>)
 8000602:	5a9b      	ldrh	r3, [r3, r2]
 8000604:	4283      	cmp	r3, r0
 8000606:	d806      	bhi.n	8000616 <buttonGetPressed+0x2a>
 8000608:	00a4      	lsls	r4, r4, #2
 800060a:	1914      	adds	r4, r2, r4
 800060c:	8863      	ldrh	r3, [r4, #2]
 800060e:	4283      	cmp	r3, r0
 8000610:	d203      	bcs.n	800061a <buttonGetPressed+0x2e>
  bool ret = false;
 8000612:	2000      	movs	r0, #0
 8000614:	e7ef      	b.n	80005f6 <buttonGetPressed+0xa>
 8000616:	2000      	movs	r0, #0
 8000618:	e7ed      	b.n	80005f6 <buttonGetPressed+0xa>
    ret = true;
 800061a:	2001      	movs	r0, #1
 800061c:	e7eb      	b.n	80005f6 <buttonGetPressed+0xa>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	08004820 	.word	0x08004820

08000624 <cliAdd>:
* Inputs        : const char, func ptr
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	0003      	movs	r3, r0
 8000628:	000d      	movs	r5, r1
	if (cli_cmd_count >= CLI_CMD_LIST_MAX)
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <cliAdd+0x38>)
 800062c:	7814      	ldrb	r4, [r2, #0]
 800062e:	2c07      	cmp	r4, #7
 8000630:	d901      	bls.n	8000636 <cliAdd+0x12>
	{
		return false;
 8000632:	2000      	movs	r0, #0
	strncpy(cli_cmd_func[cli_cmd_count].cmd_str,  cmd_str,  8);
	cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
	cli_cmd_count++;

	return true;
}
 8000634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	strncpy(cli_cmd_func[cli_cmd_count].cmd_str,  cmd_str,  8);
 8000636:	4f0a      	ldr	r7, [pc, #40]	; (8000660 <cliAdd+0x3c>)
 8000638:	0066      	lsls	r6, r4, #1
 800063a:	1930      	adds	r0, r6, r4
 800063c:	0080      	lsls	r0, r0, #2
 800063e:	1838      	adds	r0, r7, r0
 8000640:	2208      	movs	r2, #8
 8000642:	0019      	movs	r1, r3
 8000644:	f003 fb44 	bl	8003cd0 <strncpy>
	cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 8000648:	1936      	adds	r6, r6, r4
 800064a:	00b6      	lsls	r6, r6, #2
 800064c:	19be      	adds	r6, r7, r6
 800064e:	60b5      	str	r5, [r6, #8]
	cli_cmd_count++;
 8000650:	3401      	adds	r4, #1
 8000652:	4b02      	ldr	r3, [pc, #8]	; (800065c <cliAdd+0x38>)
 8000654:	701c      	strb	r4, [r3, #0]
	return true;
 8000656:	2001      	movs	r0, #1
 8000658:	e7ec      	b.n	8000634 <cliAdd+0x10>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	2000013a 	.word	0x2000013a
 8000660:	2000013c 	.word	0x2000013c

08000664 <cliInit>:
{
 8000664:	b510      	push	{r4, lr}
	for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	e007      	b.n	800067a <cliInit+0x16>
		cli_cmd_func[i].cmd_func = NULL;
 800066a:	005a      	lsls	r2, r3, #1
 800066c:	18d2      	adds	r2, r2, r3
 800066e:	0091      	lsls	r1, r2, #2
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <cliInit+0x28>)
 8000672:	1852      	adds	r2, r2, r1
 8000674:	2100      	movs	r1, #0
 8000676:	6091      	str	r1, [r2, #8]
	for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 8000678:	3301      	adds	r3, #1
 800067a:	2b07      	cmp	r3, #7
 800067c:	ddf5      	ble.n	800066a <cliInit+0x6>
	cliAdd("help", cliHelp);
 800067e:	4904      	ldr	r1, [pc, #16]	; (8000690 <cliInit+0x2c>)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <cliInit+0x30>)
 8000682:	f7ff ffcf 	bl	8000624 <cliAdd>
}
 8000686:	2001      	movs	r0, #1
 8000688:	bd10      	pop	{r4, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	2000013c 	.word	0x2000013c
 8000690:	080006b5 	.word	0x080006b5
 8000694:	08004834 	.word	0x08004834

08000698 <cliPrintf>:
* Inputs        : const char, ...
* Outputs       : Use the uart write action to output a formatted string.(for CLI mode)
* Return        : void
*****************************************************************************/
void cliPrintf(const char *fmt, ...)
{
 8000698:	b40f      	push	{r0, r1, r2, r3}
 800069a:	b500      	push	{lr}
 800069c:	b083      	sub	sp, #12
 800069e:	aa04      	add	r2, sp, #16
 80006a0:	ca02      	ldmia	r2!, {r1}
	va_list arg;

	va_start(arg, fmt);
 80006a2:	9201      	str	r2, [sp, #4]
	uartVPrintf(cli_ch, fmt, arg);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fb56 	bl	8000d56 <uartVPrintf>
	va_end(arg);
}
 80006aa:	b003      	add	sp, #12
 80006ac:	bc08      	pop	{r3}
 80006ae:	b004      	add	sp, #16
 80006b0:	4718      	bx	r3
	...

080006b4 <cliHelp>:
{
 80006b4:	b510      	push	{r4, lr}
	cliPrintf("---------------------------\n");
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <cliHelp+0x30>)
 80006b8:	f7ff ffee 	bl	8000698 <cliPrintf>
	for (int i = 0; i < cli_cmd_count; i++)
 80006bc:	2400      	movs	r4, #0
 80006be:	e008      	b.n	80006d2 <cliHelp+0x1e>
		cliPrintf("%s\n", cli_cmd_func[i].cmd_str);
 80006c0:	0063      	lsls	r3, r4, #1
 80006c2:	191b      	adds	r3, r3, r4
 80006c4:	009a      	lsls	r2, r3, #2
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <cliHelp+0x34>)
 80006c8:	1889      	adds	r1, r1, r2
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <cliHelp+0x38>)
 80006cc:	f7ff ffe4 	bl	8000698 <cliPrintf>
	for (int i = 0; i < cli_cmd_count; i++)
 80006d0:	3401      	adds	r4, #1
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <cliHelp+0x3c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	42a3      	cmp	r3, r4
 80006d8:	dcf2      	bgt.n	80006c0 <cliHelp+0xc>
	cliPrintf("---------------------------\n");
 80006da:	4802      	ldr	r0, [pc, #8]	; (80006e4 <cliHelp+0x30>)
 80006dc:	f7ff ffdc 	bl	8000698 <cliPrintf>
}
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	0800483c 	.word	0x0800483c
 80006e8:	2000013c 	.word	0x2000013c
 80006ec:	0800485c 	.word	0x0800485c
 80006f0:	2000013a 	.word	0x2000013a

080006f4 <cliIsStr>:
* Inputs        : const char, const char
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliIsStr(const char *p_arg, const char *p_str)
{
 80006f4:	b510      	push	{r4, lr}
	if (strcmp(p_arg, p_str) == 0)
 80006f6:	f7ff fd07 	bl	8000108 <strcmp>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d101      	bne.n	8000702 <cliIsStr+0xe>
	{
		return true;
 80006fe:	3001      	adds	r0, #1
	}
	else
	{
		return false;
	}
}
 8000700:	bd10      	pop	{r4, pc}
		return false;
 8000702:	2000      	movs	r0, #0
 8000704:	e7fc      	b.n	8000700 <cliIsStr+0xc>

08000706 <cliGetData>:
* Inputs        : const char
* Outputs       : ret
* Return        : int32_t
*****************************************************************************/
int32_t cliGetData(const char *p_arg)
{
 8000706:	b510      	push	{r4, lr}
	int32_t ret;

	ret = (int32_t)strtoul(p_arg, (char **)NULL, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	f003 fbb2 	bl	8003e74 <strtoul>

	return ret;
}
 8000710:	bd10      	pop	{r4, pc}

08000712 <cliKeepLoop>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliKeepLoop(void)
{
 8000712:	b510      	push	{r4, lr}
	if (uartAvailable(cli_ch) == 0)
 8000714:	2000      	movs	r0, #0
 8000716:	f000 facd 	bl	8000cb4 <uartAvailable>
 800071a:	2800      	cmp	r0, #0
 800071c:	d101      	bne.n	8000722 <cliKeepLoop+0x10>
	{
		return true;
 800071e:	3001      	adds	r0, #1
	else
	{
		return false;
	}

}
 8000720:	bd10      	pop	{r4, pc}
		return false;
 8000722:	2000      	movs	r0, #0
 8000724:	e7fc      	b.n	8000720 <cliKeepLoop+0xe>
	...

08000728 <cliMain>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliMain(void)
{
 8000728:	b530      	push	{r4, r5, lr}
 800072a:	b083      	sub	sp, #12
	bool ret = false;

  if (uartAvailable(cli_ch) > 0)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fac1 	bl	8000cb4 <uartAvailable>
 8000732:	2800      	cmp	r0, #0
 8000734:	d103      	bne.n	800073e <cliMain+0x16>
	bool ret = false;
 8000736:	2400      	movs	r4, #0
  		uartWrite(cli_ch, &rx_data, 1);
  	}
  }

  return ret;
}
 8000738:	0020      	movs	r0, r4
 800073a:	b003      	add	sp, #12
 800073c:	bd30      	pop	{r4, r5, pc}
  	rx_data = uartRead(cli_ch);
 800073e:	2000      	movs	r0, #0
 8000740:	f000 fad8 	bl	8000cf4 <uartRead>
 8000744:	466b      	mov	r3, sp
 8000746:	70d8      	strb	r0, [r3, #3]
  	if (rx_data == '\r') //Enter Key Input
 8000748:	280d      	cmp	r0, #13
 800074a:	d005      	beq.n	8000758 <cliMain+0x30>
  	else if (cli_buf_index < (128 - 1))
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <cliMain+0xd4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	2b7e      	cmp	r3, #126	; 0x7e
 8000752:	d946      	bls.n	80007e2 <cliMain+0xba>
	bool ret = false;
 8000754:	2400      	movs	r4, #0
 8000756:	e7ef      	b.n	8000738 <cliMain+0x10>
  		cli_buf[cli_buf_index] = 0;
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <cliMain+0xd4>)
 800075a:	881a      	ldrh	r2, [r3, #0]
 800075c:	4d28      	ldr	r5, [pc, #160]	; (8000800 <cliMain+0xd8>)
 800075e:	2400      	movs	r4, #0
 8000760:	54ac      	strb	r4, [r5, r2]
  		cli_buf_index = 0;
 8000762:	801c      	strh	r4, [r3, #0]
  		uartPrintf(cli_ch, "\r\n");
 8000764:	4927      	ldr	r1, [pc, #156]	; (8000804 <cliMain+0xdc>)
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fadc 	bl	8000d24 <uartPrintf>
  		char *str_ptr = cli_buf;
 800076c:	9501      	str	r5, [sp, #4]
  		cli_argc = 0;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <cliMain+0xe0>)
 8000770:	801c      	strh	r4, [r3, #0]
  		while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8000772:	e006      	b.n	8000782 <cliMain+0x5a>
  			cli_argv[cli_argc] = tok;
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <cliMain+0xe0>)
 8000776:	8813      	ldrh	r3, [r2, #0]
 8000778:	009c      	lsls	r4, r3, #2
 800077a:	4924      	ldr	r1, [pc, #144]	; (800080c <cliMain+0xe4>)
 800077c:	5060      	str	r0, [r4, r1]
  			cli_argc++;
 800077e:	3301      	adds	r3, #1
 8000780:	8013      	strh	r3, [r2, #0]
  		while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8000782:	aa01      	add	r2, sp, #4
 8000784:	4922      	ldr	r1, [pc, #136]	; (8000810 <cliMain+0xe8>)
 8000786:	9801      	ldr	r0, [sp, #4]
 8000788:	f003 fae5 	bl	8003d56 <strtok_r>
 800078c:	2800      	cmp	r0, #0
 800078e:	d1f1      	bne.n	8000774 <cliMain+0x4c>
  		for (int i = 0; i < cli_cmd_count; i++)
 8000790:	2400      	movs	r4, #0
 8000792:	e000      	b.n	8000796 <cliMain+0x6e>
 8000794:	3401      	adds	r4, #1
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <cliMain+0xec>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	42a3      	cmp	r3, r4
 800079c:	dd1b      	ble.n	80007d6 <cliMain+0xae>
  			if (strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) == 0)
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <cliMain+0xe4>)
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	0061      	lsls	r1, r4, #1
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	0089      	lsls	r1, r1, #2
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <cliMain+0xf0>)
 80007aa:	1859      	adds	r1, r3, r1
 80007ac:	f7ff fcac 	bl	8000108 <strcmp>
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d1ef      	bne.n	8000794 <cliMain+0x6c>
  				if (cli_cmd_func[i].cmd_func != NULL)
 80007b4:	0063      	lsls	r3, r4, #1
 80007b6:	191b      	adds	r3, r3, r4
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <cliMain+0xf0>)
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0e7      	beq.n	8000794 <cliMain+0x6c>
  					cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 80007c4:	4911      	ldr	r1, [pc, #68]	; (800080c <cliMain+0xe4>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <cliMain+0xe0>)
 80007c8:	8810      	ldrh	r0, [r2, #0]
 80007ca:	3801      	subs	r0, #1
 80007cc:	b2c0      	uxtb	r0, r0
 80007ce:	3104      	adds	r1, #4
 80007d0:	4798      	blx	r3
  					ret = true;
 80007d2:	2401      	movs	r4, #1
  					break;
 80007d4:	e000      	b.n	80007d8 <cliMain+0xb0>
	bool ret = false;
 80007d6:	2400      	movs	r4, #0
  		uartPrintf(cli_ch,  "cli# ");
 80007d8:	4910      	ldr	r1, [pc, #64]	; (800081c <cliMain+0xf4>)
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 faa2 	bl	8000d24 <uartPrintf>
 80007e0:	e7aa      	b.n	8000738 <cliMain+0x10>
  		cli_buf[cli_buf_index] = rx_data;
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <cliMain+0xd8>)
 80007e4:	54d0      	strb	r0, [r2, r3]
  		cli_buf_index++;
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <cliMain+0xd4>)
 80007ea:	8013      	strh	r3, [r2, #0]
  		uartWrite(cli_ch, &rx_data, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	466b      	mov	r3, sp
 80007f0:	1cd9      	adds	r1, r3, #3
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 fa4a 	bl	8000c8c <uartWrite>
	bool ret = false;
 80007f8:	2400      	movs	r4, #0
 80007fa:	e79d      	b.n	8000738 <cliMain+0x10>
 80007fc:	20000138 	.word	0x20000138
 8000800:	200000b8 	.word	0x200000b8
 8000804:	08004860 	.word	0x08004860
 8000808:	20000096 	.word	0x20000096
 800080c:	20000098 	.word	0x20000098
 8000810:	08004868 	.word	0x08004868
 8000814:	2000013a 	.word	0x2000013a
 8000818:	2000013c 	.word	0x2000013c
 800081c:	08004864 	.word	0x08004864

08000820 <ledInit>:
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
  return true;
}
 8000820:	2001      	movs	r0, #1
 8000822:	4770      	bx	lr

08000824 <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 8000824:	b510      	push	{r4, lr}
  switch(ch)
 8000826:	2800      	cmp	r0, #0
 8000828:	d000      	beq.n	800082c <ledOn+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
      break;
  }
}
 800082a:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <ledOn+0x18>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	2164      	movs	r1, #100	; 0x64
 8000832:	1ac9      	subs	r1, r1, r3
 8000834:	b289      	uxth	r1, r1
 8000836:	f000 f82d 	bl	8000894 <pwmWrite>
}
 800083a:	e7f6      	b.n	800082a <ledOn+0x6>
 800083c:	20000000 	.word	0x20000000

08000840 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 8000840:	b510      	push	{r4, lr}
  switch(ch)
 8000842:	2800      	cmp	r0, #0
 8000844:	d000      	beq.n	8000848 <ledOff+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
      break;
  }
}
 8000846:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100);
 8000848:	2164      	movs	r1, #100	; 0x64
 800084a:	f000 f823 	bl	8000894 <pwmWrite>
}
 800084e:	e7fa      	b.n	8000846 <ledOff+0x6>

08000850 <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 8000850:	b510      	push	{r4, lr}
  switch(ch)
 8000852:	2800      	cmp	r0, #0
 8000854:	d000      	beq.n	8000858 <ledToggle+0x8>
      {
        ledOff(_DEF_CH1);
      }
      break;
  }
}
 8000856:	bd10      	pop	{r4, pc}
      if (pwmRead(_DEF_CH1) == 100)
 8000858:	f000 f824 	bl	80008a4 <pwmRead>
 800085c:	2864      	cmp	r0, #100	; 0x64
 800085e:	d003      	beq.n	8000868 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ffed 	bl	8000840 <ledOff>
}
 8000866:	e7f6      	b.n	8000856 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ffdb 	bl	8000824 <ledOn>
 800086e:	e7f2      	b.n	8000856 <ledToggle+0x6>

08000870 <ledSetDuty>:
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
  switch(ch)
 8000870:	2800      	cmp	r0, #0
 8000872:	d102      	bne.n	800087a <ledSetDuty+0xa>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 8000874:	0040      	lsls	r0, r0, #1
 8000876:	4b01      	ldr	r3, [pc, #4]	; (800087c <ledSetDuty+0xc>)
 8000878:	52c1      	strh	r1, [r0, r3]
      break;
  }

}
 800087a:	4770      	bx	lr
 800087c:	20000000 	.word	0x20000000

08000880 <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 8000880:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000882:	2100      	movs	r1, #0
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <pwmInit+0x10>)
 8000886:	f002 fbf1 	bl	800306c <HAL_TIM_PWM_Start>

  return true;
}
 800088a:	2001      	movs	r0, #1
 800088c:	bd10      	pop	{r4, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	20000488 	.word	0x20000488

08000894 <pwmWrite>:
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
  switch(ch)
 8000894:	2800      	cmp	r0, #0
 8000896:	d102      	bne.n	800089e <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 8000898:	4b01      	ldr	r3, [pc, #4]	; (80008a0 <pwmWrite+0xc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6359      	str	r1, [r3, #52]	; 0x34
      break;
  }
}
 800089e:	4770      	bx	lr
 80008a0:	20000488 	.word	0x20000488

080008a4 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;


  switch(ch)
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d104      	bne.n	80008b2 <pwmRead+0xe>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <pwmRead+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ae:	b280      	uxth	r0, r0
      break;
  }

  return pwm_data;

}
 80008b0:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008b2:	2000      	movs	r0, #0
 80008b4:	e7fc      	b.n	80008b0 <pwmRead+0xc>
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000488 	.word	0x20000488

080008bc <rtcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcInit(void)
{
 80008bc:	b510      	push	{r4, lr}
	cliAdd("rtc", rtcCli);
 80008be:	4903      	ldr	r1, [pc, #12]	; (80008cc <rtcInit+0x10>)
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <rtcInit+0x14>)
 80008c2:	f7ff feaf 	bl	8000624 <cliAdd>

	return true;

}
 80008c6:	2001      	movs	r0, #1
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	080009fd 	.word	0x080009fd
 80008d0:	0800486c 	.word	0x0800486c

080008d4 <rtcGetInfo>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcGetInfo(rtc_info_t *rtc_info)
{
 80008d4:	b510      	push	{r4, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80008da:	2214      	movs	r2, #20
 80008dc:	2100      	movs	r1, #0
 80008de:	a801      	add	r0, sp, #4
 80008e0:	f003 f9ee 	bl	8003cc0 <memset>
  RTC_DateTypeDef sDate = {0};
 80008e4:	2300      	movs	r3, #0
 80008e6:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008e8:	2200      	movs	r2, #0
 80008ea:	a901      	add	r1, sp, #4
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <rtcGetInfo+0x60>)
 80008ee:	f001 ff07 	bl	8002700 <HAL_RTC_GetTime>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d002      	beq.n	80008fc <rtcGetInfo+0x28>
  {
    return false;
 80008f6:	2000      	movs	r0, #0
  rtc_info->date.year    = sDate.Year;
  rtc_info->date.month   = sDate.Month;
  rtc_info->date.day     = sDate.Date;

  return true;
}
 80008f8:	b006      	add	sp, #24
 80008fa:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80008fc:	2200      	movs	r2, #0
 80008fe:	4669      	mov	r1, sp
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <rtcGetInfo+0x60>)
 8000902:	f001 ff29 	bl	8002758 <HAL_RTC_GetDate>
 8000906:	2800      	cmp	r0, #0
 8000908:	d111      	bne.n	800092e <rtcGetInfo+0x5a>
  rtc_info->time.hours   = sTime.Hours;
 800090a:	ab01      	add	r3, sp, #4
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	7022      	strb	r2, [r4, #0]
  rtc_info->time.minutes = sTime.Minutes;
 8000910:	785a      	ldrb	r2, [r3, #1]
 8000912:	7062      	strb	r2, [r4, #1]
  rtc_info->time.seconds = sTime.Seconds;
 8000914:	789b      	ldrb	r3, [r3, #2]
 8000916:	70a3      	strb	r3, [r4, #2]
  rtc_info->date.year    = sDate.Year;
 8000918:	466b      	mov	r3, sp
 800091a:	78db      	ldrb	r3, [r3, #3]
 800091c:	70e3      	strb	r3, [r4, #3]
  rtc_info->date.month   = sDate.Month;
 800091e:	466b      	mov	r3, sp
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	7123      	strb	r3, [r4, #4]
  rtc_info->date.day     = sDate.Date;
 8000924:	466b      	mov	r3, sp
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	7163      	strb	r3, [r4, #5]
  return true;
 800092a:	3001      	adds	r0, #1
 800092c:	e7e4      	b.n	80008f8 <rtcGetInfo+0x24>
  	return false;
 800092e:	2000      	movs	r0, #0
 8000930:	e7e2      	b.n	80008f8 <rtcGetInfo+0x24>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000460 	.word	0x20000460

08000938 <rtcSetTime>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcSetTime(rtc_time_t *rtc_time)
{
 8000938:	b510      	push	{r4, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 800093e:	2214      	movs	r2, #20
 8000940:	2100      	movs	r1, #0
 8000942:	a801      	add	r0, sp, #4
 8000944:	f003 f9bc 	bl	8003cc0 <memset>
  RTC_DateTypeDef sDate = {0};
 8000948:	2300      	movs	r3, #0
 800094a:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800094c:	2200      	movs	r2, #0
 800094e:	a901      	add	r1, sp, #4
 8000950:	4810      	ldr	r0, [pc, #64]	; (8000994 <rtcSetTime+0x5c>)
 8000952:	f001 fed5 	bl	8002700 <HAL_RTC_GetTime>
 8000956:	2800      	cmp	r0, #0
 8000958:	d002      	beq.n	8000960 <rtcSetTime+0x28>
  {
    return false;
 800095a:	2000      	movs	r0, #0
  {
    return false;
  }

  return true;
}
 800095c:	b006      	add	sp, #24
 800095e:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000960:	2200      	movs	r2, #0
 8000962:	4669      	mov	r1, sp
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <rtcSetTime+0x5c>)
 8000966:	f001 fef7 	bl	8002758 <HAL_RTC_GetDate>
 800096a:	2800      	cmp	r0, #0
 800096c:	d001      	beq.n	8000972 <rtcSetTime+0x3a>
  	return false;
 800096e:	2000      	movs	r0, #0
 8000970:	e7f4      	b.n	800095c <rtcSetTime+0x24>
  sTime.Hours   = rtc_time->hours;
 8000972:	7823      	ldrb	r3, [r4, #0]
 8000974:	a901      	add	r1, sp, #4
 8000976:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = rtc_time->minutes;
 8000978:	7863      	ldrb	r3, [r4, #1]
 800097a:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = rtc_time->seconds;
 800097c:	78a3      	ldrb	r3, [r4, #2]
 800097e:	708b      	strb	r3, [r1, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000980:	2200      	movs	r2, #0
 8000982:	4804      	ldr	r0, [pc, #16]	; (8000994 <rtcSetTime+0x5c>)
 8000984:	f001 fdf6 	bl	8002574 <HAL_RTC_SetTime>
 8000988:	2800      	cmp	r0, #0
 800098a:	d101      	bne.n	8000990 <rtcSetTime+0x58>
  return true;
 800098c:	3001      	adds	r0, #1
 800098e:	e7e5      	b.n	800095c <rtcSetTime+0x24>
    return false;
 8000990:	2000      	movs	r0, #0
 8000992:	e7e3      	b.n	800095c <rtcSetTime+0x24>
 8000994:	20000460 	.word	0x20000460

08000998 <rtcSetDate>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcSetDate(rtc_date_t *rtc_date)
{
 8000998:	b510      	push	{r4, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 800099e:	2214      	movs	r2, #20
 80009a0:	2100      	movs	r1, #0
 80009a2:	a801      	add	r0, sp, #4
 80009a4:	f003 f98c 	bl	8003cc0 <memset>
  RTC_DateTypeDef sDate = {0};
 80009a8:	2300      	movs	r3, #0
 80009aa:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009ac:	2200      	movs	r2, #0
 80009ae:	a901      	add	r1, sp, #4
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <rtcSetDate+0x60>)
 80009b2:	f001 fea5 	bl	8002700 <HAL_RTC_GetTime>
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d002      	beq.n	80009c0 <rtcSetDate+0x28>
  {
    return false;
 80009ba:	2000      	movs	r0, #0
  {
  	return false;
  }

  return true;
}
 80009bc:	b006      	add	sp, #24
 80009be:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009c0:	2200      	movs	r2, #0
 80009c2:	4669      	mov	r1, sp
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <rtcSetDate+0x60>)
 80009c6:	f001 fec7 	bl	8002758 <HAL_RTC_GetDate>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d001      	beq.n	80009d2 <rtcSetDate+0x3a>
  	return false;
 80009ce:	2000      	movs	r0, #0
 80009d0:	e7f4      	b.n	80009bc <rtcSetDate+0x24>
  sDate.Year   = rtc_date->year;
 80009d2:	7823      	ldrb	r3, [r4, #0]
 80009d4:	466a      	mov	r2, sp
 80009d6:	70d3      	strb	r3, [r2, #3]
  sDate.Month  = rtc_date->month;
 80009d8:	7863      	ldrb	r3, [r4, #1]
 80009da:	7053      	strb	r3, [r2, #1]
  sDate.Date   = rtc_date->day;
 80009dc:	78a3      	ldrb	r3, [r4, #2]
 80009de:	7093      	strb	r3, [r2, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80009e0:	2200      	movs	r2, #0
 80009e2:	4669      	mov	r1, sp
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <rtcSetDate+0x60>)
 80009e6:	f001 fe2b 	bl	8002640 <HAL_RTC_SetDate>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d101      	bne.n	80009f2 <rtcSetDate+0x5a>
  return true;
 80009ee:	3001      	adds	r0, #1
 80009f0:	e7e4      	b.n	80009bc <rtcSetDate+0x24>
  	return false;
 80009f2:	2000      	movs	r0, #0
 80009f4:	e7e2      	b.n	80009bc <rtcSetDate+0x24>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	20000460 	.word	0x20000460

080009fc <rtcCli>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
void rtcCli(uint8_t argc, const char **argv)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	46c6      	mov	lr, r8
 8000a00:	b500      	push	{lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	0004      	movs	r4, r0
 8000a06:	000e      	movs	r6, r1
	bool ret = false;

	if (argc == 2 && cliIsStr(argv[0],"get") && cliIsStr(argv[1], "info"))
 8000a08:	2802      	cmp	r0, #2
 8000a0a:	d00b      	beq.n	8000a24 <rtcCli+0x28>
	bool ret = false;
 8000a0c:	2500      	movs	r5, #0
		}

		ret = true;
	}

	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "time"))
 8000a0e:	2c05      	cmp	r4, #5
 8000a10:	d030      	beq.n	8000a74 <rtcCli+0x78>

		ret = true;
	}


	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "date"))
 8000a12:	2c05      	cmp	r4, #5
 8000a14:	d052      	beq.n	8000abc <rtcCli+0xc0>

		ret = true;
	}


	if (ret == false)
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d100      	bne.n	8000a1c <rtcCli+0x20>
 8000a1a:	e072      	b.n	8000b02 <rtcCli+0x106>
	{
		cliPrintf("rtc get info\n");
		cliPrintf("rtc set time [h] [m] [s]\n");
		cliPrintf("rtc set date [y] [m] [d]\n");
	}
}
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bc80      	pop	{r7}
 8000a20:	46b8      	mov	r8, r7
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc == 2 && cliIsStr(argv[0],"get") && cliIsStr(argv[1], "info"))
 8000a24:	493c      	ldr	r1, [pc, #240]	; (8000b18 <rtcCli+0x11c>)
 8000a26:	6830      	ldr	r0, [r6, #0]
 8000a28:	f7ff fe64 	bl	80006f4 <cliIsStr>
 8000a2c:	1e05      	subs	r5, r0, #0
 8000a2e:	d0ee      	beq.n	8000a0e <rtcCli+0x12>
 8000a30:	493a      	ldr	r1, [pc, #232]	; (8000b1c <rtcCli+0x120>)
 8000a32:	6870      	ldr	r0, [r6, #4]
 8000a34:	f7ff fe5e 	bl	80006f4 <cliIsStr>
 8000a38:	1e05      	subs	r5, r0, #0
 8000a3a:	d116      	bne.n	8000a6a <rtcCli+0x6e>
 8000a3c:	e7e7      	b.n	8000a0e <rtcCli+0x12>
			rtcGetInfo(&rtc_info);
 8000a3e:	af04      	add	r7, sp, #16
 8000a40:	0038      	movs	r0, r7
 8000a42:	f7ff ff47 	bl	80008d4 <rtcGetInfo>
								rtc_info.date.year,
 8000a46:	78f9      	ldrb	r1, [r7, #3]
								rtc_info.date.month,
 8000a48:	793a      	ldrb	r2, [r7, #4]
								rtc_info.date.day,
 8000a4a:	797b      	ldrb	r3, [r7, #5]
 8000a4c:	4698      	mov	r8, r3
								rtc_info.time.hours,
 8000a4e:	7838      	ldrb	r0, [r7, #0]
								rtc_info.time.minutes,
 8000a50:	787b      	ldrb	r3, [r7, #1]
								rtc_info.time.seconds);
 8000a52:	78bf      	ldrb	r7, [r7, #2]
			cliPrintf("Y:%02d M:%02d D:%02d, H:%02d M:%02d S:%02d\n",
 8000a54:	9702      	str	r7, [sp, #8]
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9000      	str	r0, [sp, #0]
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	4830      	ldr	r0, [pc, #192]	; (8000b20 <rtcCli+0x124>)
 8000a5e:	f7ff fe1b 	bl	8000698 <cliPrintf>
			delay(1000);
 8000a62:	20fa      	movs	r0, #250	; 0xfa
 8000a64:	0080      	lsls	r0, r0, #2
 8000a66:	f000 f98a 	bl	8000d7e <delay>
		while (cliKeepLoop())
 8000a6a:	f7ff fe52 	bl	8000712 <cliKeepLoop>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d1e5      	bne.n	8000a3e <rtcCli+0x42>
 8000a72:	e7cc      	b.n	8000a0e <rtcCli+0x12>
	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "time"))
 8000a74:	492b      	ldr	r1, [pc, #172]	; (8000b24 <rtcCli+0x128>)
 8000a76:	6830      	ldr	r0, [r6, #0]
 8000a78:	f7ff fe3c 	bl	80006f4 <cliIsStr>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d0c8      	beq.n	8000a12 <rtcCli+0x16>
 8000a80:	4929      	ldr	r1, [pc, #164]	; (8000b28 <rtcCli+0x12c>)
 8000a82:	6870      	ldr	r0, [r6, #4]
 8000a84:	f7ff fe36 	bl	80006f4 <cliIsStr>
 8000a88:	1e07      	subs	r7, r0, #0
 8000a8a:	d0c2      	beq.n	8000a12 <rtcCli+0x16>
		rtc_time.hours   = cliGetData(argv[2]);
 8000a8c:	68b0      	ldr	r0, [r6, #8]
 8000a8e:	f7ff fe3a 	bl	8000706 <cliGetData>
 8000a92:	ad04      	add	r5, sp, #16
 8000a94:	7028      	strb	r0, [r5, #0]
		rtc_time.minutes = cliGetData(argv[3]);
 8000a96:	68f0      	ldr	r0, [r6, #12]
 8000a98:	f7ff fe35 	bl	8000706 <cliGetData>
 8000a9c:	7068      	strb	r0, [r5, #1]
		rtc_time.seconds = cliGetData(argv[4]);
 8000a9e:	6930      	ldr	r0, [r6, #16]
 8000aa0:	f7ff fe31 	bl	8000706 <cliGetData>
 8000aa4:	70a8      	strb	r0, [r5, #2]
		rtcSetTime(&rtc_time);
 8000aa6:	0028      	movs	r0, r5
 8000aa8:	f7ff ff46 	bl	8000938 <rtcSetTime>
							rtc_time.hours,
 8000aac:	7829      	ldrb	r1, [r5, #0]
							rtc_time.minutes,
 8000aae:	786a      	ldrb	r2, [r5, #1]
							rtc_time.seconds);
 8000ab0:	78ab      	ldrb	r3, [r5, #2]
		cliPrintf("H:%02d M:%02d S:%02d\n",
 8000ab2:	481e      	ldr	r0, [pc, #120]	; (8000b2c <rtcCli+0x130>)
 8000ab4:	f7ff fdf0 	bl	8000698 <cliPrintf>
		ret = true;
 8000ab8:	003d      	movs	r5, r7
 8000aba:	e7aa      	b.n	8000a12 <rtcCli+0x16>
	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "date"))
 8000abc:	4919      	ldr	r1, [pc, #100]	; (8000b24 <rtcCli+0x128>)
 8000abe:	6830      	ldr	r0, [r6, #0]
 8000ac0:	f7ff fe18 	bl	80006f4 <cliIsStr>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d0a6      	beq.n	8000a16 <rtcCli+0x1a>
 8000ac8:	4919      	ldr	r1, [pc, #100]	; (8000b30 <rtcCli+0x134>)
 8000aca:	6870      	ldr	r0, [r6, #4]
 8000acc:	f7ff fe12 	bl	80006f4 <cliIsStr>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d0a0      	beq.n	8000a16 <rtcCli+0x1a>
		rtc_date.year  = cliGetData(argv[2]);
 8000ad4:	68b0      	ldr	r0, [r6, #8]
 8000ad6:	f7ff fe16 	bl	8000706 <cliGetData>
 8000ada:	ac04      	add	r4, sp, #16
 8000adc:	7020      	strb	r0, [r4, #0]
		rtc_date.month = cliGetData(argv[3]);
 8000ade:	68f0      	ldr	r0, [r6, #12]
 8000ae0:	f7ff fe11 	bl	8000706 <cliGetData>
 8000ae4:	7060      	strb	r0, [r4, #1]
		rtc_date.day   = cliGetData(argv[4]);
 8000ae6:	6930      	ldr	r0, [r6, #16]
 8000ae8:	f7ff fe0d 	bl	8000706 <cliGetData>
 8000aec:	70a0      	strb	r0, [r4, #2]
		rtcSetDate(&rtc_date);
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff ff52 	bl	8000998 <rtcSetDate>
							rtc_date.year,
 8000af4:	7821      	ldrb	r1, [r4, #0]
							rtc_date.month,
 8000af6:	7862      	ldrb	r2, [r4, #1]
							rtc_date.day);
 8000af8:	78a3      	ldrb	r3, [r4, #2]
		cliPrintf("Y:%02d M:%02d D:%02d\n",
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <rtcCli+0x138>)
 8000afc:	f7ff fdcc 	bl	8000698 <cliPrintf>
	if (ret == false)
 8000b00:	e78c      	b.n	8000a1c <rtcCli+0x20>
		cliPrintf("rtc get info\n");
 8000b02:	480d      	ldr	r0, [pc, #52]	; (8000b38 <rtcCli+0x13c>)
 8000b04:	f7ff fdc8 	bl	8000698 <cliPrintf>
		cliPrintf("rtc set time [h] [m] [s]\n");
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <rtcCli+0x140>)
 8000b0a:	f7ff fdc5 	bl	8000698 <cliPrintf>
		cliPrintf("rtc set date [y] [m] [d]\n");
 8000b0e:	480c      	ldr	r0, [pc, #48]	; (8000b40 <rtcCli+0x144>)
 8000b10:	f7ff fdc2 	bl	8000698 <cliPrintf>
}
 8000b14:	e782      	b.n	8000a1c <rtcCli+0x20>
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	08004870 	.word	0x08004870
 8000b1c:	08004818 	.word	0x08004818
 8000b20:	08004874 	.word	0x08004874
 8000b24:	080048a0 	.word	0x080048a0
 8000b28:	080048a4 	.word	0x080048a4
 8000b2c:	080048ac 	.word	0x080048ac
 8000b30:	080048c4 	.word	0x080048c4
 8000b34:	080048cc 	.word	0x080048cc
 8000b38:	080048e4 	.word	0x080048e4
 8000b3c:	080048f4 	.word	0x080048f4
 8000b40:	08004910 	.word	0x08004910

08000b44 <swtimerInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerInit(void)
{
 8000b44:	b510      	push	{r4, lr}
	for (int i = 0; i < SWTIMER_MAX_CH; i++)
 8000b46:	2200      	movs	r2, #0
 8000b48:	e00a      	b.n	8000b60 <swtimerInit+0x1c>
	{
		swtimer_tbl[i].enable = false;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <swtimerInit+0x2c>)
 8000b4c:	0091      	lsls	r1, r2, #2
 8000b4e:	1888      	adds	r0, r1, r2
 8000b50:	0084      	lsls	r4, r0, #2
 8000b52:	2000      	movs	r0, #0
 8000b54:	54e0      	strb	r0, [r4, r3]
		swtimer_tbl[i].counter = 0;
 8000b56:	191b      	adds	r3, r3, r4
 8000b58:	6058      	str	r0, [r3, #4]
		swtimer_tbl[i].func = NULL;
 8000b5a:	60d8      	str	r0, [r3, #12]
		swtimer_tbl[i].func_arg = NULL;
 8000b5c:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < SWTIMER_MAX_CH; i++)
 8000b5e:	3201      	adds	r2, #1
 8000b60:	2a07      	cmp	r2, #7
 8000b62:	ddf2      	ble.n	8000b4a <swtimerInit+0x6>
	}

	HAL_TIM_Base_Start_IT(&htim14);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <swtimerInit+0x30>)
 8000b66:	f001 ff69 	bl	8002a3c <HAL_TIM_Base_Start_IT>
	return true;
}
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200001a0 	.word	0x200001a0
 8000b74:	200004d4 	.word	0x200004d4

08000b78 <swtimerGetCh>:
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerGetCh(uint8_t *p_ch)
{
	if (swtimer_count >= SWTIMER_MAX_CH)
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <swtimerGetCh+0x18>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d805      	bhi.n	8000b8c <swtimerGetCh+0x14>
	{
		return false;
	}

	*p_ch = swtimer_count;
 8000b80:	7003      	strb	r3, [r0, #0]

	swtimer_count++;
 8000b82:	3301      	adds	r3, #1
 8000b84:	4a02      	ldr	r2, [pc, #8]	; (8000b90 <swtimerGetCh+0x18>)
 8000b86:	7013      	strb	r3, [r2, #0]

	return true;
 8000b88:	2001      	movs	r0, #1
}
 8000b8a:	4770      	bx	lr
		return false;
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e7fc      	b.n	8000b8a <swtimerGetCh+0x12>
 8000b90:	2000019c 	.word	0x2000019c

08000b94 <swtimerSet>:
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerSet(uint8_t ch,  void (*func)(void *arg), void *func_arg, SwtimerMode_t mode,
								uint32_t time_ms)
{
 8000b94:	b570      	push	{r4, r5, r6, lr}
	if (ch >= SWTIMER_MAX_CH)
 8000b96:	2807      	cmp	r0, #7
 8000b98:	d810      	bhi.n	8000bbc <swtimerSet+0x28>
	{
		return false;
	}

	swtimer_tbl[ch].func = func;
 8000b9a:	4e09      	ldr	r6, [pc, #36]	; (8000bc0 <swtimerSet+0x2c>)
 8000b9c:	0085      	lsls	r5, r0, #2
 8000b9e:	182c      	adds	r4, r5, r0
 8000ba0:	00a4      	lsls	r4, r4, #2
 8000ba2:	1934      	adds	r4, r6, r4
 8000ba4:	60e1      	str	r1, [r4, #12]
	swtimer_tbl[ch].func_arg = func_arg;
 8000ba6:	6122      	str	r2, [r4, #16]
	swtimer_tbl[ch].mode = mode;
 8000ba8:	7063      	strb	r3, [r4, #1]
	swtimer_tbl[ch].counter = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	6063      	str	r3, [r4, #4]
	swtimer_tbl[ch].reload = time_ms;
 8000bae:	9a04      	ldr	r2, [sp, #16]
 8000bb0:	60a2      	str	r2, [r4, #8]
	swtimer_tbl[ch].enable = false;
 8000bb2:	1828      	adds	r0, r5, r0
 8000bb4:	0080      	lsls	r0, r0, #2
 8000bb6:	5583      	strb	r3, [r0, r6]

	return true;
 8000bb8:	2001      	movs	r0, #1
}
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7fc      	b.n	8000bba <swtimerSet+0x26>
 8000bc0:	200001a0 	.word	0x200001a0

08000bc4 <swtimerStart>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerStart(uint8_t ch)
{
 8000bc4:	b510      	push	{r4, lr}
	if (ch >= SWTIMER_MAX_CH)
 8000bc6:	2807      	cmp	r0, #7
 8000bc8:	d80c      	bhi.n	8000be4 <swtimerStart+0x20>
	{
		return false;
	}

	swtimer_tbl[ch].counter = 0;
 8000bca:	4907      	ldr	r1, [pc, #28]	; (8000be8 <swtimerStart+0x24>)
 8000bcc:	0083      	lsls	r3, r0, #2
 8000bce:	181a      	adds	r2, r3, r0
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	188a      	adds	r2, r1, r2
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	6054      	str	r4, [r2, #4]
	swtimer_tbl[ch].enable = true;
 8000bd8:	1818      	adds	r0, r3, r0
 8000bda:	0080      	lsls	r0, r0, #2
 8000bdc:	2201      	movs	r2, #1
 8000bde:	5442      	strb	r2, [r0, r1]

	return true;
 8000be0:	2001      	movs	r0, #1
}
 8000be2:	bd10      	pop	{r4, pc}
		return false;
 8000be4:	2000      	movs	r0, #0
 8000be6:	e7fc      	b.n	8000be2 <swtimerStart+0x1e>
 8000be8:	200001a0 	.word	0x200001a0

08000bec <swtimerISR>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void swtimerISR(void)
{
 8000bec:	b510      	push	{r4, lr}
	//While checking the number of swtimers set,
	for (int i = 0; i <swtimer_count; i++)
 8000bee:	2400      	movs	r4, #0
 8000bf0:	e000      	b.n	8000bf4 <swtimerISR+0x8>
 8000bf2:	3401      	adds	r4, #1
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <swtimerISR+0x68>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	42a3      	cmp	r3, r4
 8000bfa:	dd29      	ble.n	8000c50 <swtimerISR+0x64>
	{
		//if there is an active swtimer, the count value is increased.
		if (swtimer_tbl[i].enable == true)
 8000bfc:	00a3      	lsls	r3, r4, #2
 8000bfe:	191b      	adds	r3, r3, r4
 8000c00:	009a      	lsls	r2, r3, #2
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <swtimerISR+0x6c>)
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f3      	beq.n	8000bf2 <swtimerISR+0x6>
		{
			swtimer_tbl[i].counter++;
 8000c0a:	00a2      	lsls	r2, r4, #2
 8000c0c:	1912      	adds	r2, r2, r4
 8000c0e:	0091      	lsls	r1, r2, #2
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <swtimerISR+0x6c>)
 8000c12:	185b      	adds	r3, r3, r1
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	3201      	adds	r2, #1
 8000c18:	605a      	str	r2, [r3, #4]

			//When the timer counter becomes equal to the periodic value and..
			if (swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d3e8      	bcc.n	8000bf2 <swtimerISR+0x6>
			{
				//there is a defined function pointer,
				if (swtimer_tbl[i].func != NULL)
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <swtimerISR+0x6c>)
 8000c22:	185b      	adds	r3, r3, r1
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	d003      	beq.n	8000c32 <swtimerISR+0x46>
				{
					//the function of the defined function pointer is called.
					swtimer_tbl[i].func(swtimer_tbl[i].func_arg);
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <swtimerISR+0x6c>)
 8000c2c:	185b      	adds	r3, r3, r1
 8000c2e:	6918      	ldr	r0, [r3, #16]
 8000c30:	4790      	blx	r2
				}

				//Reset the counter value to 0.
				swtimer_tbl[i].counter = 0;
 8000c32:	00a2      	lsls	r2, r4, #2
 8000c34:	1912      	adds	r2, r2, r4
 8000c36:	0091      	lsls	r1, r2, #2
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <swtimerISR+0x6c>)
 8000c3a:	185b      	adds	r3, r3, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]

				//If SWTIMER_ONETIME mode, enable is turned off.
				//cf) If SWTIMER_LOOP mode, repeat the above procedure.
				if (swtimer_tbl[i].mode == SWTIMER_ONETIME)
 8000c40:	785b      	ldrb	r3, [r3, #1]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d1d5      	bne.n	8000bf2 <swtimerISR+0x6>
				{
					swtimer_tbl[i].enable = false;
 8000c46:	000a      	movs	r2, r1
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <swtimerISR+0x6c>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	54d1      	strb	r1, [r2, r3]
 8000c4e:	e7d0      	b.n	8000bf2 <swtimerISR+0x6>
				}
			}
		}
	}
}
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000019c 	.word	0x2000019c
 8000c58:	200001a0 	.word	0x200001a0

08000c5c <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b510      	push	{r4, lr}
	if (htim == &htim14)
 8000c5e:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000c60:	4283      	cmp	r3, r0
 8000c62:	d000      	beq.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0xa>
	{
		swtimerISR();
	}
}
 8000c64:	bd10      	pop	{r4, pc}
		swtimerISR();
 8000c66:	f7ff ffc1 	bl	8000bec <swtimerISR>
}
 8000c6a:	e7fb      	b.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c6c:	200004d4 	.word	0x200004d4

08000c70 <uartInit>:
* Inputs        : bool
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool uartInit(void)
{
 8000c70:	b510      	push	{r4, lr}
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	4903      	ldr	r1, [pc, #12]	; (8000c84 <uartInit+0x14>)
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <uartInit+0x18>)
 8000c7a:	f002 ff21 	bl	8003ac0 <HAL_UART_Receive_DMA>
	return true;
}
 8000c7e:	2001      	movs	r0, #1
 8000c80:	bd10      	pop	{r4, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	20000240 	.word	0x20000240
 8000c88:	20000520 	.word	0x20000520

08000c8c <uartWrite>:
* Inputs        : void
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	0014      	movs	r4, r2
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ref;

	switch(ch)
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d001      	beq.n	8000c98 <uartWrite+0xc>
	uint32_t ret = 0;
 8000c94:	2000      	movs	r0, #0
			break;
	}


	return ret;
}
 8000c96:	bd10      	pop	{r4, pc}
			hal_ref = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000c98:	b292      	uxth	r2, r2
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <uartWrite+0x24>)
 8000c9e:	f002 fdb9 	bl	8003814 <HAL_UART_Transmit>
			if (hal_ref == HAL_OK)
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d001      	beq.n	8000caa <uartWrite+0x1e>
	uint32_t ret = 0;
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	e7f5      	b.n	8000c96 <uartWrite+0xa>
				ret = length;
 8000caa:	0020      	movs	r0, r4
	return ret;
 8000cac:	e7f3      	b.n	8000c96 <uartWrite+0xa>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000520 	.word	0x20000520

08000cb4 <uartAvailable>:
*****************************************************************************/
uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d115      	bne.n	8000ce4 <uartAvailable+0x30>
	{
		case _DEF_CH1:
			q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <uartAvailable+0x34>)
 8000cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	425a      	negs	r2, r3
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	4a08      	ldr	r2, [pc, #32]	; (8000cec <uartAvailable+0x38>)
 8000cca:	8013      	strh	r3, [r2, #0]
			// Calculating the number of buffers stored.
			ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000ccc:	3301      	adds	r3, #1
 8000cce:	33ff      	adds	r3, #255	; 0xff
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <uartAvailable+0x3c>)
 8000cd2:	8810      	ldrh	r0, [r2, #0]
 8000cd4:	1a1b      	subs	r3, r3, r0
 8000cd6:	17da      	asrs	r2, r3, #31
 8000cd8:	0e12      	lsrs	r2, r2, #24
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	20ff      	movs	r0, #255	; 0xff
 8000cde:	4018      	ands	r0, r3
 8000ce0:	1a80      	subs	r0, r0, r2
			break;
	}

	return ret;
}
 8000ce2:	4770      	bx	lr
	uint32_t ret = 0;
 8000ce4:	2000      	movs	r0, #0
	return ret;
 8000ce6:	e7fc      	b.n	8000ce2 <uartAvailable+0x2e>
 8000ce8:	20000520 	.word	0x20000520
 8000cec:	20000340 	.word	0x20000340
 8000cf0:	20000342 	.word	0x20000342

08000cf4 <uartRead>:
*****************************************************************************/
uint8_t uartRead(uint8_t ch)
{
	uint8_t ret =0;

	switch(ch)
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d10d      	bne.n	8000d14 <uartRead+0x20>
	{
		case _DEF_CH1:
			if (q_out != q_in)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <uartRead+0x24>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <uartRead+0x28>)
 8000cfe:	8812      	ldrh	r2, [r2, #0]
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d008      	beq.n	8000d16 <uartRead+0x22>
			{
				ret = q_buf[q_out];
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <uartRead+0x2c>)
 8000d06:	5cd0      	ldrb	r0, [r2, r3]
				q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8000d08:	3301      	adds	r3, #1
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	4a02      	ldr	r2, [pc, #8]	; (8000d18 <uartRead+0x24>)
 8000d10:	8013      	strh	r3, [r2, #0]
 8000d12:	e000      	b.n	8000d16 <uartRead+0x22>
	uint8_t ret =0;
 8000d14:	2000      	movs	r0, #0
			}
			break;
	}

	return ret;
}
 8000d16:	4770      	bx	lr
 8000d18:	20000342 	.word	0x20000342
 8000d1c:	20000340 	.word	0x20000340
 8000d20:	20000240 	.word	0x20000240

08000d24 <uartPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000d24:	b40e      	push	{r1, r2, r3}
 8000d26:	b510      	push	{r4, lr}
 8000d28:	b0c3      	sub	sp, #268	; 0x10c
 8000d2a:	0004      	movs	r4, r0
 8000d2c:	ab45      	add	r3, sp, #276	; 0x114
 8000d2e:	cb04      	ldmia	r3!, {r2}
	uint32_t ret = 0;
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 8000d30:	9341      	str	r3, [sp, #260]	; 0x104

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	0049      	lsls	r1, r1, #1
 8000d36:	a801      	add	r0, sp, #4
 8000d38:	f003 f8d4 	bl	8003ee4 <vsniprintf>
 8000d3c:	1e02      	subs	r2, r0, #0

	va_end(arg);

	if (len > 0)
 8000d3e:	dc05      	bgt.n	8000d4c <uartPrintf+0x28>
	uint32_t ret = 0;
 8000d40:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 8000d42:	b043      	add	sp, #268	; 0x10c
 8000d44:	bc10      	pop	{r4}
 8000d46:	bc08      	pop	{r3}
 8000d48:	b003      	add	sp, #12
 8000d4a:	4718      	bx	r3
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8000d4c:	a901      	add	r1, sp, #4
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f7ff ff9c 	bl	8000c8c <uartWrite>
 8000d54:	e7f5      	b.n	8000d42 <uartPrintf+0x1e>

08000d56 <uartVPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartVPrintf(uint8_t ch, const char *fmt, va_list arg)
{
 8000d56:	b510      	push	{r4, lr}
 8000d58:	b0c0      	sub	sp, #256	; 0x100
 8000d5a:	0004      	movs	r4, r0
 8000d5c:	0013      	movs	r3, r2
	uint32_t ret = 0;
	char print_buf[256];

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	000a      	movs	r2, r1
 8000d62:	0041      	lsls	r1, r0, #1
 8000d64:	4668      	mov	r0, sp
 8000d66:	f003 f8bd 	bl	8003ee4 <vsniprintf>
 8000d6a:	1e02      	subs	r2, r0, #0

	if (len > 0)
 8000d6c:	dc02      	bgt.n	8000d74 <uartVPrintf+0x1e>
	uint32_t ret = 0;
 8000d6e:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 8000d70:	b040      	add	sp, #256	; 0x100
 8000d72:	bd10      	pop	{r4, pc}
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8000d74:	4669      	mov	r1, sp
 8000d76:	0020      	movs	r0, r4
 8000d78:	f7ff ff88 	bl	8000c8c <uartWrite>
 8000d7c:	e7f8      	b.n	8000d70 <uartVPrintf+0x1a>

08000d7e <delay>:




void delay(uint32_t time_ms)
{
 8000d7e:	b510      	push	{r4, lr}
  HAL_Delay(time_ms);
 8000d80:	f000 fc3c 	bl	80015fc <HAL_Delay>
}
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <millis>:

uint32_t millis(void)
{
 8000d86:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8000d88:	f000 fc32 	bl	80015f0 <HAL_GetTick>
}
 8000d8c:	bd10      	pop	{r4, pc}
	...

08000d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d90:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <MX_DMA_Init+0x18>)
 8000d94:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000d96:	2301      	movs	r3, #1
 8000d98:	4319      	orrs	r1, r3
 8000d9a:	6391      	str	r1, [r2, #56]	; 0x38
 8000d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000d9e:	4013      	ands	r3, r2
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	9b01      	ldr	r3, [sp, #4]

}
 8000da4:	b002      	add	sp, #8
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <MX_GPIO_Init+0x38>)
 8000db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000db2:	2204      	movs	r2, #4
 8000db4:	4311      	orrs	r1, r2
 8000db6:	6359      	str	r1, [r3, #52]	; 0x34
 8000db8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dba:	400a      	ands	r2, r1
 8000dbc:	9201      	str	r2, [sp, #4]
 8000dbe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4311      	orrs	r1, r2
 8000dc6:	6359      	str	r1, [r3, #52]	; 0x34
 8000dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dca:	400a      	ands	r2, r1
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4311      	orrs	r1, r2
 8000dd6:	6359      	str	r1, [r3, #52]	; 0x34
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	401a      	ands	r2, r3
 8000ddc:	9203      	str	r2, [sp, #12]
 8000dde:	9b03      	ldr	r3, [sp, #12]

}
 8000de0:	b004      	add	sp, #16
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dea:	e7fe      	b.n	8000dea <Error_Handler+0x2>

08000dec <MX_TIM1_Init>:
{
 8000dec:	b500      	push	{lr}
 8000dee:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df0:	2210      	movs	r2, #16
 8000df2:	2100      	movs	r1, #0
 8000df4:	a818      	add	r0, sp, #96	; 0x60
 8000df6:	f002 ff63 	bl	8003cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	a815      	add	r0, sp, #84	; 0x54
 8000e00:	f002 ff5e 	bl	8003cc0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	221c      	movs	r2, #28
 8000e06:	2100      	movs	r1, #0
 8000e08:	a80e      	add	r0, sp, #56	; 0x38
 8000e0a:	f002 ff59 	bl	8003cc0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0e:	2234      	movs	r2, #52	; 0x34
 8000e10:	2100      	movs	r1, #0
 8000e12:	a801      	add	r0, sp, #4
 8000e14:	f002 ff54 	bl	8003cc0 <memset>
  htim1.Instance = TIM1;
 8000e18:	4830      	ldr	r0, [pc, #192]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_TIM1_Init+0xf4>)
 8000e1c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000e1e:	232f      	movs	r3, #47	; 0x2f
 8000e20:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	2300      	movs	r3, #0
 8000e24:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000e26:	2263      	movs	r2, #99	; 0x63
 8000e28:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2c:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	f001 ff3c 	bl	8002cac <HAL_TIM_Base_Init>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d144      	bne.n	8000ec2 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3e:	a918      	add	r1, sp, #96	; 0x60
 8000e40:	4826      	ldr	r0, [pc, #152]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000e42:	f002 f881 	bl	8002f48 <HAL_TIM_ConfigClockSource>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d13d      	bne.n	8000ec6 <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e4a:	4824      	ldr	r0, [pc, #144]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000e4c:	f001 ff5e 	bl	8002d0c <HAL_TIM_PWM_Init>
 8000e50:	2800      	cmp	r0, #0
 8000e52:	d13a      	bne.n	8000eca <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e54:	2300      	movs	r3, #0
 8000e56:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e58:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5c:	a915      	add	r1, sp, #84	; 0x54
 8000e5e:	481f      	ldr	r0, [pc, #124]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000e60:	f002 f99a 	bl	8003198 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d132      	bne.n	8000ece <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e72:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e76:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e78:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	a90e      	add	r1, sp, #56	; 0x38
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000e80:	f001 ffb4 	bl	8002dec <HAL_TIM_PWM_ConfigChannel>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d124      	bne.n	8000ed2 <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e8c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e90:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e92:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0192      	lsls	r2, r2, #6
 8000e98:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e9a:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e9c:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0492      	lsls	r2, r2, #18
 8000ea4:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ea6:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ea8:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eaa:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eac:	a901      	add	r1, sp, #4
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000eb0:	f002 f9aa 	bl	8003208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d10e      	bne.n	8000ed6 <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <MX_TIM1_Init+0xf0>)
 8000eba:	f000 fa6f 	bl	800139c <HAL_TIM_MspPostInit>
}
 8000ebe:	b01d      	add	sp, #116	; 0x74
 8000ec0:	bd00      	pop	{pc}
    Error_Handler();
 8000ec2:	f7ff ff91 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ec6:	f7ff ff8f 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000eca:	f7ff ff8d 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ece:	f7ff ff8b 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ed2:	f7ff ff89 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ed6:	f7ff ff87 	bl	8000de8 <Error_Handler>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	20000488 	.word	0x20000488
 8000ee0:	40012c00 	.word	0x40012c00

08000ee4 <MX_ADC1_Init>:
{
 8000ee4:	b500      	push	{lr}
 8000ee6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee8:	220c      	movs	r2, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	a801      	add	r0, sp, #4
 8000eee:	f002 fee7 	bl	8003cc0 <memset>
  hadc1.Instance = ADC1;
 8000ef2:	4828      	ldr	r0, [pc, #160]	; (8000f94 <MX_ADC1_Init+0xb0>)
 8000ef4:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <MX_ADC1_Init+0xb4>)
 8000ef6:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	05db      	lsls	r3, r3, #23
 8000efc:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	2300      	movs	r3, #0
 8000f00:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f02:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	0392      	lsls	r2, r2, #14
 8000f08:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000f10:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f12:	3a03      	subs	r2, #3
 8000f14:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000f16:	2103      	movs	r1, #3
 8000f18:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f1e:	3129      	adds	r1, #41	; 0x29
 8000f20:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f22:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f24:	3925      	subs	r1, #37	; 0x25
 8000f26:	6341      	str	r1, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000f28:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000f2a:	3135      	adds	r1, #53	; 0x35
 8000f2c:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000f2e:	3207      	adds	r2, #7
 8000f30:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000f32:	3278      	adds	r2, #120	; 0x78
 8000f34:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f36:	6483      	str	r3, [r0, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f38:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	f000 fb71 	bl	8001620 <HAL_ADC_Init>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d120      	bne.n	8000f84 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f44:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f4a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	a901      	add	r1, sp, #4
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_ADC1_Init+0xb0>)
 8000f50:	f000 fcf0 	bl	8001934 <HAL_ADC_ConfigChannel>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d117      	bne.n	8000f88 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_ADC1_Init+0xbc>)
 8000f5a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	a901      	add	r1, sp, #4
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_ADC1_Init+0xb0>)
 8000f64:	f000 fce6 	bl	8001934 <HAL_ADC_ConfigChannel>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d10f      	bne.n	8000f8c <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_ADC1_Init+0xc0>)
 8000f6e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f70:	2308      	movs	r3, #8
 8000f72:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	a901      	add	r1, sp, #4
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_ADC1_Init+0xb0>)
 8000f78:	f000 fcdc 	bl	8001934 <HAL_ADC_ConfigChannel>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d107      	bne.n	8000f90 <MX_ADC1_Init+0xac>
}
 8000f80:	b005      	add	sp, #20
 8000f82:	bd00      	pop	{pc}
    Error_Handler();
 8000f84:	f7ff ff30 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f88:	f7ff ff2e 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f8c:	f7ff ff2c 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000f90:	f7ff ff2a 	bl	8000de8 <Error_Handler>
 8000f94:	20000344 	.word	0x20000344
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	10000010 	.word	0x10000010
 8000fa0:	a4000200 	.word	0xa4000200
 8000fa4:	a8000400 	.word	0xa8000400

08000fa8 <MX_USART1_UART_Init>:
{
 8000fa8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_USART1_UART_Init+0x64>)
 8000fae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fb0:	23e1      	movs	r3, #225	; 0xe1
 8000fb2:	025b      	lsls	r3, r3, #9
 8000fb4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc6:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	f002 fce2 	bl	8003994 <HAL_UART_Init>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d111      	bne.n	8000ff8 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fd8:	f002 fdf4 	bl	8003bc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d10d      	bne.n	8000ffc <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4809      	ldr	r0, [pc, #36]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fe4:	f002 fe14 	bl	8003c10 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d109      	bne.n	8001000 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_USART1_UART_Init+0x60>)
 8000fee:	f002 fdc9 	bl	8003b84 <HAL_UARTEx_DisableFifoMode>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	d106      	bne.n	8001004 <MX_USART1_UART_Init+0x5c>
}
 8000ff6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ff8:	f7ff fef6 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8000ffc:	f7ff fef4 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8001000:	f7ff fef2 	bl	8000de8 <Error_Handler>
    Error_Handler();
 8001004:	f7ff fef0 	bl	8000de8 <Error_Handler>
 8001008:	20000520 	.word	0x20000520
 800100c:	40013800 	.word	0x40013800

08001010 <MX_TIM14_Init>:
{
 8001010:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <MX_TIM14_Init+0x28>)
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_TIM14_Init+0x2c>)
 8001016:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 8001018:	232f      	movs	r3, #47	; 0x2f
 800101a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	2300      	movs	r3, #0
 800101e:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8001020:	4a07      	ldr	r2, [pc, #28]	; (8001040 <MX_TIM14_Init+0x30>)
 8001022:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001028:	f001 fe40 	bl	8002cac <HAL_TIM_Base_Init>
 800102c:	2800      	cmp	r0, #0
 800102e:	d100      	bne.n	8001032 <MX_TIM14_Init+0x22>
}
 8001030:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001032:	f7ff fed9 	bl	8000de8 <Error_Handler>
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	200004d4 	.word	0x200004d4
 800103c:	40002000 	.word	0x40002000
 8001040:	000003e7 	.word	0x000003e7

08001044 <MX_RTC_Init>:
{
 8001044:	b500      	push	{lr}
 8001046:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8001048:	2214      	movs	r2, #20
 800104a:	2100      	movs	r1, #0
 800104c:	a801      	add	r0, sp, #4
 800104e:	f002 fe37 	bl	8003cc0 <memset>
  RTC_DateTypeDef sDate = {0};
 8001052:	2300      	movs	r3, #0
 8001054:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <MX_RTC_Init+0x80>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <MX_RTC_Init+0x84>)
 800105a:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800105e:	227f      	movs	r2, #127	; 0x7f
 8001060:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001062:	3280      	adds	r2, #128	; 0x80
 8001064:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001066:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001068:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	05d2      	lsls	r2, r2, #23
 8001070:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001072:	6203      	str	r3, [r0, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001074:	f001 fa1e 	bl	80024b4 <HAL_RTC_Init>
 8001078:	2800      	cmp	r0, #0
 800107a:	d11d      	bne.n	80010b8 <MX_RTC_Init+0x74>
  sTime.Hours = 0;
 800107c:	a901      	add	r1, sp, #4
 800107e:	2300      	movs	r3, #0
 8001080:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0;
 8001082:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0;
 8001084:	708b      	strb	r3, [r1, #2]
  sTime.SubSeconds = 0;
 8001086:	604b      	str	r3, [r1, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001088:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800108a:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800108c:	2200      	movs	r2, #0
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_RTC_Init+0x80>)
 8001090:	f001 fa70 	bl	8002574 <HAL_RTC_SetTime>
 8001094:	2800      	cmp	r0, #0
 8001096:	d111      	bne.n	80010bc <MX_RTC_Init+0x78>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001098:	2301      	movs	r3, #1
 800109a:	466a      	mov	r2, sp
 800109c:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800109e:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 80010a0:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	70d3      	strb	r3, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010a6:	2200      	movs	r2, #0
 80010a8:	4669      	mov	r1, sp
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_RTC_Init+0x80>)
 80010ac:	f001 fac8 	bl	8002640 <HAL_RTC_SetDate>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d105      	bne.n	80010c0 <MX_RTC_Init+0x7c>
}
 80010b4:	b007      	add	sp, #28
 80010b6:	bd00      	pop	{pc}
    Error_Handler();
 80010b8:	f7ff fe96 	bl	8000de8 <Error_Handler>
    Error_Handler();
 80010bc:	f7ff fe94 	bl	8000de8 <Error_Handler>
    Error_Handler();
 80010c0:	f7ff fe92 	bl	8000de8 <Error_Handler>
 80010c4:	20000460 	.word	0x20000460
 80010c8:	40002800 	.word	0x40002800

080010cc <SystemClock_Config>:
{
 80010cc:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <SystemClock_Config+0x90>)
 80010d0:	6813      	ldr	r3, [r2, #0]
 80010d2:	2107      	movs	r1, #7
 80010d4:	438b      	bics	r3, r1
 80010d6:	3906      	subs	r1, #6
 80010d8:	430b      	orrs	r3, r1
 80010da:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80010dc:	4a20      	ldr	r2, [pc, #128]	; (8001160 <SystemClock_Config+0x94>)
 80010de:	6811      	ldr	r1, [r2, #0]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <SystemClock_Config+0x94>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	d5fb      	bpl.n	80010e8 <SystemClock_Config+0x1c>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <SystemClock_Config+0x94>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	491b      	ldr	r1, [pc, #108]	; (8001164 <SystemClock_Config+0x98>)
 80010f6:	4011      	ands	r1, r2
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	01d2      	lsls	r2, r2, #7
 80010fc:	430a      	orrs	r2, r1
 80010fe:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	4919      	ldr	r1, [pc, #100]	; (8001168 <SystemClock_Config+0x9c>)
 8001104:	400a      	ands	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 8001108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800110a:	2104      	movs	r1, #4
 800110c:	430a      	orrs	r2, r1
 800110e:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 8001110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001112:	3903      	subs	r1, #3
 8001114:	430a      	orrs	r2, r1
 8001116:	65da      	str	r2, [r3, #92]	; 0x5c
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <SystemClock_Config+0x94>)
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	079b      	lsls	r3, r3, #30
 800111e:	d5fb      	bpl.n	8001118 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <SystemClock_Config+0x94>)
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4911      	ldr	r1, [pc, #68]	; (800116c <SystemClock_Config+0xa0>)
 8001126:	400a      	ands	r2, r1
 8001128:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	2107      	movs	r1, #7
 800112e:	438a      	bics	r2, r1
 8001130:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <SystemClock_Config+0x94>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2238      	movs	r2, #56	; 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001138:	421a      	tst	r2, r3
 800113a:	d1fa      	bne.n	8001132 <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800113c:	4a08      	ldr	r2, [pc, #32]	; (8001160 <SystemClock_Config+0x94>)
 800113e:	6893      	ldr	r3, [r2, #8]
 8001140:	490b      	ldr	r1, [pc, #44]	; (8001170 <SystemClock_Config+0xa4>)
 8001142:	400b      	ands	r3, r1
 8001144:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <SystemClock_Config+0xa8>)
 8001148:	f002 fd8a 	bl	8003c60 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800114c:	2000      	movs	r0, #0
 800114e:	f000 fa03 	bl	8001558 <HAL_InitTick>
 8001152:	2800      	cmp	r0, #0
 8001154:	d100      	bne.n	8001158 <SystemClock_Config+0x8c>
}
 8001156:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001158:	f7ff fe46 	bl	8000de8 <Error_Handler>
 800115c:	40022000 	.word	0x40022000
 8001160:	40021000 	.word	0x40021000
 8001164:	ffff80ff 	.word	0xffff80ff
 8001168:	ffffc7ff 	.word	0xffffc7ff
 800116c:	fffff0ff 	.word	0xfffff0ff
 8001170:	ffff8fff 	.word	0xffff8fff
 8001174:	02dc6c00 	.word	0x02dc6c00

08001178 <main>:
{
 8001178:	b510      	push	{r4, lr}
  HAL_Init();
 800117a:	f000 fa19 	bl	80015b0 <HAL_Init>
  SystemClock_Config();
 800117e:	f7ff ffa5 	bl	80010cc <SystemClock_Config>
  MX_GPIO_Init();
 8001182:	f7ff fe13 	bl	8000dac <MX_GPIO_Init>
  MX_TIM1_Init();
 8001186:	f7ff fe31 	bl	8000dec <MX_TIM1_Init>
  MX_DMA_Init();
 800118a:	f7ff fe01 	bl	8000d90 <MX_DMA_Init>
  MX_ADC1_Init();
 800118e:	f7ff fea9 	bl	8000ee4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001192:	f7ff ff09 	bl	8000fa8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8001196:	f7ff ff3b 	bl	8001010 <MX_TIM14_Init>
  MX_RTC_Init();
 800119a:	f7ff ff53 	bl	8001044 <MX_RTC_Init>
  apInit();
 800119e:	f7ff f9b7 	bl	8000510 <apInit>
  apMain();
 80011a2:	f7ff f9e9 	bl	8000578 <apMain>
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <main+0x2e>

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_MspInit+0x2c>)
 80011ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80011ae:	2201      	movs	r2, #1
 80011b0:	4311      	orrs	r1, r2
 80011b2:	6419      	str	r1, [r3, #64]	; 0x40
 80011b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80011b6:	400a      	ands	r2, r1
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	0549      	lsls	r1, r1, #21
 80011c2:	430a      	orrs	r2, r1
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	400b      	ands	r3, r1
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	b002      	add	sp, #8
 80011d0:	4770      	bx	lr
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d8:	b510      	push	{r4, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	2214      	movs	r2, #20
 80011e0:	2100      	movs	r1, #0
 80011e2:	a803      	add	r0, sp, #12
 80011e4:	f002 fd6c 	bl	8003cc0 <memset>
  if(hadc->Instance==ADC1)
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_ADC_MspInit+0x94>)
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f0:	b008      	add	sp, #32
 80011f2:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_ADC_MspInit+0x98>)
 80011f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	0892      	lsrs	r2, r2, #2
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 80011fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001200:	2080      	movs	r0, #128	; 0x80
 8001202:	0340      	lsls	r0, r0, #13
 8001204:	4301      	orrs	r1, r0
 8001206:	6419      	str	r1, [r3, #64]	; 0x40
 8001208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120a:	4002      	ands	r2, r0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001212:	2201      	movs	r2, #1
 8001214:	4311      	orrs	r1, r2
 8001216:	6359      	str	r1, [r3, #52]	; 0x34
 8001218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121a:	401a      	ands	r2, r3
 800121c:	9202      	str	r2, [sp, #8]
 800121e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001220:	2310      	movs	r3, #16
 8001222:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	3b0d      	subs	r3, #13
 8001226:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	20a0      	movs	r0, #160	; 0xa0
 800122a:	a903      	add	r1, sp, #12
 800122c:	05c0      	lsls	r0, r0, #23
 800122e:	f000 ffb5 	bl	800219c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <HAL_ADC_MspInit+0x9c>)
 8001234:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_ADC_MspInit+0xa0>)
 8001236:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001238:	2305      	movs	r3, #5
 800123a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123c:	2300      	movs	r3, #0
 800123e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001246:	3280      	adds	r2, #128	; 0x80
 8001248:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124a:	2280      	movs	r2, #128	; 0x80
 800124c:	00d2      	lsls	r2, r2, #3
 800124e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001250:	2220      	movs	r2, #32
 8001252:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001254:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001256:	f000 fef9 	bl	800204c <HAL_DMA_Init>
 800125a:	2800      	cmp	r0, #0
 800125c:	d103      	bne.n	8001266 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_ADC_MspInit+0x9c>)
 8001260:	6523      	str	r3, [r4, #80]	; 0x50
 8001262:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001264:	e7c4      	b.n	80011f0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001266:	f7ff fdbf 	bl	8000de8 <Error_Handler>
 800126a:	e7f8      	b.n	800125e <HAL_ADC_MspInit+0x86>
 800126c:	40012400 	.word	0x40012400
 8001270:	40021000 	.word	0x40021000
 8001274:	200003a8 	.word	0x200003a8
 8001278:	40020008 	.word	0x40020008

0800127c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800127c:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 800127e:	6802      	ldr	r2, [r0, #0]
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_RTC_MspInit+0xac>)
 8001282:	429a      	cmp	r2, r3
 8001284:	d001      	beq.n	800128a <HAL_RTC_MspInit+0xe>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001286:	b002      	add	sp, #8
 8001288:	4770      	bx	lr
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL));
 800128a:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_RTC_MspInit+0xb0>)
 800128c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128e:	22c0      	movs	r2, #192	; 0xc0
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	0052      	lsls	r2, r2, #1
 8001298:	4293      	cmp	r3, r2
 800129a:	d02e      	beq.n	80012fa <HAL_RTC_MspInit+0x7e>
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APBENR1, Periphs) == (Periphs)) ? 1UL : 0UL);
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <HAL_RTC_MspInit+0xb0>)
 800129e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	d43a      	bmi.n	800131a <HAL_RTC_MspInit+0x9e>
  SET_BIT(RCC->APBENR1, Periphs);
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <HAL_RTC_MspInit+0xb0>)
 80012a6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012a8:	2080      	movs	r0, #128	; 0x80
 80012aa:	0540      	lsls	r0, r0, #21
 80012ac:	4301      	orrs	r1, r0
 80012ae:	63d1      	str	r1, [r2, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80012b0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80012b2:	4003      	ands	r3, r0
 80012b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80012b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012b8:	2101      	movs	r1, #1
  * @rmtoll CSR1         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_RTC_MspInit+0xb0>)
 80012bc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	0252      	lsls	r2, r2, #9
 80012c2:	4302      	orrs	r2, r0
 80012c4:	65da      	str	r2, [r3, #92]	; 0x5c
  * @rmtoll CSR1         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 80012c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <HAL_RTC_MspInit+0xb4>)
 80012ca:	4002      	ands	r2, r0
 80012cc:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 80012ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d0:	2004      	movs	r0, #4
 80012d2:	4302      	orrs	r2, r0
 80012d4:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 80012d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012d8:	3803      	subs	r0, #3
 80012da:	4302      	orrs	r2, r0
 80012dc:	65da      	str	r2, [r3, #92]	; 0x5c
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_RTC_MspInit+0xb0>)
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	079b      	lsls	r3, r3, #30
 80012e4:	d5fb      	bpl.n	80012de <HAL_RTC_MspInit+0x62>
  MODIFY_REG(RCC->CSR1, RCC_CSR1_RTCSEL, Source);
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_RTC_MspInit+0xb0>)
 80012e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_RTC_MspInit+0xb8>)
 80012ec:	401a      	ands	r2, r3
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4313      	orrs	r3, r2
 80012f4:	65c3      	str	r3, [r0, #92]	; 0x5c
    if (pwrclkchanged == SET)
 80012f6:	2901      	cmp	r1, #1
 80012f8:	d011      	beq.n	800131e <HAL_RTC_MspInit+0xa2>
    __HAL_RCC_RTC_ENABLE();
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_RTC_MspInit+0xb0>)
 80012fc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	0212      	lsls	r2, r2, #8
 8001302:	430a      	orrs	r2, r1
 8001304:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	00c9      	lsls	r1, r1, #3
 800130c:	430a      	orrs	r2, r1
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001312:	400b      	ands	r3, r1
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	9b00      	ldr	r3, [sp, #0]
}
 8001318:	e7b5      	b.n	8001286 <HAL_RTC_MspInit+0xa>
    FlagStatus pwrclkchanged = RESET;
 800131a:	2100      	movs	r1, #0
 800131c:	e7cd      	b.n	80012ba <HAL_RTC_MspInit+0x3e>
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APBENR1, Periphs);
 800131e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001320:	4905      	ldr	r1, [pc, #20]	; (8001338 <HAL_RTC_MspInit+0xbc>)
 8001322:	400b      	ands	r3, r1
 8001324:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8001326:	e7e8      	b.n	80012fa <HAL_RTC_MspInit+0x7e>
 8001328:	40002800 	.word	0x40002800
 800132c:	40021000 	.word	0x40021000
 8001330:	fffeffff 	.word	0xfffeffff
 8001334:	fffffcff 	.word	0xfffffcff
 8001338:	efffffff 	.word	0xefffffff

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b500      	push	{lr}
 800133e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8001340:	6803      	ldr	r3, [r0, #0]
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_TIM_Base_MspInit+0x54>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d004      	beq.n	8001352 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8001348:	4a12      	ldr	r2, [pc, #72]	; (8001394 <HAL_TIM_Base_MspInit+0x58>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00c      	beq.n	8001368 <HAL_TIM_Base_MspInit+0x2c>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800134e:	b003      	add	sp, #12
 8001350:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001352:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_TIM_Base_MspInit+0x5c>)
 8001354:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001356:	2080      	movs	r0, #128	; 0x80
 8001358:	0100      	lsls	r0, r0, #4
 800135a:	4301      	orrs	r1, r0
 800135c:	6411      	str	r1, [r2, #64]	; 0x40
 800135e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001360:	4003      	ands	r3, r0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	9b00      	ldr	r3, [sp, #0]
 8001366:	e7f2      	b.n	800134e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_TIM_Base_MspInit+0x5c>)
 800136a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800136c:	2080      	movs	r0, #128	; 0x80
 800136e:	0200      	lsls	r0, r0, #8
 8001370:	4301      	orrs	r1, r0
 8001372:	6411      	str	r1, [r2, #64]	; 0x40
 8001374:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001376:	4003      	ands	r3, r0
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2103      	movs	r1, #3
 8001380:	2013      	movs	r0, #19
 8001382:	f000 fdb7 	bl	8001ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001386:	2013      	movs	r0, #19
 8001388:	f000 fde4 	bl	8001f54 <HAL_NVIC_EnableIRQ>
}
 800138c:	e7df      	b.n	800134e <HAL_TIM_Base_MspInit+0x12>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	40012c00 	.word	0x40012c00
 8001394:	40002000 	.word	0x40002000
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b510      	push	{r4, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	2214      	movs	r2, #20
 80013a4:	2100      	movs	r1, #0
 80013a6:	a801      	add	r0, sp, #4
 80013a8:	f002 fc8a 	bl	8003cc0 <memset>
  if(htim->Instance==TIM1)
 80013ac:	6822      	ldr	r2, [r4, #0]
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_MspPostInit+0x48>)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013b4:	b006      	add	sp, #24
 80013b6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_MspPostInit+0x4c>)
 80013ba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80013bc:	2301      	movs	r3, #1
 80013be:	4319      	orrs	r1, r3
 80013c0:	6351      	str	r1, [r2, #52]	; 0x34
 80013c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013c4:	4013      	ands	r3, r2
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013ca:	2320      	movs	r3, #32
 80013cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	3b1e      	subs	r3, #30
 80013d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 80013d2:	3303      	adds	r3, #3
 80013d4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	20a0      	movs	r0, #160	; 0xa0
 80013d8:	a901      	add	r1, sp, #4
 80013da:	05c0      	lsls	r0, r0, #23
 80013dc:	f000 fede 	bl	800219c <HAL_GPIO_Init>
}
 80013e0:	e7e8      	b.n	80013b4 <HAL_TIM_MspPostInit+0x18>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b510      	push	{r4, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	2214      	movs	r2, #20
 80013f4:	2100      	movs	r1, #0
 80013f6:	a803      	add	r0, sp, #12
 80013f8:	f002 fc62 	bl	8003cc0 <memset>
  if(huart->Instance==USART1)
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_UART_MspInit+0x8c>)
 80013fe:	6822      	ldr	r2, [r4, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001404:	b008      	add	sp, #32
 8001406:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_UART_MspInit+0x90>)
 800140a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800140c:	2103      	movs	r1, #3
 800140e:	438a      	bics	r2, r1
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8001412:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001414:	2080      	movs	r0, #128	; 0x80
 8001416:	01c0      	lsls	r0, r0, #7
 8001418:	4301      	orrs	r1, r0
 800141a:	6419      	str	r1, [r3, #64]	; 0x40
 800141c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800141e:	4002      	ands	r2, r0
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001426:	2202      	movs	r2, #2
 8001428:	4311      	orrs	r1, r2
 800142a:	6359      	str	r1, [r3, #52]	; 0x34
 800142c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142e:	4013      	ands	r3, r2
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001434:	23c0      	movs	r3, #192	; 0xc0
 8001436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	a903      	add	r1, sp, #12
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <HAL_UART_MspInit+0x94>)
 800143e:	f000 fead 	bl	800219c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001442:	4810      	ldr	r0, [pc, #64]	; (8001484 <HAL_UART_MspInit+0x98>)
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_UART_MspInit+0x9c>)
 8001446:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001448:	2332      	movs	r3, #50	; 0x32
 800144a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144c:	2300      	movs	r3, #0
 800144e:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001450:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001456:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001458:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800145a:	3a60      	subs	r2, #96	; 0x60
 800145c:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800145e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001460:	f000 fdf4 	bl	800204c <HAL_DMA_Init>
 8001464:	2800      	cmp	r0, #0
 8001466:	d103      	bne.n	8001470 <HAL_UART_MspInit+0x84>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_UART_MspInit+0x98>)
 800146a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800146c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800146e:	e7c9      	b.n	8001404 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001470:	f7ff fcba 	bl	8000de8 <Error_Handler>
 8001474:	e7f8      	b.n	8001468 <HAL_UART_MspInit+0x7c>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000
 8001480:	50000400 	.word	0x50000400
 8001484:	20000404 	.word	0x20000404
 8001488:	4002001c 	.word	0x4002001c

0800148c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler>

0800148e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler>

08001490 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001490:	4770      	bx	lr

08001492 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f89f 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bd10      	pop	{r4, pc}

0800149c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800149c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800149e:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM14_IRQHandler+0xc>)
 80014a0:	f001 fb06 	bl	8002ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80014a4:	bd10      	pop	{r4, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	200004d4 	.word	0x200004d4

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <_sbrk+0x38>)
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <_sbrk+0x3c>)
 80014b4:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <_sbrk+0x40>)
 80014b8:	6809      	ldr	r1, [r1, #0]
 80014ba:	2900      	cmp	r1, #0
 80014bc:	d007      	beq.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	490b      	ldr	r1, [pc, #44]	; (80014ec <_sbrk+0x40>)
 80014c0:	6808      	ldr	r0, [r1, #0]
 80014c2:	18c3      	adds	r3, r0, r3
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d806      	bhi.n	80014d6 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014c8:	4a08      	ldr	r2, [pc, #32]	; (80014ec <_sbrk+0x40>)
 80014ca:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014cc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014ce:	4907      	ldr	r1, [pc, #28]	; (80014ec <_sbrk+0x40>)
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <_sbrk+0x44>)
 80014d2:	6008      	str	r0, [r1, #0]
 80014d4:	e7f3      	b.n	80014be <_sbrk+0x12>
    errno = ENOMEM;
 80014d6:	f002 fbc9 	bl	8003c6c <__errno>
 80014da:	230c      	movs	r3, #12
 80014dc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014de:	2001      	movs	r0, #1
 80014e0:	4240      	negs	r0, r0
 80014e2:	e7f3      	b.n	80014cc <_sbrk+0x20>
 80014e4:	20003000 	.word	0x20003000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	200005b0 	.word	0x200005b0
 80014f0:	200005c8 	.word	0x200005c8

080014f4 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014f4:	4b02      	ldr	r3, [pc, #8]	; (8001500 <SystemInit+0xc>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	0512      	lsls	r2, r2, #20
 80014fa:	609a      	str	r2, [r3, #8]
#endif
}
 80014fc:	4770      	bx	lr
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001506:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001508:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800150a:	e003      	b.n	8001514 <LoopCopyDataInit>

0800150c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800150e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001510:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001512:	3104      	adds	r1, #4

08001514 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <LoopForever+0xa>)
  ldr r3, =_edata
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <LoopForever+0xe>)
  adds r2, r0, r1
 8001518:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800151c:	d3f6      	bcc.n	800150c <CopyDataInit>
  ldr r2, =_sbss
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <LoopForever+0x12>)
  b LoopFillZerobss
 8001520:	e002      	b.n	8001528 <LoopFillZerobss>

08001522 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  str  r3, [r2]
 8001524:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001526:	3204      	adds	r2, #4

08001528 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <LoopForever+0x16>)
  cmp r2, r3
 800152a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800152c:	d3f9      	bcc.n	8001522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800152e:	f7ff ffe1 	bl	80014f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001532:	f002 fba1 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fe1f 	bl	8001178 <main>

0800153a <LoopForever>:

LoopForever:
    b LoopForever
 800153a:	e7fe      	b.n	800153a <LoopForever>
  ldr   r0, =_estack
 800153c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001540:	08004b04 	.word	0x08004b04
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001548:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 800154c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001550:	200005c8 	.word	0x200005c8

08001554 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_IRQHandler>
	...

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b510      	push	{r4, lr}
 800155a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0x4c>)
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	2900      	cmp	r1, #0
 8001562:	d101      	bne.n	8001568 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001564:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001566:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001568:	20fa      	movs	r0, #250	; 0xfa
 800156a:	0080      	lsls	r0, r0, #2
 800156c:	f7fe fde0 	bl	8000130 <__udivsi3>
 8001570:	0001      	movs	r1, r0
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_InitTick+0x50>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	f7fe fddb 	bl	8000130 <__udivsi3>
 800157a:	f000 fcf7 	bl	8001f6c <HAL_SYSTICK_Config>
 800157e:	2800      	cmp	r0, #0
 8001580:	d10d      	bne.n	800159e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	2c03      	cmp	r4, #3
 8001584:	d901      	bls.n	800158a <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8001586:	2001      	movs	r0, #1
 8001588:	e7ed      	b.n	8001566 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158a:	3001      	adds	r0, #1
 800158c:	2200      	movs	r2, #0
 800158e:	0021      	movs	r1, r4
 8001590:	4240      	negs	r0, r0
 8001592:	f000 fcaf 	bl	8001ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_InitTick+0x54>)
 8001598:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800159a:	2000      	movs	r0, #0
 800159c:	e7e3      	b.n	8001566 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800159e:	2001      	movs	r0, #1
 80015a0:	e7e1      	b.n	8001566 <HAL_InitTick+0xe>
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004
 80015ac:	2000000c 	.word	0x2000000c

080015b0 <HAL_Init>:
{
 80015b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_Init+0x24>)
 80015b4:	6811      	ldr	r1, [r2, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	430b      	orrs	r3, r1
 80015bc:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	2000      	movs	r0, #0
 80015c0:	f7ff ffca 	bl	8001558 <HAL_InitTick>
 80015c4:	1e04      	subs	r4, r0, #0
 80015c6:	d002      	beq.n	80015ce <HAL_Init+0x1e>
    status = HAL_ERROR;
 80015c8:	2401      	movs	r4, #1
}
 80015ca:	0020      	movs	r0, r4
 80015cc:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80015ce:	f7ff fdeb 	bl	80011a8 <HAL_MspInit>
 80015d2:	e7fa      	b.n	80015ca <HAL_Init+0x1a>
 80015d4:	40022000 	.word	0x40022000

080015d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_IncTick+0x10>)
 80015da:	6813      	ldr	r3, [r2, #0]
 80015dc:	4903      	ldr	r1, [pc, #12]	; (80015ec <HAL_IncTick+0x14>)
 80015de:	6809      	ldr	r1, [r1, #0]
 80015e0:	185b      	adds	r3, r3, r1
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	4770      	bx	lr
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	200005b4 	.word	0x200005b4
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015f0:	4b01      	ldr	r3, [pc, #4]	; (80015f8 <HAL_GetTick+0x8>)
 80015f2:	6818      	ldr	r0, [r3, #0]
}
 80015f4:	4770      	bx	lr
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	200005b4 	.word	0x200005b4

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff fff6 	bl	80015f0 <HAL_GetTick>
 8001604:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	1c63      	adds	r3, r4, #1
 8001608:	d002      	beq.n	8001610 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <HAL_Delay+0x20>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	1b40      	subs	r0, r0, r5
 8001616:	42a0      	cmp	r0, r4
 8001618:	d3fa      	bcc.n	8001610 <HAL_Delay+0x14>
  {
  }
}
 800161a:	bd70      	pop	{r4, r5, r6, pc}
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001626:	2300      	movs	r3, #0
 8001628:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800162a:	2800      	cmp	r0, #0
 800162c:	d100      	bne.n	8001630 <HAL_ADC_Init+0x10>
 800162e:	e119      	b.n	8001864 <HAL_ADC_Init+0x244>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001630:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001636:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	00d2      	lsls	r2, r2, #3
 800163c:	d41b      	bmi.n	8001676 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	4989      	ldr	r1, [pc, #548]	; (8001868 <HAL_ADC_Init+0x248>)
 8001642:	4011      	ands	r1, r2
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0552      	lsls	r2, r2, #21
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800164c:	4b87      	ldr	r3, [pc, #540]	; (800186c <HAL_ADC_Init+0x24c>)
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	4987      	ldr	r1, [pc, #540]	; (8001870 <HAL_ADC_Init+0x250>)
 8001652:	f7fe fd6d 	bl	8000130 <__udivsi3>
 8001656:	0040      	lsls	r0, r0, #1
 8001658:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800165a:	e009      	b.n	8001670 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 800165c:	f7ff fdbc 	bl	80011d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001660:	2300      	movs	r3, #0
 8001662:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001664:	2254      	movs	r2, #84	; 0x54
 8001666:	54a3      	strb	r3, [r4, r2]
 8001668:	e7e5      	b.n	8001636 <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 800166a:	9b01      	ldr	r3, [sp, #4]
 800166c:	3b01      	subs	r3, #1
 800166e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f9      	bne.n	800166a <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	00d2      	lsls	r2, r2, #3
 800167c:	d500      	bpl.n	8001680 <HAL_ADC_Init+0x60>
 800167e:	e09d      	b.n	80017bc <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001682:	2110      	movs	r1, #16
 8001684:	430a      	orrs	r2, r1
 8001686:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800168a:	390f      	subs	r1, #15
 800168c:	430a      	orrs	r2, r1
 800168e:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001690:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	2104      	movs	r1, #4
 8001696:	000d      	movs	r5, r1
 8001698:	4015      	ands	r5, r2
 800169a:	4211      	tst	r1, r2
 800169c:	d000      	beq.n	80016a0 <HAL_ADC_Init+0x80>
 800169e:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80016a2:	06d2      	lsls	r2, r2, #27
 80016a4:	d500      	bpl.n	80016a8 <HAL_ADC_Init+0x88>
 80016a6:	e0d6      	b.n	8001856 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016a8:	2d00      	cmp	r5, #0
 80016aa:	d000      	beq.n	80016ae <HAL_ADC_Init+0x8e>
 80016ac:	e0d3      	b.n	8001856 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80016b0:	4970      	ldr	r1, [pc, #448]	; (8001874 <HAL_ADC_Init+0x254>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	3106      	adds	r1, #6
 80016b6:	31ff      	adds	r1, #255	; 0xff
 80016b8:	430a      	orrs	r2, r1
 80016ba:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	07d2      	lsls	r2, r2, #31
 80016c0:	d452      	bmi.n	8001768 <HAL_ADC_Init+0x148>
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016c2:	7e22      	ldrb	r2, [r4, #24]
 80016c4:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80016c6:	68a1      	ldr	r1, [r4, #8]
 80016c8:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016ca:	7e61      	ldrb	r1, [r4, #25]
 80016cc:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80016ce:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016d0:	7ea6      	ldrb	r6, [r4, #26]
 80016d2:	0371      	lsls	r1, r6, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80016d4:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80016d8:	2900      	cmp	r1, #0
 80016da:	d001      	beq.n	80016e0 <HAL_ADC_Init+0xc0>
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80016e0:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80016e2:	68e1      	ldr	r1, [r4, #12]
 80016e4:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016e6:	6921      	ldr	r1, [r4, #16]
 80016e8:	2900      	cmp	r1, #0
 80016ea:	db69      	blt.n	80017c0 <HAL_ADC_Init+0x1a0>
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 80016f0:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	5c61      	ldrb	r1, [r4, r1]
 80016f6:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016f8:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016fa:	2120      	movs	r1, #32
 80016fc:	5c61      	ldrb	r1, [r4, r1]
 80016fe:	2901      	cmp	r1, #1
 8001700:	d061      	beq.n	80017c6 <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001702:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001704:	2900      	cmp	r1, #0
 8001706:	d005      	beq.n	8001714 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001708:	26e0      	movs	r6, #224	; 0xe0
 800170a:	0076      	lsls	r6, r6, #1
 800170c:	4031      	ands	r1, r6
 800170e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001710:	4331      	orrs	r1, r6
 8001712:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001714:	68d9      	ldr	r1, [r3, #12]
 8001716:	4e58      	ldr	r6, [pc, #352]	; (8001878 <HAL_ADC_Init+0x258>)
 8001718:	4031      	ands	r1, r6
 800171a:	430a      	orrs	r2, r1
 800171c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800171e:	6863      	ldr	r3, [r4, #4]
 8001720:	0f9b      	lsrs	r3, r3, #30
 8001722:	079b      	lsls	r3, r3, #30
 8001724:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001726:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001728:	213c      	movs	r1, #60	; 0x3c
 800172a:	5c61      	ldrb	r1, [r4, r1]
 800172c:	2901      	cmp	r1, #1
 800172e:	d059      	beq.n	80017e4 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001730:	6821      	ldr	r1, [r4, #0]
 8001732:	690b      	ldr	r3, [r1, #16]
 8001734:	4e51      	ldr	r6, [pc, #324]	; (800187c <HAL_ADC_Init+0x25c>)
 8001736:	4033      	ands	r3, r6
 8001738:	4313      	orrs	r3, r2
 800173a:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	22c0      	movs	r2, #192	; 0xc0
 8001740:	0612      	lsls	r2, r2, #24
 8001742:	4293      	cmp	r3, r2
 8001744:	d010      	beq.n	8001768 <HAL_ADC_Init+0x148>
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	05d2      	lsls	r2, r2, #23
 800174a:	4293      	cmp	r3, r2
 800174c:	d00c      	beq.n	8001768 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	0612      	lsls	r2, r2, #24
 8001752:	4293      	cmp	r3, r2
 8001754:	d008      	beq.n	8001768 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001756:	494a      	ldr	r1, [pc, #296]	; (8001880 <HAL_ADC_Init+0x260>)
 8001758:	680a      	ldr	r2, [r1, #0]
 800175a:	4e4a      	ldr	r6, [pc, #296]	; (8001884 <HAL_ADC_Init+0x264>)
 800175c:	4032      	ands	r2, r6
 800175e:	26f0      	movs	r6, #240	; 0xf0
 8001760:	03b6      	lsls	r6, r6, #14
 8001762:	4033      	ands	r3, r6
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001768:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 800176a:	6953      	ldr	r3, [r2, #20]
 800176c:	2107      	movs	r1, #7
 800176e:	438b      	bics	r3, r1
 8001770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001772:	430b      	orrs	r3, r1
 8001774:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001776:	6821      	ldr	r1, [r4, #0]
 8001778:	694b      	ldr	r3, [r1, #20]
 800177a:	2270      	movs	r2, #112	; 0x70
 800177c:	4393      	bics	r3, r2
 800177e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	4313      	orrs	r3, r2
 8001784:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d135      	bne.n	80017f8 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800178c:	6822      	ldr	r2, [r4, #0]
 800178e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001790:	3b10      	subs	r3, #16
 8001792:	430b      	orrs	r3, r1
 8001794:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001796:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	2307      	movs	r3, #7
 800179c:	4013      	ands	r3, r2
 800179e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d04f      	beq.n	8001844 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017a6:	2212      	movs	r2, #18
 80017a8:	4393      	bics	r3, r2
 80017aa:	3a02      	subs	r2, #2
 80017ac:	4313      	orrs	r3, r2
 80017ae:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017b2:	3a0f      	subs	r2, #15
 80017b4:	4313      	orrs	r3, r2
 80017b6:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
 80017ba:	e051      	b.n	8001860 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	e768      	b.n	8001692 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017c0:	0049      	lsls	r1, r1, #1
 80017c2:	0849      	lsrs	r1, r1, #1
 80017c4:	e794      	b.n	80016f0 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c6:	2e00      	cmp	r6, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017ca:	2180      	movs	r1, #128	; 0x80
 80017cc:	0249      	lsls	r1, r1, #9
 80017ce:	430a      	orrs	r2, r1
 80017d0:	e797      	b.n	8001702 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80017d4:	2620      	movs	r6, #32
 80017d6:	4331      	orrs	r1, r6
 80017d8:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80017dc:	3e1f      	subs	r6, #31
 80017de:	4331      	orrs	r1, r6
 80017e0:	65e1      	str	r1, [r4, #92]	; 0x5c
 80017e2:	e78e      	b.n	8001702 <HAL_ADC_Init+0xe2>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80017e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80017e6:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 80017e8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80017ea:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 80017ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80017ee:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	2201      	movs	r2, #1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	e79b      	b.n	8001730 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	0392      	lsls	r2, r2, #14
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d1ca      	bne.n	8001796 <HAL_ADC_Init+0x176>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001800:	2d07      	cmp	r5, #7
 8001802:	d808      	bhi.n	8001816 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001804:	00ab      	lsls	r3, r5, #2
 8001806:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001808:	40da      	lsrs	r2, r3
 800180a:	230f      	movs	r3, #15
 800180c:	4013      	ands	r3, r2
 800180e:	2b0f      	cmp	r3, #15
 8001810:	d001      	beq.n	8001816 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001812:	3501      	adds	r5, #1
 8001814:	e7f4      	b.n	8001800 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001816:	2d01      	cmp	r5, #1
 8001818:	d00d      	beq.n	8001836 <HAL_ADC_Init+0x216>
        MODIFY_REG(hadc->Instance->CHSELR,
 800181a:	6821      	ldr	r1, [r4, #0]
 800181c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800181e:	69e3      	ldr	r3, [r4, #28]
 8001820:	3b01      	subs	r3, #1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	221c      	movs	r2, #28
 8001826:	401a      	ands	r2, r3
 8001828:	2310      	movs	r3, #16
 800182a:	425b      	negs	r3, r3
 800182c:	4093      	lsls	r3, r2
 800182e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001830:	4313      	orrs	r3, r2
 8001832:	628b      	str	r3, [r1, #40]	; 0x28
 8001834:	e7af      	b.n	8001796 <HAL_ADC_Init+0x176>
        SET_BIT(hadc->Instance->CHSELR,
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800183a:	2310      	movs	r3, #16
 800183c:	425b      	negs	r3, r3
 800183e:	430b      	orrs	r3, r1
 8001840:	6293      	str	r3, [r2, #40]	; 0x28
 8001842:	e7a8      	b.n	8001796 <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8001844:	2300      	movs	r3, #0
 8001846:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800184a:	2203      	movs	r2, #3
 800184c:	4393      	bics	r3, r2
 800184e:	3a02      	subs	r2, #2
 8001850:	4313      	orrs	r3, r2
 8001852:	65a3      	str	r3, [r4, #88]	; 0x58
 8001854:	e004      	b.n	8001860 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001858:	2210      	movs	r2, #16
 800185a:	4313      	orrs	r3, r2
 800185c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800185e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001860:	b002      	add	sp, #8
 8001862:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001864:	2001      	movs	r0, #1
 8001866:	e7fb      	b.n	8001860 <HAL_ADC_Init+0x240>
 8001868:	6fffffe8 	.word	0x6fffffe8
 800186c:	20000004 	.word	0x20000004
 8001870:	00030d40 	.word	0x00030d40
 8001874:	fffffefd 	.word	0xfffffefd
 8001878:	fffe0201 	.word	0xfffe0201
 800187c:	1ffffc02 	.word	0x1ffffc02
 8001880:	40012708 	.word	0x40012708
 8001884:	ffc3ffff 	.word	0xffc3ffff

08001888 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001888:	4770      	bx	lr

0800188a <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800188a:	4770      	bx	lr

0800188c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800188c:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800188e:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001890:	f7ff fffb 	bl	800188a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001894:	bd10      	pop	{r4, pc}

08001896 <HAL_ADC_ErrorCallback>:
}
 8001896:	4770      	bx	lr

08001898 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001898:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189a:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800189c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	4313      	orrs	r3, r2
 80018a2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018a4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80018a6:	3a3c      	subs	r2, #60	; 0x3c
 80018a8:	4313      	orrs	r3, r2
 80018aa:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ac:	f7ff fff3 	bl	8001896 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018b0:	bd10      	pop	{r4, pc}
	...

080018b4 <ADC_DMAConvCplt>:
{
 80018b4:	b510      	push	{r4, lr}
 80018b6:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80018ba:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80018bc:	2150      	movs	r1, #80	; 0x50
 80018be:	4211      	tst	r1, r2
 80018c0:	d12a      	bne.n	8001918 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018c2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4313      	orrs	r3, r2
 80018ca:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018cc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	22c0      	movs	r2, #192	; 0xc0
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	4211      	tst	r1, r2
 80018d6:	d113      	bne.n	8001900 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80018d8:	7e82      	ldrb	r2, [r0, #26]
 80018da:	2a00      	cmp	r2, #0
 80018dc:	d110      	bne.n	8001900 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	0712      	lsls	r2, r2, #28
 80018e2:	d50d      	bpl.n	8001900 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	0752      	lsls	r2, r2, #29
 80018e8:	d40d      	bmi.n	8001906 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	210c      	movs	r1, #12
 80018ee:	438a      	bics	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80018f2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <ADC_DMAConvCplt+0x7c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	3204      	adds	r2, #4
 80018fa:	32ff      	adds	r2, #255	; 0xff
 80018fc:	4313      	orrs	r3, r2
 80018fe:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001900:	f7ff ffc2 	bl	8001888 <HAL_ADC_ConvCpltCallback>
}
 8001904:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001906:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001908:	2220      	movs	r2, #32
 800190a:	4313      	orrs	r3, r2
 800190c:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001910:	3a1f      	subs	r2, #31
 8001912:	4313      	orrs	r3, r2
 8001914:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001916:	e7f3      	b.n	8001900 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001918:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	d404      	bmi.n	8001928 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800191e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001922:	0018      	movs	r0, r3
 8001924:	4790      	blx	r2
}
 8001926:	e7ed      	b.n	8001904 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001928:	f7ff ffb5 	bl	8001896 <HAL_ADC_ErrorCallback>
 800192c:	e7ea      	b.n	8001904 <ADC_DMAConvCplt+0x50>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	fffffefe 	.word	0xfffffefe

08001934 <HAL_ADC_ConfigChannel>:
{
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	b083      	sub	sp, #12
 8001938:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800193a:	2300      	movs	r3, #0
 800193c:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800193e:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001940:	3354      	adds	r3, #84	; 0x54
 8001942:	5cc3      	ldrb	r3, [r0, r3]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d100      	bne.n	800194a <HAL_ADC_ConfigChannel+0x16>
 8001948:	e122      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x25c>
 800194a:	2354      	movs	r3, #84	; 0x54
 800194c:	2201      	movs	r2, #1
 800194e:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001950:	6800      	ldr	r0, [r0, #0]
 8001952:	6883      	ldr	r3, [r0, #8]
 8001954:	3203      	adds	r2, #3
 8001956:	0016      	movs	r6, r2
 8001958:	401e      	ands	r6, r3
 800195a:	421a      	tst	r2, r3
 800195c:	d009      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001960:	321c      	adds	r2, #28
 8001962:	4313      	orrs	r3, r2
 8001964:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001966:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001968:	2354      	movs	r3, #84	; 0x54
 800196a:	2200      	movs	r2, #0
 800196c:	54e2      	strb	r2, [r4, r3]
}
 800196e:	b003      	add	sp, #12
 8001970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8001972:	684b      	ldr	r3, [r1, #4]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d100      	bne.n	800197a <HAL_ADC_ConfigChannel+0x46>
 8001978:	e0d6      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	0612      	lsls	r2, r2, #24
 800197e:	4295      	cmp	r5, r2
 8001980:	d026      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x9c>
 8001982:	4a84      	ldr	r2, [pc, #528]	; (8001b94 <HAL_ADC_ConfigChannel+0x260>)
 8001984:	4295      	cmp	r5, r2
 8001986:	d023      	beq.n	80019d0 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001988:	221f      	movs	r2, #31
 800198a:	4013      	ands	r3, r2
 800198c:	3a10      	subs	r2, #16
 800198e:	409a      	lsls	r2, r3
 8001990:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001992:	4395      	bics	r5, r2
 8001994:	002a      	movs	r2, r5
 8001996:	680d      	ldr	r5, [r1, #0]
 8001998:	026f      	lsls	r7, r5, #9
 800199a:	d12f      	bne.n	80019fc <HAL_ADC_ConfigChannel+0xc8>
 800199c:	0ead      	lsrs	r5, r5, #26
 800199e:	261f      	movs	r6, #31
 80019a0:	402e      	ands	r6, r5
 80019a2:	409e      	lsls	r6, r3
 80019a4:	4316      	orrs	r6, r2
 80019a6:	6626      	str	r6, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80019a8:	684d      	ldr	r5, [r1, #4]
 80019aa:	08ab      	lsrs	r3, r5, #2
 80019ac:	3301      	adds	r3, #1
 80019ae:	69e2      	ldr	r2, [r4, #28]
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d813      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 80019b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80019b6:	231f      	movs	r3, #31
 80019b8:	401d      	ands	r5, r3
 80019ba:	3b10      	subs	r3, #16
 80019bc:	001e      	movs	r6, r3
 80019be:	40ae      	lsls	r6, r5
 80019c0:	43b2      	bics	r2, r6
 80019c2:	680e      	ldr	r6, [r1, #0]
 80019c4:	0eb6      	lsrs	r6, r6, #26
 80019c6:	4033      	ands	r3, r6
 80019c8:	40ab      	lsls	r3, r5
 80019ca:	4313      	orrs	r3, r2
 80019cc:	6283      	str	r3, [r0, #40]	; 0x28
}
 80019ce:	e005      	b.n	80019dc <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019d0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80019d2:	680b      	ldr	r3, [r1, #0]
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	4313      	orrs	r3, r2
 80019da:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019dc:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80019de:	6942      	ldr	r2, [r0, #20]
 80019e0:	680b      	ldr	r3, [r1, #0]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	439a      	bics	r2, r3
 80019e6:	688d      	ldr	r5, [r1, #8]
 80019e8:	402b      	ands	r3, r5
 80019ea:	4d6b      	ldr	r5, [pc, #428]	; (8001b98 <HAL_ADC_ConfigChannel+0x264>)
 80019ec:	402b      	ands	r3, r5
 80019ee:	4313      	orrs	r3, r2
 80019f0:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019f2:	680b      	ldr	r3, [r1, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db5f      	blt.n	8001ab8 <HAL_ADC_ConfigChannel+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f8:	2000      	movs	r0, #0
 80019fa:	e7b5      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80019fc:	07ef      	lsls	r7, r5, #31
 80019fe:	d4d0      	bmi.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a00:	07ae      	lsls	r6, r5, #30
 8001a02:	d42f      	bmi.n	8001a64 <HAL_ADC_ConfigChannel+0x130>
 8001a04:	076e      	lsls	r6, r5, #29
 8001a06:	d42f      	bmi.n	8001a68 <HAL_ADC_ConfigChannel+0x134>
 8001a08:	072e      	lsls	r6, r5, #28
 8001a0a:	d42f      	bmi.n	8001a6c <HAL_ADC_ConfigChannel+0x138>
 8001a0c:	06ee      	lsls	r6, r5, #27
 8001a0e:	d42f      	bmi.n	8001a70 <HAL_ADC_ConfigChannel+0x13c>
 8001a10:	06ae      	lsls	r6, r5, #26
 8001a12:	d42f      	bmi.n	8001a74 <HAL_ADC_ConfigChannel+0x140>
 8001a14:	066e      	lsls	r6, r5, #25
 8001a16:	d42f      	bmi.n	8001a78 <HAL_ADC_ConfigChannel+0x144>
 8001a18:	062e      	lsls	r6, r5, #24
 8001a1a:	d42f      	bmi.n	8001a7c <HAL_ADC_ConfigChannel+0x148>
 8001a1c:	05ee      	lsls	r6, r5, #23
 8001a1e:	d42f      	bmi.n	8001a80 <HAL_ADC_ConfigChannel+0x14c>
 8001a20:	05ae      	lsls	r6, r5, #22
 8001a22:	d42f      	bmi.n	8001a84 <HAL_ADC_ConfigChannel+0x150>
 8001a24:	056e      	lsls	r6, r5, #21
 8001a26:	d42f      	bmi.n	8001a88 <HAL_ADC_ConfigChannel+0x154>
 8001a28:	052e      	lsls	r6, r5, #20
 8001a2a:	d42f      	bmi.n	8001a8c <HAL_ADC_ConfigChannel+0x158>
 8001a2c:	04ee      	lsls	r6, r5, #19
 8001a2e:	d42f      	bmi.n	8001a90 <HAL_ADC_ConfigChannel+0x15c>
 8001a30:	04ae      	lsls	r6, r5, #18
 8001a32:	d42f      	bmi.n	8001a94 <HAL_ADC_ConfigChannel+0x160>
 8001a34:	046e      	lsls	r6, r5, #17
 8001a36:	d42f      	bmi.n	8001a98 <HAL_ADC_ConfigChannel+0x164>
 8001a38:	042e      	lsls	r6, r5, #16
 8001a3a:	d42f      	bmi.n	8001a9c <HAL_ADC_ConfigChannel+0x168>
 8001a3c:	03ee      	lsls	r6, r5, #15
 8001a3e:	d42f      	bmi.n	8001aa0 <HAL_ADC_ConfigChannel+0x16c>
 8001a40:	03ae      	lsls	r6, r5, #14
 8001a42:	d42f      	bmi.n	8001aa4 <HAL_ADC_ConfigChannel+0x170>
 8001a44:	036e      	lsls	r6, r5, #13
 8001a46:	d42f      	bmi.n	8001aa8 <HAL_ADC_ConfigChannel+0x174>
 8001a48:	032e      	lsls	r6, r5, #12
 8001a4a:	d42f      	bmi.n	8001aac <HAL_ADC_ConfigChannel+0x178>
 8001a4c:	02ee      	lsls	r6, r5, #11
 8001a4e:	d42f      	bmi.n	8001ab0 <HAL_ADC_ConfigChannel+0x17c>
 8001a50:	02ae      	lsls	r6, r5, #10
 8001a52:	d42f      	bmi.n	8001ab4 <HAL_ADC_ConfigChannel+0x180>
 8001a54:	2780      	movs	r7, #128	; 0x80
 8001a56:	03ff      	lsls	r7, r7, #15
 8001a58:	002e      	movs	r6, r5
 8001a5a:	403e      	ands	r6, r7
 8001a5c:	423d      	tst	r5, r7
 8001a5e:	d0a0      	beq.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a60:	2616      	movs	r6, #22
 8001a62:	e79e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a64:	2601      	movs	r6, #1
 8001a66:	e79c      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a68:	2602      	movs	r6, #2
 8001a6a:	e79a      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a6c:	2603      	movs	r6, #3
 8001a6e:	e798      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a70:	2604      	movs	r6, #4
 8001a72:	e796      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a74:	2605      	movs	r6, #5
 8001a76:	e794      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a78:	2606      	movs	r6, #6
 8001a7a:	e792      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a7c:	2607      	movs	r6, #7
 8001a7e:	e790      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a80:	2608      	movs	r6, #8
 8001a82:	e78e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a84:	2609      	movs	r6, #9
 8001a86:	e78c      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a88:	260a      	movs	r6, #10
 8001a8a:	e78a      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a8c:	260b      	movs	r6, #11
 8001a8e:	e788      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a90:	260c      	movs	r6, #12
 8001a92:	e786      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a94:	260d      	movs	r6, #13
 8001a96:	e784      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a98:	260e      	movs	r6, #14
 8001a9a:	e782      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001a9c:	260f      	movs	r6, #15
 8001a9e:	e780      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001aa0:	2610      	movs	r6, #16
 8001aa2:	e77e      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001aa4:	2611      	movs	r6, #17
 8001aa6:	e77c      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001aa8:	2612      	movs	r6, #18
 8001aaa:	e77a      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001aac:	2613      	movs	r6, #19
 8001aae:	e778      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001ab0:	2614      	movs	r6, #20
 8001ab2:	e776      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
 8001ab4:	2615      	movs	r6, #21
 8001ab6:	e774      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001aba:	6811      	ldr	r1, [r2, #0]
 8001abc:	22c0      	movs	r2, #192	; 0xc0
 8001abe:	0412      	lsls	r2, r2, #16
 8001ac0:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac2:	4837      	ldr	r0, [pc, #220]	; (8001ba0 <HAL_ADC_ConfigChannel+0x26c>)
 8001ac4:	4283      	cmp	r3, r0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x19e>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ac8:	4836      	ldr	r0, [pc, #216]	; (8001ba4 <HAL_ADC_ConfigChannel+0x270>)
 8001aca:	4283      	cmp	r3, r0
 8001acc:	d01f      	beq.n	8001b0e <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e74a      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad2:	0208      	lsls	r0, r1, #8
 8001ad4:	d4f8      	bmi.n	8001ac8 <HAL_ADC_ConfigChannel+0x194>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001adc:	492f      	ldr	r1, [pc, #188]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001ade:	680b      	ldr	r3, [r1, #0]
 8001ae0:	4831      	ldr	r0, [pc, #196]	; (8001ba8 <HAL_ADC_ConfigChannel+0x274>)
 8001ae2:	4003      	ands	r3, r0
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	600a      	str	r2, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001ae8:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_ADC_ConfigChannel+0x278>)
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	4930      	ldr	r1, [pc, #192]	; (8001bb0 <HAL_ADC_ConfigChannel+0x27c>)
 8001aee:	f7fe fb1f 	bl	8000130 <__udivsi3>
 8001af2:	0043      	lsls	r3, r0, #1
 8001af4:	181b      	adds	r3, r3, r0
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3301      	adds	r3, #1
 8001afa:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001afc:	e002      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x1d0>
            wait_loop_index--;
 8001afe:	9b01      	ldr	r3, [sp, #4]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f9      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x1ca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e72c      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b0e:	024b      	lsls	r3, r1, #9
 8001b10:	d43c      	bmi.n	8001b8c <HAL_ADC_ConfigChannel+0x258>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	03db      	lsls	r3, r3, #15
 8001b16:	431a      	orrs	r2, r3
 8001b18:	4920      	ldr	r1, [pc, #128]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001b1a:	680b      	ldr	r3, [r1, #0]
 8001b1c:	4822      	ldr	r0, [pc, #136]	; (8001ba8 <HAL_ADC_ConfigChannel+0x274>)
 8001b1e:	4003      	ands	r3, r0
 8001b20:	431a      	orrs	r2, r3
 8001b22:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b24:	2000      	movs	r0, #0
}
 8001b26:	e71f      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	061b      	lsls	r3, r3, #24
 8001b2c:	429d      	cmp	r5, r3
 8001b2e:	d002      	beq.n	8001b36 <HAL_ADC_ConfigChannel+0x202>
 8001b30:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_ADC_ConfigChannel+0x260>)
 8001b32:	429d      	cmp	r5, r3
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b36:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001b38:	680b      	ldr	r3, [r1, #0]
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	0a5b      	lsrs	r3, r3, #9
 8001b3e:	439a      	bics	r2, r3
 8001b40:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b42:	680b      	ldr	r3, [r1, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db01      	blt.n	8001b4c <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b48:	2000      	movs	r0, #0
 8001b4a:	e70d      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001b4e:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b50:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <HAL_ADC_ConfigChannel+0x26c>)
 8001b52:	428b      	cmp	r3, r1
 8001b54:	d004      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x22c>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b56:	4913      	ldr	r1, [pc, #76]	; (8001ba4 <HAL_ADC_ConfigChannel+0x270>)
 8001b58:	428b      	cmp	r3, r1
 8001b5a:	d00c      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x242>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e703      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	03db      	lsls	r3, r3, #15
 8001b64:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001b68:	680b      	ldr	r3, [r1, #0]
 8001b6a:	480f      	ldr	r0, [pc, #60]	; (8001ba8 <HAL_ADC_ConfigChannel+0x274>)
 8001b6c:	4003      	ands	r3, r0
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b72:	2000      	movs	r0, #0
}
 8001b74:	e6f8      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	041b      	lsls	r3, r3, #16
 8001b7a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <HAL_ADC_ConfigChannel+0x268>)
 8001b7e:	680b      	ldr	r3, [r1, #0]
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_ADC_ConfigChannel+0x274>)
 8001b82:	4003      	ands	r3, r0
 8001b84:	431a      	orrs	r2, r3
 8001b86:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2000      	movs	r0, #0
}
 8001b8a:	e6ed      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e6eb      	b.n	8001968 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8001b90:	2002      	movs	r0, #2
 8001b92:	e6ec      	b.n	800196e <HAL_ADC_ConfigChannel+0x3a>
 8001b94:	80000004 	.word	0x80000004
 8001b98:	7fffff00 	.word	0x7fffff00
 8001b9c:	40012708 	.word	0x40012708
 8001ba0:	a4000200 	.word	0xa4000200
 8001ba4:	a8000400 	.word	0xa8000400
 8001ba8:	ff3fffff 	.word	0xff3fffff
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	00030d40 	.word	0x00030d40

08001bb4 <ADC_Enable>:
{
 8001bb4:	b530      	push	{r4, r5, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bbe:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	07d2      	lsls	r2, r2, #31
 8001bc4:	d44d      	bmi.n	8001c62 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <ADC_Enable+0xb4>)
 8001bca:	4211      	tst	r1, r2
 8001bcc:	d111      	bne.n	8001bf2 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4926      	ldr	r1, [pc, #152]	; (8001c6c <ADC_Enable+0xb8>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <ADC_Enable+0xbc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	d517      	bpl.n	8001c12 <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <ADC_Enable+0xc0>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	4924      	ldr	r1, [pc, #144]	; (8001c78 <ADC_Enable+0xc4>)
 8001be8:	f7fe faa2 	bl	8000130 <__udivsi3>
 8001bec:	3001      	adds	r0, #1
 8001bee:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001bf0:	e00c      	b.n	8001c0c <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001bfc:	3a0f      	subs	r2, #15
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
 8001c04:	e02e      	b.n	8001c64 <ADC_Enable+0xb0>
        wait_loop_index--;
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001c0c:	9b01      	ldr	r3, [sp, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c12:	7e63      	ldrb	r3, [r4, #25]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <ADC_Enable+0x68>
  return HAL_OK;
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e023      	b.n	8001c64 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fce8 	bl	80015f0 <HAL_GetTick>
 8001c20:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c22:	e004      	b.n	8001c2e <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c24:	f7ff fce4 	bl	80015f0 <HAL_GetTick>
 8001c28:	1b40      	subs	r0, r0, r5
 8001c2a:	2802      	cmp	r0, #2
 8001c2c:	d80d      	bhi.n	8001c4a <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	07d2      	lsls	r2, r2, #31
 8001c34:	d413      	bmi.n	8001c5e <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	07d2      	lsls	r2, r2, #31
 8001c3a:	d4f3      	bmi.n	8001c24 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	490b      	ldr	r1, [pc, #44]	; (8001c6c <ADC_Enable+0xb8>)
 8001c40:	400a      	ands	r2, r1
 8001c42:	2101      	movs	r1, #1
 8001c44:	430a      	orrs	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
}
 8001c48:	e7ec      	b.n	8001c24 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001c54:	3a0f      	subs	r2, #15
 8001c56:	4313      	orrs	r3, r2
 8001c58:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	e002      	b.n	8001c64 <ADC_Enable+0xb0>
  return HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	e000      	b.n	8001c64 <ADC_Enable+0xb0>
 8001c62:	2000      	movs	r0, #0
}
 8001c64:	b003      	add	sp, #12
 8001c66:	bd30      	pop	{r4, r5, pc}
 8001c68:	80000017 	.word	0x80000017
 8001c6c:	7fffffe8 	.word	0x7fffffe8
 8001c70:	40012708 	.word	0x40012708
 8001c74:	20000004 	.word	0x20000004
 8001c78:	00030d40 	.word	0x00030d40

08001c7c <HAL_ADC_Start_DMA>:
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	0004      	movs	r4, r0
 8001c80:	000d      	movs	r5, r1
 8001c82:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c84:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	0752      	lsls	r2, r2, #29
 8001c8a:	d447      	bmi.n	8001d1c <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8001c8c:	2254      	movs	r2, #84	; 0x54
 8001c8e:	5c82      	ldrb	r2, [r0, r2]
 8001c90:	2a01      	cmp	r2, #1
 8001c92:	d045      	beq.n	8001d20 <HAL_ADC_Start_DMA+0xa4>
 8001c94:	2201      	movs	r2, #1
 8001c96:	2154      	movs	r1, #84	; 0x54
 8001c98:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	420a      	tst	r2, r1
 8001c9e:	d10d      	bne.n	8001cbc <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	07d2      	lsls	r2, r2, #31
 8001ca4:	d505      	bpl.n	8001cb2 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	491e      	ldr	r1, [pc, #120]	; (8001d24 <HAL_ADC_Start_DMA+0xa8>)
 8001caa:	400a      	ands	r2, r1
 8001cac:	2102      	movs	r1, #2
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	68d3      	ldr	r3, [r2, #12]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001cbc:	0020      	movs	r0, r4
 8001cbe:	f7ff ff79 	bl	8001bb4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d12b      	bne.n	8001d1e <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_ADC_Start_DMA+0xac>)
 8001cca:	401a      	ands	r2, r3
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cd8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cda:	4914      	ldr	r1, [pc, #80]	; (8001d2c <HAL_ADC_Start_DMA+0xb0>)
 8001cdc:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cde:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ce0:	4913      	ldr	r1, [pc, #76]	; (8001d30 <HAL_ADC_Start_DMA+0xb4>)
 8001ce2:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ce4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ce6:	4913      	ldr	r1, [pc, #76]	; (8001d34 <HAL_ADC_Start_DMA+0xb8>)
 8001ce8:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cea:	6822      	ldr	r2, [r4, #0]
 8001cec:	211c      	movs	r1, #28
 8001cee:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001cf0:	2254      	movs	r2, #84	; 0x54
 8001cf2:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cf4:	6822      	ldr	r2, [r4, #0]
 8001cf6:	6853      	ldr	r3, [r2, #4]
 8001cf8:	390c      	subs	r1, #12
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	3140      	adds	r1, #64	; 0x40
 8001d02:	0033      	movs	r3, r6
 8001d04:	002a      	movs	r2, r5
 8001d06:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001d08:	f000 f9f8 	bl	80020fc <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d0c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001d0e:	6893      	ldr	r3, [r2, #8]
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <HAL_ADC_Start_DMA+0xa8>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	2104      	movs	r1, #4
 8001d16:	430b      	orrs	r3, r1
 8001d18:	6093      	str	r3, [r2, #8]
}
 8001d1a:	e000      	b.n	8001d1e <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001d1c:	2002      	movs	r0, #2
}
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001d20:	2002      	movs	r0, #2
 8001d22:	e7fc      	b.n	8001d1e <HAL_ADC_Start_DMA+0xa2>
 8001d24:	7fffffe8 	.word	0x7fffffe8
 8001d28:	fffff0fe 	.word	0xfffff0fe
 8001d2c:	080018b5 	.word	0x080018b5
 8001d30:	0800188d 	.word	0x0800188d
 8001d34:	08001899 	.word	0x08001899

08001d38 <ADC_Disable>:
{
 8001d38:	b570      	push	{r4, r5, r6, lr}
 8001d3a:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001d3c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	2102      	movs	r1, #2
 8001d42:	0008      	movs	r0, r1
 8001d44:	4010      	ands	r0, r2
 8001d46:	4211      	tst	r1, r2
 8001d48:	d000      	beq.n	8001d4c <ADC_Disable+0x14>
 8001d4a:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	07d2      	lsls	r2, r2, #31
 8001d50:	d531      	bpl.n	8001db6 <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d131      	bne.n	8001dba <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	2205      	movs	r2, #5
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	2a01      	cmp	r2, #1
 8001d5e:	d009      	beq.n	8001d74 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d62:	2210      	movs	r2, #16
 8001d64:	4313      	orrs	r3, r2
 8001d66:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d6a:	3a0f      	subs	r2, #15
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
 8001d72:	e021      	b.n	8001db8 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4912      	ldr	r1, [pc, #72]	; (8001dc0 <ADC_Disable+0x88>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	2203      	movs	r2, #3
 8001d84:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001d86:	f7ff fc33 	bl	80015f0 <HAL_GetTick>
 8001d8a:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	07db      	lsls	r3, r3, #31
 8001d92:	d50e      	bpl.n	8001db2 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d94:	f7ff fc2c 	bl	80015f0 <HAL_GetTick>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9f6      	bls.n	8001d8c <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001da0:	2210      	movs	r2, #16
 8001da2:	4313      	orrs	r3, r2
 8001da4:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001da8:	3a0f      	subs	r2, #15
 8001daa:	4313      	orrs	r3, r2
 8001dac:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8001dae:	2001      	movs	r0, #1
 8001db0:	e002      	b.n	8001db8 <ADC_Disable+0x80>
  return HAL_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	e000      	b.n	8001db8 <ADC_Disable+0x80>
 8001db6:	2000      	movs	r0, #0
}
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e7fc      	b.n	8001db8 <ADC_Disable+0x80>
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	7fffffe8 	.word	0x7fffffe8

08001dc4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	3354      	adds	r3, #84	; 0x54
 8001dd0:	5cc3      	ldrb	r3, [r0, r3]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d100      	bne.n	8001dd8 <HAL_ADCEx_Calibration_Start+0x14>
 8001dd6:	e086      	b.n	8001ee6 <HAL_ADCEx_Calibration_Start+0x122>
 8001dd8:	2601      	movs	r6, #1
 8001dda:	2354      	movs	r3, #84	; 0x54
 8001ddc:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001dde:	f7ff ffab 	bl	8001d38 <ADC_Disable>
 8001de2:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001de4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	0031      	movs	r1, r6
 8001dea:	4011      	ands	r1, r2
 8001dec:	4216      	tst	r6, r2
 8001dee:	d009      	beq.n	8001e04 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001df2:	2210      	movs	r2, #16
 8001df4:	4313      	orrs	r3, r2
 8001df6:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df8:	2354      	movs	r3, #84	; 0x54
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001dfe:	0028      	movs	r0, r5
 8001e00:	b003      	add	sp, #12
 8001e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001e04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e06:	4839      	ldr	r0, [pc, #228]	; (8001eec <HAL_ADCEx_Calibration_Start+0x128>)
 8001e08:	4002      	ands	r2, r0
 8001e0a:	3006      	adds	r0, #6
 8001e0c:	30ff      	adds	r0, #255	; 0xff
 8001e0e:	4302      	orrs	r2, r0
 8001e10:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e12:	68de      	ldr	r6, [r3, #12]
 8001e14:	3001      	adds	r0, #1
 8001e16:	4006      	ands	r6, r0
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4382      	bics	r2, r0
 8001e1c:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001e1e:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e20:	e005      	b.n	8001e2e <HAL_ADCEx_Calibration_Start+0x6a>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001e22:	22b4      	movs	r2, #180	; 0xb4
 8001e24:	589a      	ldr	r2, [r3, r2]
 8001e26:	237f      	movs	r3, #127	; 0x7f
 8001e28:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001e2a:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001e2c:	3101      	adds	r1, #1
 8001e2e:	2907      	cmp	r1, #7
 8001e30:	d81e      	bhi.n	8001e70 <HAL_ADCEx_Calibration_Start+0xac>
      LL_ADC_StartCalibration(hadc->Instance);
 8001e32:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <HAL_ADCEx_Calibration_Start+0x12c>)
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001e42:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	daeb      	bge.n	8001e22 <HAL_ADCEx_Calibration_Start+0x5e>
        wait_loop_index++;
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001e50:	9a01      	ldr	r2, [sp, #4]
 8001e52:	23ae      	movs	r3, #174	; 0xae
 8001e54:	029b      	lsls	r3, r3, #10
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3f3      	bcc.n	8001e42 <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e5c:	2212      	movs	r2, #18
 8001e5e:	4393      	bics	r3, r2
 8001e60:	3a02      	subs	r2, #2
 8001e62:	4313      	orrs	r3, r2
 8001e64:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8001e66:	2354      	movs	r3, #84	; 0x54
 8001e68:	2200      	movs	r2, #0
 8001e6a:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001e6c:	2501      	movs	r5, #1
 8001e6e:	e7c6      	b.n	8001dfe <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 8001e70:	f7fe f95e 	bl	8000130 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 8001e74:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4f1d      	ldr	r7, [pc, #116]	; (8001ef0 <HAL_ADCEx_Calibration_Start+0x12c>)
 8001e7a:	403a      	ands	r2, r7
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CALFACT,
 8001e82:	23b4      	movs	r3, #180	; 0xb4
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	58d2      	ldr	r2, [r2, r3]
 8001e88:	317e      	adds	r1, #126	; 0x7e
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	4310      	orrs	r0, r2
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	50d0      	str	r0, [r2, r3]
    LL_ADC_Disable(hadc->Instance);
 8001e92:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001e94:	6893      	ldr	r3, [r2, #8]
 8001e96:	403b      	ands	r3, r7
 8001e98:	397d      	subs	r1, #125	; 0x7d
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001e9e:	f7ff fba7 	bl	80015f0 <HAL_GetTick>
 8001ea2:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ea4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	07d2      	lsls	r2, r2, #31
 8001eaa:	d409      	bmi.n	8001ec0 <HAL_ADCEx_Calibration_Start+0xfc>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4316      	orrs	r6, r2
 8001eb0:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001eb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	3a02      	subs	r2, #2
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	65a3      	str	r3, [r4, #88]	; 0x58
 8001ebe:	e79b      	b.n	8001df8 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ec0:	f7ff fb96 	bl	80015f0 <HAL_GetTick>
 8001ec4:	1bc0      	subs	r0, r0, r7
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d9ec      	bls.n	8001ea4 <HAL_ADCEx_Calibration_Start+0xe0>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d5e8      	bpl.n	8001ea4 <HAL_ADCEx_Calibration_Start+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001edc:	3a0f      	subs	r2, #15
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001ee2:	2501      	movs	r5, #1
 8001ee4:	e78b      	b.n	8001dfe <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 8001ee6:	2502      	movs	r5, #2
 8001ee8:	e789      	b.n	8001dfe <HAL_ADCEx_Calibration_Start+0x3a>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	fffffefd 	.word	0xfffffefd
 8001ef0:	7fffffe8 	.word	0x7fffffe8

08001ef4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	db11      	blt.n	8001f1e <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001efa:	0883      	lsrs	r3, r0, #2
 8001efc:	4e13      	ldr	r6, [pc, #76]	; (8001f4c <HAL_NVIC_SetPriority+0x58>)
 8001efe:	33c0      	adds	r3, #192	; 0xc0
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	599d      	ldr	r5, [r3, r6]
 8001f04:	2403      	movs	r4, #3
 8001f06:	4020      	ands	r0, r4
 8001f08:	00c0      	lsls	r0, r0, #3
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	0014      	movs	r4, r2
 8001f0e:	4084      	lsls	r4, r0
 8001f10:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f12:	0189      	lsls	r1, r1, #6
 8001f14:	400a      	ands	r2, r1
 8001f16:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f18:	432a      	orrs	r2, r5
 8001f1a:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1e:	230f      	movs	r3, #15
 8001f20:	4003      	ands	r3, r0
 8001f22:	3b08      	subs	r3, #8
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3306      	adds	r3, #6
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_NVIC_SetPriority+0x5c>)
 8001f2c:	4694      	mov	ip, r2
 8001f2e:	4463      	add	r3, ip
 8001f30:	685c      	ldr	r4, [r3, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	4010      	ands	r0, r2
 8001f36:	00c0      	lsls	r0, r0, #3
 8001f38:	32fc      	adds	r2, #252	; 0xfc
 8001f3a:	0015      	movs	r5, r2
 8001f3c:	4085      	lsls	r5, r0
 8001f3e:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f40:	0189      	lsls	r1, r1, #6
 8001f42:	400a      	ands	r2, r1
 8001f44:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f46:	4322      	orrs	r2, r4
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e7e7      	b.n	8001f1c <HAL_NVIC_SetPriority+0x28>
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f54:	2800      	cmp	r0, #0
 8001f56:	db05      	blt.n	8001f64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f58:	231f      	movs	r3, #31
 8001f5a:	4018      	ands	r0, r3
 8001f5c:	3b1e      	subs	r3, #30
 8001f5e:	4083      	lsls	r3, r0
 8001f60:	4a01      	ldr	r2, [pc, #4]	; (8001f68 <HAL_NVIC_EnableIRQ+0x14>)
 8001f62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f64:	4770      	bx	lr
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	3801      	subs	r0, #1
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	045b      	lsls	r3, r3, #17
 8001f72:	4298      	cmp	r0, r3
 8001f74:	d20f      	bcs.n	8001f96 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_SYSTICK_Config+0x30>)
 8001f78:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <HAL_SYSTICK_Config+0x34>)
 8001f7c:	6a03      	ldr	r3, [r0, #32]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	21c0      	movs	r1, #192	; 0xc0
 8001f84:	0609      	lsls	r1, r1, #24
 8001f86:	430b      	orrs	r3, r1
 8001f88:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	3307      	adds	r3, #7
 8001f90:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f92:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001f94:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8001f98:	e7fc      	b.n	8001f94 <HAL_SYSTICK_Config+0x28>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	e000e010 	.word	0xe000e010
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fa6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001fa8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001faa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001fac:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d002      	beq.n	8001fb8 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001fb4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001fb6:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001fb8:	4f0b      	ldr	r7, [pc, #44]	; (8001fe8 <DMA_SetConfig+0x44>)
 8001fba:	687c      	ldr	r4, [r7, #4]
 8001fbc:	261c      	movs	r6, #28
 8001fbe:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001fc0:	402e      	ands	r6, r5
 8001fc2:	2501      	movs	r5, #1
 8001fc4:	40b5      	lsls	r5, r6
 8001fc6:	432c      	orrs	r4, r5
 8001fc8:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fca:	6804      	ldr	r4, [r0, #0]
 8001fcc:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fce:	6883      	ldr	r3, [r0, #8]
 8001fd0:	2b10      	cmp	r3, #16
 8001fd2:	d004      	beq.n	8001fde <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001fd4:	6803      	ldr	r3, [r0, #0]
 8001fd6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001fd8:	6803      	ldr	r3, [r0, #0]
 8001fda:	60da      	str	r2, [r3, #12]
  }
}
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001fe2:	6803      	ldr	r3, [r0, #0]
 8001fe4:	60d9      	str	r1, [r3, #12]
 8001fe6:	e7f9      	b.n	8001fdc <DMA_SetConfig+0x38>
 8001fe8:	40020000 	.word	0x40020000

08001fec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ff0:	20ff      	movs	r0, #255	; 0xff
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	4018      	ands	r0, r3
 8001ff6:	3808      	subs	r0, #8
 8001ff8:	2114      	movs	r1, #20
 8001ffa:	f7fe f899 	bl	8000130 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002000:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002004:	4694      	mov	ip, r2
 8002006:	4463      	add	r3, ip
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	6463      	str	r3, [r4, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800200e:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002010:	231c      	movs	r3, #28
 8002012:	4018      	ands	r0, r3
 8002014:	3b1b      	subs	r3, #27
 8002016:	4083      	lsls	r3, r0
 8002018:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800201a:	bd10      	pop	{r4, pc}
 800201c:	10008200 	.word	0x10008200
 8002020:	40020880 	.word	0x40020880

08002024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002024:	23ff      	movs	r3, #255	; 0xff
 8002026:	6842      	ldr	r2, [r0, #4]
 8002028:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800202c:	189a      	adds	r2, r3, r2
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	6502      	str	r2, [r0, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002034:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002036:	3b01      	subs	r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	401a      	ands	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	4093      	lsls	r3, r2
 8002040:	6583      	str	r3, [r0, #88]	; 0x58
}
 8002042:	4770      	bx	lr
 8002044:	1000823f 	.word	0x1000823f
 8002048:	40020940 	.word	0x40020940

0800204c <HAL_DMA_Init>:
{
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8002050:	d04d      	beq.n	80020ee <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002052:	6805      	ldr	r5, [r0, #0]
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_DMA_Init+0xa8>)
 8002056:	18e8      	adds	r0, r5, r3
 8002058:	2114      	movs	r1, #20
 800205a:	f7fe f869 	bl	8000130 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800205e:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002060:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002062:	2325      	movs	r3, #37	; 0x25
 8002064:	2202      	movs	r2, #2
 8002066:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <HAL_DMA_Init+0xac>)
 800206c:	4013      	ands	r3, r2
 800206e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002070:	6821      	ldr	r1, [r4, #0]
 8002072:	680a      	ldr	r2, [r1, #0]
 8002074:	68a3      	ldr	r3, [r4, #8]
 8002076:	68e0      	ldr	r0, [r4, #12]
 8002078:	4303      	orrs	r3, r0
 800207a:	6920      	ldr	r0, [r4, #16]
 800207c:	4303      	orrs	r3, r0
 800207e:	6960      	ldr	r0, [r4, #20]
 8002080:	4303      	orrs	r3, r0
 8002082:	69a0      	ldr	r0, [r4, #24]
 8002084:	4303      	orrs	r3, r0
 8002086:	69e0      	ldr	r0, [r4, #28]
 8002088:	4303      	orrs	r3, r0
 800208a:	6a20      	ldr	r0, [r4, #32]
 800208c:	4303      	orrs	r3, r0
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002092:	0020      	movs	r0, r4
 8002094:	f7ff ffaa 	bl	8001fec <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	68a2      	ldr	r2, [r4, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d018      	beq.n	80020d4 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80020a4:	23ff      	movs	r3, #255	; 0xff
 80020a6:	6861      	ldr	r1, [r4, #4]
 80020a8:	400b      	ands	r3, r1
 80020aa:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80020ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80020b0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d90f      	bls.n	80020da <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80020be:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80020c0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80020c6:	2225      	movs	r2, #37	; 0x25
 80020c8:	2101      	movs	r1, #1
 80020ca:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80020cc:	3a01      	subs	r2, #1
 80020ce:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80020d0:	2000      	movs	r0, #0
}
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020d4:	2300      	movs	r3, #0
 80020d6:	6063      	str	r3, [r4, #4]
 80020d8:	e7e3      	b.n	80020a2 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020da:	0020      	movs	r0, r4
 80020dc:	f7ff ffa2 	bl	8002024 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80020e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020e8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	e7e9      	b.n	80020c2 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
 80020f0:	e7ef      	b.n	80020d2 <HAL_DMA_Init+0x86>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	bffdfff8 	.word	0xbffdfff8
 80020f8:	ffff800f 	.word	0xffff800f

080020fc <HAL_DMA_Start_IT>:
{
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002100:	2024      	movs	r0, #36	; 0x24
 8002102:	5c20      	ldrb	r0, [r4, r0]
 8002104:	2801      	cmp	r0, #1
 8002106:	d046      	beq.n	8002196 <HAL_DMA_Start_IT+0x9a>
 8002108:	2024      	movs	r0, #36	; 0x24
 800210a:	2501      	movs	r5, #1
 800210c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 800210e:	3001      	adds	r0, #1
 8002110:	5c20      	ldrb	r0, [r4, r0]
 8002112:	2801      	cmp	r0, #1
 8002114:	d007      	beq.n	8002126 <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8002116:	2324      	movs	r3, #36	; 0x24
 8002118:	2200      	movs	r2, #0
 800211a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 800211c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 800211e:	2324      	movs	r3, #36	; 0x24
 8002120:	2200      	movs	r2, #0
 8002122:	54e2      	strb	r2, [r4, r3]
}
 8002124:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002126:	3024      	adds	r0, #36	; 0x24
 8002128:	3501      	adds	r5, #1
 800212a:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800212c:	2000      	movs	r0, #0
 800212e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002130:	6825      	ldr	r5, [r4, #0]
 8002132:	6828      	ldr	r0, [r5, #0]
 8002134:	2601      	movs	r6, #1
 8002136:	43b0      	bics	r0, r6
 8002138:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800213a:	0020      	movs	r0, r4
 800213c:	f7ff ff32 	bl	8001fa4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01c      	beq.n	8002180 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	6822      	ldr	r2, [r4, #0]
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	210e      	movs	r1, #14
 800214c:	430b      	orrs	r3, r1
 800214e:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002150:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	03d2      	lsls	r2, r2, #15
 8002156:	d504      	bpl.n	8002162 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002158:	6819      	ldr	r1, [r3, #0]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	0052      	lsls	r2, r2, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002162:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	0052      	lsls	r2, r2, #1
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	2101      	movs	r1, #1
 8002178:	430b      	orrs	r3, r1
 800217a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2000      	movs	r0, #0
 800217e:	e7ce      	b.n	800211e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	2104      	movs	r1, #4
 8002186:	438b      	bics	r3, r1
 8002188:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	3106      	adds	r1, #6
 8002190:	430b      	orrs	r3, r1
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e7dc      	b.n	8002150 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8002196:	2002      	movs	r0, #2
 8002198:	e7c4      	b.n	8002124 <HAL_DMA_Start_IT+0x28>
	...

0800219c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	46d6      	mov	lr, sl
 80021a0:	464f      	mov	r7, r9
 80021a2:	4646      	mov	r6, r8
 80021a4:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80021a6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021a8:	e03b      	b.n	8002222 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021aa:	2504      	movs	r5, #4
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x14>
 80021ae:	2500      	movs	r5, #0
 80021b0:	40a5      	lsls	r5, r4
 80021b2:	002c      	movs	r4, r5
 80021b4:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 80021b6:	4d63      	ldr	r5, [pc, #396]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 80021b8:	3218      	adds	r2, #24
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 80021c2:	464a      	mov	r2, r9
 80021c4:	43d2      	mvns	r2, r2
 80021c6:	0025      	movs	r5, r4
 80021c8:	464e      	mov	r6, r9
 80021ca:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	684e      	ldr	r6, [r1, #4]
 80021ce:	03f6      	lsls	r6, r6, #15
 80021d0:	d502      	bpl.n	80021d8 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 80021d2:	464d      	mov	r5, r9
 80021d4:	432c      	orrs	r4, r5
 80021d6:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 80021d8:	4c5a      	ldr	r4, [pc, #360]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 80021da:	2780      	movs	r7, #128	; 0x80
 80021dc:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 80021de:	2584      	movs	r5, #132	; 0x84
 80021e0:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80021e2:	0025      	movs	r5, r4
 80021e4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e6:	684e      	ldr	r6, [r1, #4]
 80021e8:	03b6      	lsls	r6, r6, #14
 80021ea:	d502      	bpl.n	80021f2 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80021ec:	464d      	mov	r5, r9
 80021ee:	432c      	orrs	r4, r5
 80021f0:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80021f2:	4c54      	ldr	r4, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 80021f4:	2784      	movs	r7, #132	; 0x84
 80021f6:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80021f8:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80021fa:	0025      	movs	r5, r4
 80021fc:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fe:	684e      	ldr	r6, [r1, #4]
 8002200:	02f6      	lsls	r6, r6, #11
 8002202:	d502      	bpl.n	800220a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002204:	464d      	mov	r5, r9
 8002206:	432c      	orrs	r4, r5
 8002208:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 800220a:	4c4e      	ldr	r4, [pc, #312]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 800220c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 800220e:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002210:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002212:	684d      	ldr	r5, [r1, #4]
 8002214:	02ad      	lsls	r5, r5, #10
 8002216:	d501      	bpl.n	800221c <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002218:	464a      	mov	r2, r9
 800221a:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 800221c:	4c49      	ldr	r4, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 800221e:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002220:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002222:	680c      	ldr	r4, [r1, #0]
 8002224:	0022      	movs	r2, r4
 8002226:	40da      	lsrs	r2, r3
 8002228:	d100      	bne.n	800222c <HAL_GPIO_Init+0x90>
 800222a:	e086      	b.n	800233a <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800222c:	2201      	movs	r2, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	0026      	movs	r6, r4
 8002232:	4016      	ands	r6, r2
 8002234:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8002236:	4214      	tst	r4, r2
 8002238:	d0f2      	beq.n	8002220 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800223a:	684c      	ldr	r4, [r1, #4]
 800223c:	2c02      	cmp	r4, #2
 800223e:	d001      	beq.n	8002244 <HAL_GPIO_Init+0xa8>
 8002240:	2c12      	cmp	r4, #18
 8002242:	d118      	bne.n	8002276 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002244:	08dd      	lsrs	r5, r3, #3
 8002246:	3508      	adds	r5, #8
 8002248:	00ad      	lsls	r5, r5, #2
 800224a:	582c      	ldr	r4, [r5, r0]
 800224c:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800224e:	2707      	movs	r7, #7
 8002250:	401f      	ands	r7, r3
 8002252:	00bf      	lsls	r7, r7, #2
 8002254:	240f      	movs	r4, #15
 8002256:	46a2      	mov	sl, r4
 8002258:	0026      	movs	r6, r4
 800225a:	40be      	lsls	r6, r7
 800225c:	46b0      	mov	r8, r6
 800225e:	4666      	mov	r6, ip
 8002260:	4644      	mov	r4, r8
 8002262:	43a6      	bics	r6, r4
 8002264:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002266:	690c      	ldr	r4, [r1, #16]
 8002268:	4656      	mov	r6, sl
 800226a:	4026      	ands	r6, r4
 800226c:	0034      	movs	r4, r6
 800226e:	40bc      	lsls	r4, r7
 8002270:	4666      	mov	r6, ip
 8002272:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002274:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8002276:	6804      	ldr	r4, [r0, #0]
 8002278:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800227a:	005d      	lsls	r5, r3, #1
 800227c:	2403      	movs	r4, #3
 800227e:	46a2      	mov	sl, r4
 8002280:	0027      	movs	r7, r4
 8002282:	40af      	lsls	r7, r5
 8002284:	46b8      	mov	r8, r7
 8002286:	43ff      	mvns	r7, r7
 8002288:	4666      	mov	r6, ip
 800228a:	4644      	mov	r4, r8
 800228c:	43a6      	bics	r6, r4
 800228e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	684c      	ldr	r4, [r1, #4]
 8002292:	4656      	mov	r6, sl
 8002294:	4026      	ands	r6, r4
 8002296:	0034      	movs	r4, r6
 8002298:	40ac      	lsls	r4, r5
 800229a:	4666      	mov	r6, ip
 800229c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 800229e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a0:	684c      	ldr	r4, [r1, #4]
 80022a2:	1e66      	subs	r6, r4, #1
 80022a4:	2e01      	cmp	r6, #1
 80022a6:	d903      	bls.n	80022b0 <HAL_GPIO_Init+0x114>
 80022a8:	2c11      	cmp	r4, #17
 80022aa:	d001      	beq.n	80022b0 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	2c12      	cmp	r4, #18
 80022ae:	d112      	bne.n	80022d6 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 80022b0:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022b2:	403c      	ands	r4, r7
 80022b4:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80022b6:	68cc      	ldr	r4, [r1, #12]
 80022b8:	40ac      	lsls	r4, r5
 80022ba:	4666      	mov	r6, ip
 80022bc:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 80022be:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 80022c0:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022c2:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c4:	684a      	ldr	r2, [r1, #4]
 80022c6:	0912      	lsrs	r2, r2, #4
 80022c8:	4694      	mov	ip, r2
 80022ca:	2201      	movs	r2, #1
 80022cc:	4666      	mov	r6, ip
 80022ce:	4032      	ands	r2, r6
 80022d0:	409a      	lsls	r2, r3
 80022d2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 80022d4:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80022d6:	684a      	ldr	r2, [r1, #4]
 80022d8:	2a03      	cmp	r2, #3
 80022da:	d005      	beq.n	80022e8 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 80022dc:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022de:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80022e0:	688f      	ldr	r7, [r1, #8]
 80022e2:	40af      	lsls	r7, r5
 80022e4:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 80022e6:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022e8:	684a      	ldr	r2, [r1, #4]
 80022ea:	00d2      	lsls	r2, r2, #3
 80022ec:	d598      	bpl.n	8002220 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 80022ee:	089a      	lsrs	r2, r3, #2
 80022f0:	0014      	movs	r4, r2
 80022f2:	3418      	adds	r4, #24
 80022f4:	00a4      	lsls	r4, r4, #2
 80022f6:	4d13      	ldr	r5, [pc, #76]	; (8002344 <HAL_GPIO_Init+0x1a8>)
 80022f8:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80022fa:	2503      	movs	r5, #3
 80022fc:	401d      	ands	r5, r3
 80022fe:	00ec      	lsls	r4, r5, #3
 8002300:	250f      	movs	r5, #15
 8002302:	40a5      	lsls	r5, r4
 8002304:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002306:	25a0      	movs	r5, #160	; 0xa0
 8002308:	05ed      	lsls	r5, r5, #23
 800230a:	42a8      	cmp	r0, r5
 800230c:	d100      	bne.n	8002310 <HAL_GPIO_Init+0x174>
 800230e:	e74e      	b.n	80021ae <HAL_GPIO_Init+0x12>
 8002310:	4d0d      	ldr	r5, [pc, #52]	; (8002348 <HAL_GPIO_Init+0x1ac>)
 8002312:	42a8      	cmp	r0, r5
 8002314:	d00b      	beq.n	800232e <HAL_GPIO_Init+0x192>
 8002316:	4d0d      	ldr	r5, [pc, #52]	; (800234c <HAL_GPIO_Init+0x1b0>)
 8002318:	42a8      	cmp	r0, r5
 800231a:	d00a      	beq.n	8002332 <HAL_GPIO_Init+0x196>
 800231c:	4d0c      	ldr	r5, [pc, #48]	; (8002350 <HAL_GPIO_Init+0x1b4>)
 800231e:	42a8      	cmp	r0, r5
 8002320:	d009      	beq.n	8002336 <HAL_GPIO_Init+0x19a>
 8002322:	4d0c      	ldr	r5, [pc, #48]	; (8002354 <HAL_GPIO_Init+0x1b8>)
 8002324:	42a8      	cmp	r0, r5
 8002326:	d100      	bne.n	800232a <HAL_GPIO_Init+0x18e>
 8002328:	e73f      	b.n	80021aa <HAL_GPIO_Init+0xe>
 800232a:	2505      	movs	r5, #5
 800232c:	e740      	b.n	80021b0 <HAL_GPIO_Init+0x14>
 800232e:	2501      	movs	r5, #1
 8002330:	e73e      	b.n	80021b0 <HAL_GPIO_Init+0x14>
 8002332:	2502      	movs	r5, #2
 8002334:	e73c      	b.n	80021b0 <HAL_GPIO_Init+0x14>
 8002336:	2503      	movs	r5, #3
 8002338:	e73a      	b.n	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 800233a:	bce0      	pop	{r5, r6, r7}
 800233c:	46ba      	mov	sl, r7
 800233e:	46b1      	mov	r9, r6
 8002340:	46a8      	mov	r8, r5
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	40021800 	.word	0x40021800
 8002348:	50000400 	.word	0x50000400
 800234c:	50000800 	.word	0x50000800
 8002350:	50000c00 	.word	0x50000c00
 8002354:	50001400 	.word	0x50001400

08002358 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_RCC_GetSysClockFreq+0x54>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2238      	movs	r2, #56	; 0x38
 800235e:	421a      	tst	r2, r3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_GetSysClockFreq+0x54>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	0ad2      	lsrs	r2, r2, #11
 8002368:	2307      	movs	r3, #7
 800236a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800236c:	4810      	ldr	r0, [pc, #64]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x58>)
 800236e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002370:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_GetSysClockFreq+0x54>)
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	2338      	movs	r3, #56	; 0x38
 8002378:	4013      	ands	r3, r2
 800237a:	2b08      	cmp	r3, #8
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_GetSysClockFreq+0x54>)
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	2338      	movs	r3, #56	; 0x38
 8002384:	4013      	ands	r3, r2
 8002386:	2b20      	cmp	r3, #32
 8002388:	d00c      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_GetSysClockFreq+0x54>)
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	2338      	movs	r3, #56	; 0x38
 8002390:	4013      	ands	r3, r2
 8002392:	2b18      	cmp	r3, #24
 8002394:	d001      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8002396:	2000      	movs	r0, #0
  return sysclockfreq;
 8002398:	e7ea      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 800239a:	20fa      	movs	r0, #250	; 0xfa
 800239c:	01c0      	lsls	r0, r0, #7
 800239e:	e7e7      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 80023a0:	4804      	ldr	r0, [pc, #16]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80023a2:	e7e5      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 80023a4:	2080      	movs	r0, #128	; 0x80
 80023a6:	0200      	lsls	r0, r0, #8
 80023a8:	e7e2      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x18>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40021000 	.word	0x40021000
 80023b0:	02dc6c00 	.word	0x02dc6c00
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80023b8:	4b01      	ldr	r3, [pc, #4]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80023ba:	6818      	ldr	r0, [r3, #0]
}
 80023bc:	4770      	bx	lr
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80023c6:	f7ff fff7 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	0b12      	lsrs	r2, r2, #12
 80023d0:	2307      	movs	r3, #7
 80023d2:	4013      	ands	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d8:	589a      	ldr	r2, [r3, r2]
 80023da:	231f      	movs	r3, #31
 80023dc:	4013      	ands	r3, r2
 80023de:	40d8      	lsrs	r0, r3
}
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40021000 	.word	0x40021000
 80023e8:	0800492c 	.word	0x0800492c

080023ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80023f0:	6802      	ldr	r2, [r0, #0]
 80023f2:	68d3      	ldr	r3, [r2, #12]
 80023f4:	21a0      	movs	r1, #160	; 0xa0
 80023f6:	438b      	bics	r3, r1
 80023f8:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80023fa:	f7ff f8f9 	bl	80015f0 <HAL_GetTick>
 80023fe:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	069b      	lsls	r3, r3, #26
 8002406:	d408      	bmi.n	800241a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002408:	f7ff f8f2 	bl	80015f0 <HAL_GetTick>
 800240c:	1b40      	subs	r0, r0, r5
 800240e:	23fa      	movs	r3, #250	; 0xfa
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4298      	cmp	r0, r3
 8002414:	d9f4      	bls.n	8002400 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002416:	2003      	movs	r0, #3
 8002418:	e000      	b.n	800241c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800241a:	2000      	movs	r0, #0
}
 800241c:	bd70      	pop	{r4, r5, r6, pc}

0800241e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800241e:	b570      	push	{r4, r5, r6, lr}
 8002420:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002422:	6803      	ldr	r3, [r0, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	0652      	lsls	r2, r2, #25
 8002428:	d502      	bpl.n	8002430 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800242c:	0028      	movs	r0, r5
 800242e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002438:	f7ff f8da 	bl	80015f0 <HAL_GetTick>
 800243c:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2500      	movs	r5, #0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	065b      	lsls	r3, r3, #25
 8002446:	d4f1      	bmi.n	800242c <RTC_EnterInitMode+0xe>
 8002448:	2d03      	cmp	r5, #3
 800244a:	d0ef      	beq.n	800242c <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800244c:	f7ff f8d0 	bl	80015f0 <HAL_GetTick>
 8002450:	1b80      	subs	r0, r0, r6
 8002452:	22fa      	movs	r2, #250	; 0xfa
 8002454:	0092      	lsls	r2, r2, #2
 8002456:	4290      	cmp	r0, r2
 8002458:	d9f2      	bls.n	8002440 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800245a:	2325      	movs	r3, #37	; 0x25
 800245c:	2203      	movs	r2, #3
 800245e:	54e2      	strb	r2, [r4, r3]
        status = HAL_TIMEOUT;
 8002460:	2503      	movs	r5, #3
 8002462:	e7ed      	b.n	8002440 <RTC_EnterInitMode+0x22>

08002464 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002464:	b510      	push	{r4, lr}
 8002466:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <RTC_ExitInitMode+0x4c>)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	438a      	bics	r2, r1
 8002470:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	d408      	bmi.n	800248a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002478:	f7ff ffb8 	bl	80023ec <HAL_RTC_WaitForSynchro>
 800247c:	2800      	cmp	r0, #0
 800247e:	d016      	beq.n	80024ae <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002480:	2325      	movs	r3, #37	; 0x25
 8002482:	2203      	movs	r2, #3
 8002484:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8002486:	2003      	movs	r0, #3
 8002488:	e011      	b.n	80024ae <RTC_ExitInitMode+0x4a>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <RTC_ExitInitMode+0x4c>)
 800248c:	6993      	ldr	r3, [r2, #24]
 800248e:	2120      	movs	r1, #32
 8002490:	438b      	bics	r3, r1
 8002492:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002494:	f7ff ffaa 	bl	80023ec <HAL_RTC_WaitForSynchro>
 8002498:	2800      	cmp	r0, #0
 800249a:	d003      	beq.n	80024a4 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800249c:	2325      	movs	r3, #37	; 0x25
 800249e:	2203      	movs	r2, #3
 80024a0:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 80024a2:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024a4:	4a02      	ldr	r2, [pc, #8]	; (80024b0 <RTC_ExitInitMode+0x4c>)
 80024a6:	6993      	ldr	r3, [r2, #24]
 80024a8:	2120      	movs	r1, #32
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80024ae:	bd10      	pop	{r4, pc}
 80024b0:	40002800 	.word	0x40002800

080024b4 <HAL_RTC_Init>:
{
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 80024b8:	d04b      	beq.n	8002552 <HAL_RTC_Init+0x9e>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80024ba:	2325      	movs	r3, #37	; 0x25
 80024bc:	5cc3      	ldrb	r3, [r0, r3]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RTC_Init+0x3c>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80024c2:	2325      	movs	r3, #37	; 0x25
 80024c4:	2202      	movs	r2, #2
 80024c6:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	32c8      	adds	r2, #200	; 0xc8
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	3a77      	subs	r2, #119	; 0x77
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80024d4:	0020      	movs	r0, r4
 80024d6:	f7ff ffa2 	bl	800241e <RTC_EnterInitMode>
    if (status == HAL_OK)
 80024da:	2800      	cmp	r0, #0
 80024dc:	d00e      	beq.n	80024fc <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d102      	bne.n	80024ee <HAL_RTC_Init+0x3a>
      hrtc->State = HAL_RTC_STATE_READY;
 80024e8:	2325      	movs	r3, #37	; 0x25
 80024ea:	3afe      	subs	r2, #254	; 0xfe
 80024ec:	54e2      	strb	r2, [r4, r3]
}
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80024f0:	3324      	adds	r3, #36	; 0x24
 80024f2:	2200      	movs	r2, #0
 80024f4:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 80024f6:	f7fe fec1 	bl	800127c <HAL_RTC_MspInit>
 80024fa:	e7e2      	b.n	80024c2 <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	6993      	ldr	r3, [r2, #24]
 8002500:	4915      	ldr	r1, [pc, #84]	; (8002558 <HAL_RTC_Init+0xa4>)
 8002502:	400b      	ands	r3, r1
 8002504:	6193      	str	r3, [r2, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002506:	6821      	ldr	r1, [r4, #0]
 8002508:	698a      	ldr	r2, [r1, #24]
 800250a:	6863      	ldr	r3, [r4, #4]
 800250c:	6920      	ldr	r0, [r4, #16]
 800250e:	4303      	orrs	r3, r0
 8002510:	69a0      	ldr	r0, [r4, #24]
 8002512:	4303      	orrs	r3, r0
 8002514:	4313      	orrs	r3, r2
 8002516:	618b      	str	r3, [r1, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	68e2      	ldr	r2, [r4, #12]
 800251c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800251e:	6821      	ldr	r1, [r4, #0]
 8002520:	690b      	ldr	r3, [r1, #16]
 8002522:	68a2      	ldr	r2, [r4, #8]
 8002524:	0412      	lsls	r2, r2, #16
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 800252a:	0020      	movs	r0, r4
 800252c:	f7ff ff9a 	bl	8002464 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002530:	2800      	cmp	r0, #0
 8002532:	d1d4      	bne.n	80024de <HAL_RTC_Init+0x2a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	6993      	ldr	r3, [r2, #24]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	08db      	lsrs	r3, r3, #3
 800253c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	698a      	ldr	r2, [r1, #24]
 8002542:	6a23      	ldr	r3, [r4, #32]
 8002544:	69e5      	ldr	r5, [r4, #28]
 8002546:	432b      	orrs	r3, r5
 8002548:	6965      	ldr	r5, [r4, #20]
 800254a:	432b      	orrs	r3, r5
 800254c:	4313      	orrs	r3, r2
 800254e:	618b      	str	r3, [r1, #24]
 8002550:	e7c5      	b.n	80024de <HAL_RTC_Init+0x2a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002552:	2001      	movs	r0, #1
 8002554:	e7cb      	b.n	80024ee <HAL_RTC_Init+0x3a>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	ff8fffbf 	.word	0xff8fffbf

0800255c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800255c:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 800255e:	e002      	b.n	8002566 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002560:	3301      	adds	r3, #1
    Param -= 10U;
 8002562:	380a      	subs	r0, #10
 8002564:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 8002566:	2809      	cmp	r0, #9
 8002568:	d8fa      	bhi.n	8002560 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	b2db      	uxtb	r3, r3
 800256e:	4318      	orrs	r0, r3
}
 8002570:	4770      	bx	lr
	...

08002574 <HAL_RTC_SetTime>:
{
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	0004      	movs	r4, r0
 8002578:	000e      	movs	r6, r1
 800257a:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 800257c:	2324      	movs	r3, #36	; 0x24
 800257e:	5cc3      	ldrb	r3, [r0, r3]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d057      	beq.n	8002634 <HAL_RTC_SetTime+0xc0>
 8002584:	2324      	movs	r3, #36	; 0x24
 8002586:	2201      	movs	r2, #1
 8002588:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800258a:	3301      	adds	r3, #1
 800258c:	3201      	adds	r2, #1
 800258e:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002590:	6803      	ldr	r3, [r0, #0]
 8002592:	32c8      	adds	r2, #200	; 0xc8
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
 8002596:	6803      	ldr	r3, [r0, #0]
 8002598:	3a77      	subs	r2, #119	; 0x77
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800259c:	f7ff ff3f 	bl	800241e <RTC_EnterInitMode>
  if (status == HAL_OK)
 80025a0:	2800      	cmp	r0, #0
 80025a2:	d12a      	bne.n	80025fa <HAL_RTC_SetTime+0x86>
    if (Format == RTC_FORMAT_BIN)
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	d134      	bne.n	8002612 <HAL_RTC_SetTime+0x9e>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	065b      	lsls	r3, r3, #25
 80025ae:	d401      	bmi.n	80025b4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025b4:	7830      	ldrb	r0, [r6, #0]
 80025b6:	f7ff ffd1 	bl	800255c <RTC_ByteToBcd2>
 80025ba:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025bc:	7870      	ldrb	r0, [r6, #1]
 80025be:	f7ff ffcd 	bl	800255c <RTC_ByteToBcd2>
 80025c2:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025c4:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80025c6:	78b0      	ldrb	r0, [r6, #2]
 80025c8:	f7ff ffc8 	bl	800255c <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025cc:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80025ce:	78f3      	ldrb	r3, [r6, #3]
 80025d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025d2:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_RTC_SetTime+0xc4>)
 80025d8:	4010      	ands	r0, r2
 80025da:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80025dc:	6822      	ldr	r2, [r4, #0]
 80025de:	6993      	ldr	r3, [r2, #24]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RTC_SetTime+0xc8>)
 80025e2:	400b      	ands	r3, r1
 80025e4:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80025e6:	6821      	ldr	r1, [r4, #0]
 80025e8:	698b      	ldr	r3, [r1, #24]
 80025ea:	68f2      	ldr	r2, [r6, #12]
 80025ec:	6930      	ldr	r0, [r6, #16]
 80025ee:	4302      	orrs	r2, r0
 80025f0:	4313      	orrs	r3, r2
 80025f2:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 80025f4:	0020      	movs	r0, r4
 80025f6:	f7ff ff35 	bl	8002464 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	22ff      	movs	r2, #255	; 0xff
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8002600:	2800      	cmp	r0, #0
 8002602:	d102      	bne.n	800260a <HAL_RTC_SetTime+0x96>
    hrtc->State = HAL_RTC_STATE_READY;
 8002604:	2325      	movs	r3, #37	; 0x25
 8002606:	3afe      	subs	r2, #254	; 0xfe
 8002608:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800260a:	2324      	movs	r3, #36	; 0x24
 800260c:	2200      	movs	r2, #0
 800260e:	54e2      	strb	r2, [r4, r3]
}
 8002610:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	065b      	lsls	r3, r3, #25
 8002618:	d401      	bmi.n	800261e <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800261e:	7830      	ldrb	r0, [r6, #0]
 8002620:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002622:	7873      	ldrb	r3, [r6, #1]
 8002624:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002626:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002628:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800262a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800262c:	78f3      	ldrb	r3, [r6, #3]
 800262e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002630:	4318      	orrs	r0, r3
 8002632:	e7cf      	b.n	80025d4 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 8002634:	2002      	movs	r0, #2
 8002636:	e7eb      	b.n	8002610 <HAL_RTC_SetTime+0x9c>
 8002638:	007f7f7f 	.word	0x007f7f7f
 800263c:	fffbffff 	.word	0xfffbffff

08002640 <HAL_RTC_SetDate>:
{
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	0004      	movs	r4, r0
 8002644:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002646:	2324      	movs	r3, #36	; 0x24
 8002648:	5cc3      	ldrb	r3, [r0, r3]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d04a      	beq.n	80026e4 <HAL_RTC_SetDate+0xa4>
 800264e:	2324      	movs	r3, #36	; 0x24
 8002650:	2101      	movs	r1, #1
 8002652:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002654:	3301      	adds	r3, #1
 8002656:	3101      	adds	r1, #1
 8002658:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800265a:	2a00      	cmp	r2, #0
 800265c:	d106      	bne.n	800266c <HAL_RTC_SetDate+0x2c>
 800265e:	7873      	ldrb	r3, [r6, #1]
 8002660:	06d9      	lsls	r1, r3, #27
 8002662:	d503      	bpl.n	800266c <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002664:	2110      	movs	r1, #16
 8002666:	438b      	bics	r3, r1
 8002668:	330a      	adds	r3, #10
 800266a:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 800266c:	2a00      	cmp	r2, #0
 800266e:	d126      	bne.n	80026be <HAL_RTC_SetDate+0x7e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002670:	78f0      	ldrb	r0, [r6, #3]
 8002672:	f7ff ff73 	bl	800255c <RTC_ByteToBcd2>
 8002676:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002678:	7870      	ldrb	r0, [r6, #1]
 800267a:	f7ff ff6f 	bl	800255c <RTC_ByteToBcd2>
 800267e:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002680:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002682:	78b0      	ldrb	r0, [r6, #2]
 8002684:	f7ff ff6a 	bl	800255c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002688:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800268a:	7830      	ldrb	r0, [r6, #0]
 800268c:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800268e:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	22ca      	movs	r2, #202	; 0xca
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	3a77      	subs	r2, #119	; 0x77
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800269c:	0020      	movs	r0, r4
 800269e:	f7ff febe 	bl	800241e <RTC_EnterInitMode>
  if (status == HAL_OK)
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d016      	beq.n	80026d4 <HAL_RTC_SetDate+0x94>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	22ff      	movs	r2, #255	; 0xff
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d102      	bne.n	80026b6 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 80026b0:	2325      	movs	r3, #37	; 0x25
 80026b2:	3afe      	subs	r2, #254	; 0xfe
 80026b4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 80026b6:	2324      	movs	r3, #36	; 0x24
 80026b8:	2200      	movs	r2, #0
 80026ba:	54e2      	strb	r2, [r4, r3]
}
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026be:	78f5      	ldrb	r5, [r6, #3]
 80026c0:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026c2:	7870      	ldrb	r0, [r6, #1]
 80026c4:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026c6:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80026c8:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026ca:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80026cc:	7830      	ldrb	r0, [r6, #0]
 80026ce:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026d0:	4305      	orrs	r5, r0
 80026d2:	e7dd      	b.n	8002690 <HAL_RTC_SetDate+0x50>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	4804      	ldr	r0, [pc, #16]	; (80026e8 <HAL_RTC_SetDate+0xa8>)
 80026d8:	4005      	ands	r5, r0
 80026da:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80026dc:	0020      	movs	r0, r4
 80026de:	f7ff fec1 	bl	8002464 <RTC_ExitInitMode>
 80026e2:	e7e0      	b.n	80026a6 <HAL_RTC_SetDate+0x66>
  __HAL_LOCK(hrtc);
 80026e4:	2002      	movs	r0, #2
 80026e6:	e7e9      	b.n	80026bc <HAL_RTC_SetDate+0x7c>
 80026e8:	00ffff3f 	.word	0x00ffff3f

080026ec <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80026ec:	0002      	movs	r2, r0
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80026ee:	0900      	lsrs	r0, r0, #4
 80026f0:	0083      	lsls	r3, r0, #2
 80026f2:	181b      	adds	r3, r3, r0
 80026f4:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80026f6:	200f      	movs	r0, #15
 80026f8:	4010      	ands	r0, r2
 80026fa:	18c0      	adds	r0, r0, r3
 80026fc:	b2c0      	uxtb	r0, r0
}
 80026fe:	4770      	bx	lr

08002700 <HAL_RTC_GetTime>:
{
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800270a:	6803      	ldr	r3, [r0, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	045b      	lsls	r3, r3, #17
 8002710:	0c5b      	lsrs	r3, r3, #17
 8002712:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002714:	6803      	ldr	r3, [r0, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	490e      	ldr	r1, [pc, #56]	; (8002754 <HAL_RTC_GetTime+0x54>)
 800271a:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800271c:	0c19      	lsrs	r1, r3, #16
 800271e:	203f      	movs	r0, #63	; 0x3f
 8002720:	4008      	ands	r0, r1
 8002722:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002724:	0a1e      	lsrs	r6, r3, #8
 8002726:	257f      	movs	r5, #127	; 0x7f
 8002728:	402e      	ands	r6, r5
 800272a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800272c:	401d      	ands	r5, r3
 800272e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002730:	0d9b      	lsrs	r3, r3, #22
 8002732:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002734:	2a00      	cmp	r2, #0
 8002736:	d10a      	bne.n	800274e <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002738:	f7ff ffd8 	bl	80026ec <RTC_Bcd2ToByte>
 800273c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800273e:	0030      	movs	r0, r6
 8002740:	f7ff ffd4 	bl	80026ec <RTC_Bcd2ToByte>
 8002744:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002746:	0028      	movs	r0, r5
 8002748:	f7ff ffd0 	bl	80026ec <RTC_Bcd2ToByte>
 800274c:	70a0      	strb	r0, [r4, #2]
}
 800274e:	2000      	movs	r0, #0
 8002750:	bd70      	pop	{r4, r5, r6, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	007f7f7f 	.word	0x007f7f7f

08002758 <HAL_RTC_GetDate>:
{
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800275c:	6803      	ldr	r3, [r0, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <HAL_RTC_GetDate+0x44>)
 8002762:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002764:	0c18      	lsrs	r0, r3, #16
 8002766:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002768:	0a19      	lsrs	r1, r3, #8
 800276a:	261f      	movs	r6, #31
 800276c:	400e      	ands	r6, r1
 800276e:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002770:	253f      	movs	r5, #63	; 0x3f
 8002772:	401d      	ands	r5, r3
 8002774:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	2107      	movs	r1, #7
 800277a:	400b      	ands	r3, r1
 800277c:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800277e:	2a00      	cmp	r2, #0
 8002780:	d10a      	bne.n	8002798 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002782:	f7ff ffb3 	bl	80026ec <RTC_Bcd2ToByte>
 8002786:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002788:	0030      	movs	r0, r6
 800278a:	f7ff ffaf 	bl	80026ec <RTC_Bcd2ToByte>
 800278e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002790:	0028      	movs	r0, r5
 8002792:	f7ff ffab 	bl	80026ec <RTC_Bcd2ToByte>
 8002796:	70a0      	strb	r0, [r4, #2]
}
 8002798:	2000      	movs	r0, #0
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	00ffff3f 	.word	0x00ffff3f

080027a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a2:	6a03      	ldr	r3, [r0, #32]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4393      	bics	r3, r2
 80027a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ac:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ae:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027b0:	4d15      	ldr	r5, [pc, #84]	; (8002808 <TIM_OC1_SetConfig+0x68>)
 80027b2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027b4:	680d      	ldr	r5, [r1, #0]
 80027b6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027b8:	2502      	movs	r5, #2
 80027ba:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027bc:	688d      	ldr	r5, [r1, #8]
 80027be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027c0:	4d12      	ldr	r5, [pc, #72]	; (800280c <TIM_OC1_SetConfig+0x6c>)
 80027c2:	42a8      	cmp	r0, r5
 80027c4:	d005      	beq.n	80027d2 <TIM_OC1_SetConfig+0x32>
 80027c6:	4d12      	ldr	r5, [pc, #72]	; (8002810 <TIM_OC1_SetConfig+0x70>)
 80027c8:	42a8      	cmp	r0, r5
 80027ca:	d002      	beq.n	80027d2 <TIM_OC1_SetConfig+0x32>
 80027cc:	4d11      	ldr	r5, [pc, #68]	; (8002814 <TIM_OC1_SetConfig+0x74>)
 80027ce:	42a8      	cmp	r0, r5
 80027d0:	d105      	bne.n	80027de <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027d2:	2508      	movs	r5, #8
 80027d4:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027d6:	68cd      	ldr	r5, [r1, #12]
 80027d8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027da:	2504      	movs	r5, #4
 80027dc:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027de:	4d0b      	ldr	r5, [pc, #44]	; (800280c <TIM_OC1_SetConfig+0x6c>)
 80027e0:	42a8      	cmp	r0, r5
 80027e2:	d005      	beq.n	80027f0 <TIM_OC1_SetConfig+0x50>
 80027e4:	4d0a      	ldr	r5, [pc, #40]	; (8002810 <TIM_OC1_SetConfig+0x70>)
 80027e6:	42a8      	cmp	r0, r5
 80027e8:	d002      	beq.n	80027f0 <TIM_OC1_SetConfig+0x50>
 80027ea:	4d0a      	ldr	r5, [pc, #40]	; (8002814 <TIM_OC1_SetConfig+0x74>)
 80027ec:	42a8      	cmp	r0, r5
 80027ee:	d105      	bne.n	80027fc <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027f0:	4d09      	ldr	r5, [pc, #36]	; (8002818 <TIM_OC1_SetConfig+0x78>)
 80027f2:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027f4:	694d      	ldr	r5, [r1, #20]
 80027f6:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027f8:	698d      	ldr	r5, [r1, #24]
 80027fa:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027fc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027fe:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002800:	684a      	ldr	r2, [r1, #4]
 8002802:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002804:	6203      	str	r3, [r0, #32]
}
 8002806:	bd30      	pop	{r4, r5, pc}
 8002808:	fffeff8c 	.word	0xfffeff8c
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800
 8002818:	fffffcff 	.word	0xfffffcff

0800281c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800281c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800281e:	6a03      	ldr	r3, [r0, #32]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <TIM_OC3_SetConfig+0x68>)
 8002822:	4013      	ands	r3, r2
 8002824:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002826:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002828:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800282a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800282c:	4d16      	ldr	r5, [pc, #88]	; (8002888 <TIM_OC3_SetConfig+0x6c>)
 800282e:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	680e      	ldr	r6, [r1, #0]
 8002832:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <TIM_OC3_SetConfig+0x70>)
 8002836:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002838:	688a      	ldr	r2, [r1, #8]
 800283a:	0212      	lsls	r2, r2, #8
 800283c:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <TIM_OC3_SetConfig+0x74>)
 8002840:	4290      	cmp	r0, r2
 8002842:	d016      	beq.n	8002872 <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <TIM_OC3_SetConfig+0x74>)
 8002846:	4290      	cmp	r0, r2
 8002848:	d005      	beq.n	8002856 <TIM_OC3_SetConfig+0x3a>
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <TIM_OC3_SetConfig+0x78>)
 800284c:	4290      	cmp	r0, r2
 800284e:	d002      	beq.n	8002856 <TIM_OC3_SetConfig+0x3a>
 8002850:	4a11      	ldr	r2, [pc, #68]	; (8002898 <TIM_OC3_SetConfig+0x7c>)
 8002852:	4290      	cmp	r0, r2
 8002854:	d107      	bne.n	8002866 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002856:	4a11      	ldr	r2, [pc, #68]	; (800289c <TIM_OC3_SetConfig+0x80>)
 8002858:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800285a:	694c      	ldr	r4, [r1, #20]
 800285c:	0124      	lsls	r4, r4, #4
 800285e:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002860:	698a      	ldr	r2, [r1, #24]
 8002862:	0115      	lsls	r5, r2, #4
 8002864:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002866:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002868:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800286a:	684a      	ldr	r2, [r1, #4]
 800286c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286e:	6203      	str	r3, [r0, #32]
}
 8002870:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <TIM_OC3_SetConfig+0x84>)
 8002874:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002876:	68cb      	ldr	r3, [r1, #12]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800287c:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <TIM_OC3_SetConfig+0x88>)
 800287e:	4013      	ands	r3, r2
 8002880:	e7e0      	b.n	8002844 <TIM_OC3_SetConfig+0x28>
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	fffffeff 	.word	0xfffffeff
 8002888:	fffeff8c 	.word	0xfffeff8c
 800288c:	fffffdff 	.word	0xfffffdff
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40014400 	.word	0x40014400
 8002898:	40014800 	.word	0x40014800
 800289c:	ffffcfff 	.word	0xffffcfff
 80028a0:	fffff7ff 	.word	0xfffff7ff
 80028a4:	fffffbff 	.word	0xfffffbff

080028a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028aa:	6a03      	ldr	r3, [r0, #32]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <TIM_OC4_SetConfig+0x4c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b8:	4c0f      	ldr	r4, [pc, #60]	; (80028f8 <TIM_OC4_SetConfig+0x50>)
 80028ba:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028bc:	680c      	ldr	r4, [r1, #0]
 80028be:	0224      	lsls	r4, r4, #8
 80028c0:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c2:	4c0e      	ldr	r4, [pc, #56]	; (80028fc <TIM_OC4_SetConfig+0x54>)
 80028c4:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c6:	688b      	ldr	r3, [r1, #8]
 80028c8:	031b      	lsls	r3, r3, #12
 80028ca:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028cc:	4c0c      	ldr	r4, [pc, #48]	; (8002900 <TIM_OC4_SetConfig+0x58>)
 80028ce:	42a0      	cmp	r0, r4
 80028d0:	d005      	beq.n	80028de <TIM_OC4_SetConfig+0x36>
 80028d2:	4c0c      	ldr	r4, [pc, #48]	; (8002904 <TIM_OC4_SetConfig+0x5c>)
 80028d4:	42a0      	cmp	r0, r4
 80028d6:	d002      	beq.n	80028de <TIM_OC4_SetConfig+0x36>
 80028d8:	4c0b      	ldr	r4, [pc, #44]	; (8002908 <TIM_OC4_SetConfig+0x60>)
 80028da:	42a0      	cmp	r0, r4
 80028dc:	d104      	bne.n	80028e8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028de:	4c0b      	ldr	r4, [pc, #44]	; (800290c <TIM_OC4_SetConfig+0x64>)
 80028e0:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e2:	694c      	ldr	r4, [r1, #20]
 80028e4:	01a4      	lsls	r4, r4, #6
 80028e6:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028ec:	684a      	ldr	r2, [r1, #4]
 80028ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f0:	6203      	str	r3, [r0, #32]
}
 80028f2:	bd30      	pop	{r4, r5, pc}
 80028f4:	ffffefff 	.word	0xffffefff
 80028f8:	feff8cff 	.word	0xfeff8cff
 80028fc:	ffffdfff 	.word	0xffffdfff
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40014400 	.word	0x40014400
 8002908:	40014800 	.word	0x40014800
 800290c:	ffffbfff 	.word	0xffffbfff

08002910 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002912:	6a03      	ldr	r3, [r0, #32]
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <TIM_OC5_SetConfig+0x4c>)
 8002916:	4013      	ands	r3, r2
 8002918:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800291a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800291c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800291e:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002920:	4d0f      	ldr	r5, [pc, #60]	; (8002960 <TIM_OC5_SetConfig+0x50>)
 8002922:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	680d      	ldr	r5, [r1, #0]
 8002926:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002928:	4d0e      	ldr	r5, [pc, #56]	; (8002964 <TIM_OC5_SetConfig+0x54>)
 800292a:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800292c:	688b      	ldr	r3, [r1, #8]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002932:	4d0d      	ldr	r5, [pc, #52]	; (8002968 <TIM_OC5_SetConfig+0x58>)
 8002934:	42a8      	cmp	r0, r5
 8002936:	d005      	beq.n	8002944 <TIM_OC5_SetConfig+0x34>
 8002938:	4d0c      	ldr	r5, [pc, #48]	; (800296c <TIM_OC5_SetConfig+0x5c>)
 800293a:	42a8      	cmp	r0, r5
 800293c:	d002      	beq.n	8002944 <TIM_OC5_SetConfig+0x34>
 800293e:	4d0c      	ldr	r5, [pc, #48]	; (8002970 <TIM_OC5_SetConfig+0x60>)
 8002940:	42a8      	cmp	r0, r5
 8002942:	d104      	bne.n	800294e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002944:	4d05      	ldr	r5, [pc, #20]	; (800295c <TIM_OC5_SetConfig+0x4c>)
 8002946:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002948:	694d      	ldr	r5, [r1, #20]
 800294a:	022d      	lsls	r5, r5, #8
 800294c:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002950:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002952:	684a      	ldr	r2, [r1, #4]
 8002954:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	6203      	str	r3, [r0, #32]
}
 8002958:	bd30      	pop	{r4, r5, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	fffeffff 	.word	0xfffeffff
 8002960:	fffeff8f 	.word	0xfffeff8f
 8002964:	fffdffff 	.word	0xfffdffff
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40014400 	.word	0x40014400
 8002970:	40014800 	.word	0x40014800

08002974 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002976:	6a03      	ldr	r3, [r0, #32]
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <TIM_OC6_SetConfig+0x4c>)
 800297a:	4013      	ands	r3, r2
 800297c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002982:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002984:	4c0f      	ldr	r4, [pc, #60]	; (80029c4 <TIM_OC6_SetConfig+0x50>)
 8002986:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002988:	680c      	ldr	r4, [r1, #0]
 800298a:	0224      	lsls	r4, r4, #8
 800298c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800298e:	4c0e      	ldr	r4, [pc, #56]	; (80029c8 <TIM_OC6_SetConfig+0x54>)
 8002990:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002992:	688b      	ldr	r3, [r1, #8]
 8002994:	051b      	lsls	r3, r3, #20
 8002996:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002998:	4c0c      	ldr	r4, [pc, #48]	; (80029cc <TIM_OC6_SetConfig+0x58>)
 800299a:	42a0      	cmp	r0, r4
 800299c:	d005      	beq.n	80029aa <TIM_OC6_SetConfig+0x36>
 800299e:	4c0c      	ldr	r4, [pc, #48]	; (80029d0 <TIM_OC6_SetConfig+0x5c>)
 80029a0:	42a0      	cmp	r0, r4
 80029a2:	d002      	beq.n	80029aa <TIM_OC6_SetConfig+0x36>
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <TIM_OC6_SetConfig+0x60>)
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	d104      	bne.n	80029b4 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029aa:	4c0b      	ldr	r4, [pc, #44]	; (80029d8 <TIM_OC6_SetConfig+0x64>)
 80029ac:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80029ae:	694c      	ldr	r4, [r1, #20]
 80029b0:	02a4      	lsls	r4, r4, #10
 80029b2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029b6:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	6203      	str	r3, [r0, #32]
}
 80029be:	bd30      	pop	{r4, r5, pc}
 80029c0:	ffefffff 	.word	0xffefffff
 80029c4:	feff8fff 	.word	0xfeff8fff
 80029c8:	ffdfffff 	.word	0xffdfffff
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40014400 	.word	0x40014400
 80029d4:	40014800 	.word	0x40014800
 80029d8:	fffbffff 	.word	0xfffbffff

080029dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029de:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e0:	6a04      	ldr	r4, [r0, #32]
 80029e2:	2501      	movs	r5, #1
 80029e4:	43ac      	bics	r4, r5
 80029e6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029ea:	35ef      	adds	r5, #239	; 0xef
 80029ec:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029f2:	240a      	movs	r4, #10
 80029f4:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80029f6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029fa:	6203      	str	r3, [r0, #32]
}
 80029fc:	bd30      	pop	{r4, r5, pc}
	...

08002a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a00:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a02:	6a03      	ldr	r3, [r0, #32]
 8002a04:	2410      	movs	r4, #16
 8002a06:	43a3      	bics	r3, r4
 8002a08:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a0a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a0c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a0e:	4d05      	ldr	r5, [pc, #20]	; (8002a24 <TIM_TI2_ConfigInputStage+0x24>)
 8002a10:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a12:	0312      	lsls	r2, r2, #12
 8002a14:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a16:	24a0      	movs	r4, #160	; 0xa0
 8002a18:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1a:	0109      	lsls	r1, r1, #4
 8002a1c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a20:	6201      	str	r1, [r0, #32]
}
 8002a22:	bd30      	pop	{r4, r5, pc}
 8002a24:	ffff0fff 	.word	0xffff0fff

08002a28 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a28:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <TIM_ITRx_SetConfig+0x10>)
 8002a2c:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	2107      	movs	r1, #7
 8002a32:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a34:	6083      	str	r3, [r0, #8]
}
 8002a36:	4770      	bx	lr
 8002a38:	ffcfff8f 	.word	0xffcfff8f

08002a3c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002a3c:	233d      	movs	r3, #61	; 0x3d
 8002a3e:	5cc3      	ldrb	r3, [r0, r3]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d122      	bne.n	8002a8a <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	333c      	adds	r3, #60	; 0x3c
 8002a46:	2202      	movs	r2, #2
 8002a48:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	68d3      	ldr	r3, [r2, #12]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_TIM_Base_Start_IT+0x5c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d008      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x32>
 8002a5c:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <HAL_TIM_Base_Start_IT+0x60>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d005      	beq.n	8002a6e <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	e00e      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	490b      	ldr	r1, [pc, #44]	; (8002aa0 <HAL_TIM_Base_Start_IT+0x64>)
 8002a72:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	2a06      	cmp	r2, #6
 8002a76:	d00a      	beq.n	8002a8e <HAL_TIM_Base_Start_IT+0x52>
 8002a78:	3907      	subs	r1, #7
 8002a7a:	428a      	cmp	r2, r1
 8002a7c:	d009      	beq.n	8002a92 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002a86:	2000      	movs	r0, #0
 8002a88:	e000      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr
  return HAL_OK;
 8002a8e:	2000      	movs	r0, #0
 8002a90:	e7fc      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x50>
 8002a92:	2000      	movs	r0, #0
 8002a94:	e7fa      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0x50>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	00010007 	.word	0x00010007

08002aa4 <HAL_TIM_PWM_MspInit>:
}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_TIM_IC_CaptureCallback>:
}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002aaa:	4770      	bx	lr

08002aac <HAL_TIM_TriggerCallback>:
}
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_TIM_IRQHandler>:
{
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	0792      	lsls	r2, r2, #30
 8002aba:	d50f      	bpl.n	8002adc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	0792      	lsls	r2, r2, #30
 8002ac0:	d50c      	bpl.n	8002adc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	4252      	negs	r2, r2
 8002ac6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	079b      	lsls	r3, r3, #30
 8002ad2:	d06a      	beq.n	8002baa <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	f7ff ffe8 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	0752      	lsls	r2, r2, #29
 8002ae2:	d512      	bpl.n	8002b0a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	0752      	lsls	r2, r2, #29
 8002ae8:	d50f      	bpl.n	8002b0a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aea:	2205      	movs	r2, #5
 8002aec:	4252      	negs	r2, r2
 8002aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	23c0      	movs	r3, #192	; 0xc0
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	421a      	tst	r2, r3
 8002afe:	d05a      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b00:	0020      	movs	r0, r4
 8002b02:	f7ff ffd1 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	2300      	movs	r3, #0
 8002b08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	0712      	lsls	r2, r2, #28
 8002b10:	d510      	bpl.n	8002b34 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	0712      	lsls	r2, r2, #28
 8002b16:	d50d      	bpl.n	8002b34 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b18:	2209      	movs	r2, #9
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1e:	2304      	movs	r3, #4
 8002b20:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	079b      	lsls	r3, r3, #30
 8002b28:	d04c      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	f7ff ffbc 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	2300      	movs	r3, #0
 8002b32:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	06d2      	lsls	r2, r2, #27
 8002b3a:	d512      	bpl.n	8002b62 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	06d2      	lsls	r2, r2, #27
 8002b40:	d50f      	bpl.n	8002b62 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b42:	2211      	movs	r2, #17
 8002b44:	4252      	negs	r2, r2
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	421a      	tst	r2, r3
 8002b56:	d03c      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b58:	0020      	movs	r0, r4
 8002b5a:	f7ff ffa5 	bl	8002aa8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	07d2      	lsls	r2, r2, #31
 8002b68:	d502      	bpl.n	8002b70 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	07d2      	lsls	r2, r2, #31
 8002b6e:	d437      	bmi.n	8002be0 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	0612      	lsls	r2, r2, #24
 8002b76:	d502      	bpl.n	8002b7e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	0612      	lsls	r2, r2, #24
 8002b7c:	d437      	bmi.n	8002bee <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	05d2      	lsls	r2, r2, #23
 8002b84:	d502      	bpl.n	8002b8c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	0612      	lsls	r2, r2, #24
 8002b8a:	d437      	bmi.n	8002bfc <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	0652      	lsls	r2, r2, #25
 8002b92:	d502      	bpl.n	8002b9a <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	0652      	lsls	r2, r2, #25
 8002b98:	d436      	bmi.n	8002c08 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	0692      	lsls	r2, r2, #26
 8002ba0:	d502      	bpl.n	8002ba8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	0692      	lsls	r2, r2, #26
 8002ba6:	d436      	bmi.n	8002c16 <HAL_TIM_IRQHandler+0x166>
}
 8002ba8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	f7ff ff7c 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bae:	0020      	movs	r0, r4
 8002bb0:	f7ff ff7b 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
 8002bb4:	e790      	b.n	8002ad8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	0020      	movs	r0, r4
 8002bb8:	f7ff ff75 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	0020      	movs	r0, r4
 8002bbe:	f7ff ff74 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
 8002bc2:	e7a0      	b.n	8002b06 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	f7ff ff6e 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bca:	0020      	movs	r0, r4
 8002bcc:	f7ff ff6d 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
 8002bd0:	e7ae      	b.n	8002b30 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	0020      	movs	r0, r4
 8002bd4:	f7ff ff67 	bl	8002aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	0020      	movs	r0, r4
 8002bda:	f7ff ff66 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
 8002bde:	e7be      	b.n	8002b5e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be0:	2202      	movs	r2, #2
 8002be2:	4252      	negs	r2, r2
 8002be4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002be6:	0020      	movs	r0, r4
 8002be8:	f7fe f838 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
 8002bec:	e7c0      	b.n	8002b70 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bee:	2281      	movs	r2, #129	; 0x81
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002bf4:	0020      	movs	r0, r4
 8002bf6:	f000 fb6e 	bl	80032d6 <HAL_TIMEx_BreakCallback>
 8002bfa:	e7c0      	b.n	8002b7e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bfc:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_TIM_IRQHandler+0x174>)
 8002bfe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002c00:	0020      	movs	r0, r4
 8002c02:	f000 fb69 	bl	80032d8 <HAL_TIMEx_Break2Callback>
 8002c06:	e7c1      	b.n	8002b8c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c08:	2241      	movs	r2, #65	; 0x41
 8002c0a:	4252      	negs	r2, r2
 8002c0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f7ff ff4c 	bl	8002aac <HAL_TIM_TriggerCallback>
 8002c14:	e7c1      	b.n	8002b9a <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c16:	2221      	movs	r2, #33	; 0x21
 8002c18:	4252      	negs	r2, r2
 8002c1a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002c1c:	0020      	movs	r0, r4
 8002c1e:	f000 fb59 	bl	80032d4 <HAL_TIMEx_CommutCallback>
}
 8002c22:	e7c1      	b.n	8002ba8 <HAL_TIM_IRQHandler+0xf8>
 8002c24:	fffffeff 	.word	0xfffffeff

08002c28 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002c28:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <TIM_Base_SetConfig+0x6c>)
 8002c2c:	4290      	cmp	r0, r2
 8002c2e:	d002      	beq.n	8002c36 <TIM_Base_SetConfig+0xe>
 8002c30:	4a19      	ldr	r2, [pc, #100]	; (8002c98 <TIM_Base_SetConfig+0x70>)
 8002c32:	4290      	cmp	r0, r2
 8002c34:	d103      	bne.n	8002c3e <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c36:	2270      	movs	r2, #112	; 0x70
 8002c38:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002c3a:	684a      	ldr	r2, [r1, #4]
 8002c3c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3e:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <TIM_Base_SetConfig+0x6c>)
 8002c40:	4290      	cmp	r0, r2
 8002c42:	d00b      	beq.n	8002c5c <TIM_Base_SetConfig+0x34>
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <TIM_Base_SetConfig+0x70>)
 8002c46:	4290      	cmp	r0, r2
 8002c48:	d008      	beq.n	8002c5c <TIM_Base_SetConfig+0x34>
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <TIM_Base_SetConfig+0x74>)
 8002c4c:	4290      	cmp	r0, r2
 8002c4e:	d005      	beq.n	8002c5c <TIM_Base_SetConfig+0x34>
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <TIM_Base_SetConfig+0x78>)
 8002c52:	4290      	cmp	r0, r2
 8002c54:	d002      	beq.n	8002c5c <TIM_Base_SetConfig+0x34>
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <TIM_Base_SetConfig+0x7c>)
 8002c58:	4290      	cmp	r0, r2
 8002c5a:	d103      	bne.n	8002c64 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <TIM_Base_SetConfig+0x80>)
 8002c5e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c60:	68ca      	ldr	r2, [r1, #12]
 8002c62:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	4393      	bics	r3, r2
 8002c68:	694a      	ldr	r2, [r1, #20]
 8002c6a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002c6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c6e:	688b      	ldr	r3, [r1, #8]
 8002c70:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c72:	680b      	ldr	r3, [r1, #0]
 8002c74:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <TIM_Base_SetConfig+0x6c>)
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d005      	beq.n	8002c88 <TIM_Base_SetConfig+0x60>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <TIM_Base_SetConfig+0x78>)
 8002c7e:	4298      	cmp	r0, r3
 8002c80:	d002      	beq.n	8002c88 <TIM_Base_SetConfig+0x60>
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <TIM_Base_SetConfig+0x7c>)
 8002c84:	4298      	cmp	r0, r3
 8002c86:	d101      	bne.n	8002c8c <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	690b      	ldr	r3, [r1, #16]
 8002c8a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	6143      	str	r3, [r0, #20]
}
 8002c90:	4770      	bx	lr
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40002000 	.word	0x40002000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800
 8002ca8:	fffffcff 	.word	0xfffffcff

08002cac <HAL_TIM_Base_Init>:
{
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002cb0:	d02a      	beq.n	8002d08 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	233d      	movs	r3, #61	; 0x3d
 8002cb4:	5cc3      	ldrb	r3, [r0, r3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d020      	beq.n	8002cfc <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002cba:	253d      	movs	r5, #61	; 0x3d
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	0021      	movs	r1, r4
 8002cc2:	c901      	ldmia	r1!, {r0}
 8002cc4:	f7ff ffb0 	bl	8002c28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	2248      	movs	r2, #72	; 0x48
 8002ccc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	3a0a      	subs	r2, #10
 8002cd0:	54a3      	strb	r3, [r4, r2]
 8002cd2:	3201      	adds	r2, #1
 8002cd4:	54a3      	strb	r3, [r4, r2]
 8002cd6:	3201      	adds	r2, #1
 8002cd8:	54a3      	strb	r3, [r4, r2]
 8002cda:	3201      	adds	r2, #1
 8002cdc:	54a3      	strb	r3, [r4, r2]
 8002cde:	3201      	adds	r2, #1
 8002ce0:	54a3      	strb	r3, [r4, r2]
 8002ce2:	3201      	adds	r2, #1
 8002ce4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce6:	3201      	adds	r2, #1
 8002ce8:	54a3      	strb	r3, [r4, r2]
 8002cea:	3201      	adds	r2, #1
 8002cec:	54a3      	strb	r3, [r4, r2]
 8002cee:	3201      	adds	r2, #1
 8002cf0:	54a3      	strb	r3, [r4, r2]
 8002cf2:	3201      	adds	r2, #1
 8002cf4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002cf6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002cf8:	2000      	movs	r0, #0
}
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002cfc:	333c      	adds	r3, #60	; 0x3c
 8002cfe:	2200      	movs	r2, #0
 8002d00:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002d02:	f7fe fb1b 	bl	800133c <HAL_TIM_Base_MspInit>
 8002d06:	e7d8      	b.n	8002cba <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002d08:	2001      	movs	r0, #1
 8002d0a:	e7f6      	b.n	8002cfa <HAL_TIM_Base_Init+0x4e>

08002d0c <HAL_TIM_PWM_Init>:
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002d10:	d02a      	beq.n	8002d68 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	233d      	movs	r3, #61	; 0x3d
 8002d14:	5cc3      	ldrb	r3, [r0, r3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d020      	beq.n	8002d5c <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1a:	253d      	movs	r5, #61	; 0x3d
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d20:	0021      	movs	r1, r4
 8002d22:	c901      	ldmia	r1!, {r0}
 8002d24:	f7ff ff80 	bl	8002c28 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	2248      	movs	r2, #72	; 0x48
 8002d2c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	3a0a      	subs	r2, #10
 8002d30:	54a3      	strb	r3, [r4, r2]
 8002d32:	3201      	adds	r2, #1
 8002d34:	54a3      	strb	r3, [r4, r2]
 8002d36:	3201      	adds	r2, #1
 8002d38:	54a3      	strb	r3, [r4, r2]
 8002d3a:	3201      	adds	r2, #1
 8002d3c:	54a3      	strb	r3, [r4, r2]
 8002d3e:	3201      	adds	r2, #1
 8002d40:	54a3      	strb	r3, [r4, r2]
 8002d42:	3201      	adds	r2, #1
 8002d44:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d46:	3201      	adds	r2, #1
 8002d48:	54a3      	strb	r3, [r4, r2]
 8002d4a:	3201      	adds	r2, #1
 8002d4c:	54a3      	strb	r3, [r4, r2]
 8002d4e:	3201      	adds	r2, #1
 8002d50:	54a3      	strb	r3, [r4, r2]
 8002d52:	3201      	adds	r2, #1
 8002d54:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002d58:	2000      	movs	r0, #0
}
 8002d5a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d5c:	333c      	adds	r3, #60	; 0x3c
 8002d5e:	2200      	movs	r2, #0
 8002d60:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002d62:	f7ff fe9f 	bl	8002aa4 <HAL_TIM_PWM_MspInit>
 8002d66:	e7d8      	b.n	8002d1a <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
 8002d6a:	e7f6      	b.n	8002d5a <HAL_TIM_PWM_Init+0x4e>

08002d6c <TIM_OC2_SetConfig>:
{
 8002d6c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6e:	6a03      	ldr	r3, [r0, #32]
 8002d70:	2210      	movs	r2, #16
 8002d72:	4393      	bics	r3, r2
 8002d74:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002d76:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002d78:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002d7a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <TIM_OC2_SetConfig+0x6c>)
 8002d7e:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d80:	680a      	ldr	r2, [r1, #0]
 8002d82:	0212      	lsls	r2, r2, #8
 8002d84:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8002d86:	2220      	movs	r2, #32
 8002d88:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8a:	688a      	ldr	r2, [r1, #8]
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d90:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <TIM_OC2_SetConfig+0x70>)
 8002d92:	4290      	cmp	r0, r2
 8002d94:	d016      	beq.n	8002dc4 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <TIM_OC2_SetConfig+0x70>)
 8002d98:	4290      	cmp	r0, r2
 8002d9a:	d005      	beq.n	8002da8 <TIM_OC2_SetConfig+0x3c>
 8002d9c:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <TIM_OC2_SetConfig+0x74>)
 8002d9e:	4290      	cmp	r0, r2
 8002da0:	d002      	beq.n	8002da8 <TIM_OC2_SetConfig+0x3c>
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <TIM_OC2_SetConfig+0x78>)
 8002da4:	4290      	cmp	r0, r2
 8002da6:	d107      	bne.n	8002db8 <TIM_OC2_SetConfig+0x4c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <TIM_OC2_SetConfig+0x7c>)
 8002daa:	402a      	ands	r2, r5
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dac:	694d      	ldr	r5, [r1, #20]
 8002dae:	00ad      	lsls	r5, r5, #2
 8002db0:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002db2:	698a      	ldr	r2, [r1, #24]
 8002db4:	0092      	lsls	r2, r2, #2
 8002db6:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002db8:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002dba:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002dbc:	684a      	ldr	r2, [r1, #4]
 8002dbe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002dc0:	6203      	str	r3, [r0, #32]
}
 8002dc2:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	001a      	movs	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dca:	68cb      	ldr	r3, [r1, #12]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	4393      	bics	r3, r2
 8002dd4:	e7df      	b.n	8002d96 <TIM_OC2_SetConfig+0x2a>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	feff8cff 	.word	0xfeff8cff
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800
 8002de8:	fffff3ff 	.word	0xfffff3ff

08002dec <HAL_TIM_PWM_ConfigChannel>:
{
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	0004      	movs	r4, r0
 8002df0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002df2:	233c      	movs	r3, #60	; 0x3c
 8002df4:	5cc3      	ldrb	r3, [r0, r3]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d100      	bne.n	8002dfc <HAL_TIM_PWM_ConfigChannel+0x10>
 8002dfa:	e092      	b.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x136>
 8002dfc:	233c      	movs	r3, #60	; 0x3c
 8002dfe:	2101      	movs	r1, #1
 8002e00:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002e02:	2a14      	cmp	r2, #20
 8002e04:	d900      	bls.n	8002e08 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8002e06:	e087      	b.n	8002f18 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8002e0c:	589b      	ldr	r3, [r3, r2]
 8002e0e:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e10:	0029      	movs	r1, r5
 8002e12:	6800      	ldr	r0, [r0, #0]
 8002e14:	f7ff fcc4 	bl	80027a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	6993      	ldr	r3, [r2, #24]
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	6993      	ldr	r3, [r2, #24]
 8002e26:	3904      	subs	r1, #4
 8002e28:	438b      	bics	r3, r1
 8002e2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e2c:	6822      	ldr	r2, [r4, #0]
 8002e2e:	6993      	ldr	r3, [r2, #24]
 8002e30:	6929      	ldr	r1, [r5, #16]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2000      	movs	r0, #0
      break;
 8002e38:	e06f      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e3a:	0029      	movs	r1, r5
 8002e3c:	6800      	ldr	r0, [r0, #0]
 8002e3e:	f7ff ff95 	bl	8002d6c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6991      	ldr	r1, [r2, #24]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	6993      	ldr	r3, [r2, #24]
 8002e52:	4936      	ldr	r1, [pc, #216]	; (8002f2c <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002e54:	400b      	ands	r3, r1
 8002e56:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	698b      	ldr	r3, [r1, #24]
 8002e5c:	692a      	ldr	r2, [r5, #16]
 8002e5e:	0212      	lsls	r2, r2, #8
 8002e60:	4313      	orrs	r3, r2
 8002e62:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2000      	movs	r0, #0
      break;
 8002e66:	e058      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e68:	0029      	movs	r1, r5
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	f7ff fcd6 	bl	800281c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	69d3      	ldr	r3, [r2, #28]
 8002e74:	2108      	movs	r1, #8
 8002e76:	430b      	orrs	r3, r1
 8002e78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	3904      	subs	r1, #4
 8002e80:	438b      	bics	r3, r1
 8002e82:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e84:	6822      	ldr	r2, [r4, #0]
 8002e86:	69d3      	ldr	r3, [r2, #28]
 8002e88:	6929      	ldr	r1, [r5, #16]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2000      	movs	r0, #0
      break;
 8002e90:	e043      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e92:	0029      	movs	r1, r5
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	f7ff fd07 	bl	80028a8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e9a:	6822      	ldr	r2, [r4, #0]
 8002e9c:	69d1      	ldr	r1, [r2, #28]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ea6:	6822      	ldr	r2, [r4, #0]
 8002ea8:	69d3      	ldr	r3, [r2, #28]
 8002eaa:	4920      	ldr	r1, [pc, #128]	; (8002f2c <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002eac:	400b      	ands	r3, r1
 8002eae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002eb0:	6821      	ldr	r1, [r4, #0]
 8002eb2:	69cb      	ldr	r3, [r1, #28]
 8002eb4:	692a      	ldr	r2, [r5, #16]
 8002eb6:	0212      	lsls	r2, r2, #8
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2000      	movs	r0, #0
      break;
 8002ebe:	e02c      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ec0:	0029      	movs	r1, r5
 8002ec2:	6800      	ldr	r0, [r0, #0]
 8002ec4:	f7ff fd24 	bl	8002910 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ec8:	6822      	ldr	r2, [r4, #0]
 8002eca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002ecc:	2108      	movs	r1, #8
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002ed6:	3904      	subs	r1, #4
 8002ed8:	438b      	bics	r3, r1
 8002eda:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002ee0:	6929      	ldr	r1, [r5, #16]
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2000      	movs	r0, #0
      break;
 8002ee8:	e017      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002eea:	0029      	movs	r1, r5
 8002eec:	6800      	ldr	r0, [r0, #0]
 8002eee:	f7ff fd41 	bl	8002974 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	430b      	orrs	r3, r1
 8002efc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002f02:	490a      	ldr	r1, [pc, #40]	; (8002f2c <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002f04:	400b      	ands	r3, r1
 8002f06:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f08:	6821      	ldr	r1, [r4, #0]
 8002f0a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002f0c:	692a      	ldr	r2, [r5, #16]
 8002f0e:	0212      	lsls	r2, r2, #8
 8002f10:	4313      	orrs	r3, r2
 8002f12:	654b      	str	r3, [r1, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002f14:	2000      	movs	r0, #0
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8002f18:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002f1a:	233c      	movs	r3, #60	; 0x3c
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	54e2      	strb	r2, [r4, r3]
}
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8002f22:	2002      	movs	r0, #2
 8002f24:	e7fc      	b.n	8002f20 <HAL_TIM_PWM_ConfigChannel+0x134>
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	0800494c 	.word	0x0800494c
 8002f2c:	fffffbff 	.word	0xfffffbff

08002f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f30:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f32:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f34:	4d03      	ldr	r5, [pc, #12]	; (8002f44 <TIM_ETR_SetConfig+0x14>)
 8002f36:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f40:	6083      	str	r3, [r0, #8]
}
 8002f42:	bd30      	pop	{r4, r5, pc}
 8002f44:	ffff00ff 	.word	0xffff00ff

08002f48 <HAL_TIM_ConfigClockSource>:
{
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002f4c:	233c      	movs	r3, #60	; 0x3c
 8002f4e:	5cc3      	ldrb	r3, [r0, r3]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d100      	bne.n	8002f56 <HAL_TIM_ConfigClockSource+0xe>
 8002f54:	e078      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x100>
 8002f56:	233c      	movs	r3, #60	; 0x3c
 8002f58:	2201      	movs	r2, #1
 8002f5a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	3201      	adds	r2, #1
 8002f60:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002f62:	6802      	ldr	r2, [r0, #0]
 8002f64:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f66:	4839      	ldr	r0, [pc, #228]	; (800304c <HAL_TIM_ConfigClockSource+0x104>)
 8002f68:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002f6a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f6c:	680b      	ldr	r3, [r1, #0]
 8002f6e:	2b60      	cmp	r3, #96	; 0x60
 8002f70:	d050      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0xcc>
 8002f72:	d82a      	bhi.n	8002fca <HAL_TIM_ConfigClockSource+0x82>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d058      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xe2>
 8002f78:	d90c      	bls.n	8002f94 <HAL_TIM_ConfigClockSource+0x4c>
 8002f7a:	2b50      	cmp	r3, #80	; 0x50
 8002f7c:	d123      	bne.n	8002fc6 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7e:	68ca      	ldr	r2, [r1, #12]
 8002f80:	6849      	ldr	r1, [r1, #4]
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	f7ff fd2a 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	f7ff fd4c 	bl	8002a28 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2000      	movs	r0, #0
      break;
 8002f92:	e005      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d00e      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x6e>
 8002f98:	d909      	bls.n	8002fae <HAL_TIM_ConfigClockSource+0x66>
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	233d      	movs	r3, #61	; 0x3d
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	2200      	movs	r2, #0
 8002faa:	54e2      	strb	r2, [r4, r3]
}
 8002fac:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x6e>
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d105      	bne.n	8002fc2 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	f7ff fd35 	bl	8002a28 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2000      	movs	r0, #0
      break;
 8002fc0:	e7ee      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	e7ec      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e7ea      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0152      	lsls	r2, r2, #5
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d036      	beq.n	8003040 <HAL_TIM_ConfigClockSource+0xf8>
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	0192      	lsls	r2, r2, #6
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	68cb      	ldr	r3, [r1, #12]
 8002fdc:	684a      	ldr	r2, [r1, #4]
 8002fde:	6889      	ldr	r1, [r1, #8]
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f7ff ffa5 	bl	8002f30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	6891      	ldr	r1, [r2, #8]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	01db      	lsls	r3, r3, #7
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2000      	movs	r0, #0
      break;
 8002ff4:	e7d4      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002ff6:	2b70      	cmp	r3, #112	; 0x70
 8002ff8:	d124      	bne.n	8003044 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8002ffa:	68cb      	ldr	r3, [r1, #12]
 8002ffc:	684a      	ldr	r2, [r1, #4]
 8002ffe:	6889      	ldr	r1, [r1, #8]
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	f7ff ff95 	bl	8002f30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800300a:	2177      	movs	r1, #119	; 0x77
 800300c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800300e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2000      	movs	r0, #0
      break;
 8003012:	e7c5      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003014:	68ca      	ldr	r2, [r1, #12]
 8003016:	6849      	ldr	r1, [r1, #4]
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f7ff fcf1 	bl	8002a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800301e:	2160      	movs	r1, #96	; 0x60
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	f7ff fd01 	bl	8002a28 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2000      	movs	r0, #0
      break;
 8003028:	e7ba      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	68ca      	ldr	r2, [r1, #12]
 800302c:	6849      	ldr	r1, [r1, #4]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	f7ff fcd4 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003034:	2140      	movs	r1, #64	; 0x40
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	f7ff fcf6 	bl	8002a28 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2000      	movs	r0, #0
      break;
 800303e:	e7af      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8003040:	2000      	movs	r0, #0
 8003042:	e7ad      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8003044:	2001      	movs	r0, #1
 8003046:	e7ab      	b.n	8002fa0 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8003048:	2002      	movs	r0, #2
 800304a:	e7af      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x64>
 800304c:	ffce0088 	.word	0xffce0088

08003050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003050:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003052:	231f      	movs	r3, #31
 8003054:	4019      	ands	r1, r3
 8003056:	2401      	movs	r4, #1
 8003058:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800305a:	6a03      	ldr	r3, [r0, #32]
 800305c:	43a3      	bics	r3, r4
 800305e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003060:	6a03      	ldr	r3, [r0, #32]
 8003062:	408a      	lsls	r2, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	6203      	str	r3, [r0, #32]
}
 8003068:	bd10      	pop	{r4, pc}
	...

0800306c <HAL_TIM_PWM_Start>:
{
 800306c:	b510      	push	{r4, lr}
 800306e:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003070:	2900      	cmp	r1, #0
 8003072:	d12c      	bne.n	80030ce <HAL_TIM_PWM_Start+0x62>
 8003074:	233e      	movs	r3, #62	; 0x3e
 8003076:	5cc3      	ldrb	r3, [r0, r3]
 8003078:	3b01      	subs	r3, #1
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	4193      	sbcs	r3, r2
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d179      	bne.n	8003178 <HAL_TIM_PWM_Start+0x10c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003084:	2900      	cmp	r1, #0
 8003086:	d14d      	bne.n	8003124 <HAL_TIM_PWM_Start+0xb8>
 8003088:	333e      	adds	r3, #62	; 0x3e
 800308a:	2202      	movs	r2, #2
 800308c:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800308e:	2201      	movs	r2, #1
 8003090:	6820      	ldr	r0, [r4, #0]
 8003092:	f7ff ffdd 	bl	8003050 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	4a3a      	ldr	r2, [pc, #232]	; (8003184 <HAL_TIM_PWM_Start+0x118>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d005      	beq.n	80030aa <HAL_TIM_PWM_Start+0x3e>
 800309e:	4a3a      	ldr	r2, [pc, #232]	; (8003188 <HAL_TIM_PWM_Start+0x11c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d002      	beq.n	80030aa <HAL_TIM_PWM_Start+0x3e>
 80030a4:	4a39      	ldr	r2, [pc, #228]	; (800318c <HAL_TIM_PWM_Start+0x120>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d104      	bne.n	80030b4 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 80030aa:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	0212      	lsls	r2, r2, #8
 80030b0:	430a      	orrs	r2, r1
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <HAL_TIM_PWM_Start+0x118>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d04f      	beq.n	800315c <HAL_TIM_PWM_Start+0xf0>
 80030bc:	4a34      	ldr	r2, [pc, #208]	; (8003190 <HAL_TIM_PWM_Start+0x124>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d04c      	beq.n	800315c <HAL_TIM_PWM_Start+0xf0>
    __HAL_TIM_ENABLE(htim);
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80030ca:	2000      	movs	r0, #0
 80030cc:	e055      	b.n	800317a <HAL_TIM_PWM_Start+0x10e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ce:	2904      	cmp	r1, #4
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_PWM_Start+0x80>
 80030d2:	2908      	cmp	r1, #8
 80030d4:	d011      	beq.n	80030fa <HAL_TIM_PWM_Start+0x8e>
 80030d6:	290c      	cmp	r1, #12
 80030d8:	d016      	beq.n	8003108 <HAL_TIM_PWM_Start+0x9c>
 80030da:	2910      	cmp	r1, #16
 80030dc:	d01b      	beq.n	8003116 <HAL_TIM_PWM_Start+0xaa>
 80030de:	2343      	movs	r3, #67	; 0x43
 80030e0:	5cc3      	ldrb	r3, [r0, r3]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	4193      	sbcs	r3, r2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e7c9      	b.n	8003080 <HAL_TIM_PWM_Start+0x14>
 80030ec:	233f      	movs	r3, #63	; 0x3f
 80030ee:	5cc3      	ldrb	r3, [r0, r3]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	4193      	sbcs	r3, r2
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e7c2      	b.n	8003080 <HAL_TIM_PWM_Start+0x14>
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	5cc3      	ldrb	r3, [r0, r3]
 80030fe:	3b01      	subs	r3, #1
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	4193      	sbcs	r3, r2
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e7bb      	b.n	8003080 <HAL_TIM_PWM_Start+0x14>
 8003108:	2341      	movs	r3, #65	; 0x41
 800310a:	5cc3      	ldrb	r3, [r0, r3]
 800310c:	3b01      	subs	r3, #1
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	4193      	sbcs	r3, r2
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e7b4      	b.n	8003080 <HAL_TIM_PWM_Start+0x14>
 8003116:	2342      	movs	r3, #66	; 0x42
 8003118:	5cc3      	ldrb	r3, [r0, r3]
 800311a:	3b01      	subs	r3, #1
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	4193      	sbcs	r3, r2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e7ad      	b.n	8003080 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003124:	2904      	cmp	r1, #4
 8003126:	d009      	beq.n	800313c <HAL_TIM_PWM_Start+0xd0>
 8003128:	2908      	cmp	r1, #8
 800312a:	d00b      	beq.n	8003144 <HAL_TIM_PWM_Start+0xd8>
 800312c:	290c      	cmp	r1, #12
 800312e:	d00d      	beq.n	800314c <HAL_TIM_PWM_Start+0xe0>
 8003130:	2910      	cmp	r1, #16
 8003132:	d00f      	beq.n	8003154 <HAL_TIM_PWM_Start+0xe8>
 8003134:	2343      	movs	r3, #67	; 0x43
 8003136:	2202      	movs	r2, #2
 8003138:	54e2      	strb	r2, [r4, r3]
 800313a:	e7a8      	b.n	800308e <HAL_TIM_PWM_Start+0x22>
 800313c:	233f      	movs	r3, #63	; 0x3f
 800313e:	2202      	movs	r2, #2
 8003140:	54e2      	strb	r2, [r4, r3]
 8003142:	e7a4      	b.n	800308e <HAL_TIM_PWM_Start+0x22>
 8003144:	2340      	movs	r3, #64	; 0x40
 8003146:	2202      	movs	r2, #2
 8003148:	54e2      	strb	r2, [r4, r3]
 800314a:	e7a0      	b.n	800308e <HAL_TIM_PWM_Start+0x22>
 800314c:	2341      	movs	r3, #65	; 0x41
 800314e:	2202      	movs	r2, #2
 8003150:	54e2      	strb	r2, [r4, r3]
 8003152:	e79c      	b.n	800308e <HAL_TIM_PWM_Start+0x22>
 8003154:	2342      	movs	r3, #66	; 0x42
 8003156:	2202      	movs	r2, #2
 8003158:	54e2      	strb	r2, [r4, r3]
 800315a:	e798      	b.n	800308e <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	490d      	ldr	r1, [pc, #52]	; (8003194 <HAL_TIM_PWM_Start+0x128>)
 8003160:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	2a06      	cmp	r2, #6
 8003164:	d00a      	beq.n	800317c <HAL_TIM_PWM_Start+0x110>
 8003166:	3907      	subs	r1, #7
 8003168:	428a      	cmp	r2, r1
 800316a:	d009      	beq.n	8003180 <HAL_TIM_PWM_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003174:	2000      	movs	r0, #0
 8003176:	e000      	b.n	800317a <HAL_TIM_PWM_Start+0x10e>
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
 800317e:	e7fc      	b.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003180:	2000      	movs	r0, #0
 8003182:	e7fa      	b.n	800317a <HAL_TIM_PWM_Start+0x10e>
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	40000400 	.word	0x40000400
 8003194:	00010007 	.word	0x00010007

08003198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003198:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800319a:	233c      	movs	r3, #60	; 0x3c
 800319c:	5cc3      	ldrb	r3, [r0, r3]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d029      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80031a2:	233c      	movs	r3, #60	; 0x3c
 80031a4:	2201      	movs	r2, #1
 80031a6:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	3301      	adds	r3, #1
 80031aa:	3201      	adds	r2, #1
 80031ac:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031ae:	6802      	ldr	r2, [r0, #0]
 80031b0:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b2:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b4:	4d11      	ldr	r5, [pc, #68]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80031b6:	42aa      	cmp	r2, r5
 80031b8:	d018      	beq.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ba:	2570      	movs	r5, #112	; 0x70
 80031bc:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031be:	680d      	ldr	r5, [r1, #0]
 80031c0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	6803      	ldr	r3, [r0, #0]
 80031c6:	4a0d      	ldr	r2, [pc, #52]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d002      	beq.n	80031d2 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d104      	bne.n	80031dc <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031d6:	688a      	ldr	r2, [r1, #8]
 80031d8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031da:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	233d      	movs	r3, #61	; 0x3d
 80031de:	2201      	movs	r2, #1
 80031e0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80031e2:	3b01      	subs	r3, #1
 80031e4:	2200      	movs	r2, #0
 80031e6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80031e8:	2000      	movs	r0, #0
}
 80031ea:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ec:	4d05      	ldr	r5, [pc, #20]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80031ee:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031f0:	684d      	ldr	r5, [r1, #4]
 80031f2:	432b      	orrs	r3, r5
 80031f4:	e7e1      	b.n	80031ba <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80031f6:	2002      	movs	r0, #2
 80031f8:	e7f7      	b.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	ff0fffff 	.word	0xff0fffff

08003208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003208:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800320a:	233c      	movs	r3, #60	; 0x3c
 800320c:	5cc3      	ldrb	r3, [r0, r3]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d044      	beq.n	800329c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8003212:	233c      	movs	r3, #60	; 0x3c
 8003214:	2201      	movs	r2, #1
 8003216:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800321a:	68ca      	ldr	r2, [r1, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	688a      	ldr	r2, [r1, #8]
 8003220:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8003224:	4013      	ands	r3, r2
 8003226:	684a      	ldr	r2, [r1, #4]
 8003228:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 800322c:	4013      	ands	r3, r2
 800322e:	680a      	ldr	r2, [r1, #0]
 8003230:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003234:	4013      	ands	r3, r2
 8003236:	690a      	ldr	r2, [r1, #16]
 8003238:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800323c:	4013      	ands	r3, r2
 800323e:	694a      	ldr	r2, [r1, #20]
 8003240:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003244:	4013      	ands	r3, r2
 8003246:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003248:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800324a:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800324c:	4013      	ands	r3, r2
 800324e:	698a      	ldr	r2, [r1, #24]
 8003250:	0412      	lsls	r2, r2, #16
 8003252:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003254:	6802      	ldr	r2, [r0, #0]
 8003256:	4c19      	ldr	r4, [pc, #100]	; (80032bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003258:	42a2      	cmp	r2, r4
 800325a:	d008      	beq.n	800326e <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800325c:	4c17      	ldr	r4, [pc, #92]	; (80032bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800325e:	42a2      	cmp	r2, r4
 8003260:	d00a      	beq.n	8003278 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003262:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003264:	233c      	movs	r3, #60	; 0x3c
 8003266:	2200      	movs	r2, #0
 8003268:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800326a:	2000      	movs	r0, #0
}
 800326c:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800326e:	4c14      	ldr	r4, [pc, #80]	; (80032c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003270:	4023      	ands	r3, r4
 8003272:	69cc      	ldr	r4, [r1, #28]
 8003274:	4323      	orrs	r3, r4
 8003276:	e7f1      	b.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003278:	4c12      	ldr	r4, [pc, #72]	; (80032c4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800327a:	4023      	ands	r3, r4
 800327c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800327e:	0524      	lsls	r4, r4, #20
 8003280:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003282:	4c11      	ldr	r4, [pc, #68]	; (80032c8 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003284:	4023      	ands	r3, r4
 8003286:	6a0c      	ldr	r4, [r1, #32]
 8003288:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800328a:	4c10      	ldr	r4, [pc, #64]	; (80032cc <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 800328c:	4023      	ands	r3, r4
 800328e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003290:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003292:	4c0f      	ldr	r4, [pc, #60]	; (80032d0 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8003294:	4023      	ands	r3, r4
 8003296:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003298:	430b      	orrs	r3, r1
 800329a:	e7e2      	b.n	8003262 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 800329c:	2002      	movs	r0, #2
 800329e:	e7e5      	b.n	800326c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80032a0:	fffffcff 	.word	0xfffffcff
 80032a4:	fffffbff 	.word	0xfffffbff
 80032a8:	fffff7ff 	.word	0xfffff7ff
 80032ac:	ffffefff 	.word	0xffffefff
 80032b0:	ffffdfff 	.word	0xffffdfff
 80032b4:	ffffbfff 	.word	0xffffbfff
 80032b8:	fff0ffff 	.word	0xfff0ffff
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	efffffff 	.word	0xefffffff
 80032c4:	ff0fffff 	.word	0xff0fffff
 80032c8:	feffffff 	.word	0xfeffffff
 80032cc:	fdffffff 	.word	0xfdffffff
 80032d0:	dfffffff 	.word	0xdfffffff

080032d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d4:	4770      	bx	lr

080032d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032d8:	4770      	bx	lr
	...

080032dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032de:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	2201      	movs	r2, #1
 80032e4:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80032e8:	6801      	ldr	r1, [r0, #0]
 80032ea:	680b      	ldr	r3, [r1, #0]
 80032ec:	25c0      	movs	r5, #192	; 0xc0
 80032ee:	43ab      	bics	r3, r5
 80032f0:	600b      	str	r3, [r1, #0]
 80032f2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80032fe:	6802      	ldr	r2, [r0, #0]
 8003300:	6893      	ldr	r3, [r2, #8]
 8003302:	4c04      	ldr	r4, [pc, #16]	; (8003314 <UART_EndTxTransfer+0x38>)
 8003304:	4023      	ands	r3, r4
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330c:	2384      	movs	r3, #132	; 0x84
 800330e:	2220      	movs	r2, #32
 8003310:	50c2      	str	r2, [r0, r3]
}
 8003312:	bd30      	pop	{r4, r5, pc}
 8003314:	ff7fffff 	.word	0xff7fffff

08003318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003318:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	2201      	movs	r2, #1
 8003320:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003324:	6801      	ldr	r1, [r0, #0]
 8003326:	680b      	ldr	r3, [r1, #0]
 8003328:	4d12      	ldr	r5, [pc, #72]	; (8003374 <UART_EndRxTransfer+0x5c>)
 800332a:	402b      	ands	r3, r5
 800332c:	600b      	str	r3, [r1, #0]
 800332e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003332:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003336:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800333a:	6802      	ldr	r2, [r0, #0]
 800333c:	6893      	ldr	r3, [r2, #8]
 800333e:	4c0e      	ldr	r4, [pc, #56]	; (8003378 <UART_EndRxTransfer+0x60>)
 8003340:	4023      	ands	r3, r4
 8003342:	6093      	str	r3, [r2, #8]
 8003344:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003348:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d006      	beq.n	800335c <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334e:	2388      	movs	r3, #136	; 0x88
 8003350:	2220      	movs	r2, #32
 8003352:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	2300      	movs	r3, #0
 8003356:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003358:	6703      	str	r3, [r0, #112]	; 0x70
}
 800335a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	6802      	ldr	r2, [r0, #0]
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	2410      	movs	r4, #16
 800336a:	43a3      	bics	r3, r4
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	f381 8810 	msr	PRIMASK, r1
}
 8003372:	e7ec      	b.n	800334e <UART_EndRxTransfer+0x36>
 8003374:	fffffedf 	.word	0xfffffedf
 8003378:	effffffe 	.word	0xeffffffe

0800337c <HAL_UART_RxCpltCallback>:
}
 800337c:	4770      	bx	lr

0800337e <HAL_UART_RxHalfCpltCallback>:
}
 800337e:	4770      	bx	lr

08003380 <HAL_UART_ErrorCallback>:
}
 8003380:	4770      	bx	lr

08003382 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003382:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003384:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003386:	2384      	movs	r3, #132	; 0x84
 8003388:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800338a:	3304      	adds	r3, #4
 800338c:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	d501      	bpl.n	800339a <UART_DMAError+0x18>
 8003396:	2a21      	cmp	r2, #33	; 0x21
 8003398:	d00e      	beq.n	80033b8 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	065b      	lsls	r3, r3, #25
 80033a0:	d501      	bpl.n	80033a6 <UART_DMAError+0x24>
 80033a2:	2d22      	cmp	r5, #34	; 0x22
 80033a4:	d00f      	beq.n	80033c6 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80033a6:	228c      	movs	r2, #140	; 0x8c
 80033a8:	58a3      	ldr	r3, [r4, r2]
 80033aa:	2110      	movs	r1, #16
 80033ac:	430b      	orrs	r3, r1
 80033ae:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033b0:	0020      	movs	r0, r4
 80033b2:	f7ff ffe5 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80033b8:	2356      	movs	r3, #86	; 0x56
 80033ba:	2200      	movs	r2, #0
 80033bc:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 80033be:	0020      	movs	r0, r4
 80033c0:	f7ff ff8c 	bl	80032dc <UART_EndTxTransfer>
 80033c4:	e7e9      	b.n	800339a <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80033c6:	235e      	movs	r3, #94	; 0x5e
 80033c8:	2200      	movs	r2, #0
 80033ca:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80033cc:	0020      	movs	r0, r4
 80033ce:	f7ff ffa3 	bl	8003318 <UART_EndRxTransfer>
 80033d2:	e7e8      	b.n	80033a6 <UART_DMAError+0x24>

080033d4 <HAL_UARTEx_RxEventCallback>:
}
 80033d4:	4770      	bx	lr

080033d6 <UART_DMARxHalfCplt>:
{
 80033d6:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033da:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d002      	beq.n	80033e6 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80033e0:	f7ff ffcd 	bl	800337e <HAL_UART_RxHalfCpltCallback>
}
 80033e4:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80033e6:	335b      	adds	r3, #91	; 0x5b
 80033e8:	5ac1      	ldrh	r1, [r0, r3]
 80033ea:	0849      	lsrs	r1, r1, #1
 80033ec:	f7ff fff2 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
 80033f0:	e7f8      	b.n	80033e4 <UART_DMARxHalfCplt+0xe>
	...

080033f4 <UART_DMAReceiveCplt>:
{
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	069b      	lsls	r3, r3, #26
 8003400:	d429      	bmi.n	8003456 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8003402:	235e      	movs	r3, #94	; 0x5e
 8003404:	2200      	movs	r2, #0
 8003406:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003408:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	3b5d      	subs	r3, #93	; 0x5d
 800340e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	6801      	ldr	r1, [r0, #0]
 8003414:	680a      	ldr	r2, [r1, #0]
 8003416:	4d1b      	ldr	r5, [pc, #108]	; (8003484 <UART_DMAReceiveCplt+0x90>)
 8003418:	402a      	ands	r2, r5
 800341a:	600a      	str	r2, [r1, #0]
 800341c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	6801      	ldr	r1, [r0, #0]
 800342a:	688a      	ldr	r2, [r1, #8]
 800342c:	439a      	bics	r2, r3
 800342e:	608a      	str	r2, [r1, #8]
 8003430:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003434:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343c:	6802      	ldr	r2, [r0, #0]
 800343e:	6893      	ldr	r3, [r2, #8]
 8003440:	2440      	movs	r4, #64	; 0x40
 8003442:	43a3      	bics	r3, r4
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 800344a:	2388      	movs	r3, #136	; 0x88
 800344c:	2220      	movs	r2, #32
 800344e:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003456:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d00e      	beq.n	800347a <UART_DMAReceiveCplt+0x86>
    HAL_UART_RxCpltCallback(huart);
 800345c:	f7ff ff8e 	bl	800337c <HAL_UART_RxCpltCallback>
}
 8003460:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346a:	6802      	ldr	r2, [r0, #0]
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	3c30      	subs	r4, #48	; 0x30
 8003470:	43a3      	bics	r3, r4
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	f381 8810 	msr	PRIMASK, r1
}
 8003478:	e7ed      	b.n	8003456 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800347a:	335b      	adds	r3, #91	; 0x5b
 800347c:	5ac1      	ldrh	r1, [r0, r3]
 800347e:	f7ff ffa9 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
 8003482:	e7ed      	b.n	8003460 <UART_DMAReceiveCplt+0x6c>
 8003484:	fffffeff 	.word	0xfffffeff

08003488 <UART_SetConfig>:
{
 8003488:	b510      	push	{r4, lr}
 800348a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	6883      	ldr	r3, [r0, #8]
 800348e:	6902      	ldr	r2, [r0, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	6942      	ldr	r2, [r0, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	69c2      	ldr	r2, [r0, #28]
 8003498:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800349a:	6801      	ldr	r1, [r0, #0]
 800349c:	680a      	ldr	r2, [r1, #0]
 800349e:	4863      	ldr	r0, [pc, #396]	; (800362c <UART_SetConfig+0x1a4>)
 80034a0:	4002      	ands	r2, r0
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	6853      	ldr	r3, [r2, #4]
 80034aa:	4961      	ldr	r1, [pc, #388]	; (8003630 <UART_SetConfig+0x1a8>)
 80034ac:	400b      	ands	r3, r1
 80034ae:	68e1      	ldr	r1, [r4, #12]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 80034b4:	6a22      	ldr	r2, [r4, #32]
 80034b6:	69a3      	ldr	r3, [r4, #24]
 80034b8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	688b      	ldr	r3, [r1, #8]
 80034be:	485d      	ldr	r0, [pc, #372]	; (8003634 <UART_SetConfig+0x1ac>)
 80034c0:	4003      	ands	r3, r0
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80034ca:	210f      	movs	r1, #15
 80034cc:	438b      	bics	r3, r1
 80034ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034d0:	430b      	orrs	r3, r1
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	4a58      	ldr	r2, [pc, #352]	; (8003638 <UART_SetConfig+0x1b0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01b      	beq.n	8003514 <UART_SetConfig+0x8c>
 80034dc:	4a57      	ldr	r2, [pc, #348]	; (800363c <UART_SetConfig+0x1b4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d029      	beq.n	8003536 <UART_SetConfig+0xae>
 80034e2:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e4:	69e0      	ldr	r0, [r4, #28]
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	0212      	lsls	r2, r2, #8
 80034ea:	4290      	cmp	r0, r2
 80034ec:	d02d      	beq.n	800354a <UART_SetConfig+0xc2>
    switch (clocksource)
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d100      	bne.n	80034f4 <UART_SetConfig+0x6c>
 80034f2:	e094      	b.n	800361e <UART_SetConfig+0x196>
 80034f4:	d868      	bhi.n	80035c8 <UART_SetConfig+0x140>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d100      	bne.n	80034fc <UART_SetConfig+0x74>
 80034fa:	e08a      	b.n	8003612 <UART_SetConfig+0x18a>
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d161      	bne.n	80035c4 <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003500:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <UART_SetConfig+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2107      	movs	r1, #7
 8003508:	4019      	ands	r1, r3
 800350a:	3101      	adds	r1, #1
 800350c:	484d      	ldr	r0, [pc, #308]	; (8003644 <UART_SetConfig+0x1bc>)
 800350e:	f7fc fe0f 	bl	8000130 <__udivsi3>
        break;
 8003512:	e080      	b.n	8003616 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003514:	4b4a      	ldr	r3, [pc, #296]	; (8003640 <UART_SetConfig+0x1b8>)
 8003516:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003518:	2303      	movs	r3, #3
 800351a:	4013      	ands	r3, r2
 800351c:	2b02      	cmp	r3, #2
 800351e:	d00c      	beq.n	800353a <UART_SetConfig+0xb2>
 8003520:	d805      	bhi.n	800352e <UART_SetConfig+0xa6>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <UART_SetConfig+0xb6>
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10b      	bne.n	8003542 <UART_SetConfig+0xba>
 800352a:	3303      	adds	r3, #3
 800352c:	e7da      	b.n	80034e4 <UART_SetConfig+0x5c>
 800352e:	2b03      	cmp	r3, #3
 8003530:	d109      	bne.n	8003546 <UART_SetConfig+0xbe>
 8003532:	3305      	adds	r3, #5
 8003534:	e7d6      	b.n	80034e4 <UART_SetConfig+0x5c>
 8003536:	2300      	movs	r3, #0
 8003538:	e7d4      	b.n	80034e4 <UART_SetConfig+0x5c>
 800353a:	2302      	movs	r3, #2
 800353c:	e7d2      	b.n	80034e4 <UART_SetConfig+0x5c>
 800353e:	2300      	movs	r3, #0
 8003540:	e7d0      	b.n	80034e4 <UART_SetConfig+0x5c>
 8003542:	2310      	movs	r3, #16
 8003544:	e7ce      	b.n	80034e4 <UART_SetConfig+0x5c>
 8003546:	2310      	movs	r3, #16
 8003548:	e7cc      	b.n	80034e4 <UART_SetConfig+0x5c>
    switch (clocksource)
 800354a:	2b04      	cmp	r3, #4
 800354c:	d037      	beq.n	80035be <UART_SetConfig+0x136>
 800354e:	d80f      	bhi.n	8003570 <UART_SetConfig+0xe8>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02e      	beq.n	80035b2 <UART_SetConfig+0x12a>
 8003554:	2b02      	cmp	r3, #2
 8003556:	d109      	bne.n	800356c <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <UART_SetConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2107      	movs	r1, #7
 8003560:	4019      	ands	r1, r3
 8003562:	3101      	adds	r1, #1
 8003564:	4837      	ldr	r0, [pc, #220]	; (8003644 <UART_SetConfig+0x1bc>)
 8003566:	f7fc fde3 	bl	8000130 <__udivsi3>
        break;
 800356a:	e024      	b.n	80035b6 <UART_SetConfig+0x12e>
    switch (clocksource)
 800356c:	2001      	movs	r0, #1
 800356e:	e047      	b.n	8003600 <UART_SetConfig+0x178>
 8003570:	2b08      	cmp	r3, #8
 8003572:	d11c      	bne.n	80035ae <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <UART_SetConfig+0x1c0>)
 800357a:	5a99      	ldrh	r1, [r3, r2]
 800357c:	f7fc fdd8 	bl	8000130 <__udivsi3>
 8003580:	0040      	lsls	r0, r0, #1
 8003582:	6863      	ldr	r3, [r4, #4]
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	18c0      	adds	r0, r0, r3
 8003588:	6861      	ldr	r1, [r4, #4]
 800358a:	f7fc fdd1 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358e:	0002      	movs	r2, r0
 8003590:	3a10      	subs	r2, #16
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <UART_SetConfig+0x1c4>)
 8003594:	429a      	cmp	r2, r3
 8003596:	d845      	bhi.n	8003624 <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003598:	b282      	uxth	r2, r0
 800359a:	230f      	movs	r3, #15
 800359c:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359e:	0840      	lsrs	r0, r0, #1
 80035a0:	3b08      	subs	r3, #8
 80035a2:	4018      	ands	r0, r3
 80035a4:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	60d8      	str	r0, [r3, #12]
 80035aa:	2000      	movs	r0, #0
 80035ac:	e028      	b.n	8003600 <UART_SetConfig+0x178>
    switch (clocksource)
 80035ae:	2001      	movs	r0, #1
 80035b0:	e026      	b.n	8003600 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7fe ff07 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035b6:	2800      	cmp	r0, #0
 80035b8:	d1dc      	bne.n	8003574 <UART_SetConfig+0xec>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e020      	b.n	8003600 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fecb 	bl	8002358 <HAL_RCC_GetSysClockFreq>
        break;
 80035c2:	e7f8      	b.n	80035b6 <UART_SetConfig+0x12e>
    switch (clocksource)
 80035c4:	2001      	movs	r0, #1
 80035c6:	e01b      	b.n	8003600 <UART_SetConfig+0x178>
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d118      	bne.n	80035fe <UART_SetConfig+0x176>
 80035cc:	2080      	movs	r0, #128	; 0x80
 80035ce:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <UART_SetConfig+0x1c0>)
 80035d6:	5a99      	ldrh	r1, [r3, r2]
 80035d8:	f7fc fdaa 	bl	8000130 <__udivsi3>
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	18c0      	adds	r0, r0, r3
 80035e2:	6861      	ldr	r1, [r4, #4]
 80035e4:	f7fc fda4 	bl	8000130 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e8:	0002      	movs	r2, r0
 80035ea:	3a10      	subs	r2, #16
 80035ec:	4b17      	ldr	r3, [pc, #92]	; (800364c <UART_SetConfig+0x1c4>)
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d81a      	bhi.n	8003628 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	0400      	lsls	r0, r0, #16
 80035f6:	0c00      	lsrs	r0, r0, #16
 80035f8:	60d8      	str	r0, [r3, #12]
 80035fa:	2000      	movs	r0, #0
 80035fc:	e000      	b.n	8003600 <UART_SetConfig+0x178>
    switch (clocksource)
 80035fe:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8003600:	2301      	movs	r3, #1
 8003602:	226a      	movs	r2, #106	; 0x6a
 8003604:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8003606:	3a02      	subs	r2, #2
 8003608:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800360e:	6763      	str	r3, [r4, #116]	; 0x74
}
 8003610:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8003612:	f7fe fed7 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003616:	2800      	cmp	r0, #0
 8003618:	d1da      	bne.n	80035d0 <UART_SetConfig+0x148>
 800361a:	2000      	movs	r0, #0
 800361c:	e7f0      	b.n	8003600 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800361e:	f7fe fe9b 	bl	8002358 <HAL_RCC_GetSysClockFreq>
        break;
 8003622:	e7f8      	b.n	8003616 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003624:	2001      	movs	r0, #1
 8003626:	e7eb      	b.n	8003600 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8003628:	2001      	movs	r0, #1
 800362a:	e7e9      	b.n	8003600 <UART_SetConfig+0x178>
 800362c:	cfff69f3 	.word	0xcfff69f3
 8003630:	ffffcfff 	.word	0xffffcfff
 8003634:	11fff4ff 	.word	0x11fff4ff
 8003638:	40013800 	.word	0x40013800
 800363c:	40004400 	.word	0x40004400
 8003640:	40021000 	.word	0x40021000
 8003644:	02dc6c00 	.word	0x02dc6c00
 8003648:	080049a0 	.word	0x080049a0
 800364c:	0000ffef 	.word	0x0000ffef

08003650 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003652:	07db      	lsls	r3, r3, #31
 8003654:	d506      	bpl.n	8003664 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003656:	6802      	ldr	r2, [r0, #0]
 8003658:	6853      	ldr	r3, [r2, #4]
 800365a:	492c      	ldr	r1, [pc, #176]	; (800370c <UART_AdvFeatureConfig+0xbc>)
 800365c:	400b      	ands	r3, r1
 800365e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003660:	430b      	orrs	r3, r1
 8003662:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003666:	079b      	lsls	r3, r3, #30
 8003668:	d506      	bpl.n	8003678 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	6853      	ldr	r3, [r2, #4]
 800366e:	4928      	ldr	r1, [pc, #160]	; (8003710 <UART_AdvFeatureConfig+0xc0>)
 8003670:	400b      	ands	r3, r1
 8003672:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003674:	430b      	orrs	r3, r1
 8003676:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003678:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800367a:	075b      	lsls	r3, r3, #29
 800367c:	d506      	bpl.n	800368c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	6853      	ldr	r3, [r2, #4]
 8003682:	4924      	ldr	r1, [pc, #144]	; (8003714 <UART_AdvFeatureConfig+0xc4>)
 8003684:	400b      	ands	r3, r1
 8003686:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003688:	430b      	orrs	r3, r1
 800368a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800368c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800368e:	071b      	lsls	r3, r3, #28
 8003690:	d506      	bpl.n	80036a0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003692:	6802      	ldr	r2, [r0, #0]
 8003694:	6853      	ldr	r3, [r2, #4]
 8003696:	4920      	ldr	r1, [pc, #128]	; (8003718 <UART_AdvFeatureConfig+0xc8>)
 8003698:	400b      	ands	r3, r1
 800369a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800369c:	430b      	orrs	r3, r1
 800369e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036a2:	06db      	lsls	r3, r3, #27
 80036a4:	d506      	bpl.n	80036b4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a6:	6802      	ldr	r2, [r0, #0]
 80036a8:	6893      	ldr	r3, [r2, #8]
 80036aa:	491c      	ldr	r1, [pc, #112]	; (800371c <UART_AdvFeatureConfig+0xcc>)
 80036ac:	400b      	ands	r3, r1
 80036ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	d506      	bpl.n	80036c8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ba:	6802      	ldr	r2, [r0, #0]
 80036bc:	6893      	ldr	r3, [r2, #8]
 80036be:	4918      	ldr	r1, [pc, #96]	; (8003720 <UART_AdvFeatureConfig+0xd0>)
 80036c0:	400b      	ands	r3, r1
 80036c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036ca:	065b      	lsls	r3, r3, #25
 80036cc:	d50b      	bpl.n	80036e6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ce:	6802      	ldr	r2, [r0, #0]
 80036d0:	6853      	ldr	r3, [r2, #4]
 80036d2:	4914      	ldr	r1, [pc, #80]	; (8003724 <UART_AdvFeatureConfig+0xd4>)
 80036d4:	400b      	ands	r3, r1
 80036d6:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80036d8:	430b      	orrs	r3, r1
 80036da:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	035b      	lsls	r3, r3, #13
 80036e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	d506      	bpl.n	80036fa <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ec:	6802      	ldr	r2, [r0, #0]
 80036ee:	6853      	ldr	r3, [r2, #4]
 80036f0:	490d      	ldr	r1, [pc, #52]	; (8003728 <UART_AdvFeatureConfig+0xd8>)
 80036f2:	400b      	ands	r3, r1
 80036f4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6053      	str	r3, [r2, #4]
}
 80036fa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fc:	6802      	ldr	r2, [r0, #0]
 80036fe:	6853      	ldr	r3, [r2, #4]
 8003700:	490a      	ldr	r1, [pc, #40]	; (800372c <UART_AdvFeatureConfig+0xdc>)
 8003702:	400b      	ands	r3, r1
 8003704:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003706:	430b      	orrs	r3, r1
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	e7ec      	b.n	80036e6 <UART_AdvFeatureConfig+0x96>
 800370c:	fffdffff 	.word	0xfffdffff
 8003710:	fffeffff 	.word	0xfffeffff
 8003714:	fffbffff 	.word	0xfffbffff
 8003718:	ffff7fff 	.word	0xffff7fff
 800371c:	ffffefff 	.word	0xffffefff
 8003720:	ffffdfff 	.word	0xffffdfff
 8003724:	ffefffff 	.word	0xffefffff
 8003728:	fff7ffff 	.word	0xfff7ffff
 800372c:	ff9fffff 	.word	0xff9fffff

08003730 <UART_WaitOnFlagUntilTimeout>:
{
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46ce      	mov	lr, r9
 8003734:	4647      	mov	r7, r8
 8003736:	b580      	push	{r7, lr}
 8003738:	0006      	movs	r6, r0
 800373a:	000d      	movs	r5, r1
 800373c:	0017      	movs	r7, r2
 800373e:	4699      	mov	r9, r3
 8003740:	9b08      	ldr	r3, [sp, #32]
 8003742:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003744:	6833      	ldr	r3, [r6, #0]
 8003746:	69dc      	ldr	r4, [r3, #28]
 8003748:	402c      	ands	r4, r5
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	4263      	negs	r3, r4
 800374e:	415c      	adcs	r4, r3
 8003750:	42bc      	cmp	r4, r7
 8003752:	d157      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 8003754:	4643      	mov	r3, r8
 8003756:	3301      	adds	r3, #1
 8003758:	d0f4      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd ff49 	bl	80015f0 <HAL_GetTick>
 800375e:	464b      	mov	r3, r9
 8003760:	1ac0      	subs	r0, r0, r3
 8003762:	4540      	cmp	r0, r8
 8003764:	d82e      	bhi.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x94>
 8003766:	4643      	mov	r3, r8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02b      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376c:	6833      	ldr	r3, [r6, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	0752      	lsls	r2, r2, #29
 8003772:	d5e7      	bpl.n	8003744 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	0512      	lsls	r2, r2, #20
 8003778:	d5e4      	bpl.n	8003744 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	0112      	lsls	r2, r2, #4
 800377e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	2201      	movs	r2, #1
 8003786:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800378a:	6831      	ldr	r1, [r6, #0]
 800378c:	680b      	ldr	r3, [r1, #0]
 800378e:	4c20      	ldr	r4, [pc, #128]	; (8003810 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8003790:	4023      	ands	r3, r4
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a0:	6831      	ldr	r1, [r6, #0]
 80037a2:	688b      	ldr	r3, [r1, #8]
 80037a4:	4393      	bics	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
 80037a8:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80037ac:	2320      	movs	r3, #32
 80037ae:	3283      	adds	r2, #131	; 0x83
 80037b0:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80037b2:	3204      	adds	r2, #4
 80037b4:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b6:	3204      	adds	r2, #4
 80037b8:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 80037ba:	3360      	adds	r3, #96	; 0x60
 80037bc:	2200      	movs	r2, #0
 80037be:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80037c0:	2003      	movs	r0, #3
 80037c2:	e020      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	2201      	movs	r2, #1
 80037ca:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037ce:	6831      	ldr	r1, [r6, #0]
 80037d0:	680b      	ldr	r3, [r1, #0]
 80037d2:	4c0f      	ldr	r4, [pc, #60]	; (8003810 <UART_WaitOnFlagUntilTimeout+0xe0>)
 80037d4:	4023      	ands	r3, r4
 80037d6:	600b      	str	r3, [r1, #0]
 80037d8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e4:	6831      	ldr	r1, [r6, #0]
 80037e6:	688b      	ldr	r3, [r1, #8]
 80037e8:	4393      	bics	r3, r2
 80037ea:	608b      	str	r3, [r1, #8]
 80037ec:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80037f0:	2320      	movs	r3, #32
 80037f2:	3283      	adds	r2, #131	; 0x83
 80037f4:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80037f6:	3204      	adds	r2, #4
 80037f8:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 80037fa:	3360      	adds	r3, #96	; 0x60
 80037fc:	2200      	movs	r2, #0
 80037fe:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8003800:	2003      	movs	r0, #3
 8003802:	e000      	b.n	8003806 <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8003804:	2000      	movs	r0, #0
}
 8003806:	bcc0      	pop	{r6, r7}
 8003808:	46b9      	mov	r9, r7
 800380a:	46b0      	mov	r8, r6
 800380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	fffffe5f 	.word	0xfffffe5f

08003814 <HAL_UART_Transmit>:
{
 8003814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003816:	46c6      	mov	lr, r8
 8003818:	b500      	push	{lr}
 800381a:	b082      	sub	sp, #8
 800381c:	0004      	movs	r4, r0
 800381e:	000d      	movs	r5, r1
 8003820:	4690      	mov	r8, r2
 8003822:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003824:	2384      	movs	r3, #132	; 0x84
 8003826:	58c3      	ldr	r3, [r0, r3]
 8003828:	2b20      	cmp	r3, #32
 800382a:	d16a      	bne.n	8003902 <HAL_UART_Transmit+0xee>
    if ((pData == NULL) || (Size == 0U))
 800382c:	2900      	cmp	r1, #0
 800382e:	d100      	bne.n	8003832 <HAL_UART_Transmit+0x1e>
 8003830:	e06c      	b.n	800390c <HAL_UART_Transmit+0xf8>
 8003832:	2a00      	cmp	r2, #0
 8003834:	d100      	bne.n	8003838 <HAL_UART_Transmit+0x24>
 8003836:	e06b      	b.n	8003910 <HAL_UART_Transmit+0xfc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	015b      	lsls	r3, r3, #5
 800383c:	6882      	ldr	r2, [r0, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d01f      	beq.n	8003882 <HAL_UART_Transmit+0x6e>
    __HAL_LOCK(huart);
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	5ce3      	ldrb	r3, [r4, r3]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d064      	beq.n	8003914 <HAL_UART_Transmit+0x100>
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	2201      	movs	r2, #1
 800384e:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003850:	330c      	adds	r3, #12
 8003852:	2200      	movs	r2, #0
 8003854:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003856:	3b08      	subs	r3, #8
 8003858:	3221      	adds	r2, #33	; 0x21
 800385a:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800385c:	f7fd fec8 	bl	80015f0 <HAL_GetTick>
 8003860:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8003862:	2354      	movs	r3, #84	; 0x54
 8003864:	4642      	mov	r2, r8
 8003866:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8003868:	3302      	adds	r3, #2
 800386a:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	015b      	lsls	r3, r3, #5
 8003870:	68a2      	ldr	r2, [r4, #8]
 8003872:	429a      	cmp	r2, r3
 8003874:	d00c      	beq.n	8003890 <HAL_UART_Transmit+0x7c>
      pdata16bits = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	4698      	mov	r8, r3
    __HAL_UNLOCK(huart);
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	2200      	movs	r2, #0
 800387e:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8003880:	e01d      	b.n	80038be <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	6903      	ldr	r3, [r0, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1dc      	bne.n	8003842 <HAL_UART_Transmit+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003888:	07cb      	lsls	r3, r1, #31
 800388a:	d5da      	bpl.n	8003842 <HAL_UART_Transmit+0x2e>
        return  HAL_ERROR;
 800388c:	2001      	movs	r0, #1
 800388e:	e039      	b.n	8003904 <HAL_UART_Transmit+0xf0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Transmit+0x88>
      pdata16bits = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	4698      	mov	r8, r3
 800389a:	e7ee      	b.n	800387a <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 800389c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800389e:	2500      	movs	r5, #0
 80038a0:	e7eb      	b.n	800387a <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a2:	4643      	mov	r3, r8
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	05db      	lsls	r3, r3, #23
 80038aa:	0ddb      	lsrs	r3, r3, #23
 80038ac:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80038ae:	2302      	movs	r3, #2
 80038b0:	469c      	mov	ip, r3
 80038b2:	44e0      	add	r8, ip
      huart->TxXferCount--;
 80038b4:	2356      	movs	r3, #86	; 0x56
 80038b6:	5ae2      	ldrh	r2, [r4, r3]
 80038b8:	3a01      	subs	r2, #1
 80038ba:	b292      	uxth	r2, r2
 80038bc:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80038be:	2356      	movs	r3, #86	; 0x56
 80038c0:	5ae3      	ldrh	r3, [r4, r3]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00f      	beq.n	80038e8 <HAL_UART_Transmit+0xd4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c8:	9600      	str	r6, [sp, #0]
 80038ca:	003b      	movs	r3, r7
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0020      	movs	r0, r4
 80038d2:	f7ff ff2d 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d11e      	bne.n	8003918 <HAL_UART_Transmit+0x104>
      if (pdata8bits == NULL)
 80038da:	2d00      	cmp	r5, #0
 80038dc:	d0e1      	beq.n	80038a2 <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038de:	782a      	ldrb	r2, [r5, #0]
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038e4:	3501      	adds	r5, #1
 80038e6:	e7e5      	b.n	80038b4 <HAL_UART_Transmit+0xa0>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e8:	9600      	str	r6, [sp, #0]
 80038ea:	003b      	movs	r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	0020      	movs	r0, r4
 80038f2:	f7ff ff1d 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d110      	bne.n	800391c <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_READY;
 80038fa:	2384      	movs	r3, #132	; 0x84
 80038fc:	2220      	movs	r2, #32
 80038fe:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003900:	e000      	b.n	8003904 <HAL_UART_Transmit+0xf0>
    return HAL_BUSY;
 8003902:	2002      	movs	r0, #2
}
 8003904:	b002      	add	sp, #8
 8003906:	bc80      	pop	{r7}
 8003908:	46b8      	mov	r8, r7
 800390a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800390c:	2001      	movs	r0, #1
 800390e:	e7f9      	b.n	8003904 <HAL_UART_Transmit+0xf0>
 8003910:	2001      	movs	r0, #1
 8003912:	e7f7      	b.n	8003904 <HAL_UART_Transmit+0xf0>
    __HAL_LOCK(huart);
 8003914:	2002      	movs	r0, #2
 8003916:	e7f5      	b.n	8003904 <HAL_UART_Transmit+0xf0>
        return HAL_TIMEOUT;
 8003918:	2003      	movs	r0, #3
 800391a:	e7f3      	b.n	8003904 <HAL_UART_Transmit+0xf0>
      return HAL_TIMEOUT;
 800391c:	2003      	movs	r0, #3
 800391e:	e7f1      	b.n	8003904 <HAL_UART_Transmit+0xf0>

08003920 <UART_CheckIdleState>:
{
 8003920:	b530      	push	{r4, r5, lr}
 8003922:	b083      	sub	sp, #12
 8003924:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003926:	238c      	movs	r3, #140	; 0x8c
 8003928:	2200      	movs	r2, #0
 800392a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800392c:	f7fd fe60 	bl	80015f0 <HAL_GetTick>
 8003930:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	0713      	lsls	r3, r2, #28
 8003938:	d40f      	bmi.n	800395a <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	075b      	lsls	r3, r3, #29
 8003940:	d418      	bmi.n	8003974 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8003942:	2320      	movs	r3, #32
 8003944:	2284      	movs	r2, #132	; 0x84
 8003946:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003948:	3204      	adds	r2, #4
 800394a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	2300      	movs	r3, #0
 800394e:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8003950:	3a08      	subs	r2, #8
 8003952:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003954:	2000      	movs	r0, #0
}
 8003956:	b003      	add	sp, #12
 8003958:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <UART_CheckIdleState+0x70>)
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	0003      	movs	r3, r0
 8003962:	2200      	movs	r2, #0
 8003964:	0389      	lsls	r1, r1, #14
 8003966:	0020      	movs	r0, r4
 8003968:	f7ff fee2 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 800396c:	2800      	cmp	r0, #0
 800396e:	d0e4      	beq.n	800393a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003970:	2003      	movs	r0, #3
 8003972:	e7f0      	b.n	8003956 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003974:	2180      	movs	r1, #128	; 0x80
 8003976:	4b06      	ldr	r3, [pc, #24]	; (8003990 <UART_CheckIdleState+0x70>)
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	002b      	movs	r3, r5
 800397c:	2200      	movs	r2, #0
 800397e:	03c9      	lsls	r1, r1, #15
 8003980:	0020      	movs	r0, r4
 8003982:	f7ff fed5 	bl	8003730 <UART_WaitOnFlagUntilTimeout>
 8003986:	2800      	cmp	r0, #0
 8003988:	d0db      	beq.n	8003942 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800398a:	2003      	movs	r0, #3
 800398c:	e7e3      	b.n	8003956 <UART_CheckIdleState+0x36>
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	01ffffff 	.word	0x01ffffff

08003994 <HAL_UART_Init>:
{
 8003994:	b510      	push	{r4, lr}
 8003996:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003998:	d030      	beq.n	80039fc <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800399a:	2384      	movs	r3, #132	; 0x84
 800399c:	58c3      	ldr	r3, [r0, r3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d022      	beq.n	80039e8 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80039a2:	2384      	movs	r3, #132	; 0x84
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	2101      	movs	r1, #1
 80039ae:	438b      	bics	r3, r1
 80039b0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b2:	0020      	movs	r0, r4
 80039b4:	f7ff fd68 	bl	8003488 <UART_SetConfig>
 80039b8:	2801      	cmp	r0, #1
 80039ba:	d014      	beq.n	80039e6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d118      	bne.n	80039f4 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	6822      	ldr	r2, [r4, #0]
 80039c4:	6853      	ldr	r3, [r2, #4]
 80039c6:	490e      	ldr	r1, [pc, #56]	; (8003a00 <HAL_UART_Init+0x6c>)
 80039c8:	400b      	ands	r3, r1
 80039ca:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	6893      	ldr	r3, [r2, #8]
 80039d0:	212a      	movs	r1, #42	; 0x2a
 80039d2:	438b      	bics	r3, r1
 80039d4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	3929      	subs	r1, #41	; 0x29
 80039dc:	430b      	orrs	r3, r1
 80039de:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80039e0:	0020      	movs	r0, r4
 80039e2:	f7ff ff9d 	bl	8003920 <UART_CheckIdleState>
}
 80039e6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80039e8:	3380      	adds	r3, #128	; 0x80
 80039ea:	2200      	movs	r2, #0
 80039ec:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80039ee:	f7fd fcfd 	bl	80013ec <HAL_UART_MspInit>
 80039f2:	e7d6      	b.n	80039a2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80039f4:	0020      	movs	r0, r4
 80039f6:	f7ff fe2b 	bl	8003650 <UART_AdvFeatureConfig>
 80039fa:	e7e2      	b.n	80039c2 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
 80039fe:	e7f2      	b.n	80039e6 <HAL_UART_Init+0x52>
 8003a00:	ffffb7ff 	.word	0xffffb7ff

08003a04 <UART_Start_Receive_DMA>:
{
 8003a04:	b510      	push	{r4, lr}
 8003a06:	0004      	movs	r4, r0
 8003a08:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8003a0a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8003a0c:	225c      	movs	r2, #92	; 0x5c
 8003a0e:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	3230      	adds	r2, #48	; 0x30
 8003a12:	2100      	movs	r1, #0
 8003a14:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a16:	3a04      	subs	r2, #4
 8003a18:	3122      	adds	r1, #34	; 0x22
 8003a1a:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8003a1c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d012      	beq.n	8003a48 <UART_Start_Receive_DMA+0x44>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a22:	4924      	ldr	r1, [pc, #144]	; (8003ab4 <UART_Start_Receive_DMA+0xb0>)
 8003a24:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a26:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003a28:	4923      	ldr	r1, [pc, #140]	; (8003ab8 <UART_Start_Receive_DMA+0xb4>)
 8003a2a:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a2c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003a2e:	4923      	ldr	r1, [pc, #140]	; (8003abc <UART_Start_Receive_DMA+0xb8>)
 8003a30:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003a32:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8003a34:	2100      	movs	r1, #0
 8003a36:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003a38:	6801      	ldr	r1, [r0, #0]
 8003a3a:	3124      	adds	r1, #36	; 0x24
 8003a3c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003a3e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003a40:	f7fe fb5c 	bl	80020fc <HAL_DMA_Start_IT>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d129      	bne.n	8003a9c <UART_Start_Receive_DMA+0x98>
  __HAL_UNLOCK(huart);
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	54e2      	strb	r2, [r4, r3]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <UART_Start_Receive_DMA+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5e:	6822      	ldr	r2, [r4, #0]
 8003a60:	6810      	ldr	r0, [r2, #0]
 8003a62:	33ff      	adds	r3, #255	; 0xff
 8003a64:	4303      	orrs	r3, r0
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a70:	2301      	movs	r3, #1
 8003a72:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	688a      	ldr	r2, [r1, #8]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	608a      	str	r2, [r1, #8]
 8003a7e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a82:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	6893      	ldr	r3, [r2, #8]
 8003a8e:	2040      	movs	r0, #64	; 0x40
 8003a90:	4303      	orrs	r3, r0
 8003a92:	6093      	str	r3, [r2, #8]
 8003a94:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8003a98:	2000      	movs	r0, #0
}
 8003a9a:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a9c:	238c      	movs	r3, #140	; 0x8c
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8003aa2:	3b0c      	subs	r3, #12
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	3220      	adds	r2, #32
 8003aac:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8003aae:	2001      	movs	r0, #1
 8003ab0:	e7f3      	b.n	8003a9a <UART_Start_Receive_DMA+0x96>
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	080033f5 	.word	0x080033f5
 8003ab8:	080033d7 	.word	0x080033d7
 8003abc:	08003383 	.word	0x08003383

08003ac0 <HAL_UART_Receive_DMA>:
{
 8003ac0:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ac2:	2388      	movs	r3, #136	; 0x88
 8003ac4:	58c3      	ldr	r3, [r0, r3]
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d12c      	bne.n	8003b24 <HAL_UART_Receive_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8003aca:	2900      	cmp	r1, #0
 8003acc:	d02c      	beq.n	8003b28 <HAL_UART_Receive_DMA+0x68>
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d02c      	beq.n	8003b2c <HAL_UART_Receive_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	6884      	ldr	r4, [r0, #8]
 8003ad8:	429c      	cmp	r4, r3
 8003ada:	d01c      	beq.n	8003b16 <HAL_UART_Receive_DMA+0x56>
    __HAL_LOCK(huart);
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	5cc3      	ldrb	r3, [r0, r3]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d025      	beq.n	8003b30 <HAL_UART_Receive_DMA+0x70>
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	2401      	movs	r4, #1
 8003ae8:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	2300      	movs	r3, #0
 8003aec:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aee:	6803      	ldr	r3, [r0, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	d50c      	bpl.n	8003b10 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afa:	2301      	movs	r3, #1
 8003afc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b00:	6804      	ldr	r4, [r0, #0]
 8003b02:	6825      	ldr	r5, [r4, #0]
 8003b04:	2380      	movs	r3, #128	; 0x80
 8003b06:	04db      	lsls	r3, r3, #19
 8003b08:	432b      	orrs	r3, r5
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b10:	f7ff ff78 	bl	8003a04 <UART_Start_Receive_DMA>
 8003b14:	e007      	b.n	8003b26 <HAL_UART_Receive_DMA+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b16:	6903      	ldr	r3, [r0, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1df      	bne.n	8003adc <HAL_UART_Receive_DMA+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b1c:	07cb      	lsls	r3, r1, #31
 8003b1e:	d5dd      	bpl.n	8003adc <HAL_UART_Receive_DMA+0x1c>
        return  HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
 8003b22:	e000      	b.n	8003b26 <HAL_UART_Receive_DMA+0x66>
    return HAL_BUSY;
 8003b24:	2002      	movs	r0, #2
}
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e7fc      	b.n	8003b26 <HAL_UART_Receive_DMA+0x66>
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e7fa      	b.n	8003b26 <HAL_UART_Receive_DMA+0x66>
    __HAL_LOCK(huart);
 8003b30:	2002      	movs	r0, #2
 8003b32:	e7f8      	b.n	8003b26 <HAL_UART_Receive_DMA+0x66>

08003b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b38:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003b3e:	3301      	adds	r3, #1
 8003b40:	226a      	movs	r2, #106	; 0x6a
 8003b42:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003b44:	3a02      	subs	r2, #2
 8003b46:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b4a:	6802      	ldr	r2, [r0, #0]
 8003b4c:	6895      	ldr	r5, [r2, #8]
 8003b4e:	0e6d      	lsrs	r5, r5, #25
 8003b50:	2307      	movs	r3, #7
 8003b52:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b54:	6892      	ldr	r2, [r2, #8]
 8003b56:	0f52      	lsrs	r2, r2, #29
 8003b58:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b5a:	4f08      	ldr	r7, [pc, #32]	; (8003b7c <UARTEx_SetNbDataToProcess+0x48>)
 8003b5c:	5cf8      	ldrb	r0, [r7, r3]
 8003b5e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b60:	4e07      	ldr	r6, [pc, #28]	; (8003b80 <UARTEx_SetNbDataToProcess+0x4c>)
 8003b62:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b64:	f7fc fb6e 	bl	8000244 <__divsi3>
 8003b68:	236a      	movs	r3, #106	; 0x6a
 8003b6a:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b6c:	5d78      	ldrb	r0, [r7, r5]
 8003b6e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b70:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b72:	f7fc fb67 	bl	8000244 <__divsi3>
 8003b76:	2368      	movs	r3, #104	; 0x68
 8003b78:	52e0      	strh	r0, [r4, r3]
}
 8003b7a:	e7e5      	b.n	8003b48 <UARTEx_SetNbDataToProcess+0x14>
 8003b7c:	080049c0 	.word	0x080049c0
 8003b80:	080049b8 	.word	0x080049b8

08003b84 <HAL_UARTEx_DisableFifoMode>:
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	5cc3      	ldrb	r3, [r0, r3]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d015      	beq.n	8003bba <HAL_UARTEx_DisableFifoMode+0x36>
 8003b8e:	2480      	movs	r4, #128	; 0x80
 8003b90:	2601      	movs	r6, #1
 8003b92:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b94:	2584      	movs	r5, #132	; 0x84
 8003b96:	2324      	movs	r3, #36	; 0x24
 8003b98:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9a:	6802      	ldr	r2, [r0, #0]
 8003b9c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003b9e:	6811      	ldr	r1, [r2, #0]
 8003ba0:	43b1      	bics	r1, r6
 8003ba2:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ba4:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003ba6:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ba8:	2200      	movs	r2, #0
 8003baa:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bac:	6801      	ldr	r1, [r0, #0]
 8003bae:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003bb4:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003bb6:	2000      	movs	r0, #0
}
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003bba:	2002      	movs	r0, #2
 8003bbc:	e7fc      	b.n	8003bb8 <HAL_UARTEx_DisableFifoMode+0x34>
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	dfffffff 	.word	0xdfffffff

08003bc4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	0004      	movs	r4, r0
 8003bc8:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	5cc3      	ldrb	r3, [r0, r3]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d01b      	beq.n	8003c0a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003bd2:	2580      	movs	r5, #128	; 0x80
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003bd8:	2684      	movs	r6, #132	; 0x84
 8003bda:	2324      	movs	r3, #36	; 0x24
 8003bdc:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	4381      	bics	r1, r0
 8003be6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	6883      	ldr	r3, [r0, #8]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	08d9      	lsrs	r1, r3, #3
 8003bf0:	4311      	orrs	r1, r2
 8003bf2:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003bf4:	0020      	movs	r0, r4
 8003bf6:	f7ff ff9d 	bl	8003b34 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003c02:	2300      	movs	r3, #0
 8003c04:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003c06:	2000      	movs	r0, #0
}
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	e7fc      	b.n	8003c08 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003c10 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	0004      	movs	r4, r0
 8003c14:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	5c82      	ldrb	r2, [r0, r2]
 8003c1a:	2a01      	cmp	r2, #1
 8003c1c:	d01b      	beq.n	8003c56 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003c1e:	2580      	movs	r5, #128	; 0x80
 8003c20:	2001      	movs	r0, #1
 8003c22:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	2684      	movs	r6, #132	; 0x84
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003c2e:	6811      	ldr	r1, [r2, #0]
 8003c30:	4381      	bics	r1, r0
 8003c32:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	6891      	ldr	r1, [r2, #8]
 8003c38:	4808      	ldr	r0, [pc, #32]	; (8003c5c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003c3a:	4001      	ands	r1, r0
 8003c3c:	4319      	orrs	r1, r3
 8003c3e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003c40:	0020      	movs	r0, r4
 8003c42:	f7ff ff77 	bl	8003b34 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003c52:	2000      	movs	r0, #0
}
 8003c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003c56:	2002      	movs	r0, #2
 8003c58:	e7fc      	b.n	8003c54 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	f1ffffff 	.word	0xf1ffffff

08003c60 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <LL_SetSystemCoreClock+0x8>)
 8003c62:	6018      	str	r0, [r3, #0]
}
 8003c64:	4770      	bx	lr
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	20000004 	.word	0x20000004

08003c6c <__errno>:
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <__errno+0x8>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	4770      	bx	lr
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000010 	.word	0x20000010

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	4d0c      	ldr	r5, [pc, #48]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7e:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	2600      	movs	r6, #0
 8003c8a:	f000 fd81 	bl	8004790 <_init>
 8003c8e:	4d0a      	ldr	r5, [pc, #40]	; (8003cb8 <__libc_init_array+0x40>)
 8003c90:	4c0a      	ldr	r4, [pc, #40]	; (8003cbc <__libc_init_array+0x44>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	00b3      	lsls	r3, r6, #2
 8003c9e:	58eb      	ldr	r3, [r5, r3]
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	00b3      	lsls	r3, r6, #2
 8003ca8:	58eb      	ldr	r3, [r5, r3]
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08004afc 	.word	0x08004afc
 8003cb4:	08004afc 	.word	0x08004afc
 8003cb8:	08004afc 	.word	0x08004afc
 8003cbc:	08004b00 	.word	0x08004b00

08003cc0 <memset>:
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	1882      	adds	r2, r0, r2
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d100      	bne.n	8003cca <memset+0xa>
 8003cc8:	4770      	bx	lr
 8003cca:	7019      	strb	r1, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e7f9      	b.n	8003cc4 <memset+0x4>

08003cd0 <strncpy>:
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	b530      	push	{r4, r5, lr}
 8003cd4:	001d      	movs	r5, r3
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	d006      	beq.n	8003ce8 <strncpy+0x18>
 8003cda:	780c      	ldrb	r4, [r1, #0]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	3301      	adds	r3, #1
 8003ce0:	702c      	strb	r4, [r5, #0]
 8003ce2:	3101      	adds	r1, #1
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	d1f5      	bne.n	8003cd4 <strncpy+0x4>
 8003ce8:	2100      	movs	r1, #0
 8003cea:	189a      	adds	r2, r3, r2
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <strncpy+0x22>
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	7019      	strb	r1, [r3, #0]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	e7f9      	b.n	8003cec <strncpy+0x1c>

08003cf8 <__strtok_r>:
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d102      	bne.n	8003d04 <__strtok_r+0xc>
 8003cfe:	6810      	ldr	r0, [r2, #0]
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d013      	beq.n	8003d2c <__strtok_r+0x34>
 8003d04:	0004      	movs	r4, r0
 8003d06:	0020      	movs	r0, r4
 8003d08:	000e      	movs	r6, r1
 8003d0a:	7805      	ldrb	r5, [r0, #0]
 8003d0c:	3401      	adds	r4, #1
 8003d0e:	7837      	ldrb	r7, [r6, #0]
 8003d10:	2f00      	cmp	r7, #0
 8003d12:	d104      	bne.n	8003d1e <__strtok_r+0x26>
 8003d14:	2d00      	cmp	r5, #0
 8003d16:	d10f      	bne.n	8003d38 <__strtok_r+0x40>
 8003d18:	0028      	movs	r0, r5
 8003d1a:	6015      	str	r5, [r2, #0]
 8003d1c:	e006      	b.n	8003d2c <__strtok_r+0x34>
 8003d1e:	3601      	adds	r6, #1
 8003d20:	42bd      	cmp	r5, r7
 8003d22:	d1f4      	bne.n	8003d0e <__strtok_r+0x16>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ee      	bne.n	8003d06 <__strtok_r+0xe>
 8003d28:	6014      	str	r4, [r2, #0]
 8003d2a:	7003      	strb	r3, [r0, #0]
 8003d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2e:	002f      	movs	r7, r5
 8003d30:	e00f      	b.n	8003d52 <__strtok_r+0x5a>
 8003d32:	3301      	adds	r3, #1
 8003d34:	2e00      	cmp	r6, #0
 8003d36:	d104      	bne.n	8003d42 <__strtok_r+0x4a>
 8003d38:	0023      	movs	r3, r4
 8003d3a:	3401      	adds	r4, #1
 8003d3c:	781d      	ldrb	r5, [r3, #0]
 8003d3e:	0027      	movs	r7, r4
 8003d40:	000b      	movs	r3, r1
 8003d42:	781e      	ldrb	r6, [r3, #0]
 8003d44:	42b5      	cmp	r5, r6
 8003d46:	d1f4      	bne.n	8003d32 <__strtok_r+0x3a>
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	d0f0      	beq.n	8003d2e <__strtok_r+0x36>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	3c01      	subs	r4, #1
 8003d50:	7023      	strb	r3, [r4, #0]
 8003d52:	6017      	str	r7, [r2, #0]
 8003d54:	e7ea      	b.n	8003d2c <__strtok_r+0x34>

08003d56 <strtok_r>:
 8003d56:	b510      	push	{r4, lr}
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f7ff ffcd 	bl	8003cf8 <__strtok_r>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <_strtoul_l.constprop.0>:
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	b087      	sub	sp, #28
 8003d64:	9202      	str	r2, [sp, #8]
 8003d66:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <_strtoul_l.constprop.0+0x110>)
 8003d68:	001e      	movs	r6, r3
 8003d6a:	9101      	str	r1, [sp, #4]
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	4694      	mov	ip, r2
 8003d70:	2108      	movs	r1, #8
 8003d72:	9005      	str	r0, [sp, #20]
 8003d74:	001a      	movs	r2, r3
 8003d76:	4660      	mov	r0, ip
 8003d78:	7814      	ldrb	r4, [r2, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	5d00      	ldrb	r0, [r0, r4]
 8003d7e:	001d      	movs	r5, r3
 8003d80:	0007      	movs	r7, r0
 8003d82:	400f      	ands	r7, r1
 8003d84:	4208      	tst	r0, r1
 8003d86:	d1f5      	bne.n	8003d74 <_strtoul_l.constprop.0+0x14>
 8003d88:	2c2d      	cmp	r4, #45	; 0x2d
 8003d8a:	d13a      	bne.n	8003e02 <_strtoul_l.constprop.0+0xa2>
 8003d8c:	2701      	movs	r7, #1
 8003d8e:	781c      	ldrb	r4, [r3, #0]
 8003d90:	1c95      	adds	r5, r2, #2
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d067      	beq.n	8003e66 <_strtoul_l.constprop.0+0x106>
 8003d96:	2e10      	cmp	r6, #16
 8003d98:	d109      	bne.n	8003dae <_strtoul_l.constprop.0+0x4e>
 8003d9a:	2c30      	cmp	r4, #48	; 0x30
 8003d9c:	d107      	bne.n	8003dae <_strtoul_l.constprop.0+0x4e>
 8003d9e:	2220      	movs	r2, #32
 8003da0:	782b      	ldrb	r3, [r5, #0]
 8003da2:	4393      	bics	r3, r2
 8003da4:	2b58      	cmp	r3, #88	; 0x58
 8003da6:	d159      	bne.n	8003e5c <_strtoul_l.constprop.0+0xfc>
 8003da8:	2610      	movs	r6, #16
 8003daa:	786c      	ldrb	r4, [r5, #1]
 8003dac:	3502      	adds	r5, #2
 8003dae:	2001      	movs	r0, #1
 8003db0:	0031      	movs	r1, r6
 8003db2:	4240      	negs	r0, r0
 8003db4:	f7fc f9bc 	bl	8000130 <__udivsi3>
 8003db8:	9003      	str	r0, [sp, #12]
 8003dba:	2001      	movs	r0, #1
 8003dbc:	0031      	movs	r1, r6
 8003dbe:	4240      	negs	r0, r0
 8003dc0:	f7fc fa3c 	bl	800023c <__aeabi_uidivmod>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9104      	str	r1, [sp, #16]
 8003dc8:	2101      	movs	r1, #1
 8003dca:	2201      	movs	r2, #1
 8003dcc:	0018      	movs	r0, r3
 8003dce:	468c      	mov	ip, r1
 8003dd0:	4252      	negs	r2, r2
 8003dd2:	0021      	movs	r1, r4
 8003dd4:	3930      	subs	r1, #48	; 0x30
 8003dd6:	2909      	cmp	r1, #9
 8003dd8:	d818      	bhi.n	8003e0c <_strtoul_l.constprop.0+0xac>
 8003dda:	000c      	movs	r4, r1
 8003ddc:	42a6      	cmp	r6, r4
 8003dde:	dd23      	ble.n	8003e28 <_strtoul_l.constprop.0+0xc8>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	db1f      	blt.n	8003e24 <_strtoul_l.constprop.0+0xc4>
 8003de4:	9903      	ldr	r1, [sp, #12]
 8003de6:	0013      	movs	r3, r2
 8003de8:	4281      	cmp	r1, r0
 8003dea:	d307      	bcc.n	8003dfc <_strtoul_l.constprop.0+0x9c>
 8003dec:	d103      	bne.n	8003df6 <_strtoul_l.constprop.0+0x96>
 8003dee:	9904      	ldr	r1, [sp, #16]
 8003df0:	0013      	movs	r3, r2
 8003df2:	42a1      	cmp	r1, r4
 8003df4:	db02      	blt.n	8003dfc <_strtoul_l.constprop.0+0x9c>
 8003df6:	4663      	mov	r3, ip
 8003df8:	4370      	muls	r0, r6
 8003dfa:	1820      	adds	r0, r4, r0
 8003dfc:	782c      	ldrb	r4, [r5, #0]
 8003dfe:	3501      	adds	r5, #1
 8003e00:	e7e7      	b.n	8003dd2 <_strtoul_l.constprop.0+0x72>
 8003e02:	2c2b      	cmp	r4, #43	; 0x2b
 8003e04:	d1c5      	bne.n	8003d92 <_strtoul_l.constprop.0+0x32>
 8003e06:	781c      	ldrb	r4, [r3, #0]
 8003e08:	1c95      	adds	r5, r2, #2
 8003e0a:	e7c2      	b.n	8003d92 <_strtoul_l.constprop.0+0x32>
 8003e0c:	0021      	movs	r1, r4
 8003e0e:	3941      	subs	r1, #65	; 0x41
 8003e10:	2919      	cmp	r1, #25
 8003e12:	d801      	bhi.n	8003e18 <_strtoul_l.constprop.0+0xb8>
 8003e14:	3c37      	subs	r4, #55	; 0x37
 8003e16:	e7e1      	b.n	8003ddc <_strtoul_l.constprop.0+0x7c>
 8003e18:	0021      	movs	r1, r4
 8003e1a:	3961      	subs	r1, #97	; 0x61
 8003e1c:	2919      	cmp	r1, #25
 8003e1e:	d803      	bhi.n	8003e28 <_strtoul_l.constprop.0+0xc8>
 8003e20:	3c57      	subs	r4, #87	; 0x57
 8003e22:	e7db      	b.n	8003ddc <_strtoul_l.constprop.0+0x7c>
 8003e24:	0013      	movs	r3, r2
 8003e26:	e7e9      	b.n	8003dfc <_strtoul_l.constprop.0+0x9c>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da09      	bge.n	8003e40 <_strtoul_l.constprop.0+0xe0>
 8003e2c:	2322      	movs	r3, #34	; 0x22
 8003e2e:	2001      	movs	r0, #1
 8003e30:	9a05      	ldr	r2, [sp, #20]
 8003e32:	4240      	negs	r0, r0
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	9b02      	ldr	r3, [sp, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <_strtoul_l.constprop.0+0xf0>
 8003e3c:	b007      	add	sp, #28
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e40:	2f00      	cmp	r7, #0
 8003e42:	d000      	beq.n	8003e46 <_strtoul_l.constprop.0+0xe6>
 8003e44:	4240      	negs	r0, r0
 8003e46:	9a02      	ldr	r2, [sp, #8]
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	d0f7      	beq.n	8003e3c <_strtoul_l.constprop.0+0xdc>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <_strtoul_l.constprop.0+0xf4>
 8003e50:	1e6b      	subs	r3, r5, #1
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	9b02      	ldr	r3, [sp, #8]
 8003e56:	9a01      	ldr	r2, [sp, #4]
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e7ef      	b.n	8003e3c <_strtoul_l.constprop.0+0xdc>
 8003e5c:	2430      	movs	r4, #48	; 0x30
 8003e5e:	2e00      	cmp	r6, #0
 8003e60:	d1a5      	bne.n	8003dae <_strtoul_l.constprop.0+0x4e>
 8003e62:	3608      	adds	r6, #8
 8003e64:	e7a3      	b.n	8003dae <_strtoul_l.constprop.0+0x4e>
 8003e66:	2c30      	cmp	r4, #48	; 0x30
 8003e68:	d099      	beq.n	8003d9e <_strtoul_l.constprop.0+0x3e>
 8003e6a:	260a      	movs	r6, #10
 8003e6c:	e79f      	b.n	8003dae <_strtoul_l.constprop.0+0x4e>
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	080049c9 	.word	0x080049c9

08003e74 <strtoul>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	0013      	movs	r3, r2
 8003e78:	000a      	movs	r2, r1
 8003e7a:	0001      	movs	r1, r0
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <strtoul+0x14>)
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	f7ff ff6e 	bl	8003d60 <_strtoul_l.constprop.0>
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000010 	.word	0x20000010

08003e8c <_vsniprintf_r>:
 8003e8c:	b530      	push	{r4, r5, lr}
 8003e8e:	0014      	movs	r4, r2
 8003e90:	0005      	movs	r5, r0
 8003e92:	001a      	movs	r2, r3
 8003e94:	b09b      	sub	sp, #108	; 0x6c
 8003e96:	2c00      	cmp	r4, #0
 8003e98:	da05      	bge.n	8003ea6 <_vsniprintf_r+0x1a>
 8003e9a:	238b      	movs	r3, #139	; 0x8b
 8003e9c:	6003      	str	r3, [r0, #0]
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	4240      	negs	r0, r0
 8003ea2:	b01b      	add	sp, #108	; 0x6c
 8003ea4:	bd30      	pop	{r4, r5, pc}
 8003ea6:	2382      	movs	r3, #130	; 0x82
 8003ea8:	4668      	mov	r0, sp
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	8183      	strh	r3, [r0, #12]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9100      	str	r1, [sp, #0]
 8003eb2:	9104      	str	r1, [sp, #16]
 8003eb4:	429c      	cmp	r4, r3
 8003eb6:	d000      	beq.n	8003eba <_vsniprintf_r+0x2e>
 8003eb8:	1e63      	subs	r3, r4, #1
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	9305      	str	r3, [sp, #20]
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4669      	mov	r1, sp
 8003ec2:	425b      	negs	r3, r3
 8003ec4:	81cb      	strh	r3, [r1, #14]
 8003ec6:	0028      	movs	r0, r5
 8003ec8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003eca:	f000 f879 	bl	8003fc0 <_svfiprintf_r>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	da01      	bge.n	8003ed6 <_vsniprintf_r+0x4a>
 8003ed2:	238b      	movs	r3, #139	; 0x8b
 8003ed4:	602b      	str	r3, [r5, #0]
 8003ed6:	2c00      	cmp	r4, #0
 8003ed8:	d0e3      	beq.n	8003ea2 <_vsniprintf_r+0x16>
 8003eda:	2300      	movs	r3, #0
 8003edc:	9a00      	ldr	r2, [sp, #0]
 8003ede:	7013      	strb	r3, [r2, #0]
 8003ee0:	e7df      	b.n	8003ea2 <_vsniprintf_r+0x16>
	...

08003ee4 <vsniprintf>:
 8003ee4:	b507      	push	{r0, r1, r2, lr}
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	0013      	movs	r3, r2
 8003eea:	000a      	movs	r2, r1
 8003eec:	0001      	movs	r1, r0
 8003eee:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <vsniprintf+0x14>)
 8003ef0:	6800      	ldr	r0, [r0, #0]
 8003ef2:	f7ff ffcb 	bl	8003e8c <_vsniprintf_r>
 8003ef6:	bd0e      	pop	{r1, r2, r3, pc}
 8003ef8:	20000010 	.word	0x20000010

08003efc <__ssputs_r>:
 8003efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efe:	688e      	ldr	r6, [r1, #8]
 8003f00:	b085      	sub	sp, #20
 8003f02:	0007      	movs	r7, r0
 8003f04:	000c      	movs	r4, r1
 8003f06:	9203      	str	r2, [sp, #12]
 8003f08:	9301      	str	r3, [sp, #4]
 8003f0a:	429e      	cmp	r6, r3
 8003f0c:	d83c      	bhi.n	8003f88 <__ssputs_r+0x8c>
 8003f0e:	2390      	movs	r3, #144	; 0x90
 8003f10:	898a      	ldrh	r2, [r1, #12]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	421a      	tst	r2, r3
 8003f16:	d034      	beq.n	8003f82 <__ssputs_r+0x86>
 8003f18:	6909      	ldr	r1, [r1, #16]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	6960      	ldr	r0, [r4, #20]
 8003f1e:	1a5b      	subs	r3, r3, r1
 8003f20:	9302      	str	r3, [sp, #8]
 8003f22:	2303      	movs	r3, #3
 8003f24:	4343      	muls	r3, r0
 8003f26:	0fdd      	lsrs	r5, r3, #31
 8003f28:	18ed      	adds	r5, r5, r3
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	9802      	ldr	r0, [sp, #8]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	181b      	adds	r3, r3, r0
 8003f32:	106d      	asrs	r5, r5, #1
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	d900      	bls.n	8003f3a <__ssputs_r+0x3e>
 8003f38:	001d      	movs	r5, r3
 8003f3a:	0553      	lsls	r3, r2, #21
 8003f3c:	d532      	bpl.n	8003fa4 <__ssputs_r+0xa8>
 8003f3e:	0029      	movs	r1, r5
 8003f40:	0038      	movs	r0, r7
 8003f42:	f000 fb53 	bl	80045ec <_malloc_r>
 8003f46:	1e06      	subs	r6, r0, #0
 8003f48:	d109      	bne.n	8003f5e <__ssputs_r+0x62>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	603b      	str	r3, [r7, #0]
 8003f4e:	2340      	movs	r3, #64	; 0x40
 8003f50:	2001      	movs	r0, #1
 8003f52:	89a2      	ldrh	r2, [r4, #12]
 8003f54:	4240      	negs	r0, r0
 8003f56:	4313      	orrs	r3, r2
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	b005      	add	sp, #20
 8003f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f5e:	9a02      	ldr	r2, [sp, #8]
 8003f60:	6921      	ldr	r1, [r4, #16]
 8003f62:	f000 faba 	bl	80044da <memcpy>
 8003f66:	89a3      	ldrh	r3, [r4, #12]
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <__ssputs_r+0xc0>)
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b02      	ldr	r3, [sp, #8]
 8003f74:	6126      	str	r6, [r4, #16]
 8003f76:	18f6      	adds	r6, r6, r3
 8003f78:	6026      	str	r6, [r4, #0]
 8003f7a:	6165      	str	r5, [r4, #20]
 8003f7c:	9e01      	ldr	r6, [sp, #4]
 8003f7e:	1aed      	subs	r5, r5, r3
 8003f80:	60a5      	str	r5, [r4, #8]
 8003f82:	9b01      	ldr	r3, [sp, #4]
 8003f84:	429e      	cmp	r6, r3
 8003f86:	d900      	bls.n	8003f8a <__ssputs_r+0x8e>
 8003f88:	9e01      	ldr	r6, [sp, #4]
 8003f8a:	0032      	movs	r2, r6
 8003f8c:	9903      	ldr	r1, [sp, #12]
 8003f8e:	6820      	ldr	r0, [r4, #0]
 8003f90:	f000 faac 	bl	80044ec <memmove>
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	2000      	movs	r0, #0
 8003f98:	1b9b      	subs	r3, r3, r6
 8003f9a:	60a3      	str	r3, [r4, #8]
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	199e      	adds	r6, r3, r6
 8003fa0:	6026      	str	r6, [r4, #0]
 8003fa2:	e7da      	b.n	8003f5a <__ssputs_r+0x5e>
 8003fa4:	002a      	movs	r2, r5
 8003fa6:	0038      	movs	r0, r7
 8003fa8:	f000 fb96 	bl	80046d8 <_realloc_r>
 8003fac:	1e06      	subs	r6, r0, #0
 8003fae:	d1e0      	bne.n	8003f72 <__ssputs_r+0x76>
 8003fb0:	0038      	movs	r0, r7
 8003fb2:	6921      	ldr	r1, [r4, #16]
 8003fb4:	f000 faae 	bl	8004514 <_free_r>
 8003fb8:	e7c7      	b.n	8003f4a <__ssputs_r+0x4e>
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	fffffb7f 	.word	0xfffffb7f

08003fc0 <_svfiprintf_r>:
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b0a1      	sub	sp, #132	; 0x84
 8003fc4:	9003      	str	r0, [sp, #12]
 8003fc6:	001d      	movs	r5, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	000f      	movs	r7, r1
 8003fcc:	0016      	movs	r6, r2
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	d511      	bpl.n	8003ff6 <_svfiprintf_r+0x36>
 8003fd2:	690b      	ldr	r3, [r1, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10e      	bne.n	8003ff6 <_svfiprintf_r+0x36>
 8003fd8:	2140      	movs	r1, #64	; 0x40
 8003fda:	f000 fb07 	bl	80045ec <_malloc_r>
 8003fde:	6038      	str	r0, [r7, #0]
 8003fe0:	6138      	str	r0, [r7, #16]
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d105      	bne.n	8003ff2 <_svfiprintf_r+0x32>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	9a03      	ldr	r2, [sp, #12]
 8003fea:	3801      	subs	r0, #1
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	b021      	add	sp, #132	; 0x84
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	2340      	movs	r3, #64	; 0x40
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	ac08      	add	r4, sp, #32
 8003ffa:	6163      	str	r3, [r4, #20]
 8003ffc:	3320      	adds	r3, #32
 8003ffe:	7663      	strb	r3, [r4, #25]
 8004000:	3310      	adds	r3, #16
 8004002:	76a3      	strb	r3, [r4, #26]
 8004004:	9507      	str	r5, [sp, #28]
 8004006:	0035      	movs	r5, r6
 8004008:	782b      	ldrb	r3, [r5, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <_svfiprintf_r+0x52>
 800400e:	2b25      	cmp	r3, #37	; 0x25
 8004010:	d147      	bne.n	80040a2 <_svfiprintf_r+0xe2>
 8004012:	1bab      	subs	r3, r5, r6
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	42b5      	cmp	r5, r6
 8004018:	d00c      	beq.n	8004034 <_svfiprintf_r+0x74>
 800401a:	0032      	movs	r2, r6
 800401c:	0039      	movs	r1, r7
 800401e:	9803      	ldr	r0, [sp, #12]
 8004020:	f7ff ff6c 	bl	8003efc <__ssputs_r>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d100      	bne.n	800402a <_svfiprintf_r+0x6a>
 8004028:	e0ae      	b.n	8004188 <_svfiprintf_r+0x1c8>
 800402a:	6962      	ldr	r2, [r4, #20]
 800402c:	9b05      	ldr	r3, [sp, #20]
 800402e:	4694      	mov	ip, r2
 8004030:	4463      	add	r3, ip
 8004032:	6163      	str	r3, [r4, #20]
 8004034:	782b      	ldrb	r3, [r5, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d100      	bne.n	800403c <_svfiprintf_r+0x7c>
 800403a:	e0a5      	b.n	8004188 <_svfiprintf_r+0x1c8>
 800403c:	2201      	movs	r2, #1
 800403e:	2300      	movs	r3, #0
 8004040:	4252      	negs	r2, r2
 8004042:	6062      	str	r2, [r4, #4]
 8004044:	a904      	add	r1, sp, #16
 8004046:	3254      	adds	r2, #84	; 0x54
 8004048:	1852      	adds	r2, r2, r1
 800404a:	1c6e      	adds	r6, r5, #1
 800404c:	6023      	str	r3, [r4, #0]
 800404e:	60e3      	str	r3, [r4, #12]
 8004050:	60a3      	str	r3, [r4, #8]
 8004052:	7013      	strb	r3, [r2, #0]
 8004054:	65a3      	str	r3, [r4, #88]	; 0x58
 8004056:	2205      	movs	r2, #5
 8004058:	7831      	ldrb	r1, [r6, #0]
 800405a:	4854      	ldr	r0, [pc, #336]	; (80041ac <_svfiprintf_r+0x1ec>)
 800405c:	f000 fa32 	bl	80044c4 <memchr>
 8004060:	1c75      	adds	r5, r6, #1
 8004062:	2800      	cmp	r0, #0
 8004064:	d11f      	bne.n	80040a6 <_svfiprintf_r+0xe6>
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	06d3      	lsls	r3, r2, #27
 800406a:	d504      	bpl.n	8004076 <_svfiprintf_r+0xb6>
 800406c:	2353      	movs	r3, #83	; 0x53
 800406e:	a904      	add	r1, sp, #16
 8004070:	185b      	adds	r3, r3, r1
 8004072:	2120      	movs	r1, #32
 8004074:	7019      	strb	r1, [r3, #0]
 8004076:	0713      	lsls	r3, r2, #28
 8004078:	d504      	bpl.n	8004084 <_svfiprintf_r+0xc4>
 800407a:	2353      	movs	r3, #83	; 0x53
 800407c:	a904      	add	r1, sp, #16
 800407e:	185b      	adds	r3, r3, r1
 8004080:	212b      	movs	r1, #43	; 0x2b
 8004082:	7019      	strb	r1, [r3, #0]
 8004084:	7833      	ldrb	r3, [r6, #0]
 8004086:	2b2a      	cmp	r3, #42	; 0x2a
 8004088:	d016      	beq.n	80040b8 <_svfiprintf_r+0xf8>
 800408a:	0035      	movs	r5, r6
 800408c:	2100      	movs	r1, #0
 800408e:	200a      	movs	r0, #10
 8004090:	68e3      	ldr	r3, [r4, #12]
 8004092:	782a      	ldrb	r2, [r5, #0]
 8004094:	1c6e      	adds	r6, r5, #1
 8004096:	3a30      	subs	r2, #48	; 0x30
 8004098:	2a09      	cmp	r2, #9
 800409a:	d94e      	bls.n	800413a <_svfiprintf_r+0x17a>
 800409c:	2900      	cmp	r1, #0
 800409e:	d111      	bne.n	80040c4 <_svfiprintf_r+0x104>
 80040a0:	e017      	b.n	80040d2 <_svfiprintf_r+0x112>
 80040a2:	3501      	adds	r5, #1
 80040a4:	e7b0      	b.n	8004008 <_svfiprintf_r+0x48>
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <_svfiprintf_r+0x1ec>)
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	1ac0      	subs	r0, r0, r3
 80040ac:	2301      	movs	r3, #1
 80040ae:	4083      	lsls	r3, r0
 80040b0:	4313      	orrs	r3, r2
 80040b2:	002e      	movs	r6, r5
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	e7ce      	b.n	8004056 <_svfiprintf_r+0x96>
 80040b8:	9b07      	ldr	r3, [sp, #28]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	9107      	str	r1, [sp, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db01      	blt.n	80040c8 <_svfiprintf_r+0x108>
 80040c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80040c6:	e004      	b.n	80040d2 <_svfiprintf_r+0x112>
 80040c8:	425b      	negs	r3, r3
 80040ca:	60e3      	str	r3, [r4, #12]
 80040cc:	2302      	movs	r3, #2
 80040ce:	4313      	orrs	r3, r2
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	782b      	ldrb	r3, [r5, #0]
 80040d4:	2b2e      	cmp	r3, #46	; 0x2e
 80040d6:	d10a      	bne.n	80040ee <_svfiprintf_r+0x12e>
 80040d8:	786b      	ldrb	r3, [r5, #1]
 80040da:	2b2a      	cmp	r3, #42	; 0x2a
 80040dc:	d135      	bne.n	800414a <_svfiprintf_r+0x18a>
 80040de:	9b07      	ldr	r3, [sp, #28]
 80040e0:	3502      	adds	r5, #2
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	9207      	str	r2, [sp, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db2b      	blt.n	8004144 <_svfiprintf_r+0x184>
 80040ec:	9309      	str	r3, [sp, #36]	; 0x24
 80040ee:	4e30      	ldr	r6, [pc, #192]	; (80041b0 <_svfiprintf_r+0x1f0>)
 80040f0:	2203      	movs	r2, #3
 80040f2:	0030      	movs	r0, r6
 80040f4:	7829      	ldrb	r1, [r5, #0]
 80040f6:	f000 f9e5 	bl	80044c4 <memchr>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d006      	beq.n	800410c <_svfiprintf_r+0x14c>
 80040fe:	2340      	movs	r3, #64	; 0x40
 8004100:	1b80      	subs	r0, r0, r6
 8004102:	4083      	lsls	r3, r0
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	3501      	adds	r5, #1
 8004108:	4313      	orrs	r3, r2
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	7829      	ldrb	r1, [r5, #0]
 800410e:	2206      	movs	r2, #6
 8004110:	4828      	ldr	r0, [pc, #160]	; (80041b4 <_svfiprintf_r+0x1f4>)
 8004112:	1c6e      	adds	r6, r5, #1
 8004114:	7621      	strb	r1, [r4, #24]
 8004116:	f000 f9d5 	bl	80044c4 <memchr>
 800411a:	2800      	cmp	r0, #0
 800411c:	d03c      	beq.n	8004198 <_svfiprintf_r+0x1d8>
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <_svfiprintf_r+0x1f8>)
 8004120:	2b00      	cmp	r3, #0
 8004122:	d125      	bne.n	8004170 <_svfiprintf_r+0x1b0>
 8004124:	2207      	movs	r2, #7
 8004126:	9b07      	ldr	r3, [sp, #28]
 8004128:	3307      	adds	r3, #7
 800412a:	4393      	bics	r3, r2
 800412c:	3308      	adds	r3, #8
 800412e:	9307      	str	r3, [sp, #28]
 8004130:	6963      	ldr	r3, [r4, #20]
 8004132:	9a04      	ldr	r2, [sp, #16]
 8004134:	189b      	adds	r3, r3, r2
 8004136:	6163      	str	r3, [r4, #20]
 8004138:	e765      	b.n	8004006 <_svfiprintf_r+0x46>
 800413a:	4343      	muls	r3, r0
 800413c:	0035      	movs	r5, r6
 800413e:	2101      	movs	r1, #1
 8004140:	189b      	adds	r3, r3, r2
 8004142:	e7a6      	b.n	8004092 <_svfiprintf_r+0xd2>
 8004144:	2301      	movs	r3, #1
 8004146:	425b      	negs	r3, r3
 8004148:	e7d0      	b.n	80040ec <_svfiprintf_r+0x12c>
 800414a:	2300      	movs	r3, #0
 800414c:	200a      	movs	r0, #10
 800414e:	001a      	movs	r2, r3
 8004150:	3501      	adds	r5, #1
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	7829      	ldrb	r1, [r5, #0]
 8004156:	1c6e      	adds	r6, r5, #1
 8004158:	3930      	subs	r1, #48	; 0x30
 800415a:	2909      	cmp	r1, #9
 800415c:	d903      	bls.n	8004166 <_svfiprintf_r+0x1a6>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0c5      	beq.n	80040ee <_svfiprintf_r+0x12e>
 8004162:	9209      	str	r2, [sp, #36]	; 0x24
 8004164:	e7c3      	b.n	80040ee <_svfiprintf_r+0x12e>
 8004166:	4342      	muls	r2, r0
 8004168:	0035      	movs	r5, r6
 800416a:	2301      	movs	r3, #1
 800416c:	1852      	adds	r2, r2, r1
 800416e:	e7f1      	b.n	8004154 <_svfiprintf_r+0x194>
 8004170:	ab07      	add	r3, sp, #28
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	003a      	movs	r2, r7
 8004176:	0021      	movs	r1, r4
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <_svfiprintf_r+0x1fc>)
 800417a:	9803      	ldr	r0, [sp, #12]
 800417c:	e000      	b.n	8004180 <_svfiprintf_r+0x1c0>
 800417e:	bf00      	nop
 8004180:	9004      	str	r0, [sp, #16]
 8004182:	9b04      	ldr	r3, [sp, #16]
 8004184:	3301      	adds	r3, #1
 8004186:	d1d3      	bne.n	8004130 <_svfiprintf_r+0x170>
 8004188:	89bb      	ldrh	r3, [r7, #12]
 800418a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800418c:	065b      	lsls	r3, r3, #25
 800418e:	d400      	bmi.n	8004192 <_svfiprintf_r+0x1d2>
 8004190:	e72d      	b.n	8003fee <_svfiprintf_r+0x2e>
 8004192:	2001      	movs	r0, #1
 8004194:	4240      	negs	r0, r0
 8004196:	e72a      	b.n	8003fee <_svfiprintf_r+0x2e>
 8004198:	ab07      	add	r3, sp, #28
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	003a      	movs	r2, r7
 800419e:	0021      	movs	r1, r4
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <_svfiprintf_r+0x1fc>)
 80041a2:	9803      	ldr	r0, [sp, #12]
 80041a4:	f000 f87c 	bl	80042a0 <_printf_i>
 80041a8:	e7ea      	b.n	8004180 <_svfiprintf_r+0x1c0>
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	08004ac9 	.word	0x08004ac9
 80041b0:	08004acf 	.word	0x08004acf
 80041b4:	08004ad3 	.word	0x08004ad3
 80041b8:	00000000 	.word	0x00000000
 80041bc:	08003efd 	.word	0x08003efd

080041c0 <_printf_common>:
 80041c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c2:	0015      	movs	r5, r2
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	688a      	ldr	r2, [r1, #8]
 80041c8:	690b      	ldr	r3, [r1, #16]
 80041ca:	000c      	movs	r4, r1
 80041cc:	9000      	str	r0, [sp, #0]
 80041ce:	4293      	cmp	r3, r2
 80041d0:	da00      	bge.n	80041d4 <_printf_common+0x14>
 80041d2:	0013      	movs	r3, r2
 80041d4:	0022      	movs	r2, r4
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	3243      	adds	r2, #67	; 0x43
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	2a00      	cmp	r2, #0
 80041de:	d001      	beq.n	80041e4 <_printf_common+0x24>
 80041e0:	3301      	adds	r3, #1
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	069b      	lsls	r3, r3, #26
 80041e8:	d502      	bpl.n	80041f0 <_printf_common+0x30>
 80041ea:	682b      	ldr	r3, [r5, #0]
 80041ec:	3302      	adds	r3, #2
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	2306      	movs	r3, #6
 80041f4:	0017      	movs	r7, r2
 80041f6:	401f      	ands	r7, r3
 80041f8:	421a      	tst	r2, r3
 80041fa:	d027      	beq.n	800424c <_printf_common+0x8c>
 80041fc:	0023      	movs	r3, r4
 80041fe:	3343      	adds	r3, #67	; 0x43
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	4193      	sbcs	r3, r2
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d430      	bmi.n	800426e <_printf_common+0xae>
 800420c:	0022      	movs	r2, r4
 800420e:	9901      	ldr	r1, [sp, #4]
 8004210:	9800      	ldr	r0, [sp, #0]
 8004212:	9e08      	ldr	r6, [sp, #32]
 8004214:	3243      	adds	r2, #67	; 0x43
 8004216:	47b0      	blx	r6
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d025      	beq.n	8004268 <_printf_common+0xa8>
 800421c:	2306      	movs	r3, #6
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	682a      	ldr	r2, [r5, #0]
 8004222:	68e1      	ldr	r1, [r4, #12]
 8004224:	2500      	movs	r5, #0
 8004226:	4003      	ands	r3, r0
 8004228:	2b04      	cmp	r3, #4
 800422a:	d103      	bne.n	8004234 <_printf_common+0x74>
 800422c:	1a8d      	subs	r5, r1, r2
 800422e:	43eb      	mvns	r3, r5
 8004230:	17db      	asrs	r3, r3, #31
 8004232:	401d      	ands	r5, r3
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	6922      	ldr	r2, [r4, #16]
 8004238:	4293      	cmp	r3, r2
 800423a:	dd01      	ble.n	8004240 <_printf_common+0x80>
 800423c:	1a9b      	subs	r3, r3, r2
 800423e:	18ed      	adds	r5, r5, r3
 8004240:	2700      	movs	r7, #0
 8004242:	42bd      	cmp	r5, r7
 8004244:	d120      	bne.n	8004288 <_printf_common+0xc8>
 8004246:	2000      	movs	r0, #0
 8004248:	e010      	b.n	800426c <_printf_common+0xac>
 800424a:	3701      	adds	r7, #1
 800424c:	68e3      	ldr	r3, [r4, #12]
 800424e:	682a      	ldr	r2, [r5, #0]
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	42bb      	cmp	r3, r7
 8004254:	ddd2      	ble.n	80041fc <_printf_common+0x3c>
 8004256:	0022      	movs	r2, r4
 8004258:	2301      	movs	r3, #1
 800425a:	9901      	ldr	r1, [sp, #4]
 800425c:	9800      	ldr	r0, [sp, #0]
 800425e:	9e08      	ldr	r6, [sp, #32]
 8004260:	3219      	adds	r2, #25
 8004262:	47b0      	blx	r6
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d1f0      	bne.n	800424a <_printf_common+0x8a>
 8004268:	2001      	movs	r0, #1
 800426a:	4240      	negs	r0, r0
 800426c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800426e:	2030      	movs	r0, #48	; 0x30
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	3143      	adds	r1, #67	; 0x43
 8004274:	7008      	strb	r0, [r1, #0]
 8004276:	0021      	movs	r1, r4
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	3145      	adds	r1, #69	; 0x45
 800427c:	7809      	ldrb	r1, [r1, #0]
 800427e:	18a2      	adds	r2, r4, r2
 8004280:	3243      	adds	r2, #67	; 0x43
 8004282:	3302      	adds	r3, #2
 8004284:	7011      	strb	r1, [r2, #0]
 8004286:	e7c1      	b.n	800420c <_printf_common+0x4c>
 8004288:	0022      	movs	r2, r4
 800428a:	2301      	movs	r3, #1
 800428c:	9901      	ldr	r1, [sp, #4]
 800428e:	9800      	ldr	r0, [sp, #0]
 8004290:	9e08      	ldr	r6, [sp, #32]
 8004292:	321a      	adds	r2, #26
 8004294:	47b0      	blx	r6
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	d0e6      	beq.n	8004268 <_printf_common+0xa8>
 800429a:	3701      	adds	r7, #1
 800429c:	e7d1      	b.n	8004242 <_printf_common+0x82>
	...

080042a0 <_printf_i>:
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	b08b      	sub	sp, #44	; 0x2c
 80042a4:	9206      	str	r2, [sp, #24]
 80042a6:	000a      	movs	r2, r1
 80042a8:	3243      	adds	r2, #67	; 0x43
 80042aa:	9307      	str	r3, [sp, #28]
 80042ac:	9005      	str	r0, [sp, #20]
 80042ae:	9204      	str	r2, [sp, #16]
 80042b0:	7e0a      	ldrb	r2, [r1, #24]
 80042b2:	000c      	movs	r4, r1
 80042b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042b6:	2a78      	cmp	r2, #120	; 0x78
 80042b8:	d807      	bhi.n	80042ca <_printf_i+0x2a>
 80042ba:	2a62      	cmp	r2, #98	; 0x62
 80042bc:	d809      	bhi.n	80042d2 <_printf_i+0x32>
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d100      	bne.n	80042c4 <_printf_i+0x24>
 80042c2:	e0c1      	b.n	8004448 <_printf_i+0x1a8>
 80042c4:	2a58      	cmp	r2, #88	; 0x58
 80042c6:	d100      	bne.n	80042ca <_printf_i+0x2a>
 80042c8:	e08c      	b.n	80043e4 <_printf_i+0x144>
 80042ca:	0026      	movs	r6, r4
 80042cc:	3642      	adds	r6, #66	; 0x42
 80042ce:	7032      	strb	r2, [r6, #0]
 80042d0:	e022      	b.n	8004318 <_printf_i+0x78>
 80042d2:	0010      	movs	r0, r2
 80042d4:	3863      	subs	r0, #99	; 0x63
 80042d6:	2815      	cmp	r0, #21
 80042d8:	d8f7      	bhi.n	80042ca <_printf_i+0x2a>
 80042da:	f7fb ff1f 	bl	800011c <__gnu_thumb1_case_shi>
 80042de:	0016      	.short	0x0016
 80042e0:	fff6001f 	.word	0xfff6001f
 80042e4:	fff6fff6 	.word	0xfff6fff6
 80042e8:	001ffff6 	.word	0x001ffff6
 80042ec:	fff6fff6 	.word	0xfff6fff6
 80042f0:	fff6fff6 	.word	0xfff6fff6
 80042f4:	003600a8 	.word	0x003600a8
 80042f8:	fff6009a 	.word	0xfff6009a
 80042fc:	00b9fff6 	.word	0x00b9fff6
 8004300:	0036fff6 	.word	0x0036fff6
 8004304:	fff6fff6 	.word	0xfff6fff6
 8004308:	009e      	.short	0x009e
 800430a:	0026      	movs	r6, r4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	3642      	adds	r6, #66	; 0x42
 8004310:	1d11      	adds	r1, r2, #4
 8004312:	6019      	str	r1, [r3, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	7033      	strb	r3, [r6, #0]
 8004318:	2301      	movs	r3, #1
 800431a:	e0a7      	b.n	800446c <_printf_i+0x1cc>
 800431c:	6808      	ldr	r0, [r1, #0]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	1d0a      	adds	r2, r1, #4
 8004322:	0605      	lsls	r5, r0, #24
 8004324:	d50b      	bpl.n	800433e <_printf_i+0x9e>
 8004326:	680d      	ldr	r5, [r1, #0]
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	2d00      	cmp	r5, #0
 800432c:	da03      	bge.n	8004336 <_printf_i+0x96>
 800432e:	232d      	movs	r3, #45	; 0x2d
 8004330:	9a04      	ldr	r2, [sp, #16]
 8004332:	426d      	negs	r5, r5
 8004334:	7013      	strb	r3, [r2, #0]
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <_printf_i+0x21c>)
 8004338:	270a      	movs	r7, #10
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	e01b      	b.n	8004376 <_printf_i+0xd6>
 800433e:	680d      	ldr	r5, [r1, #0]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	0641      	lsls	r1, r0, #25
 8004344:	d5f1      	bpl.n	800432a <_printf_i+0x8a>
 8004346:	b22d      	sxth	r5, r5
 8004348:	e7ef      	b.n	800432a <_printf_i+0x8a>
 800434a:	680d      	ldr	r5, [r1, #0]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	1d08      	adds	r0, r1, #4
 8004350:	6018      	str	r0, [r3, #0]
 8004352:	062e      	lsls	r6, r5, #24
 8004354:	d501      	bpl.n	800435a <_printf_i+0xba>
 8004356:	680d      	ldr	r5, [r1, #0]
 8004358:	e003      	b.n	8004362 <_printf_i+0xc2>
 800435a:	066d      	lsls	r5, r5, #25
 800435c:	d5fb      	bpl.n	8004356 <_printf_i+0xb6>
 800435e:	680d      	ldr	r5, [r1, #0]
 8004360:	b2ad      	uxth	r5, r5
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <_printf_i+0x21c>)
 8004364:	2708      	movs	r7, #8
 8004366:	9303      	str	r3, [sp, #12]
 8004368:	2a6f      	cmp	r2, #111	; 0x6f
 800436a:	d000      	beq.n	800436e <_printf_i+0xce>
 800436c:	3702      	adds	r7, #2
 800436e:	0023      	movs	r3, r4
 8004370:	2200      	movs	r2, #0
 8004372:	3343      	adds	r3, #67	; 0x43
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	60a3      	str	r3, [r4, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	db03      	blt.n	8004386 <_printf_i+0xe6>
 800437e:	2204      	movs	r2, #4
 8004380:	6821      	ldr	r1, [r4, #0]
 8004382:	4391      	bics	r1, r2
 8004384:	6021      	str	r1, [r4, #0]
 8004386:	2d00      	cmp	r5, #0
 8004388:	d102      	bne.n	8004390 <_printf_i+0xf0>
 800438a:	9e04      	ldr	r6, [sp, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <_printf_i+0x10a>
 8004390:	9e04      	ldr	r6, [sp, #16]
 8004392:	0028      	movs	r0, r5
 8004394:	0039      	movs	r1, r7
 8004396:	f7fb ff51 	bl	800023c <__aeabi_uidivmod>
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	3e01      	subs	r6, #1
 800439e:	5c5b      	ldrb	r3, [r3, r1]
 80043a0:	7033      	strb	r3, [r6, #0]
 80043a2:	002b      	movs	r3, r5
 80043a4:	0005      	movs	r5, r0
 80043a6:	429f      	cmp	r7, r3
 80043a8:	d9f3      	bls.n	8004392 <_printf_i+0xf2>
 80043aa:	2f08      	cmp	r7, #8
 80043ac:	d109      	bne.n	80043c2 <_printf_i+0x122>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	07db      	lsls	r3, r3, #31
 80043b2:	d506      	bpl.n	80043c2 <_printf_i+0x122>
 80043b4:	6863      	ldr	r3, [r4, #4]
 80043b6:	6922      	ldr	r2, [r4, #16]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	dc02      	bgt.n	80043c2 <_printf_i+0x122>
 80043bc:	2330      	movs	r3, #48	; 0x30
 80043be:	3e01      	subs	r6, #1
 80043c0:	7033      	strb	r3, [r6, #0]
 80043c2:	9b04      	ldr	r3, [sp, #16]
 80043c4:	1b9b      	subs	r3, r3, r6
 80043c6:	6123      	str	r3, [r4, #16]
 80043c8:	9b07      	ldr	r3, [sp, #28]
 80043ca:	0021      	movs	r1, r4
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	9805      	ldr	r0, [sp, #20]
 80043d0:	9b06      	ldr	r3, [sp, #24]
 80043d2:	aa09      	add	r2, sp, #36	; 0x24
 80043d4:	f7ff fef4 	bl	80041c0 <_printf_common>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d14c      	bne.n	8004476 <_printf_i+0x1d6>
 80043dc:	2001      	movs	r0, #1
 80043de:	4240      	negs	r0, r0
 80043e0:	b00b      	add	sp, #44	; 0x2c
 80043e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e4:	3145      	adds	r1, #69	; 0x45
 80043e6:	700a      	strb	r2, [r1, #0]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <_printf_i+0x21c>)
 80043ea:	9203      	str	r2, [sp, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	ca20      	ldmia	r2!, {r5}
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	0608      	lsls	r0, r1, #24
 80043f6:	d516      	bpl.n	8004426 <_printf_i+0x186>
 80043f8:	07cb      	lsls	r3, r1, #31
 80043fa:	d502      	bpl.n	8004402 <_printf_i+0x162>
 80043fc:	2320      	movs	r3, #32
 80043fe:	4319      	orrs	r1, r3
 8004400:	6021      	str	r1, [r4, #0]
 8004402:	2710      	movs	r7, #16
 8004404:	2d00      	cmp	r5, #0
 8004406:	d1b2      	bne.n	800436e <_printf_i+0xce>
 8004408:	2320      	movs	r3, #32
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	439a      	bics	r2, r3
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	e7ad      	b.n	800436e <_printf_i+0xce>
 8004412:	2220      	movs	r2, #32
 8004414:	6809      	ldr	r1, [r1, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	6022      	str	r2, [r4, #0]
 800441a:	0022      	movs	r2, r4
 800441c:	2178      	movs	r1, #120	; 0x78
 800441e:	3245      	adds	r2, #69	; 0x45
 8004420:	7011      	strb	r1, [r2, #0]
 8004422:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <_printf_i+0x220>)
 8004424:	e7e1      	b.n	80043ea <_printf_i+0x14a>
 8004426:	0648      	lsls	r0, r1, #25
 8004428:	d5e6      	bpl.n	80043f8 <_printf_i+0x158>
 800442a:	b2ad      	uxth	r5, r5
 800442c:	e7e4      	b.n	80043f8 <_printf_i+0x158>
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	680d      	ldr	r5, [r1, #0]
 8004432:	1d10      	adds	r0, r2, #4
 8004434:	6949      	ldr	r1, [r1, #20]
 8004436:	6018      	str	r0, [r3, #0]
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	062e      	lsls	r6, r5, #24
 800443c:	d501      	bpl.n	8004442 <_printf_i+0x1a2>
 800443e:	6019      	str	r1, [r3, #0]
 8004440:	e002      	b.n	8004448 <_printf_i+0x1a8>
 8004442:	066d      	lsls	r5, r5, #25
 8004444:	d5fb      	bpl.n	800443e <_printf_i+0x19e>
 8004446:	8019      	strh	r1, [r3, #0]
 8004448:	2300      	movs	r3, #0
 800444a:	9e04      	ldr	r6, [sp, #16]
 800444c:	6123      	str	r3, [r4, #16]
 800444e:	e7bb      	b.n	80043c8 <_printf_i+0x128>
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	1d11      	adds	r1, r2, #4
 8004454:	6019      	str	r1, [r3, #0]
 8004456:	6816      	ldr	r6, [r2, #0]
 8004458:	2100      	movs	r1, #0
 800445a:	0030      	movs	r0, r6
 800445c:	6862      	ldr	r2, [r4, #4]
 800445e:	f000 f831 	bl	80044c4 <memchr>
 8004462:	2800      	cmp	r0, #0
 8004464:	d001      	beq.n	800446a <_printf_i+0x1ca>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	6060      	str	r0, [r4, #4]
 800446a:	6863      	ldr	r3, [r4, #4]
 800446c:	6123      	str	r3, [r4, #16]
 800446e:	2300      	movs	r3, #0
 8004470:	9a04      	ldr	r2, [sp, #16]
 8004472:	7013      	strb	r3, [r2, #0]
 8004474:	e7a8      	b.n	80043c8 <_printf_i+0x128>
 8004476:	6923      	ldr	r3, [r4, #16]
 8004478:	0032      	movs	r2, r6
 800447a:	9906      	ldr	r1, [sp, #24]
 800447c:	9805      	ldr	r0, [sp, #20]
 800447e:	9d07      	ldr	r5, [sp, #28]
 8004480:	47a8      	blx	r5
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d0aa      	beq.n	80043dc <_printf_i+0x13c>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	079b      	lsls	r3, r3, #30
 800448a:	d415      	bmi.n	80044b8 <_printf_i+0x218>
 800448c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448e:	68e0      	ldr	r0, [r4, #12]
 8004490:	4298      	cmp	r0, r3
 8004492:	daa5      	bge.n	80043e0 <_printf_i+0x140>
 8004494:	0018      	movs	r0, r3
 8004496:	e7a3      	b.n	80043e0 <_printf_i+0x140>
 8004498:	0022      	movs	r2, r4
 800449a:	2301      	movs	r3, #1
 800449c:	9906      	ldr	r1, [sp, #24]
 800449e:	9805      	ldr	r0, [sp, #20]
 80044a0:	9e07      	ldr	r6, [sp, #28]
 80044a2:	3219      	adds	r2, #25
 80044a4:	47b0      	blx	r6
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	d098      	beq.n	80043dc <_printf_i+0x13c>
 80044aa:	3501      	adds	r5, #1
 80044ac:	68e3      	ldr	r3, [r4, #12]
 80044ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	42ab      	cmp	r3, r5
 80044b4:	dcf0      	bgt.n	8004498 <_printf_i+0x1f8>
 80044b6:	e7e9      	b.n	800448c <_printf_i+0x1ec>
 80044b8:	2500      	movs	r5, #0
 80044ba:	e7f7      	b.n	80044ac <_printf_i+0x20c>
 80044bc:	08004ada 	.word	0x08004ada
 80044c0:	08004aeb 	.word	0x08004aeb

080044c4 <memchr>:
 80044c4:	b2c9      	uxtb	r1, r1
 80044c6:	1882      	adds	r2, r0, r2
 80044c8:	4290      	cmp	r0, r2
 80044ca:	d101      	bne.n	80044d0 <memchr+0xc>
 80044cc:	2000      	movs	r0, #0
 80044ce:	4770      	bx	lr
 80044d0:	7803      	ldrb	r3, [r0, #0]
 80044d2:	428b      	cmp	r3, r1
 80044d4:	d0fb      	beq.n	80044ce <memchr+0xa>
 80044d6:	3001      	adds	r0, #1
 80044d8:	e7f6      	b.n	80044c8 <memchr+0x4>

080044da <memcpy>:
 80044da:	2300      	movs	r3, #0
 80044dc:	b510      	push	{r4, lr}
 80044de:	429a      	cmp	r2, r3
 80044e0:	d100      	bne.n	80044e4 <memcpy+0xa>
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	5ccc      	ldrb	r4, [r1, r3]
 80044e6:	54c4      	strb	r4, [r0, r3]
 80044e8:	3301      	adds	r3, #1
 80044ea:	e7f8      	b.n	80044de <memcpy+0x4>

080044ec <memmove>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4288      	cmp	r0, r1
 80044f0:	d902      	bls.n	80044f8 <memmove+0xc>
 80044f2:	188b      	adds	r3, r1, r2
 80044f4:	4298      	cmp	r0, r3
 80044f6:	d303      	bcc.n	8004500 <memmove+0x14>
 80044f8:	2300      	movs	r3, #0
 80044fa:	e007      	b.n	800450c <memmove+0x20>
 80044fc:	5c8b      	ldrb	r3, [r1, r2]
 80044fe:	5483      	strb	r3, [r0, r2]
 8004500:	3a01      	subs	r2, #1
 8004502:	d2fb      	bcs.n	80044fc <memmove+0x10>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	5ccc      	ldrb	r4, [r1, r3]
 8004508:	54c4      	strb	r4, [r0, r3]
 800450a:	3301      	adds	r3, #1
 800450c:	429a      	cmp	r2, r3
 800450e:	d1fa      	bne.n	8004506 <memmove+0x1a>
 8004510:	e7f8      	b.n	8004504 <memmove+0x18>
	...

08004514 <_free_r>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	0005      	movs	r5, r0
 8004518:	2900      	cmp	r1, #0
 800451a:	d010      	beq.n	800453e <_free_r+0x2a>
 800451c:	1f0c      	subs	r4, r1, #4
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	da00      	bge.n	8004526 <_free_r+0x12>
 8004524:	18e4      	adds	r4, r4, r3
 8004526:	0028      	movs	r0, r5
 8004528:	f000 f918 	bl	800475c <__malloc_lock>
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <_free_r+0x90>)
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <_free_r+0x2c>
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	6014      	str	r4, [r2, #0]
 8004538:	0028      	movs	r0, r5
 800453a:	f000 f917 	bl	800476c <__malloc_unlock>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	42a3      	cmp	r3, r4
 8004542:	d908      	bls.n	8004556 <_free_r+0x42>
 8004544:	6821      	ldr	r1, [r4, #0]
 8004546:	1860      	adds	r0, r4, r1
 8004548:	4283      	cmp	r3, r0
 800454a:	d1f3      	bne.n	8004534 <_free_r+0x20>
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	1841      	adds	r1, r0, r1
 8004552:	6021      	str	r1, [r4, #0]
 8004554:	e7ee      	b.n	8004534 <_free_r+0x20>
 8004556:	001a      	movs	r2, r3
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <_free_r+0x4e>
 800455e:	42a3      	cmp	r3, r4
 8004560:	d9f9      	bls.n	8004556 <_free_r+0x42>
 8004562:	6811      	ldr	r1, [r2, #0]
 8004564:	1850      	adds	r0, r2, r1
 8004566:	42a0      	cmp	r0, r4
 8004568:	d10b      	bne.n	8004582 <_free_r+0x6e>
 800456a:	6820      	ldr	r0, [r4, #0]
 800456c:	1809      	adds	r1, r1, r0
 800456e:	1850      	adds	r0, r2, r1
 8004570:	6011      	str	r1, [r2, #0]
 8004572:	4283      	cmp	r3, r0
 8004574:	d1e0      	bne.n	8004538 <_free_r+0x24>
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	1841      	adds	r1, r0, r1
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	6053      	str	r3, [r2, #4]
 8004580:	e7da      	b.n	8004538 <_free_r+0x24>
 8004582:	42a0      	cmp	r0, r4
 8004584:	d902      	bls.n	800458c <_free_r+0x78>
 8004586:	230c      	movs	r3, #12
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	e7d5      	b.n	8004538 <_free_r+0x24>
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	1860      	adds	r0, r4, r1
 8004590:	4283      	cmp	r3, r0
 8004592:	d103      	bne.n	800459c <_free_r+0x88>
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	1841      	adds	r1, r0, r1
 800459a:	6021      	str	r1, [r4, #0]
 800459c:	6063      	str	r3, [r4, #4]
 800459e:	6054      	str	r4, [r2, #4]
 80045a0:	e7ca      	b.n	8004538 <_free_r+0x24>
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	200005b8 	.word	0x200005b8

080045a8 <sbrk_aligned>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4e0f      	ldr	r6, [pc, #60]	; (80045e8 <sbrk_aligned+0x40>)
 80045ac:	000d      	movs	r5, r1
 80045ae:	6831      	ldr	r1, [r6, #0]
 80045b0:	0004      	movs	r4, r0
 80045b2:	2900      	cmp	r1, #0
 80045b4:	d102      	bne.n	80045bc <sbrk_aligned+0x14>
 80045b6:	f000 f8bf 	bl	8004738 <_sbrk_r>
 80045ba:	6030      	str	r0, [r6, #0]
 80045bc:	0029      	movs	r1, r5
 80045be:	0020      	movs	r0, r4
 80045c0:	f000 f8ba 	bl	8004738 <_sbrk_r>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d00a      	beq.n	80045de <sbrk_aligned+0x36>
 80045c8:	2303      	movs	r3, #3
 80045ca:	1cc5      	adds	r5, r0, #3
 80045cc:	439d      	bics	r5, r3
 80045ce:	42a8      	cmp	r0, r5
 80045d0:	d007      	beq.n	80045e2 <sbrk_aligned+0x3a>
 80045d2:	1a29      	subs	r1, r5, r0
 80045d4:	0020      	movs	r0, r4
 80045d6:	f000 f8af 	bl	8004738 <_sbrk_r>
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	d101      	bne.n	80045e2 <sbrk_aligned+0x3a>
 80045de:	2501      	movs	r5, #1
 80045e0:	426d      	negs	r5, r5
 80045e2:	0028      	movs	r0, r5
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	200005bc 	.word	0x200005bc

080045ec <_malloc_r>:
 80045ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ee:	2203      	movs	r2, #3
 80045f0:	1ccb      	adds	r3, r1, #3
 80045f2:	4393      	bics	r3, r2
 80045f4:	3308      	adds	r3, #8
 80045f6:	0006      	movs	r6, r0
 80045f8:	001f      	movs	r7, r3
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d232      	bcs.n	8004664 <_malloc_r+0x78>
 80045fe:	270c      	movs	r7, #12
 8004600:	42b9      	cmp	r1, r7
 8004602:	d831      	bhi.n	8004668 <_malloc_r+0x7c>
 8004604:	0030      	movs	r0, r6
 8004606:	f000 f8a9 	bl	800475c <__malloc_lock>
 800460a:	4d32      	ldr	r5, [pc, #200]	; (80046d4 <_malloc_r+0xe8>)
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	001c      	movs	r4, r3
 8004610:	2c00      	cmp	r4, #0
 8004612:	d12e      	bne.n	8004672 <_malloc_r+0x86>
 8004614:	0039      	movs	r1, r7
 8004616:	0030      	movs	r0, r6
 8004618:	f7ff ffc6 	bl	80045a8 <sbrk_aligned>
 800461c:	0004      	movs	r4, r0
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d11e      	bne.n	8004660 <_malloc_r+0x74>
 8004622:	682c      	ldr	r4, [r5, #0]
 8004624:	0025      	movs	r5, r4
 8004626:	2d00      	cmp	r5, #0
 8004628:	d14a      	bne.n	80046c0 <_malloc_r+0xd4>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0029      	movs	r1, r5
 800462e:	18e3      	adds	r3, r4, r3
 8004630:	0030      	movs	r0, r6
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	f000 f880 	bl	8004738 <_sbrk_r>
 8004638:	9b01      	ldr	r3, [sp, #4]
 800463a:	4283      	cmp	r3, r0
 800463c:	d143      	bne.n	80046c6 <_malloc_r+0xda>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	3703      	adds	r7, #3
 8004642:	1aff      	subs	r7, r7, r3
 8004644:	2303      	movs	r3, #3
 8004646:	439f      	bics	r7, r3
 8004648:	3708      	adds	r7, #8
 800464a:	2f0c      	cmp	r7, #12
 800464c:	d200      	bcs.n	8004650 <_malloc_r+0x64>
 800464e:	270c      	movs	r7, #12
 8004650:	0039      	movs	r1, r7
 8004652:	0030      	movs	r0, r6
 8004654:	f7ff ffa8 	bl	80045a8 <sbrk_aligned>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d034      	beq.n	80046c6 <_malloc_r+0xda>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	19df      	adds	r7, r3, r7
 8004660:	6027      	str	r7, [r4, #0]
 8004662:	e013      	b.n	800468c <_malloc_r+0xa0>
 8004664:	2b00      	cmp	r3, #0
 8004666:	dacb      	bge.n	8004600 <_malloc_r+0x14>
 8004668:	230c      	movs	r3, #12
 800466a:	2500      	movs	r5, #0
 800466c:	6033      	str	r3, [r6, #0]
 800466e:	0028      	movs	r0, r5
 8004670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	1bd1      	subs	r1, r2, r7
 8004676:	d420      	bmi.n	80046ba <_malloc_r+0xce>
 8004678:	290b      	cmp	r1, #11
 800467a:	d917      	bls.n	80046ac <_malloc_r+0xc0>
 800467c:	19e2      	adds	r2, r4, r7
 800467e:	6027      	str	r7, [r4, #0]
 8004680:	42a3      	cmp	r3, r4
 8004682:	d111      	bne.n	80046a8 <_malloc_r+0xbc>
 8004684:	602a      	str	r2, [r5, #0]
 8004686:	6863      	ldr	r3, [r4, #4]
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	6053      	str	r3, [r2, #4]
 800468c:	0030      	movs	r0, r6
 800468e:	0025      	movs	r5, r4
 8004690:	f000 f86c 	bl	800476c <__malloc_unlock>
 8004694:	2207      	movs	r2, #7
 8004696:	350b      	adds	r5, #11
 8004698:	1d23      	adds	r3, r4, #4
 800469a:	4395      	bics	r5, r2
 800469c:	1aea      	subs	r2, r5, r3
 800469e:	429d      	cmp	r5, r3
 80046a0:	d0e5      	beq.n	800466e <_malloc_r+0x82>
 80046a2:	1b5b      	subs	r3, r3, r5
 80046a4:	50a3      	str	r3, [r4, r2]
 80046a6:	e7e2      	b.n	800466e <_malloc_r+0x82>
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e7ec      	b.n	8004686 <_malloc_r+0x9a>
 80046ac:	6862      	ldr	r2, [r4, #4]
 80046ae:	42a3      	cmp	r3, r4
 80046b0:	d101      	bne.n	80046b6 <_malloc_r+0xca>
 80046b2:	602a      	str	r2, [r5, #0]
 80046b4:	e7ea      	b.n	800468c <_malloc_r+0xa0>
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	e7e8      	b.n	800468c <_malloc_r+0xa0>
 80046ba:	0023      	movs	r3, r4
 80046bc:	6864      	ldr	r4, [r4, #4]
 80046be:	e7a7      	b.n	8004610 <_malloc_r+0x24>
 80046c0:	002c      	movs	r4, r5
 80046c2:	686d      	ldr	r5, [r5, #4]
 80046c4:	e7af      	b.n	8004626 <_malloc_r+0x3a>
 80046c6:	230c      	movs	r3, #12
 80046c8:	0030      	movs	r0, r6
 80046ca:	6033      	str	r3, [r6, #0]
 80046cc:	f000 f84e 	bl	800476c <__malloc_unlock>
 80046d0:	e7cd      	b.n	800466e <_malloc_r+0x82>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	200005b8 	.word	0x200005b8

080046d8 <_realloc_r>:
 80046d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046da:	0007      	movs	r7, r0
 80046dc:	000e      	movs	r6, r1
 80046de:	0014      	movs	r4, r2
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d105      	bne.n	80046f0 <_realloc_r+0x18>
 80046e4:	0011      	movs	r1, r2
 80046e6:	f7ff ff81 	bl	80045ec <_malloc_r>
 80046ea:	0005      	movs	r5, r0
 80046ec:	0028      	movs	r0, r5
 80046ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	d103      	bne.n	80046fc <_realloc_r+0x24>
 80046f4:	f7ff ff0e 	bl	8004514 <_free_r>
 80046f8:	0025      	movs	r5, r4
 80046fa:	e7f7      	b.n	80046ec <_realloc_r+0x14>
 80046fc:	f000 f83e 	bl	800477c <_malloc_usable_size_r>
 8004700:	9001      	str	r0, [sp, #4]
 8004702:	4284      	cmp	r4, r0
 8004704:	d803      	bhi.n	800470e <_realloc_r+0x36>
 8004706:	0035      	movs	r5, r6
 8004708:	0843      	lsrs	r3, r0, #1
 800470a:	42a3      	cmp	r3, r4
 800470c:	d3ee      	bcc.n	80046ec <_realloc_r+0x14>
 800470e:	0021      	movs	r1, r4
 8004710:	0038      	movs	r0, r7
 8004712:	f7ff ff6b 	bl	80045ec <_malloc_r>
 8004716:	1e05      	subs	r5, r0, #0
 8004718:	d0e8      	beq.n	80046ec <_realloc_r+0x14>
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	0022      	movs	r2, r4
 800471e:	429c      	cmp	r4, r3
 8004720:	d900      	bls.n	8004724 <_realloc_r+0x4c>
 8004722:	001a      	movs	r2, r3
 8004724:	0031      	movs	r1, r6
 8004726:	0028      	movs	r0, r5
 8004728:	f7ff fed7 	bl	80044da <memcpy>
 800472c:	0031      	movs	r1, r6
 800472e:	0038      	movs	r0, r7
 8004730:	f7ff fef0 	bl	8004514 <_free_r>
 8004734:	e7da      	b.n	80046ec <_realloc_r+0x14>
	...

08004738 <_sbrk_r>:
 8004738:	2300      	movs	r3, #0
 800473a:	b570      	push	{r4, r5, r6, lr}
 800473c:	4d06      	ldr	r5, [pc, #24]	; (8004758 <_sbrk_r+0x20>)
 800473e:	0004      	movs	r4, r0
 8004740:	0008      	movs	r0, r1
 8004742:	602b      	str	r3, [r5, #0]
 8004744:	f7fc feb2 	bl	80014ac <_sbrk>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d103      	bne.n	8004754 <_sbrk_r+0x1c>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d000      	beq.n	8004754 <_sbrk_r+0x1c>
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	200005c0 	.word	0x200005c0

0800475c <__malloc_lock>:
 800475c:	b510      	push	{r4, lr}
 800475e:	4802      	ldr	r0, [pc, #8]	; (8004768 <__malloc_lock+0xc>)
 8004760:	f000 f814 	bl	800478c <__retarget_lock_acquire_recursive>
 8004764:	bd10      	pop	{r4, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	200005c4 	.word	0x200005c4

0800476c <__malloc_unlock>:
 800476c:	b510      	push	{r4, lr}
 800476e:	4802      	ldr	r0, [pc, #8]	; (8004778 <__malloc_unlock+0xc>)
 8004770:	f000 f80d 	bl	800478e <__retarget_lock_release_recursive>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	200005c4 	.word	0x200005c4

0800477c <_malloc_usable_size_r>:
 800477c:	1f0b      	subs	r3, r1, #4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	1f18      	subs	r0, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	da01      	bge.n	800478a <_malloc_usable_size_r+0xe>
 8004786:	580b      	ldr	r3, [r1, r0]
 8004788:	18c0      	adds	r0, r0, r3
 800478a:	4770      	bx	lr

0800478c <__retarget_lock_acquire_recursive>:
 800478c:	4770      	bx	lr

0800478e <__retarget_lock_release_recursive>:
 800478e:	4770      	bx	lr

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
