
stm32c0_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004258  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004494  08004494  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004494  08004494  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004494  08004494  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800449c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20000074  08004510  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08004510  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bbe  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f6  00000000  00000000  00039c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001166f  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc8  00000000  00000000  0004e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0004f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018450  00000000  00000000  00050738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca76  00000000  00000000  00068b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2c5  00000000  00000000  000855fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001148c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cc0  00000000  00000000  00114914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004300 	.word	0x08004300

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004300 	.word	0x08004300

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fdiv>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	464f      	mov	r7, r9
 800040c:	4646      	mov	r6, r8
 800040e:	46d6      	mov	lr, sl
 8000410:	0245      	lsls	r5, r0, #9
 8000412:	b5c0      	push	{r6, r7, lr}
 8000414:	0047      	lsls	r7, r0, #1
 8000416:	1c0c      	adds	r4, r1, #0
 8000418:	0a6d      	lsrs	r5, r5, #9
 800041a:	0e3f      	lsrs	r7, r7, #24
 800041c:	0fc6      	lsrs	r6, r0, #31
 800041e:	2f00      	cmp	r7, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_fdiv+0x1c>
 8000422:	e070      	b.n	8000506 <__aeabi_fdiv+0xfe>
 8000424:	2fff      	cmp	r7, #255	; 0xff
 8000426:	d100      	bne.n	800042a <__aeabi_fdiv+0x22>
 8000428:	e075      	b.n	8000516 <__aeabi_fdiv+0x10e>
 800042a:	00eb      	lsls	r3, r5, #3
 800042c:	2580      	movs	r5, #128	; 0x80
 800042e:	04ed      	lsls	r5, r5, #19
 8000430:	431d      	orrs	r5, r3
 8000432:	2300      	movs	r3, #0
 8000434:	4699      	mov	r9, r3
 8000436:	469a      	mov	sl, r3
 8000438:	3f7f      	subs	r7, #127	; 0x7f
 800043a:	0260      	lsls	r0, r4, #9
 800043c:	0a43      	lsrs	r3, r0, #9
 800043e:	4698      	mov	r8, r3
 8000440:	0063      	lsls	r3, r4, #1
 8000442:	0e1b      	lsrs	r3, r3, #24
 8000444:	0fe4      	lsrs	r4, r4, #31
 8000446:	2b00      	cmp	r3, #0
 8000448:	d04e      	beq.n	80004e8 <__aeabi_fdiv+0xe0>
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	d046      	beq.n	80004dc <__aeabi_fdiv+0xd4>
 800044e:	4642      	mov	r2, r8
 8000450:	00d0      	lsls	r0, r2, #3
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	04d2      	lsls	r2, r2, #19
 8000456:	4302      	orrs	r2, r0
 8000458:	4690      	mov	r8, r2
 800045a:	2200      	movs	r2, #0
 800045c:	3b7f      	subs	r3, #127	; 0x7f
 800045e:	0031      	movs	r1, r6
 8000460:	1aff      	subs	r7, r7, r3
 8000462:	464b      	mov	r3, r9
 8000464:	4061      	eors	r1, r4
 8000466:	b2c9      	uxtb	r1, r1
 8000468:	4313      	orrs	r3, r2
 800046a:	2b0f      	cmp	r3, #15
 800046c:	d900      	bls.n	8000470 <__aeabi_fdiv+0x68>
 800046e:	e0b5      	b.n	80005dc <__aeabi_fdiv+0x1d4>
 8000470:	486e      	ldr	r0, [pc, #440]	; (800062c <__aeabi_fdiv+0x224>)
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	58c3      	ldr	r3, [r0, r3]
 8000476:	469f      	mov	pc, r3
 8000478:	2300      	movs	r3, #0
 800047a:	4698      	mov	r8, r3
 800047c:	0026      	movs	r6, r4
 800047e:	4645      	mov	r5, r8
 8000480:	4692      	mov	sl, r2
 8000482:	4653      	mov	r3, sl
 8000484:	2b02      	cmp	r3, #2
 8000486:	d100      	bne.n	800048a <__aeabi_fdiv+0x82>
 8000488:	e089      	b.n	800059e <__aeabi_fdiv+0x196>
 800048a:	2b03      	cmp	r3, #3
 800048c:	d100      	bne.n	8000490 <__aeabi_fdiv+0x88>
 800048e:	e09e      	b.n	80005ce <__aeabi_fdiv+0x1c6>
 8000490:	2b01      	cmp	r3, #1
 8000492:	d018      	beq.n	80004c6 <__aeabi_fdiv+0xbe>
 8000494:	003b      	movs	r3, r7
 8000496:	337f      	adds	r3, #127	; 0x7f
 8000498:	2b00      	cmp	r3, #0
 800049a:	dd69      	ble.n	8000570 <__aeabi_fdiv+0x168>
 800049c:	076a      	lsls	r2, r5, #29
 800049e:	d004      	beq.n	80004aa <__aeabi_fdiv+0xa2>
 80004a0:	220f      	movs	r2, #15
 80004a2:	402a      	ands	r2, r5
 80004a4:	2a04      	cmp	r2, #4
 80004a6:	d000      	beq.n	80004aa <__aeabi_fdiv+0xa2>
 80004a8:	3504      	adds	r5, #4
 80004aa:	012a      	lsls	r2, r5, #4
 80004ac:	d503      	bpl.n	80004b6 <__aeabi_fdiv+0xae>
 80004ae:	4b60      	ldr	r3, [pc, #384]	; (8000630 <__aeabi_fdiv+0x228>)
 80004b0:	401d      	ands	r5, r3
 80004b2:	003b      	movs	r3, r7
 80004b4:	3380      	adds	r3, #128	; 0x80
 80004b6:	2bfe      	cmp	r3, #254	; 0xfe
 80004b8:	dd00      	ble.n	80004bc <__aeabi_fdiv+0xb4>
 80004ba:	e070      	b.n	800059e <__aeabi_fdiv+0x196>
 80004bc:	01ad      	lsls	r5, r5, #6
 80004be:	0a6d      	lsrs	r5, r5, #9
 80004c0:	b2d8      	uxtb	r0, r3
 80004c2:	e002      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80004c4:	000e      	movs	r6, r1
 80004c6:	2000      	movs	r0, #0
 80004c8:	2500      	movs	r5, #0
 80004ca:	05c0      	lsls	r0, r0, #23
 80004cc:	4328      	orrs	r0, r5
 80004ce:	07f6      	lsls	r6, r6, #31
 80004d0:	4330      	orrs	r0, r6
 80004d2:	bce0      	pop	{r5, r6, r7}
 80004d4:	46ba      	mov	sl, r7
 80004d6:	46b1      	mov	r9, r6
 80004d8:	46a8      	mov	r8, r5
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	4643      	mov	r3, r8
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d13f      	bne.n	8000562 <__aeabi_fdiv+0x15a>
 80004e2:	2202      	movs	r2, #2
 80004e4:	3fff      	subs	r7, #255	; 0xff
 80004e6:	e003      	b.n	80004f0 <__aeabi_fdiv+0xe8>
 80004e8:	4643      	mov	r3, r8
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d12d      	bne.n	800054a <__aeabi_fdiv+0x142>
 80004ee:	2201      	movs	r2, #1
 80004f0:	0031      	movs	r1, r6
 80004f2:	464b      	mov	r3, r9
 80004f4:	4061      	eors	r1, r4
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d834      	bhi.n	8000568 <__aeabi_fdiv+0x160>
 80004fe:	484d      	ldr	r0, [pc, #308]	; (8000634 <__aeabi_fdiv+0x22c>)
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	58c3      	ldr	r3, [r0, r3]
 8000504:	469f      	mov	pc, r3
 8000506:	2d00      	cmp	r5, #0
 8000508:	d113      	bne.n	8000532 <__aeabi_fdiv+0x12a>
 800050a:	2304      	movs	r3, #4
 800050c:	4699      	mov	r9, r3
 800050e:	3b03      	subs	r3, #3
 8000510:	2700      	movs	r7, #0
 8000512:	469a      	mov	sl, r3
 8000514:	e791      	b.n	800043a <__aeabi_fdiv+0x32>
 8000516:	2d00      	cmp	r5, #0
 8000518:	d105      	bne.n	8000526 <__aeabi_fdiv+0x11e>
 800051a:	2308      	movs	r3, #8
 800051c:	4699      	mov	r9, r3
 800051e:	3b06      	subs	r3, #6
 8000520:	27ff      	movs	r7, #255	; 0xff
 8000522:	469a      	mov	sl, r3
 8000524:	e789      	b.n	800043a <__aeabi_fdiv+0x32>
 8000526:	230c      	movs	r3, #12
 8000528:	4699      	mov	r9, r3
 800052a:	3b09      	subs	r3, #9
 800052c:	27ff      	movs	r7, #255	; 0xff
 800052e:	469a      	mov	sl, r3
 8000530:	e783      	b.n	800043a <__aeabi_fdiv+0x32>
 8000532:	0028      	movs	r0, r5
 8000534:	f000 f8c2 	bl	80006bc <__clzsi2>
 8000538:	2776      	movs	r7, #118	; 0x76
 800053a:	1f43      	subs	r3, r0, #5
 800053c:	409d      	lsls	r5, r3
 800053e:	2300      	movs	r3, #0
 8000540:	427f      	negs	r7, r7
 8000542:	4699      	mov	r9, r3
 8000544:	469a      	mov	sl, r3
 8000546:	1a3f      	subs	r7, r7, r0
 8000548:	e777      	b.n	800043a <__aeabi_fdiv+0x32>
 800054a:	4640      	mov	r0, r8
 800054c:	f000 f8b6 	bl	80006bc <__clzsi2>
 8000550:	4642      	mov	r2, r8
 8000552:	1f43      	subs	r3, r0, #5
 8000554:	409a      	lsls	r2, r3
 8000556:	2376      	movs	r3, #118	; 0x76
 8000558:	425b      	negs	r3, r3
 800055a:	4690      	mov	r8, r2
 800055c:	1a1b      	subs	r3, r3, r0
 800055e:	2200      	movs	r2, #0
 8000560:	e77d      	b.n	800045e <__aeabi_fdiv+0x56>
 8000562:	23ff      	movs	r3, #255	; 0xff
 8000564:	2203      	movs	r2, #3
 8000566:	e77a      	b.n	800045e <__aeabi_fdiv+0x56>
 8000568:	000e      	movs	r6, r1
 800056a:	20ff      	movs	r0, #255	; 0xff
 800056c:	2500      	movs	r5, #0
 800056e:	e7ac      	b.n	80004ca <__aeabi_fdiv+0xc2>
 8000570:	2001      	movs	r0, #1
 8000572:	1ac0      	subs	r0, r0, r3
 8000574:	281b      	cmp	r0, #27
 8000576:	dca6      	bgt.n	80004c6 <__aeabi_fdiv+0xbe>
 8000578:	379e      	adds	r7, #158	; 0x9e
 800057a:	002a      	movs	r2, r5
 800057c:	40bd      	lsls	r5, r7
 800057e:	40c2      	lsrs	r2, r0
 8000580:	1e6b      	subs	r3, r5, #1
 8000582:	419d      	sbcs	r5, r3
 8000584:	4315      	orrs	r5, r2
 8000586:	076b      	lsls	r3, r5, #29
 8000588:	d004      	beq.n	8000594 <__aeabi_fdiv+0x18c>
 800058a:	230f      	movs	r3, #15
 800058c:	402b      	ands	r3, r5
 800058e:	2b04      	cmp	r3, #4
 8000590:	d000      	beq.n	8000594 <__aeabi_fdiv+0x18c>
 8000592:	3504      	adds	r5, #4
 8000594:	016b      	lsls	r3, r5, #5
 8000596:	d544      	bpl.n	8000622 <__aeabi_fdiv+0x21a>
 8000598:	2001      	movs	r0, #1
 800059a:	2500      	movs	r5, #0
 800059c:	e795      	b.n	80004ca <__aeabi_fdiv+0xc2>
 800059e:	20ff      	movs	r0, #255	; 0xff
 80005a0:	2500      	movs	r5, #0
 80005a2:	e792      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005a4:	2580      	movs	r5, #128	; 0x80
 80005a6:	2600      	movs	r6, #0
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	03ed      	lsls	r5, r5, #15
 80005ac:	e78d      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005ae:	2300      	movs	r3, #0
 80005b0:	4698      	mov	r8, r3
 80005b2:	2080      	movs	r0, #128	; 0x80
 80005b4:	03c0      	lsls	r0, r0, #15
 80005b6:	4205      	tst	r5, r0
 80005b8:	d009      	beq.n	80005ce <__aeabi_fdiv+0x1c6>
 80005ba:	4643      	mov	r3, r8
 80005bc:	4203      	tst	r3, r0
 80005be:	d106      	bne.n	80005ce <__aeabi_fdiv+0x1c6>
 80005c0:	4645      	mov	r5, r8
 80005c2:	4305      	orrs	r5, r0
 80005c4:	026d      	lsls	r5, r5, #9
 80005c6:	0026      	movs	r6, r4
 80005c8:	20ff      	movs	r0, #255	; 0xff
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	e77d      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005ce:	2080      	movs	r0, #128	; 0x80
 80005d0:	03c0      	lsls	r0, r0, #15
 80005d2:	4305      	orrs	r5, r0
 80005d4:	026d      	lsls	r5, r5, #9
 80005d6:	20ff      	movs	r0, #255	; 0xff
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	e776      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005dc:	4642      	mov	r2, r8
 80005de:	016b      	lsls	r3, r5, #5
 80005e0:	0150      	lsls	r0, r2, #5
 80005e2:	4283      	cmp	r3, r0
 80005e4:	d219      	bcs.n	800061a <__aeabi_fdiv+0x212>
 80005e6:	221b      	movs	r2, #27
 80005e8:	2500      	movs	r5, #0
 80005ea:	3f01      	subs	r7, #1
 80005ec:	2601      	movs	r6, #1
 80005ee:	001c      	movs	r4, r3
 80005f0:	006d      	lsls	r5, r5, #1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2c00      	cmp	r4, #0
 80005f6:	db01      	blt.n	80005fc <__aeabi_fdiv+0x1f4>
 80005f8:	4298      	cmp	r0, r3
 80005fa:	d801      	bhi.n	8000600 <__aeabi_fdiv+0x1f8>
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	4335      	orrs	r5, r6
 8000600:	3a01      	subs	r2, #1
 8000602:	2a00      	cmp	r2, #0
 8000604:	d1f3      	bne.n	80005ee <__aeabi_fdiv+0x1e6>
 8000606:	1e5a      	subs	r2, r3, #1
 8000608:	4193      	sbcs	r3, r2
 800060a:	431d      	orrs	r5, r3
 800060c:	003b      	movs	r3, r7
 800060e:	337f      	adds	r3, #127	; 0x7f
 8000610:	000e      	movs	r6, r1
 8000612:	2b00      	cmp	r3, #0
 8000614:	dd00      	ble.n	8000618 <__aeabi_fdiv+0x210>
 8000616:	e741      	b.n	800049c <__aeabi_fdiv+0x94>
 8000618:	e7aa      	b.n	8000570 <__aeabi_fdiv+0x168>
 800061a:	221a      	movs	r2, #26
 800061c:	2501      	movs	r5, #1
 800061e:	1a1b      	subs	r3, r3, r0
 8000620:	e7e4      	b.n	80005ec <__aeabi_fdiv+0x1e4>
 8000622:	01ad      	lsls	r5, r5, #6
 8000624:	2000      	movs	r0, #0
 8000626:	0a6d      	lsrs	r5, r5, #9
 8000628:	e74f      	b.n	80004ca <__aeabi_fdiv+0xc2>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	08004318 	.word	0x08004318
 8000630:	f7ffffff 	.word	0xf7ffffff
 8000634:	08004358 	.word	0x08004358

08000638 <__aeabi_ui2f>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	1e05      	subs	r5, r0, #0
 800063c:	d00e      	beq.n	800065c <__aeabi_ui2f+0x24>
 800063e:	f000 f83d 	bl	80006bc <__clzsi2>
 8000642:	239e      	movs	r3, #158	; 0x9e
 8000644:	0004      	movs	r4, r0
 8000646:	1a1b      	subs	r3, r3, r0
 8000648:	2b96      	cmp	r3, #150	; 0x96
 800064a:	dc0c      	bgt.n	8000666 <__aeabi_ui2f+0x2e>
 800064c:	2808      	cmp	r0, #8
 800064e:	dd01      	ble.n	8000654 <__aeabi_ui2f+0x1c>
 8000650:	3c08      	subs	r4, #8
 8000652:	40a5      	lsls	r5, r4
 8000654:	026d      	lsls	r5, r5, #9
 8000656:	0a6d      	lsrs	r5, r5, #9
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	e001      	b.n	8000660 <__aeabi_ui2f+0x28>
 800065c:	2000      	movs	r0, #0
 800065e:	2500      	movs	r5, #0
 8000660:	05c0      	lsls	r0, r0, #23
 8000662:	4328      	orrs	r0, r5
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2b99      	cmp	r3, #153	; 0x99
 8000668:	dd09      	ble.n	800067e <__aeabi_ui2f+0x46>
 800066a:	0002      	movs	r2, r0
 800066c:	0029      	movs	r1, r5
 800066e:	321b      	adds	r2, #27
 8000670:	4091      	lsls	r1, r2
 8000672:	1e4a      	subs	r2, r1, #1
 8000674:	4191      	sbcs	r1, r2
 8000676:	2205      	movs	r2, #5
 8000678:	1a12      	subs	r2, r2, r0
 800067a:	40d5      	lsrs	r5, r2
 800067c:	430d      	orrs	r5, r1
 800067e:	2c05      	cmp	r4, #5
 8000680:	dc12      	bgt.n	80006a8 <__aeabi_ui2f+0x70>
 8000682:	0029      	movs	r1, r5
 8000684:	4e0c      	ldr	r6, [pc, #48]	; (80006b8 <__aeabi_ui2f+0x80>)
 8000686:	4031      	ands	r1, r6
 8000688:	076a      	lsls	r2, r5, #29
 800068a:	d009      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 800068c:	200f      	movs	r0, #15
 800068e:	4028      	ands	r0, r5
 8000690:	2804      	cmp	r0, #4
 8000692:	d005      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 8000694:	3104      	adds	r1, #4
 8000696:	014a      	lsls	r2, r1, #5
 8000698:	d502      	bpl.n	80006a0 <__aeabi_ui2f+0x68>
 800069a:	239f      	movs	r3, #159	; 0x9f
 800069c:	4031      	ands	r1, r6
 800069e:	1b1b      	subs	r3, r3, r4
 80006a0:	0189      	lsls	r1, r1, #6
 80006a2:	0a4d      	lsrs	r5, r1, #9
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	e7db      	b.n	8000660 <__aeabi_ui2f+0x28>
 80006a8:	1f62      	subs	r2, r4, #5
 80006aa:	4095      	lsls	r5, r2
 80006ac:	0029      	movs	r1, r5
 80006ae:	4e02      	ldr	r6, [pc, #8]	; (80006b8 <__aeabi_ui2f+0x80>)
 80006b0:	4031      	ands	r1, r6
 80006b2:	076a      	lsls	r2, r5, #29
 80006b4:	d0f4      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 80006b6:	e7e9      	b.n	800068c <__aeabi_ui2f+0x54>
 80006b8:	fbffffff 	.word	0xfbffffff

080006bc <__clzsi2>:
 80006bc:	211c      	movs	r1, #28
 80006be:	2301      	movs	r3, #1
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d301      	bcc.n	80006ca <__clzsi2+0xe>
 80006c6:	0c00      	lsrs	r0, r0, #16
 80006c8:	3910      	subs	r1, #16
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	4298      	cmp	r0, r3
 80006ce:	d301      	bcc.n	80006d4 <__clzsi2+0x18>
 80006d0:	0a00      	lsrs	r0, r0, #8
 80006d2:	3908      	subs	r1, #8
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	4298      	cmp	r0, r3
 80006d8:	d301      	bcc.n	80006de <__clzsi2+0x22>
 80006da:	0900      	lsrs	r0, r0, #4
 80006dc:	3904      	subs	r1, #4
 80006de:	a202      	add	r2, pc, #8	; (adr r2, 80006e8 <__clzsi2+0x2c>)
 80006e0:	5c10      	ldrb	r0, [r2, r0]
 80006e2:	1840      	adds	r0, r0, r1
 80006e4:	4770      	bx	lr
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	02020304 	.word	0x02020304
 80006ec:	01010101 	.word	0x01010101
	...

080006f8 <apInit>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apInit(void)
{
 80006f8:	b510      	push	{r4, lr}
  ledInit();
 80006fa:	f000 f8a1 	bl	8000840 <ledInit>
  pwmInit();
 80006fe:	f000 f8cf 	bl	80008a0 <pwmInit>
  adcInit();
 8000702:	f000 f85d 	bl	80007c0 <adcInit>
  buttonInit();
 8000706:	f000 f87c 	bl	8000802 <buttonInit>
  uartInit();
 800070a:	f000 f8e7 	bl	80008dc <uartInit>

}
 800070e:	bd10      	pop	{r4, pc}

08000710 <apMain>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apMain(void)
{
 8000710:	b570      	push	{r4, r5, r6, lr}
  uint32_t pre_time;

  ledSetDuty(_DEF_CH1, 100);
 8000712:	2164      	movs	r1, #100	; 0x64
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8bb 	bl	8000890 <ledSetDuty>

  pre_time = millis();
 800071a:	f000 f96f 	bl	80009fc <millis>
 800071e:	0005      	movs	r5, r0
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    }
    */

    //Non-Blocking & Encapsulation & Modularization
    if (millis() - pre_time >= 500)
 8000720:	f000 f96c 	bl	80009fc <millis>
 8000724:	1b40      	subs	r0, r0, r5
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4298      	cmp	r0, r3
 800072c:	d237      	bcs.n	800079e <apMain+0x8e>
      //uartPrintf(_DEF_CH1, "adc_vol %d.%d\n", (int)adc_vol, ((int)(adc_vol * 100)) % 100);
      //uartPrintf(_DEF_CH1, "rx cnt %d\n", uartAvailable(_DEF_CH1));

    }

    adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.0f;
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f85c 	bl	80007ec <adcReadVoltage>
 8000734:	f7ff ff80 	bl	8000638 <__aeabi_ui2f>
 8000738:	491c      	ldr	r1, [pc, #112]	; (80007ac <apMain+0x9c>)
 800073a:	f7ff fe65 	bl	8000408 <__aeabi_fdiv>
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <apMain+0xa0>)
 8000740:	6018      	str	r0, [r3, #0]
    adc_vol_vref = (float)adcReadVoltage(_DEF_CH3) / 100.0f;
 8000742:	2002      	movs	r0, #2
 8000744:	f000 f852 	bl	80007ec <adcReadVoltage>
 8000748:	f7ff ff76 	bl	8000638 <__aeabi_ui2f>
 800074c:	4917      	ldr	r1, [pc, #92]	; (80007ac <apMain+0x9c>)
 800074e:	f7ff fe5b 	bl	8000408 <__aeabi_fdiv>
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <apMain+0xa4>)
 8000754:	6018      	str	r0, [r3, #0]

    button_data[_BUTTON_CH_SEL  ]   =  buttonGetPressed(_BUTTON_CH_SEL  );
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f856 	bl	8000808 <buttonGetPressed>
 800075c:	4c16      	ldr	r4, [pc, #88]	; (80007b8 <apMain+0xa8>)
 800075e:	7020      	strb	r0, [r4, #0]
    button_data[_BUTTON_CH_UP   ]   =  buttonGetPressed(_BUTTON_CH_UP   );
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f851 	bl	8000808 <buttonGetPressed>
 8000766:	70e0      	strb	r0, [r4, #3]
    button_data[_BUTTON_CH_DOWN ]   =  buttonGetPressed(_BUTTON_CH_DOWN );
 8000768:	2002      	movs	r0, #2
 800076a:	f000 f84d 	bl	8000808 <buttonGetPressed>
 800076e:	70a0      	strb	r0, [r4, #2]
    button_data[_BUTTON_CH_LEFT ]   =  buttonGetPressed(_BUTTON_CH_LEFT );
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f849 	bl	8000808 <buttonGetPressed>
 8000776:	7060      	strb	r0, [r4, #1]
    button_data[_BUTTON_CH_RIGHT]   =  buttonGetPressed(_BUTTON_CH_RIGHT);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 f845 	bl	8000808 <buttonGetPressed>
 800077e:	7120      	strb	r0, [r4, #4]


    if (uartAvailable(_DEF_CH1) > 0)
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f8cb 	bl	800091c <uartAvailable>
 8000786:	2800      	cmp	r0, #0
 8000788:	d0ca      	beq.n	8000720 <apMain+0x10>
    {
    	uint8_t rx_data;

    	rx_data = uartRead(_DEF_CH1);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f8dc 	bl	8000948 <uartRead>
 8000790:	0002      	movs	r2, r0
    	uartPrintf(_DEF_CH1, "rx data : 0x%02X (%c)\n", rx_data, rx_data );
 8000792:	0003      	movs	r3, r0
 8000794:	4909      	ldr	r1, [pc, #36]	; (80007bc <apMain+0xac>)
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f8ee 	bl	8000978 <uartPrintf>
 800079c:	e7c0      	b.n	8000720 <apMain+0x10>
      pre_time = millis();
 800079e:	f000 f92d 	bl	80009fc <millis>
 80007a2:	0005      	movs	r5, r0
      ledToggle(_DEF_CH1);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f863 	bl	8000870 <ledToggle>
 80007aa:	e7c0      	b.n	800072e <apMain+0x1e>
 80007ac:	42c80000 	.word	0x42c80000
 80007b0:	20000090 	.word	0x20000090
 80007b4:	20000094 	.word	0x20000094
 80007b8:	20000098 	.word	0x20000098
 80007bc:	08004398 	.word	0x08004398

080007c0 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 80007c0:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 80007c2:	4c05      	ldr	r4, [pc, #20]	; (80007d8 <adcInit+0x18>)
 80007c4:	0020      	movs	r0, r4
 80007c6:	f001 f81f 	bl	8001808 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 80007ca:	2203      	movs	r2, #3
 80007cc:	4903      	ldr	r1, [pc, #12]	; (80007dc <adcInit+0x1c>)
 80007ce:	0020      	movs	r0, r4
 80007d0:	f000 ff76 	bl	80016c0 <HAL_ADC_Start_DMA>
  return true;
}
 80007d4:	2001      	movs	r0, #1
 80007d6:	bd10      	pop	{r4, pc}
 80007d8:	200001b0 	.word	0x200001b0
 80007dc:	200000a0 	.word	0x200000a0

080007e0 <adcRead>:
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;

  ret = adc_data[ch];
 80007e0:	0040      	lsls	r0, r0, #1
 80007e2:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <adcRead+0x8>)
 80007e4:	5ac0      	ldrh	r0, [r0, r3]

  return ret;
}
 80007e6:	4770      	bx	lr
 80007e8:	200000a0 	.word	0x200000a0

080007ec <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 80007ec:	b510      	push	{r4, lr}
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 80007ee:	f7ff fff7 	bl	80007e0 <adcRead>
 80007f2:	0003      	movs	r3, r0
  ret = (330 * adc_data) / 4096;
 80007f4:	0080      	lsls	r0, r0, #2
 80007f6:	18c0      	adds	r0, r0, r3
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	18c0      	adds	r0, r0, r3
 80007fc:	0040      	lsls	r0, r0, #1
 80007fe:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 8000800:	bd10      	pop	{r4, pc}

08000802 <buttonInit>:
* Return        : bool
*****************************************************************************/
bool buttonInit(void)
{
  return true;
}
 8000802:	2001      	movs	r0, #1
 8000804:	4770      	bx	lr
	...

08000808 <buttonGetPressed>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool buttonGetPressed(uint8_t ch)
{
 8000808:	b510      	push	{r4, lr}
 800080a:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if (ch >= BUTTON_MAX_CH)
 800080c:	2804      	cmp	r0, #4
 800080e:	d901      	bls.n	8000814 <buttonGetPressed+0xc>
  {
    return false;
 8000810:	2000      	movs	r0, #0
    ret = true;
  }


  return ret;
}
 8000812:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffe9 	bl	80007ec <adcReadVoltage>
  if (adc_voltage >= button_adc[ch].adc_min  &&  adc_voltage <= button_adc[ch].adc_max)
 800081a:	00a3      	lsls	r3, r4, #2
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <buttonGetPressed+0x34>)
 800081e:	5a9b      	ldrh	r3, [r3, r2]
 8000820:	4283      	cmp	r3, r0
 8000822:	d806      	bhi.n	8000832 <buttonGetPressed+0x2a>
 8000824:	00a4      	lsls	r4, r4, #2
 8000826:	1914      	adds	r4, r2, r4
 8000828:	8863      	ldrh	r3, [r4, #2]
 800082a:	4283      	cmp	r3, r0
 800082c:	d203      	bcs.n	8000836 <buttonGetPressed+0x2e>
  bool ret = false;
 800082e:	2000      	movs	r0, #0
 8000830:	e7ef      	b.n	8000812 <buttonGetPressed+0xa>
 8000832:	2000      	movs	r0, #0
 8000834:	e7ed      	b.n	8000812 <buttonGetPressed+0xa>
    ret = true;
 8000836:	2001      	movs	r0, #1
 8000838:	e7eb      	b.n	8000812 <buttonGetPressed+0xa>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	080043b0 	.word	0x080043b0

08000840 <ledInit>:
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
  return true;
}
 8000840:	2001      	movs	r0, #1
 8000842:	4770      	bx	lr

08000844 <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 8000844:	b510      	push	{r4, lr}
  switch(ch)
 8000846:	2800      	cmp	r0, #0
 8000848:	d000      	beq.n	800084c <ledOn+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
      break;
  }
}
 800084a:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <ledOn+0x18>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2164      	movs	r1, #100	; 0x64
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	b289      	uxth	r1, r1
 8000856:	f000 f82d 	bl	80008b4 <pwmWrite>
}
 800085a:	e7f6      	b.n	800084a <ledOn+0x6>
 800085c:	20000000 	.word	0x20000000

08000860 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 8000860:	b510      	push	{r4, lr}
  switch(ch)
 8000862:	2800      	cmp	r0, #0
 8000864:	d000      	beq.n	8000868 <ledOff+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
      break;
  }
}
 8000866:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100);
 8000868:	2164      	movs	r1, #100	; 0x64
 800086a:	f000 f823 	bl	80008b4 <pwmWrite>
}
 800086e:	e7fa      	b.n	8000866 <ledOff+0x6>

08000870 <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 8000870:	b510      	push	{r4, lr}
  switch(ch)
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <ledToggle+0x8>
      {
        ledOff(_DEF_CH1);
      }
      break;
  }
}
 8000876:	bd10      	pop	{r4, pc}
      if (pwmRead(_DEF_CH1) == 100)
 8000878:	f000 f824 	bl	80008c4 <pwmRead>
 800087c:	2864      	cmp	r0, #100	; 0x64
 800087e:	d003      	beq.n	8000888 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ffed 	bl	8000860 <ledOff>
}
 8000886:	e7f6      	b.n	8000876 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ffdb 	bl	8000844 <ledOn>
 800088e:	e7f2      	b.n	8000876 <ledToggle+0x6>

08000890 <ledSetDuty>:
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
  switch(ch)
 8000890:	2800      	cmp	r0, #0
 8000892:	d102      	bne.n	800089a <ledSetDuty+0xa>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	4b01      	ldr	r3, [pc, #4]	; (800089c <ledSetDuty+0xc>)
 8000898:	52c1      	strh	r1, [r0, r3]
      break;
  }

}
 800089a:	4770      	bx	lr
 800089c:	20000000 	.word	0x20000000

080008a0 <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 80008a0:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008a2:	2100      	movs	r1, #0
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <pwmInit+0x10>)
 80008a6:	f001 feb9 	bl	800261c <HAL_TIM_PWM_Start>

  return true;
}
 80008aa:	2001      	movs	r0, #1
 80008ac:	bd10      	pop	{r4, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	20000270 	.word	0x20000270

080008b4 <pwmWrite>:
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
  switch(ch)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d102      	bne.n	80008be <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <pwmWrite+0xc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6359      	str	r1, [r3, #52]	; 0x34
      break;
  }
}
 80008be:	4770      	bx	lr
 80008c0:	20000270 	.word	0x20000270

080008c4 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;


  switch(ch)
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d104      	bne.n	80008d2 <pwmRead+0xe>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <pwmRead+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ce:	b280      	uxth	r0, r0
      break;
  }

  return pwm_data;

}
 80008d0:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008d2:	2000      	movs	r0, #0
 80008d4:	e7fc      	b.n	80008d0 <pwmRead+0xc>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000270 	.word	0x20000270

080008dc <uartInit>:
* Inputs        : bool
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool uartInit(void)
{
 80008dc:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart1, &q_data, 1);
 80008de:	2201      	movs	r2, #1
 80008e0:	4902      	ldr	r1, [pc, #8]	; (80008ec <uartInit+0x10>)
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <uartInit+0x14>)
 80008e4:	f002 ff7e 	bl	80037e4 <HAL_UART_Receive_IT>
	return true;
}
 80008e8:	2001      	movs	r0, #1
 80008ea:	bd10      	pop	{r4, pc}
 80008ec:	200001a8 	.word	0x200001a8
 80008f0:	200002bc 	.word	0x200002bc

080008f4 <uartWrite>:
* Inputs        : void
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80008f4:	b510      	push	{r4, lr}
 80008f6:	0014      	movs	r4, r2
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ref;

	switch(ch)
 80008f8:	2800      	cmp	r0, #0
 80008fa:	d001      	beq.n	8000900 <uartWrite+0xc>
	uint32_t ret = 0;
 80008fc:	2000      	movs	r0, #0
			break;
	}


	return ret;
}
 80008fe:	bd10      	pop	{r4, pc}
			hal_ref = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000900:	b292      	uxth	r2, r2
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <uartWrite+0x24>)
 8000906:	f002 fdbd 	bl	8003484 <HAL_UART_Transmit>
			if (hal_ref == HAL_OK)
 800090a:	2800      	cmp	r0, #0
 800090c:	d001      	beq.n	8000912 <uartWrite+0x1e>
	uint32_t ret = 0;
 800090e:	2000      	movs	r0, #0
 8000910:	e7f5      	b.n	80008fe <uartWrite+0xa>
				ret = length;
 8000912:	0020      	movs	r0, r4
	return ret;
 8000914:	e7f3      	b.n	80008fe <uartWrite+0xa>
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	200002bc 	.word	0x200002bc

0800091c <uartAvailable>:
*****************************************************************************/
uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
 800091c:	2800      	cmp	r0, #0
 800091e:	d10d      	bne.n	800093c <uartAvailable+0x20>
	{
		case _DEF_CH1:
			// Calculating the number of buffers stored.
			ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <uartAvailable+0x24>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	33ff      	adds	r3, #255	; 0xff
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <uartAvailable+0x28>)
 800092a:	8810      	ldrh	r0, [r2, #0]
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	17da      	asrs	r2, r3, #31
 8000930:	0e12      	lsrs	r2, r2, #24
 8000932:	189b      	adds	r3, r3, r2
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	4018      	ands	r0, r3
 8000938:	1a80      	subs	r0, r0, r2
			break;
	}

	return ret;
}
 800093a:	4770      	bx	lr
	uint32_t ret = 0;
 800093c:	2000      	movs	r0, #0
	return ret;
 800093e:	e7fc      	b.n	800093a <uartAvailable+0x1e>
 8000940:	200001aa 	.word	0x200001aa
 8000944:	200001ac 	.word	0x200001ac

08000948 <uartRead>:
*****************************************************************************/
uint8_t uartRead(uint8_t ch)
{
	uint8_t ret =0;

	switch(ch)
 8000948:	2800      	cmp	r0, #0
 800094a:	d10d      	bne.n	8000968 <uartRead+0x20>
	{
		case _DEF_CH1:
			if (q_out != q_in)
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <uartRead+0x24>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <uartRead+0x28>)
 8000952:	8812      	ldrh	r2, [r2, #0]
 8000954:	4293      	cmp	r3, r2
 8000956:	d008      	beq.n	800096a <uartRead+0x22>
			{
				ret = q_buf[q_out];
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <uartRead+0x2c>)
 800095a:	5cd0      	ldrb	r0, [r2, r3]
				q_out = (q_out + 1) % UART_Q_BUF_MAX;
 800095c:	3301      	adds	r3, #1
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	4013      	ands	r3, r2
 8000962:	4a02      	ldr	r2, [pc, #8]	; (800096c <uartRead+0x24>)
 8000964:	8013      	strh	r3, [r2, #0]
 8000966:	e000      	b.n	800096a <uartRead+0x22>
	uint8_t ret =0;
 8000968:	2000      	movs	r0, #0
			}
			break;
	}

	return ret;
}
 800096a:	4770      	bx	lr
 800096c:	200001ac 	.word	0x200001ac
 8000970:	200001aa 	.word	0x200001aa
 8000974:	200000a8 	.word	0x200000a8

08000978 <uartPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000978:	b40e      	push	{r1, r2, r3}
 800097a:	b510      	push	{r4, lr}
 800097c:	b0c3      	sub	sp, #268	; 0x10c
 800097e:	0004      	movs	r4, r0
 8000980:	ab45      	add	r3, sp, #276	; 0x114
 8000982:	cb04      	ldmia	r3!, {r2}
	uint32_t ret = 0;
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 8000984:	9341      	str	r3, [sp, #260]	; 0x104

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	0049      	lsls	r1, r1, #1
 800098a:	a801      	add	r0, sp, #4
 800098c:	f003 f862 	bl	8003a54 <vsniprintf>
 8000990:	1e02      	subs	r2, r0, #0

	va_end(arg);

	if (len > 0)
 8000992:	dc05      	bgt.n	80009a0 <uartPrintf+0x28>
	uint32_t ret = 0;
 8000994:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 8000996:	b043      	add	sp, #268	; 0x10c
 8000998:	bc10      	pop	{r4}
 800099a:	bc08      	pop	{r3}
 800099c:	b003      	add	sp, #12
 800099e:	4718      	bx	r3
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 80009a0:	a901      	add	r1, sp, #4
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff ffa6 	bl	80008f4 <uartWrite>
 80009a8:	e7f5      	b.n	8000996 <uartPrintf+0x1e>
	...

080009ac <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b510      	push	{r4, lr}
	if (&huart1 == huart)
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_RxCpltCallback+0x3c>)
 80009b0:	4283      	cmp	r3, r0
 80009b2:	d000      	beq.n	80009b6 <HAL_UART_RxCpltCallback+0xa>
			q_in = q_in_next;
		}
		HAL_UART_Receive_IT(&huart1, &q_data, 1);
	}

}
 80009b4:	bd10      	pop	{r4, pc}
		q_in_next = (q_in + 1) % UART_Q_BUF_MAX;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_UART_RxCpltCallback+0x40>)
 80009b8:	8819      	ldrh	r1, [r3, #0]
 80009ba:	1c4a      	adds	r2, r1, #1
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	0018      	movs	r0, r3
 80009c0:	4010      	ands	r0, r2
		if ((q_in_next + 1) != (q_out))
 80009c2:	0003      	movs	r3, r0
 80009c4:	3301      	adds	r3, #1
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <HAL_UART_RxCpltCallback+0x44>)
 80009c8:	8812      	ldrh	r2, [r2, #0]
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d005      	beq.n	80009da <HAL_UART_RxCpltCallback+0x2e>
			q_buf[q_in] = q_data;
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_UART_RxCpltCallback+0x48>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_UART_RxCpltCallback+0x4c>)
 80009d4:	545a      	strb	r2, [r3, r1]
			q_in = q_in_next;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_UART_RxCpltCallback+0x40>)
 80009d8:	8018      	strh	r0, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &q_data, 1);
 80009da:	2201      	movs	r2, #1
 80009dc:	4905      	ldr	r1, [pc, #20]	; (80009f4 <HAL_UART_RxCpltCallback+0x48>)
 80009de:	4802      	ldr	r0, [pc, #8]	; (80009e8 <HAL_UART_RxCpltCallback+0x3c>)
 80009e0:	f002 ff00 	bl	80037e4 <HAL_UART_Receive_IT>
}
 80009e4:	e7e6      	b.n	80009b4 <HAL_UART_RxCpltCallback+0x8>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	200002bc 	.word	0x200002bc
 80009ec:	200001aa 	.word	0x200001aa
 80009f0:	200001ac 	.word	0x200001ac
 80009f4:	200001a8 	.word	0x200001a8
 80009f8:	200000a8 	.word	0x200000a8

080009fc <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 80009fc:	b510      	push	{r4, lr}
  return HAL_GetTick();
 80009fe:	f000 fb2b 	bl	8001058 <HAL_GetTick>
}
 8000a02:	bd10      	pop	{r4, pc}

08000a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a04:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <MX_DMA_Init+0x18>)
 8000a08:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	6391      	str	r1, [r2, #56]	; 0x38
 8000a10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000a12:	4013      	ands	r3, r2
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	9b01      	ldr	r3, [sp, #4]

}
 8000a18:	b002      	add	sp, #8
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000

08000a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a20:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_GPIO_Init+0x28>)
 8000a24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a26:	2201      	movs	r2, #1
 8000a28:	4311      	orrs	r1, r2
 8000a2a:	6359      	str	r1, [r3, #52]	; 0x34
 8000a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a2e:	400a      	ands	r2, r1
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a36:	2202      	movs	r2, #2
 8000a38:	4311      	orrs	r1, r2
 8000a3a:	6359      	str	r1, [r3, #52]	; 0x34
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	401a      	ands	r2, r3
 8000a40:	9201      	str	r2, [sp, #4]
 8000a42:	9b01      	ldr	r3, [sp, #4]

}
 8000a44:	b002      	add	sp, #8
 8000a46:	4770      	bx	lr
 8000a48:	40021000 	.word	0x40021000

08000a4c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <Error_Handler+0x2>

08000a50 <MX_TIM1_Init>:
{
 8000a50:	b500      	push	{lr}
 8000a52:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a54:	2210      	movs	r2, #16
 8000a56:	2100      	movs	r1, #0
 8000a58:	a818      	add	r0, sp, #96	; 0x60
 8000a5a:	f002 ffc7 	bl	80039ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	220c      	movs	r2, #12
 8000a60:	2100      	movs	r1, #0
 8000a62:	a815      	add	r0, sp, #84	; 0x54
 8000a64:	f002 ffc2 	bl	80039ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	221c      	movs	r2, #28
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	a80e      	add	r0, sp, #56	; 0x38
 8000a6e:	f002 ffbd 	bl	80039ec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	2234      	movs	r2, #52	; 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	a801      	add	r0, sp, #4
 8000a78:	f002 ffb8 	bl	80039ec <memset>
  htim1.Instance = TIM1;
 8000a7c:	4830      	ldr	r0, [pc, #192]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000a7e:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <MX_TIM1_Init+0xf4>)
 8000a80:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000a82:	232f      	movs	r3, #47	; 0x2f
 8000a84:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	2300      	movs	r3, #0
 8000a88:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a90:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a92:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	f001 fbe2 	bl	800225c <HAL_TIM_Base_Init>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d144      	bne.n	8000b26 <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	015b      	lsls	r3, r3, #5
 8000aa0:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa2:	a918      	add	r1, sp, #96	; 0x60
 8000aa4:	4826      	ldr	r0, [pc, #152]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000aa6:	f001 fd27 	bl	80024f8 <HAL_TIM_ConfigClockSource>
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d13d      	bne.n	8000b2a <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aae:	4824      	ldr	r0, [pc, #144]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000ab0:	f001 fc04 	bl	80022bc <HAL_TIM_PWM_Init>
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	d13a      	bne.n	8000b2e <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac0:	a915      	add	r1, sp, #84	; 0x54
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000ac4:	f001 fe40 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	2800      	cmp	r0, #0
 8000aca:	d132      	bne.n	8000b32 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad4:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ad6:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ada:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000adc:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	a90e      	add	r1, sp, #56	; 0x38
 8000ae2:	4817      	ldr	r0, [pc, #92]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000ae4:	f001 fc5a 	bl	800239c <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d124      	bne.n	8000b36 <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af0:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af2:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000af4:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af6:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0192      	lsls	r2, r2, #6
 8000afc:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000afe:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b00:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b02:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0492      	lsls	r2, r2, #18
 8000b08:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b0a:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b0c:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b0e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b10:	a901      	add	r1, sp, #4
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000b14:	f001 fe50 	bl	80027b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d10e      	bne.n	8000b3a <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <MX_TIM1_Init+0xf0>)
 8000b1e:	f000 f987 	bl	8000e30 <HAL_TIM_MspPostInit>
}
 8000b22:	b01d      	add	sp, #116	; 0x74
 8000b24:	bd00      	pop	{pc}
    Error_Handler();
 8000b26:	f7ff ff91 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000b2a:	f7ff ff8f 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000b2e:	f7ff ff8d 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000b32:	f7ff ff8b 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000b36:	f7ff ff89 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000b3a:	f7ff ff87 	bl	8000a4c <Error_Handler>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000270 	.word	0x20000270
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <MX_ADC1_Init>:
{
 8000b48:	b500      	push	{lr}
 8000b4a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	2100      	movs	r1, #0
 8000b50:	a801      	add	r0, sp, #4
 8000b52:	f002 ff4b 	bl	80039ec <memset>
  hadc1.Instance = ADC1;
 8000b56:	4828      	ldr	r0, [pc, #160]	; (8000bf8 <MX_ADC1_Init+0xb0>)
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_ADC1_Init+0xb4>)
 8000b5a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b62:	2300      	movs	r3, #0
 8000b64:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b66:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	0392      	lsls	r2, r2, #14
 8000b6c:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6e:	2204      	movs	r2, #4
 8000b70:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b72:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b74:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b76:	3a03      	subs	r2, #3
 8000b78:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b80:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b82:	3129      	adds	r1, #41	; 0x29
 8000b84:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b86:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000b88:	3925      	subs	r1, #37	; 0x25
 8000b8a:	6341      	str	r1, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000b8c:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000b8e:	3135      	adds	r1, #53	; 0x35
 8000b90:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000b92:	3207      	adds	r2, #7
 8000b94:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000b96:	3278      	adds	r2, #120	; 0x78
 8000b98:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b9a:	6483      	str	r3, [r0, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b9c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b9e:	f000 fa61 	bl	8001064 <HAL_ADC_Init>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d120      	bne.n	8000be8 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_ADC1_Init+0xb8>)
 8000ba8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bae:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	a901      	add	r1, sp, #4
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0xb0>)
 8000bb4:	f000 fbe0 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d117      	bne.n	8000bec <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_ADC1_Init+0xbc>)
 8000bbe:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc4:	a901      	add	r1, sp, #4
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_ADC1_Init+0xb0>)
 8000bc8:	f000 fbd6 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d10f      	bne.n	8000bf0 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_ADC1_Init+0xc0>)
 8000bd2:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	a901      	add	r1, sp, #4
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_ADC1_Init+0xb0>)
 8000bdc:	f000 fbcc 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000be0:	2800      	cmp	r0, #0
 8000be2:	d107      	bne.n	8000bf4 <MX_ADC1_Init+0xac>
}
 8000be4:	b005      	add	sp, #20
 8000be6:	bd00      	pop	{pc}
    Error_Handler();
 8000be8:	f7ff ff30 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000bec:	f7ff ff2e 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000bf0:	f7ff ff2c 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000bf4:	f7ff ff2a 	bl	8000a4c <Error_Handler>
 8000bf8:	200001b0 	.word	0x200001b0
 8000bfc:	40012400 	.word	0x40012400
 8000c00:	10000010 	.word	0x10000010
 8000c04:	a4000200 	.word	0xa4000200
 8000c08:	a8000400 	.word	0xa8000400

08000c0c <MX_USART1_UART_Init>:
{
 8000c0c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <MX_USART1_UART_Init+0x60>)
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_USART1_UART_Init+0x64>)
 8000c12:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000c14:	23e1      	movs	r3, #225	; 0xe1
 8000c16:	025b      	lsls	r3, r3, #9
 8000c18:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c20:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c22:	220c      	movs	r2, #12
 8000c24:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c2c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c30:	f002 fce8 	bl	8003604 <HAL_UART_Init>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d111      	bne.n	8000c5c <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x60>)
 8000c3c:	f002 fe58 	bl	80038f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d10d      	bne.n	8000c60 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x60>)
 8000c48:	f002 fe78 	bl	800393c <HAL_UARTEx_SetRxFifoThreshold>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d109      	bne.n	8000c64 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x60>)
 8000c52:	f002 fe2d 	bl	80038b0 <HAL_UARTEx_DisableFifoMode>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d106      	bne.n	8000c68 <MX_USART1_UART_Init+0x5c>
}
 8000c5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c5c:	f7ff fef6 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000c60:	f7ff fef4 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000c64:	f7ff fef2 	bl	8000a4c <Error_Handler>
    Error_Handler();
 8000c68:	f7ff fef0 	bl	8000a4c <Error_Handler>
 8000c6c:	200002bc 	.word	0x200002bc
 8000c70:	40013800 	.word	0x40013800

08000c74 <SystemClock_Config>:
{
 8000c74:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <SystemClock_Config+0x78>)
 8000c78:	6813      	ldr	r3, [r2, #0]
 8000c7a:	2107      	movs	r1, #7
 8000c7c:	438b      	bics	r3, r1
 8000c7e:	3906      	subs	r1, #6
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <SystemClock_Config+0x7c>)
 8000c86:	6811      	ldr	r1, [r2, #0]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <SystemClock_Config+0x7c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	055b      	lsls	r3, r3, #21
 8000c96:	d5fb      	bpl.n	8000c90 <SystemClock_Config+0x1c>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <SystemClock_Config+0x7c>)
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	4915      	ldr	r1, [pc, #84]	; (8000cf4 <SystemClock_Config+0x80>)
 8000c9e:	4011      	ands	r1, r2
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	01d2      	lsls	r2, r2, #7
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4913      	ldr	r1, [pc, #76]	; (8000cf8 <SystemClock_Config+0x84>)
 8000cac:	400a      	ands	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	4912      	ldr	r1, [pc, #72]	; (8000cfc <SystemClock_Config+0x88>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	2107      	movs	r1, #7
 8000cbc:	438a      	bics	r2, r1
 8000cbe:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <SystemClock_Config+0x7c>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	2238      	movs	r2, #56	; 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000cc6:	421a      	tst	r2, r3
 8000cc8:	d1fa      	bne.n	8000cc0 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <SystemClock_Config+0x7c>)
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	490c      	ldr	r1, [pc, #48]	; (8000d00 <SystemClock_Config+0x8c>)
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <SystemClock_Config+0x90>)
 8000cd6:	f002 fe59 	bl	800398c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f970 	bl	8000fc0 <HAL_InitTick>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d100      	bne.n	8000ce6 <SystemClock_Config+0x72>
}
 8000ce4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ce6:	f7ff feb1 	bl	8000a4c <Error_Handler>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	ffff80ff 	.word	0xffff80ff
 8000cf8:	ffffc7ff 	.word	0xffffc7ff
 8000cfc:	fffff0ff 	.word	0xfffff0ff
 8000d00:	ffff8fff 	.word	0xffff8fff
 8000d04:	02dc6c00 	.word	0x02dc6c00

08000d08 <main>:
{
 8000d08:	b510      	push	{r4, lr}
  HAL_Init();
 8000d0a:	f000 f985 	bl	8001018 <HAL_Init>
  SystemClock_Config();
 8000d0e:	f7ff ffb1 	bl	8000c74 <SystemClock_Config>
  MX_GPIO_Init();
 8000d12:	f7ff fe85 	bl	8000a20 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d16:	f7ff fe9b 	bl	8000a50 <MX_TIM1_Init>
  MX_DMA_Init();
 8000d1a:	f7ff fe73 	bl	8000a04 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d1e:	f7ff ff13 	bl	8000b48 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d22:	f7ff ff73 	bl	8000c0c <MX_USART1_UART_Init>
  apInit();
 8000d26:	f7ff fce7 	bl	80006f8 <apInit>
  apMain();
 8000d2a:	f7ff fcf1 	bl	8000710 <apMain>
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <main+0x26>

08000d30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_MspInit+0x2c>)
 8000d34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d36:	2201      	movs	r2, #1
 8000d38:	4311      	orrs	r1, r2
 8000d3a:	6419      	str	r1, [r3, #64]	; 0x40
 8000d3c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d3e:	400a      	ands	r2, r1
 8000d40:	9200      	str	r2, [sp, #0]
 8000d42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	0549      	lsls	r1, r1, #21
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d50:	400b      	ands	r3, r1
 8000d52:	9301      	str	r3, [sp, #4]
 8000d54:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	b002      	add	sp, #8
 8000d58:	4770      	bx	lr
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d60:	b510      	push	{r4, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	2214      	movs	r2, #20
 8000d68:	2100      	movs	r1, #0
 8000d6a:	a803      	add	r0, sp, #12
 8000d6c:	f002 fe3e 	bl	80039ec <memset>
  if(hadc->Instance==ADC1)
 8000d70:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_ADC_MspInit+0x94>)
 8000d72:	6822      	ldr	r2, [r4, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d78:	b008      	add	sp, #32
 8000d7a:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_ADC_MspInit+0x98>)
 8000d7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	0892      	lsrs	r2, r2, #2
 8000d84:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d88:	2080      	movs	r0, #128	; 0x80
 8000d8a:	0340      	lsls	r0, r0, #13
 8000d8c:	4301      	orrs	r1, r0
 8000d8e:	6419      	str	r1, [r3, #64]	; 0x40
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	4002      	ands	r2, r0
 8000d94:	9201      	str	r2, [sp, #4]
 8000d96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4311      	orrs	r1, r2
 8000d9e:	6359      	str	r1, [r3, #52]	; 0x34
 8000da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da2:	401a      	ands	r2, r3
 8000da4:	9202      	str	r2, [sp, #8]
 8000da6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da8:	2310      	movs	r3, #16
 8000daa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	3b0d      	subs	r3, #13
 8000dae:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	20a0      	movs	r0, #160	; 0xa0
 8000db2:	a903      	add	r1, sp, #12
 8000db4:	05c0      	lsls	r0, r0, #23
 8000db6:	f000 ff97 	bl	8001ce8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000dba:	4810      	ldr	r0, [pc, #64]	; (8000dfc <HAL_ADC_MspInit+0x9c>)
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_ADC_MspInit+0xa0>)
 8000dbe:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dc0:	2305      	movs	r3, #5
 8000dc2:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dce:	3280      	adds	r2, #128	; 0x80
 8000dd0:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd8:	2220      	movs	r2, #32
 8000dda:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ddc:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dde:	f000 fe57 	bl	8001a90 <HAL_DMA_Init>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d103      	bne.n	8000dee <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_ADC_MspInit+0x9c>)
 8000de8:	6523      	str	r3, [r4, #80]	; 0x50
 8000dea:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000dec:	e7c4      	b.n	8000d78 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000dee:	f7ff fe2d 	bl	8000a4c <Error_Handler>
 8000df2:	e7f8      	b.n	8000de6 <HAL_ADC_MspInit+0x86>
 8000df4:	40012400 	.word	0x40012400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	20000214 	.word	0x20000214
 8000e00:	40020008 	.word	0x40020008

08000e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e04:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000e06:	6802      	ldr	r2, [r0, #0]
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <HAL_TIM_Base_MspInit+0x24>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d001      	beq.n	8000e12 <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e0e:	b002      	add	sp, #8
 8000e10:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_TIM_Base_MspInit+0x28>)
 8000e14:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e16:	2080      	movs	r0, #128	; 0x80
 8000e18:	0100      	lsls	r0, r0, #4
 8000e1a:	4301      	orrs	r1, r0
 8000e1c:	6411      	str	r1, [r2, #64]	; 0x40
 8000e1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e20:	4003      	ands	r3, r0
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	9b01      	ldr	r3, [sp, #4]
}
 8000e26:	e7f2      	b.n	8000e0e <HAL_TIM_Base_MspInit+0xa>
 8000e28:	40012c00 	.word	0x40012c00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e30:	b510      	push	{r4, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	2214      	movs	r2, #20
 8000e38:	2100      	movs	r1, #0
 8000e3a:	a801      	add	r0, sp, #4
 8000e3c:	f002 fdd6 	bl	80039ec <memset>
  if(htim->Instance==TIM1)
 8000e40:	6822      	ldr	r2, [r4, #0]
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <HAL_TIM_MspPostInit+0x48>)
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d001      	beq.n	8000e4c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e48:	b006      	add	sp, #24
 8000e4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_TIM_MspPostInit+0x4c>)
 8000e4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000e50:	2301      	movs	r3, #1
 8000e52:	4319      	orrs	r1, r3
 8000e54:	6351      	str	r1, [r2, #52]	; 0x34
 8000e56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e58:	4013      	ands	r3, r2
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	3b1e      	subs	r3, #30
 8000e64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000e66:	3303      	adds	r3, #3
 8000e68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	20a0      	movs	r0, #160	; 0xa0
 8000e6c:	a901      	add	r1, sp, #4
 8000e6e:	05c0      	lsls	r0, r0, #23
 8000e70:	f000 ff3a 	bl	8001ce8 <HAL_GPIO_Init>
}
 8000e74:	e7e8      	b.n	8000e48 <HAL_TIM_MspPostInit+0x18>
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	2214      	movs	r2, #20
 8000e88:	2100      	movs	r1, #0
 8000e8a:	a803      	add	r0, sp, #12
 8000e8c:	f002 fdae 	bl	80039ec <memset>
  if(huart->Instance==USART1)
 8000e90:	6822      	ldr	r2, [r4, #0]
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_UART_MspInit+0x68>)
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e98:	b008      	add	sp, #32
 8000e9a:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_UART_MspInit+0x6c>)
 8000e9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ea8:	2080      	movs	r0, #128	; 0x80
 8000eaa:	01c0      	lsls	r0, r0, #7
 8000eac:	4301      	orrs	r1, r0
 8000eae:	6419      	str	r1, [r3, #64]	; 0x40
 8000eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eb2:	4002      	ands	r2, r0
 8000eb4:	9201      	str	r2, [sp, #4]
 8000eb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4311      	orrs	r1, r2
 8000ebe:	6359      	str	r1, [r3, #52]	; 0x34
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec8:	23c0      	movs	r3, #192	; 0xc0
 8000eca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	a903      	add	r1, sp, #12
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <HAL_UART_MspInit+0x70>)
 8000ed2:	f000 ff09 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201b      	movs	r0, #27
 8000edc:	f000 fd2c 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ee0:	201b      	movs	r0, #27
 8000ee2:	f000 fd59 	bl	8001998 <HAL_NVIC_EnableIRQ>
}
 8000ee6:	e7d7      	b.n	8000e98 <HAL_UART_MspInit+0x18>
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	50000400 	.word	0x50000400

08000ef4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler>

08000ef6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler>

08000ef8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f89f 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bd10      	pop	{r4, pc}

08000f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f06:	4802      	ldr	r0, [pc, #8]	; (8000f10 <USART1_IRQHandler+0xc>)
 8000f08:	f001 fd10 	bl	800292c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	200002bc 	.word	0x200002bc

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b510      	push	{r4, lr}
 8000f16:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <_sbrk+0x38>)
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <_sbrk+0x3c>)
 8000f1c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1e:	490d      	ldr	r1, [pc, #52]	; (8000f54 <_sbrk+0x40>)
 8000f20:	6809      	ldr	r1, [r1, #0]
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d007      	beq.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	490b      	ldr	r1, [pc, #44]	; (8000f54 <_sbrk+0x40>)
 8000f28:	6808      	ldr	r0, [r1, #0]
 8000f2a:	18c3      	adds	r3, r0, r3
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d806      	bhi.n	8000f3e <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <_sbrk+0x40>)
 8000f32:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f34:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f36:	4907      	ldr	r1, [pc, #28]	; (8000f54 <_sbrk+0x40>)
 8000f38:	4807      	ldr	r0, [pc, #28]	; (8000f58 <_sbrk+0x44>)
 8000f3a:	6008      	str	r0, [r1, #0]
 8000f3c:	e7f3      	b.n	8000f26 <_sbrk+0x12>
    errno = ENOMEM;
 8000f3e:	f002 fd2b 	bl	8003998 <__errno>
 8000f42:	230c      	movs	r3, #12
 8000f44:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f46:	2001      	movs	r0, #1
 8000f48:	4240      	negs	r0, r0
 8000f4a:	e7f3      	b.n	8000f34 <_sbrk+0x20>
 8000f4c:	20003000 	.word	0x20003000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	2000034c 	.word	0x2000034c
 8000f58:	20000368 	.word	0x20000368

08000f5c <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <SystemInit+0xc>)
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	0512      	lsls	r2, r2, #20
 8000f62:	609a      	str	r2, [r3, #8]
#endif
}
 8000f64:	4770      	bx	lr
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f72:	e003      	b.n	8000f7c <LoopCopyDataInit>

08000f74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f7a:	3104      	adds	r1, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f7c:	480b      	ldr	r0, [pc, #44]	; (8000fac <LoopForever+0xa>)
  ldr r3, =_edata
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f84:	d3f6      	bcc.n	8000f74 <CopyDataInit>
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000f88:	e002      	b.n	8000f90 <LoopFillZerobss>

08000f8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f8c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8e:	3204      	adds	r2, #4

08000f90 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <LoopForever+0x16>)
  cmp r2, r3
 8000f92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f94:	d3f9      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f96:	f7ff ffe1 	bl	8000f5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f9a:	f002 fd03 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff feb3 	bl	8000d08 <main>

08000fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa2:	e7fe      	b.n	8000fa2 <LoopForever>
  ldr   r0, =_estack
 8000fa4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000fa8:	0800449c 	.word	0x0800449c
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fb0:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000fb4:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000fb8:	20000364 	.word	0x20000364

08000fbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_IRQHandler>
	...

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_InitTick+0x4c>)
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	2900      	cmp	r1, #0
 8000fca:	d101      	bne.n	8000fd0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fce:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd0:	20fa      	movs	r0, #250	; 0xfa
 8000fd2:	0080      	lsls	r0, r0, #2
 8000fd4:	f7ff f8a2 	bl	800011c <__udivsi3>
 8000fd8:	0001      	movs	r1, r0
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_InitTick+0x50>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f7ff f89d 	bl	800011c <__udivsi3>
 8000fe2:	f000 fce5 	bl	80019b0 <HAL_SYSTICK_Config>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d10d      	bne.n	8001006 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	2c03      	cmp	r4, #3
 8000fec:	d901      	bls.n	8000ff2 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7ed      	b.n	8000fce <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	0021      	movs	r1, r4
 8000ff8:	4240      	negs	r0, r0
 8000ffa:	f000 fc9d 	bl	8001938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_InitTick+0x54>)
 8001000:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001002:	2000      	movs	r0, #0
 8001004:	e7e3      	b.n	8000fce <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8001006:	2001      	movs	r0, #1
 8001008:	e7e1      	b.n	8000fce <HAL_InitTick+0xe>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004
 8001014:	2000000c 	.word	0x2000000c

08001018 <HAL_Init>:
{
 8001018:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_Init+0x24>)
 800101c:	6811      	ldr	r1, [r2, #0]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	430b      	orrs	r3, r1
 8001024:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ffca 	bl	8000fc0 <HAL_InitTick>
 800102c:	1e04      	subs	r4, r0, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001030:	2401      	movs	r4, #1
}
 8001032:	0020      	movs	r0, r4
 8001034:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8001036:	f7ff fe7b 	bl	8000d30 <HAL_MspInit>
 800103a:	e7fa      	b.n	8001032 <HAL_Init+0x1a>
 800103c:	40022000 	.word	0x40022000

08001040 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x10>)
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	4903      	ldr	r1, [pc, #12]	; (8001054 <HAL_IncTick+0x14>)
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	185b      	adds	r3, r3, r1
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	4770      	bx	lr
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000350 	.word	0x20000350
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <HAL_GetTick+0x8>)
 800105a:	6818      	ldr	r0, [r3, #0]
}
 800105c:	4770      	bx	lr
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	20000350 	.word	0x20000350

08001064 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001064:	b570      	push	{r4, r5, r6, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800106a:	2300      	movs	r3, #0
 800106c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800106e:	2800      	cmp	r0, #0
 8001070:	d100      	bne.n	8001074 <HAL_ADC_Init+0x10>
 8001072:	e119      	b.n	80012a8 <HAL_ADC_Init+0x244>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001074:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001076:	2b00      	cmp	r3, #0
 8001078:	d012      	beq.n	80010a0 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800107a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	d41b      	bmi.n	80010ba <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	4989      	ldr	r1, [pc, #548]	; (80012ac <HAL_ADC_Init+0x248>)
 8001086:	4011      	ands	r1, r2
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	0552      	lsls	r2, r2, #21
 800108c:	430a      	orrs	r2, r1
 800108e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001090:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <HAL_ADC_Init+0x24c>)
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	4987      	ldr	r1, [pc, #540]	; (80012b4 <HAL_ADC_Init+0x250>)
 8001096:	f7ff f841 	bl	800011c <__udivsi3>
 800109a:	0040      	lsls	r0, r0, #1
 800109c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800109e:	e009      	b.n	80010b4 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 80010a0:	f7ff fe5e 	bl	8000d60 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	2300      	movs	r3, #0
 80010a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	54a3      	strb	r3, [r4, r2]
 80010ac:	e7e5      	b.n	800107a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 80010ae:	9b01      	ldr	r3, [sp, #4]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80010b4:	9b01      	ldr	r3, [sp, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f9      	bne.n	80010ae <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010ba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	00d2      	lsls	r2, r2, #3
 80010c0:	d500      	bpl.n	80010c4 <HAL_ADC_Init+0x60>
 80010c2:	e09d      	b.n	8001200 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010c6:	2110      	movs	r1, #16
 80010c8:	430a      	orrs	r2, r1
 80010ca:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ce:	390f      	subs	r1, #15
 80010d0:	430a      	orrs	r2, r1
 80010d2:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010d4:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	2104      	movs	r1, #4
 80010da:	000d      	movs	r5, r1
 80010dc:	4015      	ands	r5, r2
 80010de:	4211      	tst	r1, r2
 80010e0:	d000      	beq.n	80010e4 <HAL_ADC_Init+0x80>
 80010e2:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010e6:	06d2      	lsls	r2, r2, #27
 80010e8:	d500      	bpl.n	80010ec <HAL_ADC_Init+0x88>
 80010ea:	e0d6      	b.n	800129a <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d000      	beq.n	80010f2 <HAL_ADC_Init+0x8e>
 80010f0:	e0d3      	b.n	800129a <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010f4:	4970      	ldr	r1, [pc, #448]	; (80012b8 <HAL_ADC_Init+0x254>)
 80010f6:	400a      	ands	r2, r1
 80010f8:	3106      	adds	r1, #6
 80010fa:	31ff      	adds	r1, #255	; 0xff
 80010fc:	430a      	orrs	r2, r1
 80010fe:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	d452      	bmi.n	80011ac <HAL_ADC_Init+0x148>
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001106:	7e22      	ldrb	r2, [r4, #24]
 8001108:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800110a:	68a1      	ldr	r1, [r4, #8]
 800110c:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800110e:	7e61      	ldrb	r1, [r4, #25]
 8001110:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001112:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001114:	7ea6      	ldrb	r6, [r4, #26]
 8001116:	0371      	lsls	r1, r6, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001118:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800111a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800111c:	2900      	cmp	r1, #0
 800111e:	d001      	beq.n	8001124 <HAL_ADC_Init+0xc0>
 8001120:	2180      	movs	r1, #128	; 0x80
 8001122:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001124:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001126:	68e1      	ldr	r1, [r4, #12]
 8001128:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800112a:	6921      	ldr	r1, [r4, #16]
 800112c:	2900      	cmp	r1, #0
 800112e:	db69      	blt.n	8001204 <HAL_ADC_Init+0x1a0>
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8001134:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001136:	212c      	movs	r1, #44	; 0x2c
 8001138:	5c61      	ldrb	r1, [r4, r1]
 800113a:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800113c:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800113e:	2120      	movs	r1, #32
 8001140:	5c61      	ldrb	r1, [r4, r1]
 8001142:	2901      	cmp	r1, #1
 8001144:	d061      	beq.n	800120a <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001148:	2900      	cmp	r1, #0
 800114a:	d005      	beq.n	8001158 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800114c:	26e0      	movs	r6, #224	; 0xe0
 800114e:	0076      	lsls	r6, r6, #1
 8001150:	4031      	ands	r1, r6
 8001152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001154:	4331      	orrs	r1, r6
 8001156:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001158:	68d9      	ldr	r1, [r3, #12]
 800115a:	4e58      	ldr	r6, [pc, #352]	; (80012bc <HAL_ADC_Init+0x258>)
 800115c:	4031      	ands	r1, r6
 800115e:	430a      	orrs	r2, r1
 8001160:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001162:	6863      	ldr	r3, [r4, #4]
 8001164:	0f9b      	lsrs	r3, r3, #30
 8001166:	079b      	lsls	r3, r3, #30
 8001168:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800116a:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800116c:	213c      	movs	r1, #60	; 0x3c
 800116e:	5c61      	ldrb	r1, [r4, r1]
 8001170:	2901      	cmp	r1, #1
 8001172:	d059      	beq.n	8001228 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001174:	6821      	ldr	r1, [r4, #0]
 8001176:	690b      	ldr	r3, [r1, #16]
 8001178:	4e51      	ldr	r6, [pc, #324]	; (80012c0 <HAL_ADC_Init+0x25c>)
 800117a:	4033      	ands	r3, r6
 800117c:	4313      	orrs	r3, r2
 800117e:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001180:	6863      	ldr	r3, [r4, #4]
 8001182:	22c0      	movs	r2, #192	; 0xc0
 8001184:	0612      	lsls	r2, r2, #24
 8001186:	4293      	cmp	r3, r2
 8001188:	d010      	beq.n	80011ac <HAL_ADC_Init+0x148>
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	05d2      	lsls	r2, r2, #23
 800118e:	4293      	cmp	r3, r2
 8001190:	d00c      	beq.n	80011ac <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	0612      	lsls	r2, r2, #24
 8001196:	4293      	cmp	r3, r2
 8001198:	d008      	beq.n	80011ac <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800119a:	494a      	ldr	r1, [pc, #296]	; (80012c4 <HAL_ADC_Init+0x260>)
 800119c:	680a      	ldr	r2, [r1, #0]
 800119e:	4e4a      	ldr	r6, [pc, #296]	; (80012c8 <HAL_ADC_Init+0x264>)
 80011a0:	4032      	ands	r2, r6
 80011a2:	26f0      	movs	r6, #240	; 0xf0
 80011a4:	03b6      	lsls	r6, r6, #14
 80011a6:	4033      	ands	r3, r6
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011ac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80011ae:	6953      	ldr	r3, [r2, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	438b      	bics	r3, r1
 80011b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011ba:	6821      	ldr	r1, [r4, #0]
 80011bc:	694b      	ldr	r3, [r1, #20]
 80011be:	2270      	movs	r2, #112	; 0x70
 80011c0:	4393      	bics	r3, r2
 80011c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	4313      	orrs	r3, r2
 80011c8:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011ca:	6923      	ldr	r3, [r4, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d135      	bne.n	800123c <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011d4:	3b10      	subs	r3, #16
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011da:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	2307      	movs	r3, #7
 80011e0:	4013      	ands	r3, r2
 80011e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d04f      	beq.n	8001288 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ea:	2212      	movs	r2, #18
 80011ec:	4393      	bics	r3, r2
 80011ee:	3a02      	subs	r2, #2
 80011f0:	4313      	orrs	r3, r2
 80011f2:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011f6:	3a0f      	subs	r2, #15
 80011f8:	4313      	orrs	r3, r2
 80011fa:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
 80011fe:	e051      	b.n	80012a4 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2000      	movs	r0, #0
 8001202:	e768      	b.n	80010d6 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001204:	0049      	lsls	r1, r1, #1
 8001206:	0849      	lsrs	r1, r1, #1
 8001208:	e794      	b.n	8001134 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800120a:	2e00      	cmp	r6, #0
 800120c:	d103      	bne.n	8001216 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	0249      	lsls	r1, r1, #9
 8001212:	430a      	orrs	r2, r1
 8001214:	e797      	b.n	8001146 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001216:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001218:	2620      	movs	r6, #32
 800121a:	4331      	orrs	r1, r6
 800121c:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001220:	3e1f      	subs	r6, #31
 8001222:	4331      	orrs	r1, r6
 8001224:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001226:	e78e      	b.n	8001146 <HAL_ADC_Init+0xe2>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001228:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800122a:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 800122c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800122e:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001230:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001232:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001234:	4313      	orrs	r3, r2
 8001236:	2201      	movs	r2, #1
 8001238:	431a      	orrs	r2, r3
 800123a:	e79b      	b.n	8001174 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0392      	lsls	r2, r2, #14
 8001240:	4293      	cmp	r3, r2
 8001242:	d1ca      	bne.n	80011da <HAL_ADC_Init+0x176>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001244:	2d07      	cmp	r5, #7
 8001246:	d808      	bhi.n	800125a <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001248:	00ab      	lsls	r3, r5, #2
 800124a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800124c:	40da      	lsrs	r2, r3
 800124e:	230f      	movs	r3, #15
 8001250:	4013      	ands	r3, r2
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d001      	beq.n	800125a <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001256:	3501      	adds	r5, #1
 8001258:	e7f4      	b.n	8001244 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800125a:	2d01      	cmp	r5, #1
 800125c:	d00d      	beq.n	800127a <HAL_ADC_Init+0x216>
        MODIFY_REG(hadc->Instance->CHSELR,
 800125e:	6821      	ldr	r1, [r4, #0]
 8001260:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001262:	69e3      	ldr	r3, [r4, #28]
 8001264:	3b01      	subs	r3, #1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	221c      	movs	r2, #28
 800126a:	401a      	ands	r2, r3
 800126c:	2310      	movs	r3, #16
 800126e:	425b      	negs	r3, r3
 8001270:	4093      	lsls	r3, r2
 8001272:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001274:	4313      	orrs	r3, r2
 8001276:	628b      	str	r3, [r1, #40]	; 0x28
 8001278:	e7af      	b.n	80011da <HAL_ADC_Init+0x176>
        SET_BIT(hadc->Instance->CHSELR,
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800127e:	2310      	movs	r3, #16
 8001280:	425b      	negs	r3, r3
 8001282:	430b      	orrs	r3, r1
 8001284:	6293      	str	r3, [r2, #40]	; 0x28
 8001286:	e7a8      	b.n	80011da <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8001288:	2300      	movs	r3, #0
 800128a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800128c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800128e:	2203      	movs	r2, #3
 8001290:	4393      	bics	r3, r2
 8001292:	3a02      	subs	r2, #2
 8001294:	4313      	orrs	r3, r2
 8001296:	65a3      	str	r3, [r4, #88]	; 0x58
 8001298:	e004      	b.n	80012a4 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800129c:	2210      	movs	r2, #16
 800129e:	4313      	orrs	r3, r2
 80012a0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80012a4:	b002      	add	sp, #8
 80012a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012a8:	2001      	movs	r0, #1
 80012aa:	e7fb      	b.n	80012a4 <HAL_ADC_Init+0x240>
 80012ac:	6fffffe8 	.word	0x6fffffe8
 80012b0:	20000004 	.word	0x20000004
 80012b4:	00030d40 	.word	0x00030d40
 80012b8:	fffffefd 	.word	0xfffffefd
 80012bc:	fffe0201 	.word	0xfffe0201
 80012c0:	1ffffc02 	.word	0x1ffffc02
 80012c4:	40012708 	.word	0x40012708
 80012c8:	ffc3ffff 	.word	0xffc3ffff

080012cc <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012cc:	4770      	bx	lr

080012ce <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012ce:	4770      	bx	lr

080012d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80012d0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012d2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012d4:	f7ff fffb 	bl	80012ce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d8:	bd10      	pop	{r4, pc}

080012da <HAL_ADC_ErrorCallback>:
}
 80012da:	4770      	bx	lr

080012dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80012dc:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012de:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80012e2:	2240      	movs	r2, #64	; 0x40
 80012e4:	4313      	orrs	r3, r2
 80012e6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80012ea:	3a3c      	subs	r2, #60	; 0x3c
 80012ec:	4313      	orrs	r3, r2
 80012ee:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012f0:	f7ff fff3 	bl	80012da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012f4:	bd10      	pop	{r4, pc}
	...

080012f8 <ADC_DMAConvCplt>:
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80012fe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001300:	2150      	movs	r1, #80	; 0x50
 8001302:	4211      	tst	r1, r2
 8001304:	d12a      	bne.n	800135c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001306:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4313      	orrs	r3, r2
 800130e:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001310:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	4211      	tst	r1, r2
 800131a:	d113      	bne.n	8001344 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800131c:	7e82      	ldrb	r2, [r0, #26]
 800131e:	2a00      	cmp	r2, #0
 8001320:	d110      	bne.n	8001344 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	0712      	lsls	r2, r2, #28
 8001326:	d50d      	bpl.n	8001344 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	0752      	lsls	r2, r2, #29
 800132c:	d40d      	bmi.n	800134a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	210c      	movs	r1, #12
 8001332:	438a      	bics	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001336:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <ADC_DMAConvCplt+0x7c>)
 800133a:	4013      	ands	r3, r2
 800133c:	3204      	adds	r2, #4
 800133e:	32ff      	adds	r2, #255	; 0xff
 8001340:	4313      	orrs	r3, r2
 8001342:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001344:	f7ff ffc2 	bl	80012cc <HAL_ADC_ConvCpltCallback>
}
 8001348:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800134c:	2220      	movs	r2, #32
 800134e:	4313      	orrs	r3, r2
 8001350:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001352:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001354:	3a1f      	subs	r2, #31
 8001356:	4313      	orrs	r3, r2
 8001358:	65c3      	str	r3, [r0, #92]	; 0x5c
 800135a:	e7f3      	b.n	8001344 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800135c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800135e:	06d2      	lsls	r2, r2, #27
 8001360:	d404      	bmi.n	800136c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001362:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001366:	0018      	movs	r0, r3
 8001368:	4790      	blx	r2
}
 800136a:	e7ed      	b.n	8001348 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 800136c:	f7ff ffb5 	bl	80012da <HAL_ADC_ErrorCallback>
 8001370:	e7ea      	b.n	8001348 <ADC_DMAConvCplt+0x50>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	fffffefe 	.word	0xfffffefe

08001378 <HAL_ADC_ConfigChannel>:
{
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800137e:	2300      	movs	r3, #0
 8001380:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001382:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001384:	3354      	adds	r3, #84	; 0x54
 8001386:	5cc3      	ldrb	r3, [r0, r3]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d100      	bne.n	800138e <HAL_ADC_ConfigChannel+0x16>
 800138c:	e122      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x25c>
 800138e:	2354      	movs	r3, #84	; 0x54
 8001390:	2201      	movs	r2, #1
 8001392:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001394:	6800      	ldr	r0, [r0, #0]
 8001396:	6883      	ldr	r3, [r0, #8]
 8001398:	3203      	adds	r2, #3
 800139a:	0016      	movs	r6, r2
 800139c:	401e      	ands	r6, r3
 800139e:	421a      	tst	r2, r3
 80013a0:	d009      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013a4:	321c      	adds	r2, #28
 80013a6:	4313      	orrs	r3, r2
 80013a8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80013aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80013ac:	2354      	movs	r3, #84	; 0x54
 80013ae:	2200      	movs	r2, #0
 80013b0:	54e2      	strb	r2, [r4, r3]
}
 80013b2:	b003      	add	sp, #12
 80013b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80013b6:	684b      	ldr	r3, [r1, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d100      	bne.n	80013be <HAL_ADC_ConfigChannel+0x46>
 80013bc:	e0d6      	b.n	800156c <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013be:	2280      	movs	r2, #128	; 0x80
 80013c0:	0612      	lsls	r2, r2, #24
 80013c2:	4295      	cmp	r5, r2
 80013c4:	d026      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x9c>
 80013c6:	4a84      	ldr	r2, [pc, #528]	; (80015d8 <HAL_ADC_ConfigChannel+0x260>)
 80013c8:	4295      	cmp	r5, r2
 80013ca:	d023      	beq.n	8001414 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80013cc:	221f      	movs	r2, #31
 80013ce:	4013      	ands	r3, r2
 80013d0:	3a10      	subs	r2, #16
 80013d2:	409a      	lsls	r2, r3
 80013d4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80013d6:	4395      	bics	r5, r2
 80013d8:	002a      	movs	r2, r5
 80013da:	680d      	ldr	r5, [r1, #0]
 80013dc:	026f      	lsls	r7, r5, #9
 80013de:	d12f      	bne.n	8001440 <HAL_ADC_ConfigChannel+0xc8>
 80013e0:	0ead      	lsrs	r5, r5, #26
 80013e2:	261f      	movs	r6, #31
 80013e4:	402e      	ands	r6, r5
 80013e6:	409e      	lsls	r6, r3
 80013e8:	4316      	orrs	r6, r2
 80013ea:	6626      	str	r6, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80013ec:	684d      	ldr	r5, [r1, #4]
 80013ee:	08ab      	lsrs	r3, r5, #2
 80013f0:	3301      	adds	r3, #1
 80013f2:	69e2      	ldr	r2, [r4, #28]
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d813      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 80013f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013fa:	231f      	movs	r3, #31
 80013fc:	401d      	ands	r5, r3
 80013fe:	3b10      	subs	r3, #16
 8001400:	001e      	movs	r6, r3
 8001402:	40ae      	lsls	r6, r5
 8001404:	43b2      	bics	r2, r6
 8001406:	680e      	ldr	r6, [r1, #0]
 8001408:	0eb6      	lsrs	r6, r6, #26
 800140a:	4033      	ands	r3, r6
 800140c:	40ab      	lsls	r3, r5
 800140e:	4313      	orrs	r3, r2
 8001410:	6283      	str	r3, [r0, #40]	; 0x28
}
 8001412:	e005      	b.n	8001420 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001414:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001416:	680b      	ldr	r3, [r1, #0]
 8001418:	025b      	lsls	r3, r3, #9
 800141a:	0a5b      	lsrs	r3, r3, #9
 800141c:	4313      	orrs	r3, r2
 800141e:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001420:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001422:	6942      	ldr	r2, [r0, #20]
 8001424:	680b      	ldr	r3, [r1, #0]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	439a      	bics	r2, r3
 800142a:	688d      	ldr	r5, [r1, #8]
 800142c:	402b      	ands	r3, r5
 800142e:	4d6b      	ldr	r5, [pc, #428]	; (80015dc <HAL_ADC_ConfigChannel+0x264>)
 8001430:	402b      	ands	r3, r5
 8001432:	4313      	orrs	r3, r2
 8001434:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001436:	680b      	ldr	r3, [r1, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db5f      	blt.n	80014fc <HAL_ADC_ConfigChannel+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143c:	2000      	movs	r0, #0
 800143e:	e7b5      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001440:	07ef      	lsls	r7, r5, #31
 8001442:	d4d0      	bmi.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 8001444:	07ae      	lsls	r6, r5, #30
 8001446:	d42f      	bmi.n	80014a8 <HAL_ADC_ConfigChannel+0x130>
 8001448:	076e      	lsls	r6, r5, #29
 800144a:	d42f      	bmi.n	80014ac <HAL_ADC_ConfigChannel+0x134>
 800144c:	072e      	lsls	r6, r5, #28
 800144e:	d42f      	bmi.n	80014b0 <HAL_ADC_ConfigChannel+0x138>
 8001450:	06ee      	lsls	r6, r5, #27
 8001452:	d42f      	bmi.n	80014b4 <HAL_ADC_ConfigChannel+0x13c>
 8001454:	06ae      	lsls	r6, r5, #26
 8001456:	d42f      	bmi.n	80014b8 <HAL_ADC_ConfigChannel+0x140>
 8001458:	066e      	lsls	r6, r5, #25
 800145a:	d42f      	bmi.n	80014bc <HAL_ADC_ConfigChannel+0x144>
 800145c:	062e      	lsls	r6, r5, #24
 800145e:	d42f      	bmi.n	80014c0 <HAL_ADC_ConfigChannel+0x148>
 8001460:	05ee      	lsls	r6, r5, #23
 8001462:	d42f      	bmi.n	80014c4 <HAL_ADC_ConfigChannel+0x14c>
 8001464:	05ae      	lsls	r6, r5, #22
 8001466:	d42f      	bmi.n	80014c8 <HAL_ADC_ConfigChannel+0x150>
 8001468:	056e      	lsls	r6, r5, #21
 800146a:	d42f      	bmi.n	80014cc <HAL_ADC_ConfigChannel+0x154>
 800146c:	052e      	lsls	r6, r5, #20
 800146e:	d42f      	bmi.n	80014d0 <HAL_ADC_ConfigChannel+0x158>
 8001470:	04ee      	lsls	r6, r5, #19
 8001472:	d42f      	bmi.n	80014d4 <HAL_ADC_ConfigChannel+0x15c>
 8001474:	04ae      	lsls	r6, r5, #18
 8001476:	d42f      	bmi.n	80014d8 <HAL_ADC_ConfigChannel+0x160>
 8001478:	046e      	lsls	r6, r5, #17
 800147a:	d42f      	bmi.n	80014dc <HAL_ADC_ConfigChannel+0x164>
 800147c:	042e      	lsls	r6, r5, #16
 800147e:	d42f      	bmi.n	80014e0 <HAL_ADC_ConfigChannel+0x168>
 8001480:	03ee      	lsls	r6, r5, #15
 8001482:	d42f      	bmi.n	80014e4 <HAL_ADC_ConfigChannel+0x16c>
 8001484:	03ae      	lsls	r6, r5, #14
 8001486:	d42f      	bmi.n	80014e8 <HAL_ADC_ConfigChannel+0x170>
 8001488:	036e      	lsls	r6, r5, #13
 800148a:	d42f      	bmi.n	80014ec <HAL_ADC_ConfigChannel+0x174>
 800148c:	032e      	lsls	r6, r5, #12
 800148e:	d42f      	bmi.n	80014f0 <HAL_ADC_ConfigChannel+0x178>
 8001490:	02ee      	lsls	r6, r5, #11
 8001492:	d42f      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x17c>
 8001494:	02ae      	lsls	r6, r5, #10
 8001496:	d42f      	bmi.n	80014f8 <HAL_ADC_ConfigChannel+0x180>
 8001498:	2780      	movs	r7, #128	; 0x80
 800149a:	03ff      	lsls	r7, r7, #15
 800149c:	002e      	movs	r6, r5
 800149e:	403e      	ands	r6, r7
 80014a0:	423d      	tst	r5, r7
 80014a2:	d0a0      	beq.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014a4:	2616      	movs	r6, #22
 80014a6:	e79e      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014a8:	2601      	movs	r6, #1
 80014aa:	e79c      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014ac:	2602      	movs	r6, #2
 80014ae:	e79a      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014b0:	2603      	movs	r6, #3
 80014b2:	e798      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014b4:	2604      	movs	r6, #4
 80014b6:	e796      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014b8:	2605      	movs	r6, #5
 80014ba:	e794      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014bc:	2606      	movs	r6, #6
 80014be:	e792      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014c0:	2607      	movs	r6, #7
 80014c2:	e790      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014c4:	2608      	movs	r6, #8
 80014c6:	e78e      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014c8:	2609      	movs	r6, #9
 80014ca:	e78c      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014cc:	260a      	movs	r6, #10
 80014ce:	e78a      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014d0:	260b      	movs	r6, #11
 80014d2:	e788      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014d4:	260c      	movs	r6, #12
 80014d6:	e786      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014d8:	260d      	movs	r6, #13
 80014da:	e784      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014dc:	260e      	movs	r6, #14
 80014de:	e782      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014e0:	260f      	movs	r6, #15
 80014e2:	e780      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014e4:	2610      	movs	r6, #16
 80014e6:	e77e      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014e8:	2611      	movs	r6, #17
 80014ea:	e77c      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014ec:	2612      	movs	r6, #18
 80014ee:	e77a      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014f0:	2613      	movs	r6, #19
 80014f2:	e778      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014f4:	2614      	movs	r6, #20
 80014f6:	e776      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
 80014f8:	2615      	movs	r6, #21
 80014fa:	e774      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80014fc:	4a38      	ldr	r2, [pc, #224]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	22c0      	movs	r2, #192	; 0xc0
 8001502:	0412      	lsls	r2, r2, #16
 8001504:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001506:	4837      	ldr	r0, [pc, #220]	; (80015e4 <HAL_ADC_ConfigChannel+0x26c>)
 8001508:	4283      	cmp	r3, r0
 800150a:	d004      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x19e>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800150c:	4836      	ldr	r0, [pc, #216]	; (80015e8 <HAL_ADC_ConfigChannel+0x270>)
 800150e:	4283      	cmp	r3, r0
 8001510:	d01f      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e74a      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001516:	0208      	lsls	r0, r1, #8
 8001518:	d4f8      	bmi.n	800150c <HAL_ADC_ConfigChannel+0x194>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001520:	492f      	ldr	r1, [pc, #188]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 8001522:	680b      	ldr	r3, [r1, #0]
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <HAL_ADC_ConfigChannel+0x274>)
 8001526:	4003      	ands	r3, r0
 8001528:	431a      	orrs	r2, r3
 800152a:	600a      	str	r2, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_ADC_ConfigChannel+0x278>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	4930      	ldr	r1, [pc, #192]	; (80015f4 <HAL_ADC_ConfigChannel+0x27c>)
 8001532:	f7fe fdf3 	bl	800011c <__udivsi3>
 8001536:	0043      	lsls	r3, r0, #1
 8001538:	181b      	adds	r3, r3, r0
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	3301      	adds	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001540:	e002      	b.n	8001548 <HAL_ADC_ConfigChannel+0x1d0>
            wait_loop_index--;
 8001542:	9b01      	ldr	r3, [sp, #4]
 8001544:	3b01      	subs	r3, #1
 8001546:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x1ca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2000      	movs	r0, #0
 8001550:	e72c      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001552:	024b      	lsls	r3, r1, #9
 8001554:	d43c      	bmi.n	80015d0 <HAL_ADC_ConfigChannel+0x258>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	03db      	lsls	r3, r3, #15
 800155a:	431a      	orrs	r2, r3
 800155c:	4920      	ldr	r1, [pc, #128]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 800155e:	680b      	ldr	r3, [r1, #0]
 8001560:	4822      	ldr	r0, [pc, #136]	; (80015ec <HAL_ADC_ConfigChannel+0x274>)
 8001562:	4003      	ands	r3, r0
 8001564:	431a      	orrs	r2, r3
 8001566:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2000      	movs	r0, #0
}
 800156a:	e71f      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	061b      	lsls	r3, r3, #24
 8001570:	429d      	cmp	r5, r3
 8001572:	d002      	beq.n	800157a <HAL_ADC_ConfigChannel+0x202>
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_ADC_ConfigChannel+0x260>)
 8001576:	429d      	cmp	r5, r3
 8001578:	d105      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800157a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800157c:	680b      	ldr	r3, [r1, #0]
 800157e:	025b      	lsls	r3, r3, #9
 8001580:	0a5b      	lsrs	r3, r3, #9
 8001582:	439a      	bics	r2, r3
 8001584:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001586:	680b      	ldr	r3, [r1, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db01      	blt.n	8001590 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2000      	movs	r0, #0
 800158e:	e70d      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 8001592:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001594:	4913      	ldr	r1, [pc, #76]	; (80015e4 <HAL_ADC_ConfigChannel+0x26c>)
 8001596:	428b      	cmp	r3, r1
 8001598:	d004      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x22c>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800159a:	4913      	ldr	r1, [pc, #76]	; (80015e8 <HAL_ADC_ConfigChannel+0x270>)
 800159c:	428b      	cmp	r3, r1
 800159e:	d00c      	beq.n	80015ba <HAL_ADC_ConfigChannel+0x242>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a0:	2000      	movs	r0, #0
 80015a2:	e703      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	03db      	lsls	r3, r3, #15
 80015a8:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 80015ac:	680b      	ldr	r3, [r1, #0]
 80015ae:	480f      	ldr	r0, [pc, #60]	; (80015ec <HAL_ADC_ConfigChannel+0x274>)
 80015b0:	4003      	ands	r3, r0
 80015b2:	431a      	orrs	r2, r3
 80015b4:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b6:	2000      	movs	r0, #0
}
 80015b8:	e6f8      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	041b      	lsls	r3, r3, #16
 80015be:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <HAL_ADC_ConfigChannel+0x268>)
 80015c2:	680b      	ldr	r3, [r1, #0]
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_ADC_ConfigChannel+0x274>)
 80015c6:	4003      	ands	r3, r0
 80015c8:	431a      	orrs	r2, r3
 80015ca:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015cc:	2000      	movs	r0, #0
}
 80015ce:	e6ed      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
 80015d0:	2000      	movs	r0, #0
 80015d2:	e6eb      	b.n	80013ac <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80015d4:	2002      	movs	r0, #2
 80015d6:	e6ec      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x3a>
 80015d8:	80000004 	.word	0x80000004
 80015dc:	7fffff00 	.word	0x7fffff00
 80015e0:	40012708 	.word	0x40012708
 80015e4:	a4000200 	.word	0xa4000200
 80015e8:	a8000400 	.word	0xa8000400
 80015ec:	ff3fffff 	.word	0xff3fffff
 80015f0:	20000004 	.word	0x20000004
 80015f4:	00030d40 	.word	0x00030d40

080015f8 <ADC_Enable>:
{
 80015f8:	b530      	push	{r4, r5, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80015fe:	2300      	movs	r3, #0
 8001600:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001602:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	07d2      	lsls	r2, r2, #31
 8001608:	d44d      	bmi.n	80016a6 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <ADC_Enable+0xb4>)
 800160e:	4211      	tst	r1, r2
 8001610:	d111      	bne.n	8001636 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	4926      	ldr	r1, [pc, #152]	; (80016b0 <ADC_Enable+0xb8>)
 8001616:	400a      	ands	r2, r1
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <ADC_Enable+0xbc>)
 8001620:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	d517      	bpl.n	8001656 <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <ADC_Enable+0xc0>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	4924      	ldr	r1, [pc, #144]	; (80016bc <ADC_Enable+0xc4>)
 800162c:	f7fe fd76 	bl	800011c <__udivsi3>
 8001630:	3001      	adds	r0, #1
 8001632:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001634:	e00c      	b.n	8001650 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001638:	2210      	movs	r2, #16
 800163a:	4313      	orrs	r3, r2
 800163c:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001640:	3a0f      	subs	r2, #15
 8001642:	4313      	orrs	r3, r2
 8001644:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8001646:	2001      	movs	r0, #1
 8001648:	e02e      	b.n	80016a8 <ADC_Enable+0xb0>
        wait_loop_index--;
 800164a:	9b01      	ldr	r3, [sp, #4]
 800164c:	3b01      	subs	r3, #1
 800164e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001650:	9b01      	ldr	r3, [sp, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f9      	bne.n	800164a <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001656:	7e63      	ldrb	r3, [r4, #25]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <ADC_Enable+0x68>
  return HAL_OK;
 800165c:	2000      	movs	r0, #0
 800165e:	e023      	b.n	80016a8 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001660:	f7ff fcfa 	bl	8001058 <HAL_GetTick>
 8001664:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001666:	e004      	b.n	8001672 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001668:	f7ff fcf6 	bl	8001058 <HAL_GetTick>
 800166c:	1b40      	subs	r0, r0, r5
 800166e:	2802      	cmp	r0, #2
 8001670:	d80d      	bhi.n	800168e <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	07d2      	lsls	r2, r2, #31
 8001678:	d413      	bmi.n	80016a2 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	07d2      	lsls	r2, r2, #31
 800167e:	d4f3      	bmi.n	8001668 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	490b      	ldr	r1, [pc, #44]	; (80016b0 <ADC_Enable+0xb8>)
 8001684:	400a      	ands	r2, r1
 8001686:	2101      	movs	r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	e7ec      	b.n	8001668 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001690:	2210      	movs	r2, #16
 8001692:	4313      	orrs	r3, r2
 8001694:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001696:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001698:	3a0f      	subs	r2, #15
 800169a:	4313      	orrs	r3, r2
 800169c:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800169e:	2001      	movs	r0, #1
 80016a0:	e002      	b.n	80016a8 <ADC_Enable+0xb0>
  return HAL_OK;
 80016a2:	2000      	movs	r0, #0
 80016a4:	e000      	b.n	80016a8 <ADC_Enable+0xb0>
 80016a6:	2000      	movs	r0, #0
}
 80016a8:	b003      	add	sp, #12
 80016aa:	bd30      	pop	{r4, r5, pc}
 80016ac:	80000017 	.word	0x80000017
 80016b0:	7fffffe8 	.word	0x7fffffe8
 80016b4:	40012708 	.word	0x40012708
 80016b8:	20000004 	.word	0x20000004
 80016bc:	00030d40 	.word	0x00030d40

080016c0 <HAL_ADC_Start_DMA>:
{
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	0004      	movs	r4, r0
 80016c4:	000d      	movs	r5, r1
 80016c6:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	0752      	lsls	r2, r2, #29
 80016ce:	d447      	bmi.n	8001760 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80016d0:	2254      	movs	r2, #84	; 0x54
 80016d2:	5c82      	ldrb	r2, [r0, r2]
 80016d4:	2a01      	cmp	r2, #1
 80016d6:	d045      	beq.n	8001764 <HAL_ADC_Start_DMA+0xa4>
 80016d8:	2201      	movs	r2, #1
 80016da:	2154      	movs	r1, #84	; 0x54
 80016dc:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80016de:	68d9      	ldr	r1, [r3, #12]
 80016e0:	420a      	tst	r2, r1
 80016e2:	d10d      	bne.n	8001700 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	07d2      	lsls	r2, r2, #31
 80016e8:	d505      	bpl.n	80016f6 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	491e      	ldr	r1, [pc, #120]	; (8001768 <HAL_ADC_Start_DMA+0xa8>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	2102      	movs	r1, #2
 80016f2:	430a      	orrs	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80016f6:	6822      	ldr	r2, [r4, #0]
 80016f8:	68d3      	ldr	r3, [r2, #12]
 80016fa:	2101      	movs	r1, #1
 80016fc:	430b      	orrs	r3, r1
 80016fe:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001700:	0020      	movs	r0, r4
 8001702:	f7ff ff79 	bl	80015f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001706:	2800      	cmp	r0, #0
 8001708:	d12b      	bne.n	8001762 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800170a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_ADC_Start_DMA+0xac>)
 800170e:	401a      	ands	r2, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4313      	orrs	r3, r2
 8001716:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001718:	2300      	movs	r3, #0
 800171a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800171c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800171e:	4914      	ldr	r1, [pc, #80]	; (8001770 <HAL_ADC_Start_DMA+0xb0>)
 8001720:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001722:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001724:	4913      	ldr	r1, [pc, #76]	; (8001774 <HAL_ADC_Start_DMA+0xb4>)
 8001726:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001728:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800172a:	4913      	ldr	r1, [pc, #76]	; (8001778 <HAL_ADC_Start_DMA+0xb8>)
 800172c:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800172e:	6822      	ldr	r2, [r4, #0]
 8001730:	211c      	movs	r1, #28
 8001732:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001734:	2254      	movs	r2, #84	; 0x54
 8001736:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001738:	6822      	ldr	r2, [r4, #0]
 800173a:	6853      	ldr	r3, [r2, #4]
 800173c:	390c      	subs	r1, #12
 800173e:	430b      	orrs	r3, r1
 8001740:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001742:	6821      	ldr	r1, [r4, #0]
 8001744:	3140      	adds	r1, #64	; 0x40
 8001746:	0033      	movs	r3, r6
 8001748:	002a      	movs	r2, r5
 800174a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800174c:	f000 f9f8 	bl	8001b40 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001750:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001752:	6893      	ldr	r3, [r2, #8]
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <HAL_ADC_Start_DMA+0xa8>)
 8001756:	400b      	ands	r3, r1
 8001758:	2104      	movs	r1, #4
 800175a:	430b      	orrs	r3, r1
 800175c:	6093      	str	r3, [r2, #8]
}
 800175e:	e000      	b.n	8001762 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001760:	2002      	movs	r0, #2
}
 8001762:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001764:	2002      	movs	r0, #2
 8001766:	e7fc      	b.n	8001762 <HAL_ADC_Start_DMA+0xa2>
 8001768:	7fffffe8 	.word	0x7fffffe8
 800176c:	fffff0fe 	.word	0xfffff0fe
 8001770:	080012f9 	.word	0x080012f9
 8001774:	080012d1 	.word	0x080012d1
 8001778:	080012dd 	.word	0x080012dd

0800177c <ADC_Disable>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001780:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	2102      	movs	r1, #2
 8001786:	0008      	movs	r0, r1
 8001788:	4010      	ands	r0, r2
 800178a:	4211      	tst	r1, r2
 800178c:	d000      	beq.n	8001790 <ADC_Disable+0x14>
 800178e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	07d2      	lsls	r2, r2, #31
 8001794:	d531      	bpl.n	80017fa <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001796:	2800      	cmp	r0, #0
 8001798:	d131      	bne.n	80017fe <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	2205      	movs	r2, #5
 800179e:	400a      	ands	r2, r1
 80017a0:	2a01      	cmp	r2, #1
 80017a2:	d009      	beq.n	80017b8 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017a6:	2210      	movs	r2, #16
 80017a8:	4313      	orrs	r3, r2
 80017aa:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017ae:	3a0f      	subs	r2, #15
 80017b0:	4313      	orrs	r3, r2
 80017b2:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80017b4:	2001      	movs	r0, #1
 80017b6:	e021      	b.n	80017fc <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	4912      	ldr	r1, [pc, #72]	; (8001804 <ADC_Disable+0x88>)
 80017bc:	400a      	ands	r2, r1
 80017be:	2102      	movs	r1, #2
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	2203      	movs	r2, #3
 80017c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80017ca:	f7ff fc45 	bl	8001058 <HAL_GetTick>
 80017ce:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	07db      	lsls	r3, r3, #31
 80017d6:	d50e      	bpl.n	80017f6 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017d8:	f7ff fc3e 	bl	8001058 <HAL_GetTick>
 80017dc:	1b40      	subs	r0, r0, r5
 80017de:	2802      	cmp	r0, #2
 80017e0:	d9f6      	bls.n	80017d0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017e4:	2210      	movs	r2, #16
 80017e6:	4313      	orrs	r3, r2
 80017e8:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017ec:	3a0f      	subs	r2, #15
 80017ee:	4313      	orrs	r3, r2
 80017f0:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80017f2:	2001      	movs	r0, #1
 80017f4:	e002      	b.n	80017fc <ADC_Disable+0x80>
  return HAL_OK;
 80017f6:	2000      	movs	r0, #0
 80017f8:	e000      	b.n	80017fc <ADC_Disable+0x80>
 80017fa:	2000      	movs	r0, #0
}
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80017fe:	2000      	movs	r0, #0
 8001800:	e7fc      	b.n	80017fc <ADC_Disable+0x80>
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	7fffffe8 	.word	0x7fffffe8

08001808 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800180e:	2300      	movs	r3, #0
 8001810:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001812:	3354      	adds	r3, #84	; 0x54
 8001814:	5cc3      	ldrb	r3, [r0, r3]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d100      	bne.n	800181c <HAL_ADCEx_Calibration_Start+0x14>
 800181a:	e086      	b.n	800192a <HAL_ADCEx_Calibration_Start+0x122>
 800181c:	2601      	movs	r6, #1
 800181e:	2354      	movs	r3, #84	; 0x54
 8001820:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001822:	f7ff ffab 	bl	800177c <ADC_Disable>
 8001826:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001828:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	0031      	movs	r1, r6
 800182e:	4011      	ands	r1, r2
 8001830:	4216      	tst	r6, r2
 8001832:	d009      	beq.n	8001848 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001836:	2210      	movs	r2, #16
 8001838:	4313      	orrs	r3, r2
 800183a:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183c:	2354      	movs	r3, #84	; 0x54
 800183e:	2200      	movs	r2, #0
 8001840:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001842:	0028      	movs	r0, r5
 8001844:	b003      	add	sp, #12
 8001846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800184a:	4839      	ldr	r0, [pc, #228]	; (8001930 <HAL_ADCEx_Calibration_Start+0x128>)
 800184c:	4002      	ands	r2, r0
 800184e:	3006      	adds	r0, #6
 8001850:	30ff      	adds	r0, #255	; 0xff
 8001852:	4302      	orrs	r2, r0
 8001854:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001856:	68de      	ldr	r6, [r3, #12]
 8001858:	3001      	adds	r0, #1
 800185a:	4006      	ands	r6, r0
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4382      	bics	r2, r0
 8001860:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001862:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001864:	e005      	b.n	8001872 <HAL_ADCEx_Calibration_Start+0x6a>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001866:	22b4      	movs	r2, #180	; 0xb4
 8001868:	589a      	ldr	r2, [r3, r2]
 800186a:	237f      	movs	r3, #127	; 0x7f
 800186c:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800186e:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001870:	3101      	adds	r1, #1
 8001872:	2907      	cmp	r1, #7
 8001874:	d81e      	bhi.n	80018b4 <HAL_ADCEx_Calibration_Start+0xac>
      LL_ADC_StartCalibration(hadc->Instance);
 8001876:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a2e      	ldr	r2, [pc, #184]	; (8001934 <HAL_ADCEx_Calibration_Start+0x12c>)
 800187c:	401a      	ands	r2, r3
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	4313      	orrs	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001886:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	2a00      	cmp	r2, #0
 800188c:	daeb      	bge.n	8001866 <HAL_ADCEx_Calibration_Start+0x5e>
        wait_loop_index++;
 800188e:	9b01      	ldr	r3, [sp, #4]
 8001890:	3301      	adds	r3, #1
 8001892:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001894:	9a01      	ldr	r2, [sp, #4]
 8001896:	23ae      	movs	r3, #174	; 0xae
 8001898:	029b      	lsls	r3, r3, #10
 800189a:	429a      	cmp	r2, r3
 800189c:	d3f3      	bcc.n	8001886 <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 800189e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018a0:	2212      	movs	r2, #18
 80018a2:	4393      	bics	r3, r2
 80018a4:	3a02      	subs	r2, #2
 80018a6:	4313      	orrs	r3, r2
 80018a8:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80018aa:	2354      	movs	r3, #84	; 0x54
 80018ac:	2200      	movs	r2, #0
 80018ae:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80018b0:	2501      	movs	r5, #1
 80018b2:	e7c6      	b.n	8001842 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 80018b4:	f7fe fc32 	bl	800011c <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 80018b8:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4f1d      	ldr	r7, [pc, #116]	; (8001934 <HAL_ADCEx_Calibration_Start+0x12c>)
 80018be:	403a      	ands	r2, r7
 80018c0:	2101      	movs	r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CALFACT,
 80018c6:	23b4      	movs	r3, #180	; 0xb4
 80018c8:	6822      	ldr	r2, [r4, #0]
 80018ca:	58d2      	ldr	r2, [r2, r3]
 80018cc:	317e      	adds	r1, #126	; 0x7e
 80018ce:	438a      	bics	r2, r1
 80018d0:	4310      	orrs	r0, r2
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	50d0      	str	r0, [r2, r3]
    LL_ADC_Disable(hadc->Instance);
 80018d6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80018d8:	6893      	ldr	r3, [r2, #8]
 80018da:	403b      	ands	r3, r7
 80018dc:	397d      	subs	r1, #125	; 0x7d
 80018de:	430b      	orrs	r3, r1
 80018e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80018e2:	f7ff fbb9 	bl	8001058 <HAL_GetTick>
 80018e6:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	07d2      	lsls	r2, r2, #31
 80018ee:	d409      	bmi.n	8001904 <HAL_ADCEx_Calibration_Start+0xfc>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4316      	orrs	r6, r2
 80018f4:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018f8:	2203      	movs	r2, #3
 80018fa:	4393      	bics	r3, r2
 80018fc:	3a02      	subs	r2, #2
 80018fe:	4313      	orrs	r3, r2
 8001900:	65a3      	str	r3, [r4, #88]	; 0x58
 8001902:	e79b      	b.n	800183c <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001904:	f7ff fba8 	bl	8001058 <HAL_GetTick>
 8001908:	1bc0      	subs	r0, r0, r7
 800190a:	2802      	cmp	r0, #2
 800190c:	d9ec      	bls.n	80018e8 <HAL_ADCEx_Calibration_Start+0xe0>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800190e:	6823      	ldr	r3, [r4, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	07db      	lsls	r3, r3, #31
 8001914:	d5e8      	bpl.n	80018e8 <HAL_ADCEx_Calibration_Start+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001918:	2210      	movs	r2, #16
 800191a:	4313      	orrs	r3, r2
 800191c:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001920:	3a0f      	subs	r2, #15
 8001922:	4313      	orrs	r3, r2
 8001924:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001926:	2501      	movs	r5, #1
 8001928:	e78b      	b.n	8001842 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800192a:	2502      	movs	r5, #2
 800192c:	e789      	b.n	8001842 <HAL_ADCEx_Calibration_Start+0x3a>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	fffffefd 	.word	0xfffffefd
 8001934:	7fffffe8 	.word	0x7fffffe8

08001938 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800193a:	2800      	cmp	r0, #0
 800193c:	db11      	blt.n	8001962 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193e:	0883      	lsrs	r3, r0, #2
 8001940:	4e13      	ldr	r6, [pc, #76]	; (8001990 <HAL_NVIC_SetPriority+0x58>)
 8001942:	33c0      	adds	r3, #192	; 0xc0
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	599d      	ldr	r5, [r3, r6]
 8001948:	2403      	movs	r4, #3
 800194a:	4020      	ands	r0, r4
 800194c:	00c0      	lsls	r0, r0, #3
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	0014      	movs	r4, r2
 8001952:	4084      	lsls	r4, r0
 8001954:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001956:	0189      	lsls	r1, r1, #6
 8001958:	400a      	ands	r2, r1
 800195a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	432a      	orrs	r2, r5
 800195e:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001960:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001962:	230f      	movs	r3, #15
 8001964:	4003      	ands	r3, r0
 8001966:	3b08      	subs	r3, #8
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3306      	adds	r3, #6
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_NVIC_SetPriority+0x5c>)
 8001970:	4694      	mov	ip, r2
 8001972:	4463      	add	r3, ip
 8001974:	685c      	ldr	r4, [r3, #4]
 8001976:	2203      	movs	r2, #3
 8001978:	4010      	ands	r0, r2
 800197a:	00c0      	lsls	r0, r0, #3
 800197c:	32fc      	adds	r2, #252	; 0xfc
 800197e:	0015      	movs	r5, r2
 8001980:	4085      	lsls	r5, r0
 8001982:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001984:	0189      	lsls	r1, r1, #6
 8001986:	400a      	ands	r2, r1
 8001988:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198a:	4322      	orrs	r2, r4
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e7e7      	b.n	8001960 <HAL_NVIC_SetPriority+0x28>
 8001990:	e000e100 	.word	0xe000e100
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001998:	2800      	cmp	r0, #0
 800199a:	db05      	blt.n	80019a8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199c:	231f      	movs	r3, #31
 800199e:	4018      	ands	r0, r3
 80019a0:	3b1e      	subs	r3, #30
 80019a2:	4083      	lsls	r3, r0
 80019a4:	4a01      	ldr	r2, [pc, #4]	; (80019ac <HAL_NVIC_EnableIRQ+0x14>)
 80019a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019a8:	4770      	bx	lr
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	3801      	subs	r0, #1
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	045b      	lsls	r3, r3, #17
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d20f      	bcs.n	80019da <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <HAL_SYSTICK_Config+0x30>)
 80019bc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_SYSTICK_Config+0x34>)
 80019c0:	6a03      	ldr	r3, [r0, #32]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	21c0      	movs	r1, #192	; 0xc0
 80019c8:	0609      	lsls	r1, r1, #24
 80019ca:	430b      	orrs	r3, r1
 80019cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ce:	2300      	movs	r3, #0
 80019d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	3307      	adds	r3, #7
 80019d4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80019d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 80019dc:	e7fc      	b.n	80019d8 <HAL_SYSTICK_Config+0x28>
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	e000e010 	.word	0xe000e010
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ea:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80019ec:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80019ee:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019f0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80019f2:	2c00      	cmp	r4, #0
 80019f4:	d002      	beq.n	80019fc <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019f6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80019f8:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80019fa:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80019fc:	4f0b      	ldr	r7, [pc, #44]	; (8001a2c <DMA_SetConfig+0x44>)
 80019fe:	687c      	ldr	r4, [r7, #4]
 8001a00:	261c      	movs	r6, #28
 8001a02:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a04:	402e      	ands	r6, r5
 8001a06:	2501      	movs	r5, #1
 8001a08:	40b5      	lsls	r5, r6
 8001a0a:	432c      	orrs	r4, r5
 8001a0c:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a0e:	6804      	ldr	r4, [r0, #0]
 8001a10:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a12:	6883      	ldr	r3, [r0, #8]
 8001a14:	2b10      	cmp	r3, #16
 8001a16:	d004      	beq.n	8001a22 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a18:	6803      	ldr	r3, [r0, #0]
 8001a1a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a1c:	6803      	ldr	r3, [r0, #0]
 8001a1e:	60da      	str	r2, [r3, #12]
  }
}
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001a22:	6803      	ldr	r3, [r0, #0]
 8001a24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a26:	6803      	ldr	r3, [r0, #0]
 8001a28:	60d9      	str	r1, [r3, #12]
 8001a2a:	e7f9      	b.n	8001a20 <DMA_SetConfig+0x38>
 8001a2c:	40020000 	.word	0x40020000

08001a30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a30:	b510      	push	{r4, lr}
 8001a32:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a34:	20ff      	movs	r0, #255	; 0xff
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	4018      	ands	r0, r3
 8001a3a:	3808      	subs	r0, #8
 8001a3c:	2114      	movs	r1, #20
 8001a3e:	f7fe fb6d 	bl	800011c <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a44:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001a48:	4694      	mov	ip, r2
 8001a4a:	4463      	add	r3, ip
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	6463      	str	r3, [r4, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8001a52:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001a54:	231c      	movs	r3, #28
 8001a56:	4018      	ands	r0, r3
 8001a58:	3b1b      	subs	r3, #27
 8001a5a:	4083      	lsls	r3, r0
 8001a5c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001a5e:	bd10      	pop	{r4, pc}
 8001a60:	10008200 	.word	0x10008200
 8001a64:	40020880 	.word	0x40020880

08001a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a68:	23ff      	movs	r3, #255	; 0xff
 8001a6a:	6842      	ldr	r2, [r0, #4]
 8001a6c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001a70:	189a      	adds	r2, r3, r2
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	6502      	str	r2, [r0, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001a78:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	2301      	movs	r3, #1
 8001a82:	4093      	lsls	r3, r2
 8001a84:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001a86:	4770      	bx	lr
 8001a88:	1000823f 	.word	0x1000823f
 8001a8c:	40020940 	.word	0x40020940

08001a90 <HAL_DMA_Init>:
{
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001a94:	d04d      	beq.n	8001b32 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a96:	6805      	ldr	r5, [r0, #0]
 8001a98:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_DMA_Init+0xa8>)
 8001a9a:	18e8      	adds	r0, r5, r3
 8001a9c:	2114      	movs	r1, #20
 8001a9e:	f7fe fb3d 	bl	800011c <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001aa2:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001aa4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa6:	2325      	movs	r3, #37	; 0x25
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_DMA_Init+0xac>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001ab4:	6821      	ldr	r1, [r4, #0]
 8001ab6:	680a      	ldr	r2, [r1, #0]
 8001ab8:	68a3      	ldr	r3, [r4, #8]
 8001aba:	68e0      	ldr	r0, [r4, #12]
 8001abc:	4303      	orrs	r3, r0
 8001abe:	6920      	ldr	r0, [r4, #16]
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	6960      	ldr	r0, [r4, #20]
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	69a0      	ldr	r0, [r4, #24]
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	69e0      	ldr	r0, [r4, #28]
 8001acc:	4303      	orrs	r3, r0
 8001ace:	6a20      	ldr	r0, [r4, #32]
 8001ad0:	4303      	orrs	r3, r0
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f7ff ffaa 	bl	8001a30 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	68a2      	ldr	r2, [r4, #8]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d018      	beq.n	8001b18 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ae6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ae8:	23ff      	movs	r3, #255	; 0xff
 8001aea:	6861      	ldr	r1, [r4, #4]
 8001aec:	400b      	ands	r3, r1
 8001aee:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001af2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001af4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001af6:	6863      	ldr	r3, [r4, #4]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d90f      	bls.n	8001b1e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b02:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b04:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001b0a:	2225      	movs	r2, #37	; 0x25
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001b10:	3a01      	subs	r2, #1
 8001b12:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001b14:	2000      	movs	r0, #0
}
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6063      	str	r3, [r4, #4]
 8001b1c:	e7e3      	b.n	8001ae6 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b1e:	0020      	movs	r0, r4
 8001b20:	f7ff ffa2 	bl	8001a68 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	e7e9      	b.n	8001b06 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
 8001b34:	e7ef      	b.n	8001b16 <HAL_DMA_Init+0x86>
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	bffdfff8 	.word	0xbffdfff8
 8001b3c:	ffff800f 	.word	0xffff800f

08001b40 <HAL_DMA_Start_IT>:
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001b44:	2024      	movs	r0, #36	; 0x24
 8001b46:	5c20      	ldrb	r0, [r4, r0]
 8001b48:	2801      	cmp	r0, #1
 8001b4a:	d046      	beq.n	8001bda <HAL_DMA_Start_IT+0x9a>
 8001b4c:	2024      	movs	r0, #36	; 0x24
 8001b4e:	2501      	movs	r5, #1
 8001b50:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b52:	3001      	adds	r0, #1
 8001b54:	5c20      	ldrb	r0, [r4, r0]
 8001b56:	2801      	cmp	r0, #1
 8001b58:	d007      	beq.n	8001b6a <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8001b5a:	2324      	movs	r3, #36	; 0x24
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001b60:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001b62:	2324      	movs	r3, #36	; 0x24
 8001b64:	2200      	movs	r2, #0
 8001b66:	54e2      	strb	r2, [r4, r3]
}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6a:	3024      	adds	r0, #36	; 0x24
 8001b6c:	3501      	adds	r5, #1
 8001b6e:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b70:	2000      	movs	r0, #0
 8001b72:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001b74:	6825      	ldr	r5, [r4, #0]
 8001b76:	6828      	ldr	r0, [r5, #0]
 8001b78:	2601      	movs	r6, #1
 8001b7a:	43b0      	bics	r0, r6
 8001b7c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b7e:	0020      	movs	r0, r4
 8001b80:	f7ff ff32 	bl	80019e8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01c      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	210e      	movs	r1, #14
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	03d2      	lsls	r2, r2, #15
 8001b9a:	d504      	bpl.n	8001ba6 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	0052      	lsls	r2, r2, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001ba6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bac:	6819      	ldr	r1, [r3, #0]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0052      	lsls	r2, r2, #1
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001bb6:	6822      	ldr	r2, [r4, #0]
 8001bb8:	6813      	ldr	r3, [r2, #0]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430b      	orrs	r3, r1
 8001bbe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e7ce      	b.n	8001b62 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	438b      	bics	r3, r1
 8001bcc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6813      	ldr	r3, [r2, #0]
 8001bd2:	3106      	adds	r1, #6
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e7dc      	b.n	8001b94 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	e7c4      	b.n	8001b68 <HAL_DMA_Start_IT+0x28>
	...

08001be0 <HAL_DMA_Abort>:
{
 8001be0:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	2325      	movs	r3, #37	; 0x25
 8001be8:	5cc3      	ldrb	r3, [r0, r3]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d006      	beq.n	8001bfc <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001bf2:	3320      	adds	r3, #32
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
}
 8001bfa:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	6813      	ldr	r3, [r2, #0]
 8001c00:	210e      	movs	r1, #14
 8001c02:	438b      	bics	r3, r1
 8001c04:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	4913      	ldr	r1, [pc, #76]	; (8001c58 <HAL_DMA_Abort+0x78>)
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c10:	6801      	ldr	r1, [r0, #0]
 8001c12:	680a      	ldr	r2, [r1, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	439a      	bics	r2, r3
 8001c18:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001c1a:	4c10      	ldr	r4, [pc, #64]	; (8001c5c <HAL_DMA_Abort+0x7c>)
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	211c      	movs	r1, #28
 8001c20:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001c22:	4029      	ands	r1, r5
 8001c24:	408b      	lsls	r3, r1
 8001c26:	4313      	orrs	r3, r2
 8001c28:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c2c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001c2e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001c30:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <HAL_DMA_Abort+0x78>)
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c3e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c40:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001c42:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c44:	2325      	movs	r3, #37	; 0x25
 8001c46:	2201      	movs	r2, #1
 8001c48:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e7d2      	b.n	8001bfa <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8001c54:	2001      	movs	r0, #1
 8001c56:	e7d0      	b.n	8001bfa <HAL_DMA_Abort+0x1a>
 8001c58:	fffffeff 	.word	0xfffffeff
 8001c5c:	40020000 	.word	0x40020000

08001c60 <HAL_DMA_Abort_IT>:
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
  __HAL_UNLOCK(hdma);
 8001c62:	2324      	movs	r3, #36	; 0x24
 8001c64:	2200      	movs	r2, #0
 8001c66:	54c2      	strb	r2, [r0, r3]
  __HAL_LOCK(hdma);
 8001c68:	3201      	adds	r2, #1
 8001c6a:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	5cc3      	ldrb	r3, [r0, r3]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d003      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	2304      	movs	r3, #4
 8001c76:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c7c:	6802      	ldr	r2, [r0, #0]
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	210e      	movs	r1, #14
 8001c82:	438b      	bics	r3, r1
 8001c84:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c86:	6801      	ldr	r1, [r0, #0]
 8001c88:	680a      	ldr	r2, [r1, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	439a      	bics	r2, r3
 8001c8e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c90:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001c92:	680a      	ldr	r2, [r1, #0]
 8001c94:	4c12      	ldr	r4, [pc, #72]	; (8001ce0 <HAL_DMA_Abort_IT+0x80>)
 8001c96:	4022      	ands	r2, r4
 8001c98:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001c9a:	4c12      	ldr	r4, [pc, #72]	; (8001ce4 <HAL_DMA_Abort_IT+0x84>)
 8001c9c:	6862      	ldr	r2, [r4, #4]
 8001c9e:	211c      	movs	r1, #28
 8001ca0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001ca2:	4029      	ands	r1, r5
 8001ca4:	408b      	lsls	r3, r1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001caa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001cac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001cae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001cb0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <HAL_DMA_Abort_IT+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4909      	ldr	r1, [pc, #36]	; (8001ce0 <HAL_DMA_Abort_IT+0x80>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cbe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cc0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	2325      	movs	r3, #37	; 0x25
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8001cd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_DMA_Abort_IT+0x7c>
      hdma->XferAbortCallback(hdma);
 8001cd6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7ce      	b.n	8001c7a <HAL_DMA_Abort_IT+0x1a>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e7cc      	b.n	8001c7a <HAL_DMA_Abort_IT+0x1a>
 8001ce0:	fffffeff 	.word	0xfffffeff
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	46d6      	mov	lr, sl
 8001cec:	464f      	mov	r7, r9
 8001cee:	4646      	mov	r6, r8
 8001cf0:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cf2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cf4:	e03b      	b.n	8001d6e <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001cf6:	2504      	movs	r5, #4
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x14>
 8001cfa:	2500      	movs	r5, #0
 8001cfc:	40a5      	lsls	r5, r4
 8001cfe:	002c      	movs	r4, r5
 8001d00:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d02:	4d63      	ldr	r5, [pc, #396]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001d04:	3218      	adds	r2, #24
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8001d0e:	464a      	mov	r2, r9
 8001d10:	43d2      	mvns	r2, r2
 8001d12:	0025      	movs	r5, r4
 8001d14:	464e      	mov	r6, r9
 8001d16:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d18:	684e      	ldr	r6, [r1, #4]
 8001d1a:	03f6      	lsls	r6, r6, #15
 8001d1c:	d502      	bpl.n	8001d24 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8001d1e:	464d      	mov	r5, r9
 8001d20:	432c      	orrs	r4, r5
 8001d22:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001d24:	4c5a      	ldr	r4, [pc, #360]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001d26:	2780      	movs	r7, #128	; 0x80
 8001d28:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8001d2a:	2584      	movs	r5, #132	; 0x84
 8001d2c:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8001d2e:	0025      	movs	r5, r4
 8001d30:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d32:	684e      	ldr	r6, [r1, #4]
 8001d34:	03b6      	lsls	r6, r6, #14
 8001d36:	d502      	bpl.n	8001d3e <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8001d38:	464d      	mov	r5, r9
 8001d3a:	432c      	orrs	r4, r5
 8001d3c:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8001d3e:	4c54      	ldr	r4, [pc, #336]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001d40:	2784      	movs	r7, #132	; 0x84
 8001d42:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001d44:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001d46:	0025      	movs	r5, r4
 8001d48:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4a:	684e      	ldr	r6, [r1, #4]
 8001d4c:	02f6      	lsls	r6, r6, #11
 8001d4e:	d502      	bpl.n	8001d56 <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001d50:	464d      	mov	r5, r9
 8001d52:	432c      	orrs	r4, r5
 8001d54:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8001d56:	4c4e      	ldr	r4, [pc, #312]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001d58:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8001d5a:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8001d5c:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5e:	684d      	ldr	r5, [r1, #4]
 8001d60:	02ad      	lsls	r5, r5, #10
 8001d62:	d501      	bpl.n	8001d68 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8001d64:	464a      	mov	r2, r9
 8001d66:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 8001d68:	4c49      	ldr	r4, [pc, #292]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001d6a:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001d6c:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001d6e:	680c      	ldr	r4, [r1, #0]
 8001d70:	0022      	movs	r2, r4
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	d100      	bne.n	8001d78 <HAL_GPIO_Init+0x90>
 8001d76:	e086      	b.n	8001e86 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0026      	movs	r6, r4
 8001d7e:	4016      	ands	r6, r2
 8001d80:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001d82:	4214      	tst	r4, r2
 8001d84:	d0f2      	beq.n	8001d6c <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d86:	684c      	ldr	r4, [r1, #4]
 8001d88:	2c02      	cmp	r4, #2
 8001d8a:	d001      	beq.n	8001d90 <HAL_GPIO_Init+0xa8>
 8001d8c:	2c12      	cmp	r4, #18
 8001d8e:	d118      	bne.n	8001dc2 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8001d90:	08dd      	lsrs	r5, r3, #3
 8001d92:	3508      	adds	r5, #8
 8001d94:	00ad      	lsls	r5, r5, #2
 8001d96:	582c      	ldr	r4, [r5, r0]
 8001d98:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001d9a:	2707      	movs	r7, #7
 8001d9c:	401f      	ands	r7, r3
 8001d9e:	00bf      	lsls	r7, r7, #2
 8001da0:	240f      	movs	r4, #15
 8001da2:	46a2      	mov	sl, r4
 8001da4:	0026      	movs	r6, r4
 8001da6:	40be      	lsls	r6, r7
 8001da8:	46b0      	mov	r8, r6
 8001daa:	4666      	mov	r6, ip
 8001dac:	4644      	mov	r4, r8
 8001dae:	43a6      	bics	r6, r4
 8001db0:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001db2:	690c      	ldr	r4, [r1, #16]
 8001db4:	4656      	mov	r6, sl
 8001db6:	4026      	ands	r6, r4
 8001db8:	0034      	movs	r4, r6
 8001dba:	40bc      	lsls	r4, r7
 8001dbc:	4666      	mov	r6, ip
 8001dbe:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001dc0:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001dc2:	6804      	ldr	r4, [r0, #0]
 8001dc4:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc6:	005d      	lsls	r5, r3, #1
 8001dc8:	2403      	movs	r4, #3
 8001dca:	46a2      	mov	sl, r4
 8001dcc:	0027      	movs	r7, r4
 8001dce:	40af      	lsls	r7, r5
 8001dd0:	46b8      	mov	r8, r7
 8001dd2:	43ff      	mvns	r7, r7
 8001dd4:	4666      	mov	r6, ip
 8001dd6:	4644      	mov	r4, r8
 8001dd8:	43a6      	bics	r6, r4
 8001dda:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	684c      	ldr	r4, [r1, #4]
 8001dde:	4656      	mov	r6, sl
 8001de0:	4026      	ands	r6, r4
 8001de2:	0034      	movs	r4, r6
 8001de4:	40ac      	lsls	r4, r5
 8001de6:	4666      	mov	r6, ip
 8001de8:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001dea:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dec:	684c      	ldr	r4, [r1, #4]
 8001dee:	1e66      	subs	r6, r4, #1
 8001df0:	2e01      	cmp	r6, #1
 8001df2:	d903      	bls.n	8001dfc <HAL_GPIO_Init+0x114>
 8001df4:	2c11      	cmp	r4, #17
 8001df6:	d001      	beq.n	8001dfc <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	2c12      	cmp	r4, #18
 8001dfa:	d112      	bne.n	8001e22 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001dfc:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	403c      	ands	r4, r7
 8001e00:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001e02:	68cc      	ldr	r4, [r1, #12]
 8001e04:	40ac      	lsls	r4, r5
 8001e06:	4666      	mov	r6, ip
 8001e08:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001e0a:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001e0c:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e10:	684a      	ldr	r2, [r1, #4]
 8001e12:	0912      	lsrs	r2, r2, #4
 8001e14:	4694      	mov	ip, r2
 8001e16:	2201      	movs	r2, #1
 8001e18:	4666      	mov	r6, ip
 8001e1a:	4032      	ands	r2, r6
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001e20:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e22:	684a      	ldr	r2, [r1, #4]
 8001e24:	2a03      	cmp	r2, #3
 8001e26:	d005      	beq.n	8001e34 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001e28:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e2a:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001e2c:	688f      	ldr	r7, [r1, #8]
 8001e2e:	40af      	lsls	r7, r5
 8001e30:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 8001e32:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e34:	684a      	ldr	r2, [r1, #4]
 8001e36:	00d2      	lsls	r2, r2, #3
 8001e38:	d598      	bpl.n	8001d6c <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8001e3a:	089a      	lsrs	r2, r3, #2
 8001e3c:	0014      	movs	r4, r2
 8001e3e:	3418      	adds	r4, #24
 8001e40:	00a4      	lsls	r4, r4, #2
 8001e42:	4d13      	ldr	r5, [pc, #76]	; (8001e90 <HAL_GPIO_Init+0x1a8>)
 8001e44:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001e46:	2503      	movs	r5, #3
 8001e48:	401d      	ands	r5, r3
 8001e4a:	00ec      	lsls	r4, r5, #3
 8001e4c:	250f      	movs	r5, #15
 8001e4e:	40a5      	lsls	r5, r4
 8001e50:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e52:	25a0      	movs	r5, #160	; 0xa0
 8001e54:	05ed      	lsls	r5, r5, #23
 8001e56:	42a8      	cmp	r0, r5
 8001e58:	d100      	bne.n	8001e5c <HAL_GPIO_Init+0x174>
 8001e5a:	e74e      	b.n	8001cfa <HAL_GPIO_Init+0x12>
 8001e5c:	4d0d      	ldr	r5, [pc, #52]	; (8001e94 <HAL_GPIO_Init+0x1ac>)
 8001e5e:	42a8      	cmp	r0, r5
 8001e60:	d00b      	beq.n	8001e7a <HAL_GPIO_Init+0x192>
 8001e62:	4d0d      	ldr	r5, [pc, #52]	; (8001e98 <HAL_GPIO_Init+0x1b0>)
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	d00a      	beq.n	8001e7e <HAL_GPIO_Init+0x196>
 8001e68:	4d0c      	ldr	r5, [pc, #48]	; (8001e9c <HAL_GPIO_Init+0x1b4>)
 8001e6a:	42a8      	cmp	r0, r5
 8001e6c:	d009      	beq.n	8001e82 <HAL_GPIO_Init+0x19a>
 8001e6e:	4d0c      	ldr	r5, [pc, #48]	; (8001ea0 <HAL_GPIO_Init+0x1b8>)
 8001e70:	42a8      	cmp	r0, r5
 8001e72:	d100      	bne.n	8001e76 <HAL_GPIO_Init+0x18e>
 8001e74:	e73f      	b.n	8001cf6 <HAL_GPIO_Init+0xe>
 8001e76:	2505      	movs	r5, #5
 8001e78:	e740      	b.n	8001cfc <HAL_GPIO_Init+0x14>
 8001e7a:	2501      	movs	r5, #1
 8001e7c:	e73e      	b.n	8001cfc <HAL_GPIO_Init+0x14>
 8001e7e:	2502      	movs	r5, #2
 8001e80:	e73c      	b.n	8001cfc <HAL_GPIO_Init+0x14>
 8001e82:	2503      	movs	r5, #3
 8001e84:	e73a      	b.n	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001e86:	bce0      	pop	{r5, r6, r7}
 8001e88:	46ba      	mov	sl, r7
 8001e8a:	46b1      	mov	r9, r6
 8001e8c:	46a8      	mov	r8, r5
 8001e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e90:	40021800 	.word	0x40021800
 8001e94:	50000400 	.word	0x50000400
 8001e98:	50000800 	.word	0x50000800
 8001e9c:	50000c00 	.word	0x50000c00
 8001ea0:	50001400 	.word	0x50001400

08001ea4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2238      	movs	r2, #56	; 0x38
 8001eaa:	421a      	tst	r2, r3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	0ad2      	lsrs	r2, r2, #11
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eb8:	4810      	ldr	r0, [pc, #64]	; (8001efc <HAL_RCC_GetSysClockFreq+0x58>)
 8001eba:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001ebc:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	2338      	movs	r3, #56	; 0x38
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	2338      	movs	r3, #56	; 0x38
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x54>)
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	2338      	movs	r3, #56	; 0x38
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b18      	cmp	r3, #24
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001ee2:	2000      	movs	r0, #0
  return sysclockfreq;
 8001ee4:	e7ea      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001ee6:	20fa      	movs	r0, #250	; 0xfa
 8001ee8:	01c0      	lsls	r0, r0, #7
 8001eea:	e7e7      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001eee:	e7e5      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001ef0:	2080      	movs	r0, #128	; 0x80
 8001ef2:	0200      	lsls	r0, r0, #8
 8001ef4:	e7e2      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x18>
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	02dc6c00 	.word	0x02dc6c00
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001f04:	4b01      	ldr	r3, [pc, #4]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x8>)
 8001f06:	6818      	ldr	r0, [r3, #0]
}
 8001f08:	4770      	bx	lr
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001f12:	f7ff fff7 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	0b12      	lsrs	r2, r2, #12
 8001f1c:	2307      	movs	r3, #7
 8001f1e:	4013      	ands	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f24:	589a      	ldr	r2, [r3, r2]
 8001f26:	231f      	movs	r3, #31
 8001f28:	4013      	ands	r3, r2
 8001f2a:	40d8      	lsrs	r0, r3
}
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	080043c4 	.word	0x080043c4

08001f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f38:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3a:	6a03      	ldr	r3, [r0, #32]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4393      	bics	r3, r2
 8001f40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f46:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f48:	4d15      	ldr	r5, [pc, #84]	; (8001fa0 <TIM_OC1_SetConfig+0x68>)
 8001f4a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f4c:	680d      	ldr	r5, [r1, #0]
 8001f4e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f50:	2502      	movs	r5, #2
 8001f52:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f54:	688d      	ldr	r5, [r1, #8]
 8001f56:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f58:	4d12      	ldr	r5, [pc, #72]	; (8001fa4 <TIM_OC1_SetConfig+0x6c>)
 8001f5a:	42a8      	cmp	r0, r5
 8001f5c:	d005      	beq.n	8001f6a <TIM_OC1_SetConfig+0x32>
 8001f5e:	4d12      	ldr	r5, [pc, #72]	; (8001fa8 <TIM_OC1_SetConfig+0x70>)
 8001f60:	42a8      	cmp	r0, r5
 8001f62:	d002      	beq.n	8001f6a <TIM_OC1_SetConfig+0x32>
 8001f64:	4d11      	ldr	r5, [pc, #68]	; (8001fac <TIM_OC1_SetConfig+0x74>)
 8001f66:	42a8      	cmp	r0, r5
 8001f68:	d105      	bne.n	8001f76 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f6a:	2508      	movs	r5, #8
 8001f6c:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f6e:	68cd      	ldr	r5, [r1, #12]
 8001f70:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f72:	2504      	movs	r5, #4
 8001f74:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f76:	4d0b      	ldr	r5, [pc, #44]	; (8001fa4 <TIM_OC1_SetConfig+0x6c>)
 8001f78:	42a8      	cmp	r0, r5
 8001f7a:	d005      	beq.n	8001f88 <TIM_OC1_SetConfig+0x50>
 8001f7c:	4d0a      	ldr	r5, [pc, #40]	; (8001fa8 <TIM_OC1_SetConfig+0x70>)
 8001f7e:	42a8      	cmp	r0, r5
 8001f80:	d002      	beq.n	8001f88 <TIM_OC1_SetConfig+0x50>
 8001f82:	4d0a      	ldr	r5, [pc, #40]	; (8001fac <TIM_OC1_SetConfig+0x74>)
 8001f84:	42a8      	cmp	r0, r5
 8001f86:	d105      	bne.n	8001f94 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f88:	4d09      	ldr	r5, [pc, #36]	; (8001fb0 <TIM_OC1_SetConfig+0x78>)
 8001f8a:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f8c:	694d      	ldr	r5, [r1, #20]
 8001f8e:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f90:	698d      	ldr	r5, [r1, #24]
 8001f92:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f94:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f96:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f98:	684a      	ldr	r2, [r1, #4]
 8001f9a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f9c:	6203      	str	r3, [r0, #32]
}
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	fffeff8c 	.word	0xfffeff8c
 8001fa4:	40012c00 	.word	0x40012c00
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	fffffcff 	.word	0xfffffcff

08001fb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fb4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb6:	6a03      	ldr	r3, [r0, #32]
 8001fb8:	4a18      	ldr	r2, [pc, #96]	; (800201c <TIM_OC3_SetConfig+0x68>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fbe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fc2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fc4:	4d16      	ldr	r5, [pc, #88]	; (8002020 <TIM_OC3_SetConfig+0x6c>)
 8001fc6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc8:	680e      	ldr	r6, [r1, #0]
 8001fca:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fcc:	4a15      	ldr	r2, [pc, #84]	; (8002024 <TIM_OC3_SetConfig+0x70>)
 8001fce:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd0:	688a      	ldr	r2, [r1, #8]
 8001fd2:	0212      	lsls	r2, r2, #8
 8001fd4:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <TIM_OC3_SetConfig+0x74>)
 8001fd8:	4290      	cmp	r0, r2
 8001fda:	d016      	beq.n	800200a <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <TIM_OC3_SetConfig+0x74>)
 8001fde:	4290      	cmp	r0, r2
 8001fe0:	d005      	beq.n	8001fee <TIM_OC3_SetConfig+0x3a>
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <TIM_OC3_SetConfig+0x78>)
 8001fe4:	4290      	cmp	r0, r2
 8001fe6:	d002      	beq.n	8001fee <TIM_OC3_SetConfig+0x3a>
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <TIM_OC3_SetConfig+0x7c>)
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d107      	bne.n	8001ffe <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <TIM_OC3_SetConfig+0x80>)
 8001ff0:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ff2:	694c      	ldr	r4, [r1, #20]
 8001ff4:	0124      	lsls	r4, r4, #4
 8001ff6:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ff8:	698a      	ldr	r2, [r1, #24]
 8001ffa:	0115      	lsls	r5, r2, #4
 8001ffc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ffe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002000:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002002:	684a      	ldr	r2, [r1, #4]
 8002004:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002006:	6203      	str	r3, [r0, #32]
}
 8002008:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <TIM_OC3_SetConfig+0x84>)
 800200c:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800200e:	68cb      	ldr	r3, [r1, #12]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8002014:	4a09      	ldr	r2, [pc, #36]	; (800203c <TIM_OC3_SetConfig+0x88>)
 8002016:	4013      	ands	r3, r2
 8002018:	e7e0      	b.n	8001fdc <TIM_OC3_SetConfig+0x28>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	fffffeff 	.word	0xfffffeff
 8002020:	fffeff8c 	.word	0xfffeff8c
 8002024:	fffffdff 	.word	0xfffffdff
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	ffffcfff 	.word	0xffffcfff
 8002038:	fffff7ff 	.word	0xfffff7ff
 800203c:	fffffbff 	.word	0xfffffbff

08002040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002040:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002042:	6a03      	ldr	r3, [r0, #32]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <TIM_OC4_SetConfig+0x4c>)
 8002046:	4013      	ands	r3, r2
 8002048:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800204c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002050:	4c0f      	ldr	r4, [pc, #60]	; (8002090 <TIM_OC4_SetConfig+0x50>)
 8002052:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002054:	680c      	ldr	r4, [r1, #0]
 8002056:	0224      	lsls	r4, r4, #8
 8002058:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800205a:	4c0e      	ldr	r4, [pc, #56]	; (8002094 <TIM_OC4_SetConfig+0x54>)
 800205c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800205e:	688b      	ldr	r3, [r1, #8]
 8002060:	031b      	lsls	r3, r3, #12
 8002062:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002064:	4c0c      	ldr	r4, [pc, #48]	; (8002098 <TIM_OC4_SetConfig+0x58>)
 8002066:	42a0      	cmp	r0, r4
 8002068:	d005      	beq.n	8002076 <TIM_OC4_SetConfig+0x36>
 800206a:	4c0c      	ldr	r4, [pc, #48]	; (800209c <TIM_OC4_SetConfig+0x5c>)
 800206c:	42a0      	cmp	r0, r4
 800206e:	d002      	beq.n	8002076 <TIM_OC4_SetConfig+0x36>
 8002070:	4c0b      	ldr	r4, [pc, #44]	; (80020a0 <TIM_OC4_SetConfig+0x60>)
 8002072:	42a0      	cmp	r0, r4
 8002074:	d104      	bne.n	8002080 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002076:	4c0b      	ldr	r4, [pc, #44]	; (80020a4 <TIM_OC4_SetConfig+0x64>)
 8002078:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800207a:	694c      	ldr	r4, [r1, #20]
 800207c:	01a4      	lsls	r4, r4, #6
 800207e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002080:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002082:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002084:	684a      	ldr	r2, [r1, #4]
 8002086:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002088:	6203      	str	r3, [r0, #32]
}
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	ffffefff 	.word	0xffffefff
 8002090:	feff8cff 	.word	0xfeff8cff
 8002094:	ffffdfff 	.word	0xffffdfff
 8002098:	40012c00 	.word	0x40012c00
 800209c:	40014400 	.word	0x40014400
 80020a0:	40014800 	.word	0x40014800
 80020a4:	ffffbfff 	.word	0xffffbfff

080020a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80020a8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020aa:	6a03      	ldr	r3, [r0, #32]
 80020ac:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <TIM_OC5_SetConfig+0x4c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020b4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020b6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80020b8:	4d0f      	ldr	r5, [pc, #60]	; (80020f8 <TIM_OC5_SetConfig+0x50>)
 80020ba:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020bc:	680d      	ldr	r5, [r1, #0]
 80020be:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80020c0:	4d0e      	ldr	r5, [pc, #56]	; (80020fc <TIM_OC5_SetConfig+0x54>)
 80020c2:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020c4:	688b      	ldr	r3, [r1, #8]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ca:	4d0d      	ldr	r5, [pc, #52]	; (8002100 <TIM_OC5_SetConfig+0x58>)
 80020cc:	42a8      	cmp	r0, r5
 80020ce:	d005      	beq.n	80020dc <TIM_OC5_SetConfig+0x34>
 80020d0:	4d0c      	ldr	r5, [pc, #48]	; (8002104 <TIM_OC5_SetConfig+0x5c>)
 80020d2:	42a8      	cmp	r0, r5
 80020d4:	d002      	beq.n	80020dc <TIM_OC5_SetConfig+0x34>
 80020d6:	4d0c      	ldr	r5, [pc, #48]	; (8002108 <TIM_OC5_SetConfig+0x60>)
 80020d8:	42a8      	cmp	r0, r5
 80020da:	d104      	bne.n	80020e6 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80020dc:	4d05      	ldr	r5, [pc, #20]	; (80020f4 <TIM_OC5_SetConfig+0x4c>)
 80020de:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80020e0:	694d      	ldr	r5, [r1, #20]
 80020e2:	022d      	lsls	r5, r5, #8
 80020e4:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020e8:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020ea:	684a      	ldr	r2, [r1, #4]
 80020ec:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ee:	6203      	str	r3, [r0, #32]
}
 80020f0:	bd30      	pop	{r4, r5, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	fffeff8f 	.word	0xfffeff8f
 80020fc:	fffdffff 	.word	0xfffdffff
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800

0800210c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800210e:	6a03      	ldr	r3, [r0, #32]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <TIM_OC6_SetConfig+0x4c>)
 8002112:	4013      	ands	r3, r2
 8002114:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002116:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002118:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800211a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800211c:	4c0f      	ldr	r4, [pc, #60]	; (800215c <TIM_OC6_SetConfig+0x50>)
 800211e:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002120:	680c      	ldr	r4, [r1, #0]
 8002122:	0224      	lsls	r4, r4, #8
 8002124:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002126:	4c0e      	ldr	r4, [pc, #56]	; (8002160 <TIM_OC6_SetConfig+0x54>)
 8002128:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800212a:	688b      	ldr	r3, [r1, #8]
 800212c:	051b      	lsls	r3, r3, #20
 800212e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002130:	4c0c      	ldr	r4, [pc, #48]	; (8002164 <TIM_OC6_SetConfig+0x58>)
 8002132:	42a0      	cmp	r0, r4
 8002134:	d005      	beq.n	8002142 <TIM_OC6_SetConfig+0x36>
 8002136:	4c0c      	ldr	r4, [pc, #48]	; (8002168 <TIM_OC6_SetConfig+0x5c>)
 8002138:	42a0      	cmp	r0, r4
 800213a:	d002      	beq.n	8002142 <TIM_OC6_SetConfig+0x36>
 800213c:	4c0b      	ldr	r4, [pc, #44]	; (800216c <TIM_OC6_SetConfig+0x60>)
 800213e:	42a0      	cmp	r0, r4
 8002140:	d104      	bne.n	800214c <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002142:	4c0b      	ldr	r4, [pc, #44]	; (8002170 <TIM_OC6_SetConfig+0x64>)
 8002144:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002146:	694c      	ldr	r4, [r1, #20]
 8002148:	02a4      	lsls	r4, r4, #10
 800214a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800214c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800214e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002150:	684a      	ldr	r2, [r1, #4]
 8002152:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002154:	6203      	str	r3, [r0, #32]
}
 8002156:	bd30      	pop	{r4, r5, pc}
 8002158:	ffefffff 	.word	0xffefffff
 800215c:	feff8fff 	.word	0xfeff8fff
 8002160:	ffdfffff 	.word	0xffdfffff
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	fffbffff 	.word	0xfffbffff

08002174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002174:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002176:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002178:	6a04      	ldr	r4, [r0, #32]
 800217a:	2501      	movs	r5, #1
 800217c:	43ac      	bics	r4, r5
 800217e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002180:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002182:	35ef      	adds	r5, #239	; 0xef
 8002184:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800218a:	240a      	movs	r4, #10
 800218c:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 800218e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002190:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002192:	6203      	str	r3, [r0, #32]
}
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002198:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800219a:	6a03      	ldr	r3, [r0, #32]
 800219c:	2410      	movs	r4, #16
 800219e:	43a3      	bics	r3, r4
 80021a0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80021a4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021a6:	4d05      	ldr	r5, [pc, #20]	; (80021bc <TIM_TI2_ConfigInputStage+0x24>)
 80021a8:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021aa:	0312      	lsls	r2, r2, #12
 80021ac:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ae:	24a0      	movs	r4, #160	; 0xa0
 80021b0:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80021b2:	0109      	lsls	r1, r1, #4
 80021b4:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021b8:	6201      	str	r1, [r0, #32]
}
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	ffff0fff 	.word	0xffff0fff

080021c0 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021c0:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <TIM_ITRx_SetConfig+0x10>)
 80021c4:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021c6:	430b      	orrs	r3, r1
 80021c8:	2107      	movs	r1, #7
 80021ca:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021cc:	6083      	str	r3, [r0, #8]
}
 80021ce:	4770      	bx	lr
 80021d0:	ffcfff8f 	.word	0xffcfff8f

080021d4 <HAL_TIM_PWM_MspInit>:
}
 80021d4:	4770      	bx	lr
	...

080021d8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80021d8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021da:	4a1a      	ldr	r2, [pc, #104]	; (8002244 <TIM_Base_SetConfig+0x6c>)
 80021dc:	4290      	cmp	r0, r2
 80021de:	d002      	beq.n	80021e6 <TIM_Base_SetConfig+0xe>
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <TIM_Base_SetConfig+0x70>)
 80021e2:	4290      	cmp	r0, r2
 80021e4:	d103      	bne.n	80021ee <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e6:	2270      	movs	r2, #112	; 0x70
 80021e8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80021ea:	684a      	ldr	r2, [r1, #4]
 80021ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <TIM_Base_SetConfig+0x6c>)
 80021f0:	4290      	cmp	r0, r2
 80021f2:	d00b      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <TIM_Base_SetConfig+0x70>)
 80021f6:	4290      	cmp	r0, r2
 80021f8:	d008      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <TIM_Base_SetConfig+0x74>)
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d005      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 8002200:	4a13      	ldr	r2, [pc, #76]	; (8002250 <TIM_Base_SetConfig+0x78>)
 8002202:	4290      	cmp	r0, r2
 8002204:	d002      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <TIM_Base_SetConfig+0x7c>)
 8002208:	4290      	cmp	r0, r2
 800220a:	d103      	bne.n	8002214 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <TIM_Base_SetConfig+0x80>)
 800220e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002210:	68ca      	ldr	r2, [r1, #12]
 8002212:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	4393      	bics	r3, r2
 8002218:	694a      	ldr	r2, [r1, #20]
 800221a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800221c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221e:	688b      	ldr	r3, [r1, #8]
 8002220:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002222:	680b      	ldr	r3, [r1, #0]
 8002224:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <TIM_Base_SetConfig+0x6c>)
 8002228:	4298      	cmp	r0, r3
 800222a:	d005      	beq.n	8002238 <TIM_Base_SetConfig+0x60>
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <TIM_Base_SetConfig+0x78>)
 800222e:	4298      	cmp	r0, r3
 8002230:	d002      	beq.n	8002238 <TIM_Base_SetConfig+0x60>
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <TIM_Base_SetConfig+0x7c>)
 8002234:	4298      	cmp	r0, r3
 8002236:	d101      	bne.n	800223c <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8002238:	690b      	ldr	r3, [r1, #16]
 800223a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800223c:	2301      	movs	r3, #1
 800223e:	6143      	str	r3, [r0, #20]
}
 8002240:	4770      	bx	lr
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400
 800224c:	40002000 	.word	0x40002000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	fffffcff 	.word	0xfffffcff

0800225c <HAL_TIM_Base_Init>:
{
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002260:	d02a      	beq.n	80022b8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	233d      	movs	r3, #61	; 0x3d
 8002264:	5cc3      	ldrb	r3, [r0, r3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800226a:	253d      	movs	r5, #61	; 0x3d
 800226c:	2302      	movs	r3, #2
 800226e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002270:	0021      	movs	r1, r4
 8002272:	c901      	ldmia	r1!, {r0}
 8002274:	f7ff ffb0 	bl	80021d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	2301      	movs	r3, #1
 800227a:	2248      	movs	r2, #72	; 0x48
 800227c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227e:	3a0a      	subs	r2, #10
 8002280:	54a3      	strb	r3, [r4, r2]
 8002282:	3201      	adds	r2, #1
 8002284:	54a3      	strb	r3, [r4, r2]
 8002286:	3201      	adds	r2, #1
 8002288:	54a3      	strb	r3, [r4, r2]
 800228a:	3201      	adds	r2, #1
 800228c:	54a3      	strb	r3, [r4, r2]
 800228e:	3201      	adds	r2, #1
 8002290:	54a3      	strb	r3, [r4, r2]
 8002292:	3201      	adds	r2, #1
 8002294:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002296:	3201      	adds	r2, #1
 8002298:	54a3      	strb	r3, [r4, r2]
 800229a:	3201      	adds	r2, #1
 800229c:	54a3      	strb	r3, [r4, r2]
 800229e:	3201      	adds	r2, #1
 80022a0:	54a3      	strb	r3, [r4, r2]
 80022a2:	3201      	adds	r2, #1
 80022a4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80022a6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80022a8:	2000      	movs	r0, #0
}
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80022ac:	333c      	adds	r3, #60	; 0x3c
 80022ae:	2200      	movs	r2, #0
 80022b0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80022b2:	f7fe fda7 	bl	8000e04 <HAL_TIM_Base_MspInit>
 80022b6:	e7d8      	b.n	800226a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e7f6      	b.n	80022aa <HAL_TIM_Base_Init+0x4e>

080022bc <HAL_TIM_PWM_Init>:
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80022c0:	d02a      	beq.n	8002318 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	233d      	movs	r3, #61	; 0x3d
 80022c4:	5cc3      	ldrb	r3, [r0, r3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d020      	beq.n	800230c <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80022ca:	253d      	movs	r5, #61	; 0x3d
 80022cc:	2302      	movs	r3, #2
 80022ce:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	0021      	movs	r1, r4
 80022d2:	c901      	ldmia	r1!, {r0}
 80022d4:	f7ff ff80 	bl	80021d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d8:	2301      	movs	r3, #1
 80022da:	2248      	movs	r2, #72	; 0x48
 80022dc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022de:	3a0a      	subs	r2, #10
 80022e0:	54a3      	strb	r3, [r4, r2]
 80022e2:	3201      	adds	r2, #1
 80022e4:	54a3      	strb	r3, [r4, r2]
 80022e6:	3201      	adds	r2, #1
 80022e8:	54a3      	strb	r3, [r4, r2]
 80022ea:	3201      	adds	r2, #1
 80022ec:	54a3      	strb	r3, [r4, r2]
 80022ee:	3201      	adds	r2, #1
 80022f0:	54a3      	strb	r3, [r4, r2]
 80022f2:	3201      	adds	r2, #1
 80022f4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f6:	3201      	adds	r2, #1
 80022f8:	54a3      	strb	r3, [r4, r2]
 80022fa:	3201      	adds	r2, #1
 80022fc:	54a3      	strb	r3, [r4, r2]
 80022fe:	3201      	adds	r2, #1
 8002300:	54a3      	strb	r3, [r4, r2]
 8002302:	3201      	adds	r2, #1
 8002304:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002306:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002308:	2000      	movs	r0, #0
}
 800230a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800230c:	333c      	adds	r3, #60	; 0x3c
 800230e:	2200      	movs	r2, #0
 8002310:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002312:	f7ff ff5f 	bl	80021d4 <HAL_TIM_PWM_MspInit>
 8002316:	e7d8      	b.n	80022ca <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
 800231a:	e7f6      	b.n	800230a <HAL_TIM_PWM_Init+0x4e>

0800231c <TIM_OC2_SetConfig>:
{
 800231c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231e:	6a03      	ldr	r3, [r0, #32]
 8002320:	2210      	movs	r2, #16
 8002322:	4393      	bics	r3, r2
 8002324:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002326:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002328:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800232a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <TIM_OC2_SetConfig+0x6c>)
 800232e:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002330:	680a      	ldr	r2, [r1, #0]
 8002332:	0212      	lsls	r2, r2, #8
 8002334:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8002336:	2220      	movs	r2, #32
 8002338:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800233a:	688a      	ldr	r2, [r1, #8]
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <TIM_OC2_SetConfig+0x70>)
 8002342:	4290      	cmp	r0, r2
 8002344:	d016      	beq.n	8002374 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <TIM_OC2_SetConfig+0x70>)
 8002348:	4290      	cmp	r0, r2
 800234a:	d005      	beq.n	8002358 <TIM_OC2_SetConfig+0x3c>
 800234c:	4a10      	ldr	r2, [pc, #64]	; (8002390 <TIM_OC2_SetConfig+0x74>)
 800234e:	4290      	cmp	r0, r2
 8002350:	d002      	beq.n	8002358 <TIM_OC2_SetConfig+0x3c>
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <TIM_OC2_SetConfig+0x78>)
 8002354:	4290      	cmp	r0, r2
 8002356:	d107      	bne.n	8002368 <TIM_OC2_SetConfig+0x4c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <TIM_OC2_SetConfig+0x7c>)
 800235a:	402a      	ands	r2, r5
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800235c:	694d      	ldr	r5, [r1, #20]
 800235e:	00ad      	lsls	r5, r5, #2
 8002360:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002362:	698a      	ldr	r2, [r1, #24]
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002368:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800236a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800236c:	684a      	ldr	r2, [r1, #4]
 800236e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002370:	6203      	str	r3, [r0, #32]
}
 8002372:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	4393      	bics	r3, r2
 8002378:	001a      	movs	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800237a:	68cb      	ldr	r3, [r1, #12]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	4393      	bics	r3, r2
 8002384:	e7df      	b.n	8002346 <TIM_OC2_SetConfig+0x2a>
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	feff8cff 	.word	0xfeff8cff
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40014400 	.word	0x40014400
 8002394:	40014800 	.word	0x40014800
 8002398:	fffff3ff 	.word	0xfffff3ff

0800239c <HAL_TIM_PWM_ConfigChannel>:
{
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	0004      	movs	r4, r0
 80023a0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80023a2:	233c      	movs	r3, #60	; 0x3c
 80023a4:	5cc3      	ldrb	r3, [r0, r3]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d100      	bne.n	80023ac <HAL_TIM_PWM_ConfigChannel+0x10>
 80023aa:	e092      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x136>
 80023ac:	233c      	movs	r3, #60	; 0x3c
 80023ae:	2101      	movs	r1, #1
 80023b0:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80023b2:	2a14      	cmp	r2, #20
 80023b4:	d900      	bls.n	80023b8 <HAL_TIM_PWM_ConfigChannel+0x1c>
 80023b6:	e087      	b.n	80024c8 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80023b8:	0092      	lsls	r2, r2, #2
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 80023bc:	589b      	ldr	r3, [r3, r2]
 80023be:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023c0:	0029      	movs	r1, r5
 80023c2:	6800      	ldr	r0, [r0, #0]
 80023c4:	f7ff fdb8 	bl	8001f38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023c8:	6822      	ldr	r2, [r4, #0]
 80023ca:	6993      	ldr	r3, [r2, #24]
 80023cc:	2108      	movs	r1, #8
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	6993      	ldr	r3, [r2, #24]
 80023d6:	3904      	subs	r1, #4
 80023d8:	438b      	bics	r3, r1
 80023da:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	6993      	ldr	r3, [r2, #24]
 80023e0:	6929      	ldr	r1, [r5, #16]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2000      	movs	r0, #0
      break;
 80023e8:	e06f      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023ea:	0029      	movs	r1, r5
 80023ec:	6800      	ldr	r0, [r0, #0]
 80023ee:	f7ff ff95 	bl	800231c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	6991      	ldr	r1, [r2, #24]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	6993      	ldr	r3, [r2, #24]
 8002402:	4936      	ldr	r1, [pc, #216]	; (80024dc <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002404:	400b      	ands	r3, r1
 8002406:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002408:	6821      	ldr	r1, [r4, #0]
 800240a:	698b      	ldr	r3, [r1, #24]
 800240c:	692a      	ldr	r2, [r5, #16]
 800240e:	0212      	lsls	r2, r2, #8
 8002410:	4313      	orrs	r3, r2
 8002412:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2000      	movs	r0, #0
      break;
 8002416:	e058      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002418:	0029      	movs	r1, r5
 800241a:	6800      	ldr	r0, [r0, #0]
 800241c:	f7ff fdca 	bl	8001fb4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002420:	6822      	ldr	r2, [r4, #0]
 8002422:	69d3      	ldr	r3, [r2, #28]
 8002424:	2108      	movs	r1, #8
 8002426:	430b      	orrs	r3, r1
 8002428:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800242a:	6822      	ldr	r2, [r4, #0]
 800242c:	69d3      	ldr	r3, [r2, #28]
 800242e:	3904      	subs	r1, #4
 8002430:	438b      	bics	r3, r1
 8002432:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	69d3      	ldr	r3, [r2, #28]
 8002438:	6929      	ldr	r1, [r5, #16]
 800243a:	430b      	orrs	r3, r1
 800243c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2000      	movs	r0, #0
      break;
 8002440:	e043      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002442:	0029      	movs	r1, r5
 8002444:	6800      	ldr	r0, [r0, #0]
 8002446:	f7ff fdfb 	bl	8002040 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	69d1      	ldr	r1, [r2, #28]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	430b      	orrs	r3, r1
 8002454:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	69d3      	ldr	r3, [r2, #28]
 800245a:	4920      	ldr	r1, [pc, #128]	; (80024dc <HAL_TIM_PWM_ConfigChannel+0x140>)
 800245c:	400b      	ands	r3, r1
 800245e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002460:	6821      	ldr	r1, [r4, #0]
 8002462:	69cb      	ldr	r3, [r1, #28]
 8002464:	692a      	ldr	r2, [r5, #16]
 8002466:	0212      	lsls	r2, r2, #8
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2000      	movs	r0, #0
      break;
 800246e:	e02c      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002470:	0029      	movs	r1, r5
 8002472:	6800      	ldr	r0, [r0, #0]
 8002474:	f7ff fe18 	bl	80020a8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800247c:	2108      	movs	r1, #8
 800247e:	430b      	orrs	r3, r1
 8002480:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002482:	6822      	ldr	r2, [r4, #0]
 8002484:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002486:	3904      	subs	r1, #4
 8002488:	438b      	bics	r3, r1
 800248a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800248c:	6822      	ldr	r2, [r4, #0]
 800248e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002490:	6929      	ldr	r1, [r5, #16]
 8002492:	430b      	orrs	r3, r1
 8002494:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2000      	movs	r0, #0
      break;
 8002498:	e017      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800249a:	0029      	movs	r1, r5
 800249c:	6800      	ldr	r0, [r0, #0]
 800249e:	f7ff fe35 	bl	800210c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024ae:	6822      	ldr	r2, [r4, #0]
 80024b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <HAL_TIM_PWM_ConfigChannel+0x140>)
 80024b4:	400b      	ands	r3, r1
 80024b6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024b8:	6821      	ldr	r1, [r4, #0]
 80024ba:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80024bc:	692a      	ldr	r2, [r5, #16]
 80024be:	0212      	lsls	r2, r2, #8
 80024c0:	4313      	orrs	r3, r2
 80024c2:	654b      	str	r3, [r1, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2000      	movs	r0, #0
      break;
 80024c6:	e000      	b.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 80024c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80024ca:	233c      	movs	r3, #60	; 0x3c
 80024cc:	2200      	movs	r2, #0
 80024ce:	54e2      	strb	r2, [r4, r3]
}
 80024d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80024d2:	2002      	movs	r0, #2
 80024d4:	e7fc      	b.n	80024d0 <HAL_TIM_PWM_ConfigChannel+0x134>
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	080043e4 	.word	0x080043e4
 80024dc:	fffffbff 	.word	0xfffffbff

080024e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024e0:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024e2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e4:	4d03      	ldr	r5, [pc, #12]	; (80024f4 <TIM_ETR_SetConfig+0x14>)
 80024e6:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	4313      	orrs	r3, r2
 80024ec:	430b      	orrs	r3, r1
 80024ee:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f0:	6083      	str	r3, [r0, #8]
}
 80024f2:	bd30      	pop	{r4, r5, pc}
 80024f4:	ffff00ff 	.word	0xffff00ff

080024f8 <HAL_TIM_ConfigClockSource>:
{
 80024f8:	b510      	push	{r4, lr}
 80024fa:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80024fc:	233c      	movs	r3, #60	; 0x3c
 80024fe:	5cc3      	ldrb	r3, [r0, r3]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d100      	bne.n	8002506 <HAL_TIM_ConfigClockSource+0xe>
 8002504:	e078      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x100>
 8002506:	233c      	movs	r3, #60	; 0x3c
 8002508:	2201      	movs	r2, #1
 800250a:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	3301      	adds	r3, #1
 800250e:	3201      	adds	r2, #1
 8002510:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002516:	4839      	ldr	r0, [pc, #228]	; (80025fc <HAL_TIM_ConfigClockSource+0x104>)
 8002518:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800251a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800251c:	680b      	ldr	r3, [r1, #0]
 800251e:	2b60      	cmp	r3, #96	; 0x60
 8002520:	d050      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0xcc>
 8002522:	d82a      	bhi.n	800257a <HAL_TIM_ConfigClockSource+0x82>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d058      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xe2>
 8002528:	d90c      	bls.n	8002544 <HAL_TIM_ConfigClockSource+0x4c>
 800252a:	2b50      	cmp	r3, #80	; 0x50
 800252c:	d123      	bne.n	8002576 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	68ca      	ldr	r2, [r1, #12]
 8002530:	6849      	ldr	r1, [r1, #4]
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f7ff fe1e 	bl	8002174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	f7ff fe40 	bl	80021c0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2000      	movs	r0, #0
      break;
 8002542:	e005      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002544:	2b20      	cmp	r3, #32
 8002546:	d00e      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x6e>
 8002548:	d909      	bls.n	800255e <HAL_TIM_ConfigClockSource+0x66>
 800254a:	2b30      	cmp	r3, #48	; 0x30
 800254c:	d00b      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800254e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002550:	233d      	movs	r3, #61	; 0x3d
 8002552:	2201      	movs	r2, #1
 8002554:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002556:	3b01      	subs	r3, #1
 8002558:	2200      	movs	r2, #0
 800255a:	54e2      	strb	r2, [r4, r3]
}
 800255c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x6e>
 8002562:	2b10      	cmp	r3, #16
 8002564:	d105      	bne.n	8002572 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	0019      	movs	r1, r3
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	f7ff fe29 	bl	80021c0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800256e:	2000      	movs	r0, #0
      break;
 8002570:	e7ee      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8002572:	2001      	movs	r0, #1
 8002574:	e7ec      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
 8002576:	2001      	movs	r0, #1
 8002578:	e7ea      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	0152      	lsls	r2, r2, #5
 800257e:	4293      	cmp	r3, r2
 8002580:	d036      	beq.n	80025f0 <HAL_TIM_ConfigClockSource+0xf8>
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	0192      	lsls	r2, r2, #6
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	68cb      	ldr	r3, [r1, #12]
 800258c:	684a      	ldr	r2, [r1, #4]
 800258e:	6889      	ldr	r1, [r1, #8]
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	f7ff ffa5 	bl	80024e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002596:	6822      	ldr	r2, [r4, #0]
 8002598:	6891      	ldr	r1, [r2, #8]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	01db      	lsls	r3, r3, #7
 800259e:	430b      	orrs	r3, r1
 80025a0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2000      	movs	r0, #0
      break;
 80025a4:	e7d4      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80025a6:	2b70      	cmp	r3, #112	; 0x70
 80025a8:	d124      	bne.n	80025f4 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 80025aa:	68cb      	ldr	r3, [r1, #12]
 80025ac:	684a      	ldr	r2, [r1, #4]
 80025ae:	6889      	ldr	r1, [r1, #8]
 80025b0:	6820      	ldr	r0, [r4, #0]
 80025b2:	f7ff ff95 	bl	80024e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ba:	2177      	movs	r1, #119	; 0x77
 80025bc:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80025be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2000      	movs	r0, #0
      break;
 80025c2:	e7c5      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025c4:	68ca      	ldr	r2, [r1, #12]
 80025c6:	6849      	ldr	r1, [r1, #4]
 80025c8:	6820      	ldr	r0, [r4, #0]
 80025ca:	f7ff fde5 	bl	8002198 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ce:	2160      	movs	r1, #96	; 0x60
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	f7ff fdf5 	bl	80021c0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2000      	movs	r0, #0
      break;
 80025d8:	e7ba      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	68ca      	ldr	r2, [r1, #12]
 80025dc:	6849      	ldr	r1, [r1, #4]
 80025de:	6820      	ldr	r0, [r4, #0]
 80025e0:	f7ff fdc8 	bl	8002174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	6820      	ldr	r0, [r4, #0]
 80025e8:	f7ff fdea 	bl	80021c0 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2000      	movs	r0, #0
      break;
 80025ee:	e7af      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7ad      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e7ab      	b.n	8002550 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80025f8:	2002      	movs	r0, #2
 80025fa:	e7af      	b.n	800255c <HAL_TIM_ConfigClockSource+0x64>
 80025fc:	ffce0088 	.word	0xffce0088

08002600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002600:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002602:	231f      	movs	r3, #31
 8002604:	4019      	ands	r1, r3
 8002606:	2401      	movs	r4, #1
 8002608:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800260a:	6a03      	ldr	r3, [r0, #32]
 800260c:	43a3      	bics	r3, r4
 800260e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002610:	6a03      	ldr	r3, [r0, #32]
 8002612:	408a      	lsls	r2, r1
 8002614:	4313      	orrs	r3, r2
 8002616:	6203      	str	r3, [r0, #32]
}
 8002618:	bd10      	pop	{r4, pc}
	...

0800261c <HAL_TIM_PWM_Start>:
{
 800261c:	b510      	push	{r4, lr}
 800261e:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002620:	2900      	cmp	r1, #0
 8002622:	d12c      	bne.n	800267e <HAL_TIM_PWM_Start+0x62>
 8002624:	233e      	movs	r3, #62	; 0x3e
 8002626:	5cc3      	ldrb	r3, [r0, r3]
 8002628:	3b01      	subs	r3, #1
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	4193      	sbcs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d179      	bne.n	8002728 <HAL_TIM_PWM_Start+0x10c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002634:	2900      	cmp	r1, #0
 8002636:	d14d      	bne.n	80026d4 <HAL_TIM_PWM_Start+0xb8>
 8002638:	333e      	adds	r3, #62	; 0x3e
 800263a:	2202      	movs	r2, #2
 800263c:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800263e:	2201      	movs	r2, #1
 8002640:	6820      	ldr	r0, [r4, #0]
 8002642:	f7ff ffdd 	bl	8002600 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_TIM_PWM_Start+0x118>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d005      	beq.n	800265a <HAL_TIM_PWM_Start+0x3e>
 800264e:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_TIM_PWM_Start+0x11c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d002      	beq.n	800265a <HAL_TIM_PWM_Start+0x3e>
 8002654:	4a39      	ldr	r2, [pc, #228]	; (800273c <HAL_TIM_PWM_Start+0x120>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d104      	bne.n	8002664 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800265a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800265c:	2280      	movs	r2, #128	; 0x80
 800265e:	0212      	lsls	r2, r2, #8
 8002660:	430a      	orrs	r2, r1
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4a33      	ldr	r2, [pc, #204]	; (8002734 <HAL_TIM_PWM_Start+0x118>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d04f      	beq.n	800270c <HAL_TIM_PWM_Start+0xf0>
 800266c:	4a34      	ldr	r2, [pc, #208]	; (8002740 <HAL_TIM_PWM_Start+0x124>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d04c      	beq.n	800270c <HAL_TIM_PWM_Start+0xf0>
    __HAL_TIM_ENABLE(htim);
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800267a:	2000      	movs	r0, #0
 800267c:	e055      	b.n	800272a <HAL_TIM_PWM_Start+0x10e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	2904      	cmp	r1, #4
 8002680:	d00c      	beq.n	800269c <HAL_TIM_PWM_Start+0x80>
 8002682:	2908      	cmp	r1, #8
 8002684:	d011      	beq.n	80026aa <HAL_TIM_PWM_Start+0x8e>
 8002686:	290c      	cmp	r1, #12
 8002688:	d016      	beq.n	80026b8 <HAL_TIM_PWM_Start+0x9c>
 800268a:	2910      	cmp	r1, #16
 800268c:	d01b      	beq.n	80026c6 <HAL_TIM_PWM_Start+0xaa>
 800268e:	2343      	movs	r3, #67	; 0x43
 8002690:	5cc3      	ldrb	r3, [r0, r3]
 8002692:	3b01      	subs	r3, #1
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	4193      	sbcs	r3, r2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e7c9      	b.n	8002630 <HAL_TIM_PWM_Start+0x14>
 800269c:	233f      	movs	r3, #63	; 0x3f
 800269e:	5cc3      	ldrb	r3, [r0, r3]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	4193      	sbcs	r3, r2
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e7c2      	b.n	8002630 <HAL_TIM_PWM_Start+0x14>
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	5cc3      	ldrb	r3, [r0, r3]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	1e5a      	subs	r2, r3, #1
 80026b2:	4193      	sbcs	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e7bb      	b.n	8002630 <HAL_TIM_PWM_Start+0x14>
 80026b8:	2341      	movs	r3, #65	; 0x41
 80026ba:	5cc3      	ldrb	r3, [r0, r3]
 80026bc:	3b01      	subs	r3, #1
 80026be:	1e5a      	subs	r2, r3, #1
 80026c0:	4193      	sbcs	r3, r2
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	e7b4      	b.n	8002630 <HAL_TIM_PWM_Start+0x14>
 80026c6:	2342      	movs	r3, #66	; 0x42
 80026c8:	5cc3      	ldrb	r3, [r0, r3]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	1e5a      	subs	r2, r3, #1
 80026ce:	4193      	sbcs	r3, r2
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e7ad      	b.n	8002630 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026d4:	2904      	cmp	r1, #4
 80026d6:	d009      	beq.n	80026ec <HAL_TIM_PWM_Start+0xd0>
 80026d8:	2908      	cmp	r1, #8
 80026da:	d00b      	beq.n	80026f4 <HAL_TIM_PWM_Start+0xd8>
 80026dc:	290c      	cmp	r1, #12
 80026de:	d00d      	beq.n	80026fc <HAL_TIM_PWM_Start+0xe0>
 80026e0:	2910      	cmp	r1, #16
 80026e2:	d00f      	beq.n	8002704 <HAL_TIM_PWM_Start+0xe8>
 80026e4:	2343      	movs	r3, #67	; 0x43
 80026e6:	2202      	movs	r2, #2
 80026e8:	54e2      	strb	r2, [r4, r3]
 80026ea:	e7a8      	b.n	800263e <HAL_TIM_PWM_Start+0x22>
 80026ec:	233f      	movs	r3, #63	; 0x3f
 80026ee:	2202      	movs	r2, #2
 80026f0:	54e2      	strb	r2, [r4, r3]
 80026f2:	e7a4      	b.n	800263e <HAL_TIM_PWM_Start+0x22>
 80026f4:	2340      	movs	r3, #64	; 0x40
 80026f6:	2202      	movs	r2, #2
 80026f8:	54e2      	strb	r2, [r4, r3]
 80026fa:	e7a0      	b.n	800263e <HAL_TIM_PWM_Start+0x22>
 80026fc:	2341      	movs	r3, #65	; 0x41
 80026fe:	2202      	movs	r2, #2
 8002700:	54e2      	strb	r2, [r4, r3]
 8002702:	e79c      	b.n	800263e <HAL_TIM_PWM_Start+0x22>
 8002704:	2342      	movs	r3, #66	; 0x42
 8002706:	2202      	movs	r2, #2
 8002708:	54e2      	strb	r2, [r4, r3]
 800270a:	e798      	b.n	800263e <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <HAL_TIM_PWM_Start+0x128>)
 8002710:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002712:	2a06      	cmp	r2, #6
 8002714:	d00a      	beq.n	800272c <HAL_TIM_PWM_Start+0x110>
 8002716:	3907      	subs	r1, #7
 8002718:	428a      	cmp	r2, r1
 800271a:	d009      	beq.n	8002730 <HAL_TIM_PWM_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2101      	movs	r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002724:	2000      	movs	r0, #0
 8002726:	e000      	b.n	800272a <HAL_TIM_PWM_Start+0x10e>
    return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800272c:	2000      	movs	r0, #0
 800272e:	e7fc      	b.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002730:	2000      	movs	r0, #0
 8002732:	e7fa      	b.n	800272a <HAL_TIM_PWM_Start+0x10e>
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40014400 	.word	0x40014400
 800273c:	40014800 	.word	0x40014800
 8002740:	40000400 	.word	0x40000400
 8002744:	00010007 	.word	0x00010007

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002748:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800274a:	233c      	movs	r3, #60	; 0x3c
 800274c:	5cc3      	ldrb	r3, [r0, r3]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d029      	beq.n	80027a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002752:	233c      	movs	r3, #60	; 0x3c
 8002754:	2201      	movs	r2, #1
 8002756:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	3301      	adds	r3, #1
 800275a:	3201      	adds	r2, #1
 800275c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800275e:	6802      	ldr	r2, [r0, #0]
 8002760:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002762:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002764:	4d11      	ldr	r5, [pc, #68]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002766:	42aa      	cmp	r2, r5
 8002768:	d018      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800276a:	2570      	movs	r5, #112	; 0x70
 800276c:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800276e:	680d      	ldr	r5, [r1, #0]
 8002770:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002772:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002774:	6803      	ldr	r3, [r0, #0]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d002      	beq.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800277c:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d104      	bne.n	800278c <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002782:	2280      	movs	r2, #128	; 0x80
 8002784:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002786:	688a      	ldr	r2, [r1, #8]
 8002788:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800278c:	233d      	movs	r3, #61	; 0x3d
 800278e:	2201      	movs	r2, #1
 8002790:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002792:	3b01      	subs	r3, #1
 8002794:	2200      	movs	r2, #0
 8002796:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002798:	2000      	movs	r0, #0
}
 800279a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800279c:	4d05      	ldr	r5, [pc, #20]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800279e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80027a0:	684d      	ldr	r5, [r1, #4]
 80027a2:	432b      	orrs	r3, r5
 80027a4:	e7e1      	b.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80027a6:	2002      	movs	r0, #2
 80027a8:	e7f7      	b.n	800279a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	ff0fffff 	.word	0xff0fffff

080027b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027b8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ba:	233c      	movs	r3, #60	; 0x3c
 80027bc:	5cc3      	ldrb	r3, [r0, r3]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d044      	beq.n	800284c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80027c2:	233c      	movs	r3, #60	; 0x3c
 80027c4:	2201      	movs	r2, #1
 80027c6:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027c8:	4b21      	ldr	r3, [pc, #132]	; (8002850 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80027ca:	68ca      	ldr	r2, [r1, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	688a      	ldr	r2, [r1, #8]
 80027d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027d2:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	684a      	ldr	r2, [r1, #4]
 80027d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80027dc:	4013      	ands	r3, r2
 80027de:	680a      	ldr	r2, [r1, #0]
 80027e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	690a      	ldr	r2, [r1, #16]
 80027e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	694a      	ldr	r2, [r1, #20]
 80027f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80027f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	698a      	ldr	r2, [r1, #24]
 8002800:	0412      	lsls	r2, r2, #16
 8002802:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8002804:	6802      	ldr	r2, [r0, #0]
 8002806:	4c19      	ldr	r4, [pc, #100]	; (800286c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002808:	42a2      	cmp	r2, r4
 800280a:	d008      	beq.n	800281e <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800280c:	4c17      	ldr	r4, [pc, #92]	; (800286c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d00a      	beq.n	8002828 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002812:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002814:	233c      	movs	r3, #60	; 0x3c
 8002816:	2200      	movs	r2, #0
 8002818:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800281a:	2000      	movs	r0, #0
}
 800281c:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800281e:	4c14      	ldr	r4, [pc, #80]	; (8002870 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002820:	4023      	ands	r3, r4
 8002822:	69cc      	ldr	r4, [r1, #28]
 8002824:	4323      	orrs	r3, r4
 8002826:	e7f1      	b.n	800280c <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002828:	4c12      	ldr	r4, [pc, #72]	; (8002874 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800282a:	4023      	ands	r3, r4
 800282c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800282e:	0524      	lsls	r4, r4, #20
 8002830:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002832:	4c11      	ldr	r4, [pc, #68]	; (8002878 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8002834:	4023      	ands	r3, r4
 8002836:	6a0c      	ldr	r4, [r1, #32]
 8002838:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800283a:	4c10      	ldr	r4, [pc, #64]	; (800287c <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 800283c:	4023      	ands	r3, r4
 800283e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002840:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002842:	4c0f      	ldr	r4, [pc, #60]	; (8002880 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8002844:	4023      	ands	r3, r4
 8002846:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002848:	430b      	orrs	r3, r1
 800284a:	e7e2      	b.n	8002812 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 800284c:	2002      	movs	r0, #2
 800284e:	e7e5      	b.n	800281c <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8002850:	fffffcff 	.word	0xfffffcff
 8002854:	fffffbff 	.word	0xfffffbff
 8002858:	fffff7ff 	.word	0xfffff7ff
 800285c:	ffffefff 	.word	0xffffefff
 8002860:	ffffdfff 	.word	0xffffdfff
 8002864:	ffffbfff 	.word	0xffffbfff
 8002868:	fff0ffff 	.word	0xfff0ffff
 800286c:	40012c00 	.word	0x40012c00
 8002870:	efffffff 	.word	0xefffffff
 8002874:	ff0fffff 	.word	0xff0fffff
 8002878:	feffffff 	.word	0xfeffffff
 800287c:	fdffffff 	.word	0xfdffffff
 8002880:	dfffffff 	.word	0xdfffffff

08002884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002884:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002886:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	2201      	movs	r2, #1
 800288c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002890:	6801      	ldr	r1, [r0, #0]
 8002892:	680b      	ldr	r3, [r1, #0]
 8002894:	4d12      	ldr	r5, [pc, #72]	; (80028e0 <UART_EndRxTransfer+0x5c>)
 8002896:	402b      	ands	r3, r5
 8002898:	600b      	str	r3, [r1, #0]
 800289a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028a6:	6802      	ldr	r2, [r0, #0]
 80028a8:	6893      	ldr	r3, [r2, #8]
 80028aa:	4c0e      	ldr	r4, [pc, #56]	; (80028e4 <UART_EndRxTransfer+0x60>)
 80028ac:	4023      	ands	r3, r4
 80028ae:	6093      	str	r3, [r2, #8]
 80028b0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d006      	beq.n	80028c8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ba:	2388      	movs	r3, #136	; 0x88
 80028bc:	2220      	movs	r2, #32
 80028be:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c0:	2300      	movs	r3, #0
 80028c2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028c4:	6703      	str	r3, [r0, #112]	; 0x70
}
 80028c6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028cc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	6802      	ldr	r2, [r0, #0]
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	2410      	movs	r4, #16
 80028d6:	43a3      	bics	r3, r4
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	f381 8810 	msr	PRIMASK, r1
}
 80028de:	e7ec      	b.n	80028ba <UART_EndRxTransfer+0x36>
 80028e0:	fffffedf 	.word	0xfffffedf
 80028e4:	effffffe 	.word	0xeffffffe

080028e8 <HAL_UART_TxCpltCallback>:
}
 80028e8:	4770      	bx	lr

080028ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ea:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f0:	2301      	movs	r3, #1
 80028f2:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028f6:	6802      	ldr	r2, [r0, #0]
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	2440      	movs	r4, #64	; 0x40
 80028fc:	43a3      	bics	r3, r4
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002904:	2384      	movs	r3, #132	; 0x84
 8002906:	2220      	movs	r2, #32
 8002908:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800290e:	f7ff ffeb 	bl	80028e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002912:	bd10      	pop	{r4, pc}

08002914 <HAL_UART_ErrorCallback>:
}
 8002914:	4770      	bx	lr

08002916 <UART_DMAAbortOnError>:
{
 8002916:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002918:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	225e      	movs	r2, #94	; 0x5e
 800291e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8002920:	3a08      	subs	r2, #8
 8002922:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8002924:	f7ff fff6 	bl	8002914 <HAL_UART_ErrorCallback>
}
 8002928:	bd10      	pop	{r4, pc}

0800292a <HAL_UARTEx_RxEventCallback>:
}
 800292a:	4770      	bx	lr

0800292c <HAL_UART_IRQHandler>:
{
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002930:	6802      	ldr	r2, [r0, #0]
 8002932:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002934:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002936:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002938:	49b9      	ldr	r1, [pc, #740]	; (8002c20 <HAL_UART_IRQHandler+0x2f4>)
 800293a:	001e      	movs	r6, r3
 800293c:	400e      	ands	r6, r1
  if (errorflags == 0U)
 800293e:	420b      	tst	r3, r1
 8002940:	d105      	bne.n	800294e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002942:	0699      	lsls	r1, r3, #26
 8002944:	d503      	bpl.n	800294e <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002946:	0681      	lsls	r1, r0, #26
 8002948:	d42c      	bmi.n	80029a4 <HAL_UART_IRQHandler+0x78>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800294a:	00e9      	lsls	r1, r5, #3
 800294c:	d42a      	bmi.n	80029a4 <HAL_UART_IRQHandler+0x78>
  if ((errorflags != 0U)
 800294e:	2e00      	cmp	r6, #0
 8002950:	d007      	beq.n	8002962 <HAL_UART_IRQHandler+0x36>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002952:	49b4      	ldr	r1, [pc, #720]	; (8002c24 <HAL_UART_IRQHandler+0x2f8>)
 8002954:	002e      	movs	r6, r5
 8002956:	400e      	ands	r6, r1
 8002958:	420d      	tst	r5, r1
 800295a:	d129      	bne.n	80029b0 <HAL_UART_IRQHandler+0x84>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800295c:	49b2      	ldr	r1, [pc, #712]	; (8002c28 <HAL_UART_IRQHandler+0x2fc>)
 800295e:	4208      	tst	r0, r1
 8002960:	d126      	bne.n	80029b0 <HAL_UART_IRQHandler+0x84>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002962:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002964:	2901      	cmp	r1, #1
 8002966:	d100      	bne.n	800296a <HAL_UART_IRQHandler+0x3e>
 8002968:	e0a7      	b.n	8002aba <HAL_UART_IRQHandler+0x18e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800296a:	02d9      	lsls	r1, r3, #11
 800296c:	d502      	bpl.n	8002974 <HAL_UART_IRQHandler+0x48>
 800296e:	0269      	lsls	r1, r5, #9
 8002970:	d500      	bpl.n	8002974 <HAL_UART_IRQHandler+0x48>
 8002972:	e13a      	b.n	8002bea <HAL_UART_IRQHandler+0x2be>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002974:	061a      	lsls	r2, r3, #24
 8002976:	d505      	bpl.n	8002984 <HAL_UART_IRQHandler+0x58>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002978:	0602      	lsls	r2, r0, #24
 800297a:	d500      	bpl.n	800297e <HAL_UART_IRQHandler+0x52>
 800297c:	e13c      	b.n	8002bf8 <HAL_UART_IRQHandler+0x2cc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800297e:	022a      	lsls	r2, r5, #8
 8002980:	d500      	bpl.n	8002984 <HAL_UART_IRQHandler+0x58>
 8002982:	e139      	b.n	8002bf8 <HAL_UART_IRQHandler+0x2cc>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002984:	065a      	lsls	r2, r3, #25
 8002986:	d502      	bpl.n	800298e <HAL_UART_IRQHandler+0x62>
 8002988:	0642      	lsls	r2, r0, #25
 800298a:	d500      	bpl.n	800298e <HAL_UART_IRQHandler+0x62>
 800298c:	e13b      	b.n	8002c06 <HAL_UART_IRQHandler+0x2da>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800298e:	021a      	lsls	r2, r3, #8
 8002990:	d502      	bpl.n	8002998 <HAL_UART_IRQHandler+0x6c>
 8002992:	0042      	lsls	r2, r0, #1
 8002994:	d500      	bpl.n	8002998 <HAL_UART_IRQHandler+0x6c>
 8002996:	e13a      	b.n	8002c0e <HAL_UART_IRQHandler+0x2e2>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002998:	01db      	lsls	r3, r3, #7
 800299a:	d502      	bpl.n	80029a2 <HAL_UART_IRQHandler+0x76>
 800299c:	2800      	cmp	r0, #0
 800299e:	da00      	bge.n	80029a2 <HAL_UART_IRQHandler+0x76>
 80029a0:	e139      	b.n	8002c16 <HAL_UART_IRQHandler+0x2ea>
}
 80029a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (huart->RxISR != NULL)
 80029a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0fb      	beq.n	80029a2 <HAL_UART_IRQHandler+0x76>
        huart->RxISR(huart);
 80029aa:	0020      	movs	r0, r4
 80029ac:	4798      	blx	r3
      return;
 80029ae:	e7f8      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029b0:	07d9      	lsls	r1, r3, #31
 80029b2:	d507      	bpl.n	80029c4 <HAL_UART_IRQHandler+0x98>
 80029b4:	05c1      	lsls	r1, r0, #23
 80029b6:	d505      	bpl.n	80029c4 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029b8:	2701      	movs	r7, #1
 80029ba:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029bc:	218c      	movs	r1, #140	; 0x8c
 80029be:	5862      	ldr	r2, [r4, r1]
 80029c0:	433a      	orrs	r2, r7
 80029c2:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	079a      	lsls	r2, r3, #30
 80029c6:	d509      	bpl.n	80029dc <HAL_UART_IRQHandler+0xb0>
 80029c8:	07ea      	lsls	r2, r5, #31
 80029ca:	d507      	bpl.n	80029dc <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	2102      	movs	r1, #2
 80029d0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d2:	318a      	adds	r1, #138	; 0x8a
 80029d4:	5862      	ldr	r2, [r4, r1]
 80029d6:	2704      	movs	r7, #4
 80029d8:	433a      	orrs	r2, r7
 80029da:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029dc:	075a      	lsls	r2, r3, #29
 80029de:	d509      	bpl.n	80029f4 <HAL_UART_IRQHandler+0xc8>
 80029e0:	07ea      	lsls	r2, r5, #31
 80029e2:	d507      	bpl.n	80029f4 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	2104      	movs	r1, #4
 80029e8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ea:	3188      	adds	r1, #136	; 0x88
 80029ec:	5862      	ldr	r2, [r4, r1]
 80029ee:	2702      	movs	r7, #2
 80029f0:	433a      	orrs	r2, r7
 80029f2:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f4:	071a      	lsls	r2, r3, #28
 80029f6:	d50a      	bpl.n	8002a0e <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029f8:	0682      	lsls	r2, r0, #26
 80029fa:	d401      	bmi.n	8002a00 <HAL_UART_IRQHandler+0xd4>
 80029fc:	2e00      	cmp	r6, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a00:	6822      	ldr	r2, [r4, #0]
 8002a02:	2608      	movs	r6, #8
 8002a04:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a06:	218c      	movs	r1, #140	; 0x8c
 8002a08:	5862      	ldr	r2, [r4, r1]
 8002a0a:	4332      	orrs	r2, r6
 8002a0c:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a0e:	051a      	lsls	r2, r3, #20
 8002a10:	d50a      	bpl.n	8002a28 <HAL_UART_IRQHandler+0xfc>
 8002a12:	0142      	lsls	r2, r0, #5
 8002a14:	d508      	bpl.n	8002a28 <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a16:	6822      	ldr	r2, [r4, #0]
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0109      	lsls	r1, r1, #4
 8002a1c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a1e:	218c      	movs	r1, #140	; 0x8c
 8002a20:	5862      	ldr	r2, [r4, r1]
 8002a22:	2620      	movs	r6, #32
 8002a24:	4332      	orrs	r2, r6
 8002a26:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a28:	228c      	movs	r2, #140	; 0x8c
 8002a2a:	58a2      	ldr	r2, [r4, r2]
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d0b8      	beq.n	80029a2 <HAL_UART_IRQHandler+0x76>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a30:	069b      	lsls	r3, r3, #26
 8002a32:	d508      	bpl.n	8002a46 <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a34:	0683      	lsls	r3, r0, #26
 8002a36:	d401      	bmi.n	8002a3c <HAL_UART_IRQHandler+0x110>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a38:	00eb      	lsls	r3, r5, #3
 8002a3a:	d504      	bpl.n	8002a46 <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8002a3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 8002a42:	0020      	movs	r0, r4
 8002a44:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8002a46:	238c      	movs	r3, #140	; 0x8c
 8002a48:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	065b      	lsls	r3, r3, #25
 8002a50:	d402      	bmi.n	8002a58 <HAL_UART_IRQHandler+0x12c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a52:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a54:	4213      	tst	r3, r2
 8002a56:	d029      	beq.n	8002aac <HAL_UART_IRQHandler+0x180>
        UART_EndRxTransfer(huart);
 8002a58:	0020      	movs	r0, r4
 8002a5a:	f7ff ff13 	bl	8002884 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	065b      	lsls	r3, r3, #25
 8002a64:	d51e      	bpl.n	8002aa4 <HAL_UART_IRQHandler+0x178>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	6893      	ldr	r3, [r2, #8]
 8002a74:	2040      	movs	r0, #64	; 0x40
 8002a76:	4383      	bics	r3, r0
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002a7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_UART_IRQHandler+0x170>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a84:	4a69      	ldr	r2, [pc, #420]	; (8002c2c <HAL_UART_IRQHandler+0x300>)
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a88:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a8a:	f7ff f8e9 	bl	8001c60 <HAL_DMA_Abort_IT>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_UART_IRQHandler+0x168>
 8002a92:	e786      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a94:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a96:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002a98:	4798      	blx	r3
 8002a9a:	e782      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 8002a9c:	0020      	movs	r0, r4
 8002a9e:	f7ff ff39 	bl	8002914 <HAL_UART_ErrorCallback>
 8002aa2:	e77e      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
          HAL_UART_ErrorCallback(huart);
 8002aa4:	0020      	movs	r0, r4
 8002aa6:	f7ff ff35 	bl	8002914 <HAL_UART_ErrorCallback>
 8002aaa:	e77a      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
        HAL_UART_ErrorCallback(huart);
 8002aac:	0020      	movs	r0, r4
 8002aae:	f7ff ff31 	bl	8002914 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab2:	238c      	movs	r3, #140	; 0x8c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	50e2      	str	r2, [r4, r3]
    return;
 8002ab8:	e773      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aba:	06d9      	lsls	r1, r3, #27
 8002abc:	d400      	bmi.n	8002ac0 <HAL_UART_IRQHandler+0x194>
 8002abe:	e754      	b.n	800296a <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ac0:	06c1      	lsls	r1, r0, #27
 8002ac2:	d400      	bmi.n	8002ac6 <HAL_UART_IRQHandler+0x19a>
 8002ac4:	e751      	b.n	800296a <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	065b      	lsls	r3, r3, #25
 8002ad0:	d551      	bpl.n	8002b76 <HAL_UART_IRQHandler+0x24a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002ad4:	6813      	ldr	r3, [r2, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d100      	bne.n	8002ae0 <HAL_UART_IRQHandler+0x1b4>
 8002ade:	e760      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ae0:	215c      	movs	r1, #92	; 0x5c
 8002ae2:	5a61      	ldrh	r1, [r4, r1]
 8002ae4:	4299      	cmp	r1, r3
 8002ae6:	d800      	bhi.n	8002aea <HAL_UART_IRQHandler+0x1be>
 8002ae8:	e75b      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
        huart->RxXferCount = nb_remaining_rx_data;
 8002aea:	215e      	movs	r1, #94	; 0x5e
 8002aec:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002aee:	6813      	ldr	r3, [r2, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	069b      	lsls	r3, r3, #26
 8002af4:	d509      	bpl.n	8002b0a <HAL_UART_IRQHandler+0x1de>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002af6:	235c      	movs	r3, #92	; 0x5c
 8002af8:	5ae1      	ldrh	r1, [r4, r3]
 8002afa:	3302      	adds	r3, #2
 8002afc:	5ae3      	ldrh	r3, [r4, r3]
 8002afe:	1ac9      	subs	r1, r1, r3
 8002b00:	b289      	uxth	r1, r1
 8002b02:	0020      	movs	r0, r4
 8002b04:	f7ff ff11 	bl	800292a <HAL_UARTEx_RxEventCallback>
      return;
 8002b08:	e74b      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	680a      	ldr	r2, [r1, #0]
 8002b18:	4d45      	ldr	r5, [pc, #276]	; (8002c30 <HAL_UART_IRQHandler+0x304>)
 8002b1a:	402a      	ands	r2, r5
 8002b1c:	600a      	str	r2, [r1, #0]
 8002b1e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b26:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	6821      	ldr	r1, [r4, #0]
 8002b2c:	688a      	ldr	r2, [r1, #8]
 8002b2e:	439a      	bics	r2, r3
 8002b30:	608a      	str	r2, [r1, #8]
 8002b32:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b3a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3e:	6821      	ldr	r1, [r4, #0]
 8002b40:	688a      	ldr	r2, [r1, #8]
 8002b42:	3542      	adds	r5, #66	; 0x42
 8002b44:	35ff      	adds	r5, #255	; 0xff
 8002b46:	43aa      	bics	r2, r5
 8002b48:	608a      	str	r2, [r1, #8]
 8002b4a:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	2288      	movs	r2, #136	; 0x88
 8002b50:	2120      	movs	r1, #32
 8002b52:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b54:	2200      	movs	r2, #0
 8002b56:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	6822      	ldr	r2, [r4, #0]
 8002b62:	6813      	ldr	r3, [r2, #0]
 8002b64:	2010      	movs	r0, #16
 8002b66:	4383      	bics	r3, r0
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002b70:	f7ff f836 	bl	8001be0 <HAL_DMA_Abort>
 8002b74:	e7bf      	b.n	8002af6 <HAL_UART_IRQHandler+0x1ca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b76:	235c      	movs	r3, #92	; 0x5c
 8002b78:	5ae1      	ldrh	r1, [r4, r3]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	5ae2      	ldrh	r2, [r4, r3]
 8002b7e:	1a89      	subs	r1, r1, r2
 8002b80:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002b82:	5ae3      	ldrh	r3, [r4, r3]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d100      	bne.n	8002b8c <HAL_UART_IRQHandler+0x260>
 8002b8a:	e70a      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
          && (nb_rx_data > 0U))
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	d100      	bne.n	8002b92 <HAL_UART_IRQHandler+0x266>
 8002b90:	e707      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b92:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	2301      	movs	r3, #1
 8002b98:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b9c:	6820      	ldr	r0, [r4, #0]
 8002b9e:	6802      	ldr	r2, [r0, #0]
 8002ba0:	4e24      	ldr	r6, [pc, #144]	; (8002c34 <HAL_UART_IRQHandler+0x308>)
 8002ba2:	4032      	ands	r2, r6
 8002ba4:	6002      	str	r2, [r0, #0]
 8002ba6:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002baa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bae:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	6882      	ldr	r2, [r0, #8]
 8002bb6:	4e20      	ldr	r6, [pc, #128]	; (8002c38 <HAL_UART_IRQHandler+0x30c>)
 8002bb8:	4032      	ands	r2, r6
 8002bba:	6082      	str	r2, [r0, #8]
 8002bbc:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	2288      	movs	r2, #136	; 0x88
 8002bc2:	2020      	movs	r0, #32
 8002bc4:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8002bca:	6722      	str	r2, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bcc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd4:	6822      	ldr	r2, [r4, #0]
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	2510      	movs	r5, #16
 8002bda:	43ab      	bics	r3, r5
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002be2:	0020      	movs	r0, r4
 8002be4:	f7ff fea1 	bl	800292a <HAL_UARTEx_RxEventCallback>
      return;
 8002be8:	e6db      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	035b      	lsls	r3, r3, #13
 8002bee:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002bf0:	0020      	movs	r0, r4
 8002bf2:	f000 fe59 	bl	80038a8 <HAL_UARTEx_WakeupCallback>
    return;
 8002bf6:	e6d4      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    if (huart->TxISR != NULL)
 8002bf8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d100      	bne.n	8002c00 <HAL_UART_IRQHandler+0x2d4>
 8002bfe:	e6d0      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
      huart->TxISR(huart);
 8002c00:	0020      	movs	r0, r4
 8002c02:	4798      	blx	r3
    return;
 8002c04:	e6cd      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    UART_EndTransmit_IT(huart);
 8002c06:	0020      	movs	r0, r4
 8002c08:	f7ff fe6f 	bl	80028ea <UART_EndTransmit_IT>
    return;
 8002c0c:	e6c9      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002c0e:	0020      	movs	r0, r4
 8002c10:	f000 fe4c 	bl	80038ac <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8002c14:	e6c5      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002c16:	0020      	movs	r0, r4
 8002c18:	f000 fe47 	bl	80038aa <HAL_UARTEx_RxFifoFullCallback>
    return;
 8002c1c:	e6c1      	b.n	80029a2 <HAL_UART_IRQHandler+0x76>
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	0000080f 	.word	0x0000080f
 8002c24:	10000001 	.word	0x10000001
 8002c28:	04000120 	.word	0x04000120
 8002c2c:	08002917 	.word	0x08002917
 8002c30:	fffffeff 	.word	0xfffffeff
 8002c34:	fffffedf 	.word	0xfffffedf
 8002c38:	effffffe 	.word	0xeffffffe

08002c3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002c3c:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8002c3e:	2360      	movs	r3, #96	; 0x60
 8002c40:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c42:	2288      	movs	r2, #136	; 0x88
 8002c44:	5882      	ldr	r2, [r0, r2]
 8002c46:	2a22      	cmp	r2, #34	; 0x22
 8002c48:	d005      	beq.n	8002c56 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002c4a:	6802      	ldr	r2, [r0, #0]
 8002c4c:	6993      	ldr	r3, [r2, #24]
 8002c4e:	2108      	movs	r1, #8
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6193      	str	r3, [r2, #24]
  }
}
 8002c54:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002c60:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8002c62:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002c64:	3301      	adds	r3, #1
 8002c66:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002c68:	225e      	movs	r2, #94	; 0x5e
 8002c6a:	5a83      	ldrh	r3, [r0, r2]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002c72:	5a83      	ldrh	r3, [r0, r2]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ec      	bne.n	8002c54 <UART_RxISR_8BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c7a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7e:	3a5d      	subs	r2, #93	; 0x5d
 8002c80:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c84:	6801      	ldr	r1, [r0, #0]
 8002c86:	680b      	ldr	r3, [r1, #0]
 8002c88:	4c18      	ldr	r4, [pc, #96]	; (8002cec <UART_RxISR_8BIT+0xb0>)
 8002c8a:	4023      	ands	r3, r4
 8002c8c:	600b      	str	r3, [r1, #0]
 8002c8e:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c92:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9a:	6801      	ldr	r1, [r0, #0]
 8002c9c:	688b      	ldr	r3, [r1, #8]
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
 8002ca2:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	2388      	movs	r3, #136	; 0x88
 8002ca8:	321f      	adds	r2, #31
 8002caa:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d117      	bne.n	8002ce6 <UART_RxISR_8BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	66c3      	str	r3, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc4:	6801      	ldr	r1, [r0, #0]
 8002cc6:	680b      	ldr	r3, [r1, #0]
 8002cc8:	3a10      	subs	r2, #16
 8002cca:	4393      	bics	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
 8002cce:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	69d9      	ldr	r1, [r3, #28]
 8002cd6:	420a      	tst	r2, r1
 8002cd8:	d000      	beq.n	8002cdc <UART_RxISR_8BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cda:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cdc:	235c      	movs	r3, #92	; 0x5c
 8002cde:	5ac1      	ldrh	r1, [r0, r3]
 8002ce0:	f7ff fe23 	bl	800292a <HAL_UARTEx_RxEventCallback>
 8002ce4:	e7b6      	b.n	8002c54 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002ce6:	f7fd fe61 	bl	80009ac <HAL_UART_RxCpltCallback>
 8002cea:	e7b3      	b.n	8002c54 <UART_RxISR_8BIT+0x18>
 8002cec:	fffffedf 	.word	0xfffffedf

08002cf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002cf0:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002cf2:	2360      	movs	r3, #96	; 0x60
 8002cf4:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cf6:	3328      	adds	r3, #40	; 0x28
 8002cf8:	58c3      	ldr	r3, [r0, r3]
 8002cfa:	2b22      	cmp	r3, #34	; 0x22
 8002cfc:	d005      	beq.n	8002d0a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002cfe:	6802      	ldr	r2, [r0, #0]
 8002d00:	6993      	ldr	r3, [r2, #24]
 8002d02:	2108      	movs	r1, #8
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6193      	str	r3, [r2, #24]
  }
}
 8002d08:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002d0a:	6803      	ldr	r3, [r0, #0]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8002d0e:	4013      	ands	r3, r2
 8002d10:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002d12:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8002d14:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d16:	3302      	adds	r3, #2
 8002d18:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8002d1a:	225e      	movs	r2, #94	; 0x5e
 8002d1c:	5a83      	ldrh	r3, [r0, r2]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8002d24:	5a83      	ldrh	r3, [r0, r2]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ed      	bne.n	8002d08 <UART_RxISR_16BIT+0x18>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d30:	3a5d      	subs	r2, #93	; 0x5d
 8002d32:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d36:	6801      	ldr	r1, [r0, #0]
 8002d38:	680b      	ldr	r3, [r1, #0]
 8002d3a:	4c19      	ldr	r4, [pc, #100]	; (8002da0 <UART_RxISR_16BIT+0xb0>)
 8002d3c:	4023      	ands	r3, r4
 8002d3e:	600b      	str	r3, [r1, #0]
 8002d40:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d48:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	6801      	ldr	r1, [r0, #0]
 8002d4e:	688b      	ldr	r3, [r1, #8]
 8002d50:	4393      	bics	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
 8002d54:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8002d58:	2388      	movs	r3, #136	; 0x88
 8002d5a:	321f      	adds	r2, #31
 8002d5c:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d62:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d117      	bne.n	8002d98 <UART_RxISR_16BIT+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	66c3      	str	r3, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	3301      	adds	r3, #1
 8002d72:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d76:	6801      	ldr	r1, [r0, #0]
 8002d78:	680b      	ldr	r3, [r1, #0]
 8002d7a:	3a10      	subs	r2, #16
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	69d9      	ldr	r1, [r3, #28]
 8002d88:	420a      	tst	r2, r1
 8002d8a:	d000      	beq.n	8002d8e <UART_RxISR_16BIT+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d8c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d8e:	235c      	movs	r3, #92	; 0x5c
 8002d90:	5ac1      	ldrh	r1, [r0, r3]
 8002d92:	f7ff fdca 	bl	800292a <HAL_UARTEx_RxEventCallback>
 8002d96:	e7b7      	b.n	8002d08 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8002d98:	f7fd fe08 	bl	80009ac <HAL_UART_RxCpltCallback>
 8002d9c:	e7b4      	b.n	8002d08 <UART_RxISR_16BIT+0x18>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	fffffedf 	.word	0xfffffedf

08002da4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da6:	46ce      	mov	lr, r9
 8002da8:	4647      	mov	r7, r8
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b083      	sub	sp, #12
 8002dae:	0004      	movs	r4, r0
  uint16_t  uhMask = huart->Mask;
 8002db0:	2360      	movs	r3, #96	; 0x60
 8002db2:	5ac3      	ldrh	r3, [r0, r3]
 8002db4:	9301      	str	r3, [sp, #4]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002db6:	6803      	ldr	r3, [r0, #0]
 8002db8:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4690      	mov	r8, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4691      	mov	r9, r2

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc2:	2288      	movs	r2, #136	; 0x88
 8002dc4:	5882      	ldr	r2, [r0, r2]
 8002dc6:	2a22      	cmp	r2, #34	; 0x22
 8002dc8:	d008      	beq.n	8002ddc <UART_RxISR_8BIT_FIFOEN+0x38>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	2108      	movs	r1, #8
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	619a      	str	r2, [r3, #24]
  }
}
 8002dd2:	b003      	add	sp, #12
 8002dd4:	bcc0      	pop	{r6, r7}
 8002dd6:	46b9      	mov	r9, r7
 8002dd8:	46b0      	mov	r8, r6
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8002ddc:	2368      	movs	r3, #104	; 0x68
 8002dde:	5ac6      	ldrh	r6, [r0, r3]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002de0:	e03f      	b.n	8002e62 <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002de2:	238c      	movs	r3, #140	; 0x8c
 8002de4:	58e3      	ldr	r3, [r4, r3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d178      	bne.n	8002edc <UART_RxISR_8BIT_FIFOEN+0x138>
      if (huart->RxXferCount == 0U)
 8002dea:	235e      	movs	r3, #94	; 0x5e
 8002dec:	5ae3      	ldrh	r3, [r4, r3]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d136      	bne.n	8002e62 <UART_RxISR_8BIT_FIFOEN+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfe:	6821      	ldr	r1, [r4, #0]
 8002e00:	680b      	ldr	r3, [r1, #0]
 8002e02:	4f4e      	ldr	r7, [pc, #312]	; (8002f3c <UART_RxISR_8BIT_FIFOEN+0x198>)
 8002e04:	403b      	ands	r3, r7
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e10:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e14:	6822      	ldr	r2, [r4, #0]
 8002e16:	6893      	ldr	r3, [r2, #8]
 8002e18:	4849      	ldr	r0, [pc, #292]	; (8002f40 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 8002e1a:	4003      	ands	r3, r0
 8002e1c:	6093      	str	r3, [r2, #8]
 8002e1e:	f381 8810 	msr	PRIMASK, r1
        huart->RxState = HAL_UART_STATE_READY;
 8002e22:	2388      	movs	r3, #136	; 0x88
 8002e24:	2220      	movs	r2, #32
 8002e26:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d15b      	bne.n	8002eea <UART_RxISR_8BIT_FIFOEN+0x146>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e32:	2300      	movs	r3, #0
 8002e34:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	6821      	ldr	r1, [r4, #0]
 8002e42:	680b      	ldr	r3, [r1, #0]
 8002e44:	3a10      	subs	r2, #16
 8002e46:	4393      	bics	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	69d9      	ldr	r1, [r3, #28]
 8002e52:	420a      	tst	r2, r1
 8002e54:	d000      	beq.n	8002e58 <UART_RxISR_8BIT_FIFOEN+0xb4>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e56:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e58:	235c      	movs	r3, #92	; 0x5c
 8002e5a:	5ae1      	ldrh	r1, [r4, r3]
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	f7ff fd64 	bl	800292a <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e62:	2e00      	cmp	r6, #0
 8002e64:	d045      	beq.n	8002ef2 <UART_RxISR_8BIT_FIFOEN+0x14e>
 8002e66:	06ab      	lsls	r3, r5, #26
 8002e68:	d543      	bpl.n	8002ef2 <UART_RxISR_8BIT_FIFOEN+0x14e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002e6e:	466a      	mov	r2, sp
 8002e70:	7912      	ldrb	r2, [r2, #4]
 8002e72:	4013      	ands	r3, r2
 8002e74:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002e76:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8002e78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8002e7e:	225e      	movs	r2, #94	; 0x5e
 8002e80:	5aa3      	ldrh	r3, [r4, r2]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	52a3      	strh	r3, [r4, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e8c:	076a      	lsls	r2, r5, #29
 8002e8e:	d0ac      	beq.n	8002dea <UART_RxISR_8BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e90:	07ea      	lsls	r2, r5, #31
 8002e92:	d508      	bpl.n	8002ea6 <UART_RxISR_8BIT_FIFOEN+0x102>
 8002e94:	4642      	mov	r2, r8
 8002e96:	05d2      	lsls	r2, r2, #23
 8002e98:	d505      	bpl.n	8002ea6 <UART_RxISR_8BIT_FIFOEN+0x102>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9e:	228c      	movs	r2, #140	; 0x8c
 8002ea0:	58a3      	ldr	r3, [r4, r2]
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea6:	07ab      	lsls	r3, r5, #30
 8002ea8:	d50a      	bpl.n	8002ec0 <UART_RxISR_8BIT_FIFOEN+0x11c>
 8002eaa:	464b      	mov	r3, r9
 8002eac:	07db      	lsls	r3, r3, #31
 8002eae:	d507      	bpl.n	8002ec0 <UART_RxISR_8BIT_FIFOEN+0x11c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb6:	328a      	adds	r2, #138	; 0x8a
 8002eb8:	58a3      	ldr	r3, [r4, r2]
 8002eba:	2104      	movs	r1, #4
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec0:	076b      	lsls	r3, r5, #29
 8002ec2:	d58e      	bpl.n	8002de2 <UART_RxISR_8BIT_FIFOEN+0x3e>
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	07db      	lsls	r3, r3, #31
 8002ec8:	d58b      	bpl.n	8002de2 <UART_RxISR_8BIT_FIFOEN+0x3e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ed0:	3288      	adds	r2, #136	; 0x88
 8002ed2:	58a3      	ldr	r3, [r4, r2]
 8002ed4:	2102      	movs	r1, #2
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	50a3      	str	r3, [r4, r2]
 8002eda:	e782      	b.n	8002de2 <UART_RxISR_8BIT_FIFOEN+0x3e>
          HAL_UART_ErrorCallback(huart);
 8002edc:	0020      	movs	r0, r4
 8002ede:	f7ff fd19 	bl	8002914 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	238c      	movs	r3, #140	; 0x8c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	50e2      	str	r2, [r4, r3]
 8002ee8:	e77f      	b.n	8002dea <UART_RxISR_8BIT_FIFOEN+0x46>
          HAL_UART_RxCpltCallback(huart);
 8002eea:	0020      	movs	r0, r4
 8002eec:	f7fd fd5e 	bl	80009ac <HAL_UART_RxCpltCallback>
 8002ef0:	e7b7      	b.n	8002e62 <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 8002ef2:	235e      	movs	r3, #94	; 0x5e
 8002ef4:	5ae3      	ldrh	r3, [r4, r3]
 8002ef6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d100      	bne.n	8002efe <UART_RxISR_8BIT_FIFOEN+0x15a>
 8002efc:	e769      	b.n	8002dd2 <UART_RxISR_8BIT_FIFOEN+0x2e>
 8002efe:	2268      	movs	r2, #104	; 0x68
 8002f00:	5aa2      	ldrh	r2, [r4, r2]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d800      	bhi.n	8002f08 <UART_RxISR_8BIT_FIFOEN+0x164>
 8002f06:	e764      	b.n	8002dd2 <UART_RxISR_8BIT_FIFOEN+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002f12:	6821      	ldr	r1, [r4, #0]
 8002f14:	688b      	ldr	r3, [r1, #8]
 8002f16:	4d0b      	ldr	r5, [pc, #44]	; (8002f44 <UART_RxISR_8BIT_FIFOEN+0x1a0>)
 8002f18:	402b      	ands	r3, r5
 8002f1a:	608b      	str	r3, [r1, #8]
 8002f1c:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <UART_RxISR_8BIT_FIFOEN+0x1a4>)
 8002f22:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f24:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002f2c:	6822      	ldr	r2, [r4, #0]
 8002f2e:	6813      	ldr	r3, [r2, #0]
 8002f30:	2020      	movs	r0, #32
 8002f32:	4303      	orrs	r3, r0
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	f381 8810 	msr	PRIMASK, r1
}
 8002f3a:	e74a      	b.n	8002dd2 <UART_RxISR_8BIT_FIFOEN+0x2e>
 8002f3c:	fffffeff 	.word	0xfffffeff
 8002f40:	effffffe 	.word	0xeffffffe
 8002f44:	efffffff 	.word	0xefffffff
 8002f48:	08002c3d 	.word	0x08002c3d

08002f4c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	46de      	mov	lr, fp
 8002f50:	4657      	mov	r7, sl
 8002f52:	464e      	mov	r6, r9
 8002f54:	4645      	mov	r5, r8
 8002f56:	b5e0      	push	{r5, r6, r7, lr}
 8002f58:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8002f5a:	2360      	movs	r3, #96	; 0x60
 8002f5c:	5ac5      	ldrh	r5, [r0, r3]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f5e:	6803      	ldr	r3, [r0, #0]
 8002f60:	69df      	ldr	r7, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4690      	mov	r8, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4691      	mov	r9, r2

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f6a:	2288      	movs	r2, #136	; 0x88
 8002f6c:	5882      	ldr	r2, [r0, r2]
 8002f6e:	2a22      	cmp	r2, #34	; 0x22
 8002f70:	d009      	beq.n	8002f86 <UART_RxISR_16BIT_FIFOEN+0x3a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	2108      	movs	r1, #8
 8002f76:	430a      	orrs	r2, r1
 8002f78:	619a      	str	r2, [r3, #24]
  }
}
 8002f7a:	bcf0      	pop	{r4, r5, r6, r7}
 8002f7c:	46bb      	mov	fp, r7
 8002f7e:	46b2      	mov	sl, r6
 8002f80:	46a9      	mov	r9, r5
 8002f82:	46a0      	mov	r8, r4
 8002f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8002f86:	2368      	movs	r3, #104	; 0x68
 8002f88:	5ac6      	ldrh	r6, [r0, r3]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002f8a:	e042      	b.n	8003012 <UART_RxISR_16BIT_FIFOEN+0xc6>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f8c:	238c      	movs	r3, #140	; 0x8c
 8002f8e:	58e3      	ldr	r3, [r4, r3]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d179      	bne.n	8003088 <UART_RxISR_16BIT_FIFOEN+0x13c>
      if (huart->RxXferCount == 0U)
 8002f94:	235e      	movs	r3, #94	; 0x5e
 8002f96:	5ae3      	ldrh	r3, [r4, r3]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d139      	bne.n	8003012 <UART_RxISR_16BIT_FIFOEN+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	469b      	mov	fp, r3
 8002fa6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	680b      	ldr	r3, [r1, #0]
 8002fae:	469a      	mov	sl, r3
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	; (80030e8 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	600a      	str	r2, [r1, #0]
 8002fb8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc0:	f38b 8810 	msr	PRIMASK, fp
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	6893      	ldr	r3, [r2, #8]
 8002fc8:	4848      	ldr	r0, [pc, #288]	; (80030ec <UART_RxISR_16BIT_FIFOEN+0x1a0>)
 8002fca:	4003      	ands	r3, r0
 8002fcc:	6093      	str	r3, [r2, #8]
 8002fce:	f381 8810 	msr	PRIMASK, r1
        huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	2388      	movs	r3, #136	; 0x88
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d159      	bne.n	8003096 <UART_RxISR_16BIT_FIFOEN+0x14a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	3301      	adds	r3, #1
 8002fec:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff0:	6821      	ldr	r1, [r4, #0]
 8002ff2:	680b      	ldr	r3, [r1, #0]
 8002ff4:	3a10      	subs	r2, #16
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
 8002ffa:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	69d9      	ldr	r1, [r3, #28]
 8003002:	420a      	tst	r2, r1
 8003004:	d000      	beq.n	8003008 <UART_RxISR_16BIT_FIFOEN+0xbc>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003006:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003008:	235c      	movs	r3, #92	; 0x5c
 800300a:	5ae1      	ldrh	r1, [r4, r3]
 800300c:	0020      	movs	r0, r4
 800300e:	f7ff fc8c 	bl	800292a <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003012:	2e00      	cmp	r6, #0
 8003014:	d043      	beq.n	800309e <UART_RxISR_16BIT_FIFOEN+0x152>
 8003016:	06bb      	lsls	r3, r7, #26
 8003018:	d541      	bpl.n	800309e <UART_RxISR_16BIT_FIFOEN+0x152>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800301e:	402b      	ands	r3, r5
 8003020:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003022:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003024:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003026:	3302      	adds	r3, #2
 8003028:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800302a:	225e      	movs	r2, #94	; 0x5e
 800302c:	5aa3      	ldrh	r3, [r4, r2]
 800302e:	3b01      	subs	r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	52a3      	strh	r3, [r4, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003038:	077a      	lsls	r2, r7, #29
 800303a:	d0ab      	beq.n	8002f94 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800303c:	07fa      	lsls	r2, r7, #31
 800303e:	d508      	bpl.n	8003052 <UART_RxISR_16BIT_FIFOEN+0x106>
 8003040:	4642      	mov	r2, r8
 8003042:	05d2      	lsls	r2, r2, #23
 8003044:	d505      	bpl.n	8003052 <UART_RxISR_16BIT_FIFOEN+0x106>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003046:	2101      	movs	r1, #1
 8003048:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800304a:	228c      	movs	r2, #140	; 0x8c
 800304c:	58a3      	ldr	r3, [r4, r2]
 800304e:	430b      	orrs	r3, r1
 8003050:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003052:	07bb      	lsls	r3, r7, #30
 8003054:	d50a      	bpl.n	800306c <UART_RxISR_16BIT_FIFOEN+0x120>
 8003056:	464b      	mov	r3, r9
 8003058:	07db      	lsls	r3, r3, #31
 800305a:	d507      	bpl.n	800306c <UART_RxISR_16BIT_FIFOEN+0x120>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	2202      	movs	r2, #2
 8003060:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003062:	328a      	adds	r2, #138	; 0x8a
 8003064:	58a3      	ldr	r3, [r4, r2]
 8003066:	2104      	movs	r1, #4
 8003068:	430b      	orrs	r3, r1
 800306a:	50a3      	str	r3, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306c:	077b      	lsls	r3, r7, #29
 800306e:	d58d      	bpl.n	8002f8c <UART_RxISR_16BIT_FIFOEN+0x40>
 8003070:	464b      	mov	r3, r9
 8003072:	07db      	lsls	r3, r3, #31
 8003074:	d58a      	bpl.n	8002f8c <UART_RxISR_16BIT_FIFOEN+0x40>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	2204      	movs	r2, #4
 800307a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800307c:	3288      	adds	r2, #136	; 0x88
 800307e:	58a3      	ldr	r3, [r4, r2]
 8003080:	2102      	movs	r1, #2
 8003082:	430b      	orrs	r3, r1
 8003084:	50a3      	str	r3, [r4, r2]
 8003086:	e781      	b.n	8002f8c <UART_RxISR_16BIT_FIFOEN+0x40>
          HAL_UART_ErrorCallback(huart);
 8003088:	0020      	movs	r0, r4
 800308a:	f7ff fc43 	bl	8002914 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	238c      	movs	r3, #140	; 0x8c
 8003090:	2200      	movs	r2, #0
 8003092:	50e2      	str	r2, [r4, r3]
 8003094:	e77e      	b.n	8002f94 <UART_RxISR_16BIT_FIFOEN+0x48>
          HAL_UART_RxCpltCallback(huart);
 8003096:	0020      	movs	r0, r4
 8003098:	f7fd fc88 	bl	80009ac <HAL_UART_RxCpltCallback>
 800309c:	e7b9      	b.n	8003012 <UART_RxISR_16BIT_FIFOEN+0xc6>
    rxdatacount = huart->RxXferCount;
 800309e:	235e      	movs	r3, #94	; 0x5e
 80030a0:	5ae3      	ldrh	r3, [r4, r3]
 80030a2:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <UART_RxISR_16BIT_FIFOEN+0x15e>
 80030a8:	e767      	b.n	8002f7a <UART_RxISR_16BIT_FIFOEN+0x2e>
 80030aa:	2268      	movs	r2, #104	; 0x68
 80030ac:	5aa2      	ldrh	r2, [r4, r2]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d800      	bhi.n	80030b4 <UART_RxISR_16BIT_FIFOEN+0x168>
 80030b2:	e762      	b.n	8002f7a <UART_RxISR_16BIT_FIFOEN+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	2201      	movs	r2, #1
 80030ba:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80030be:	6821      	ldr	r1, [r4, #0]
 80030c0:	688b      	ldr	r3, [r1, #8]
 80030c2:	4d0b      	ldr	r5, [pc, #44]	; (80030f0 <UART_RxISR_16BIT_FIFOEN+0x1a4>)
 80030c4:	402b      	ands	r3, r5
 80030c6:	608b      	str	r3, [r1, #8]
 80030c8:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <UART_RxISR_16BIT_FIFOEN+0x1a8>)
 80030ce:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	2020      	movs	r0, #32
 80030de:	4303      	orrs	r3, r0
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	f381 8810 	msr	PRIMASK, r1
}
 80030e6:	e748      	b.n	8002f7a <UART_RxISR_16BIT_FIFOEN+0x2e>
 80030e8:	fffffeff 	.word	0xfffffeff
 80030ec:	effffffe 	.word	0xeffffffe
 80030f0:	efffffff 	.word	0xefffffff
 80030f4:	08002cf1 	.word	0x08002cf1

080030f8 <UART_SetConfig>:
{
 80030f8:	b510      	push	{r4, lr}
 80030fa:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030fc:	6883      	ldr	r3, [r0, #8]
 80030fe:	6902      	ldr	r2, [r0, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	6942      	ldr	r2, [r0, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	69c2      	ldr	r2, [r0, #28]
 8003108:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800310a:	6801      	ldr	r1, [r0, #0]
 800310c:	680a      	ldr	r2, [r1, #0]
 800310e:	4863      	ldr	r0, [pc, #396]	; (800329c <UART_SetConfig+0x1a4>)
 8003110:	4002      	ands	r2, r0
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	6853      	ldr	r3, [r2, #4]
 800311a:	4961      	ldr	r1, [pc, #388]	; (80032a0 <UART_SetConfig+0x1a8>)
 800311c:	400b      	ands	r3, r1
 800311e:	68e1      	ldr	r1, [r4, #12]
 8003120:	430b      	orrs	r3, r1
 8003122:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003124:	6a22      	ldr	r2, [r4, #32]
 8003126:	69a3      	ldr	r3, [r4, #24]
 8003128:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800312a:	6821      	ldr	r1, [r4, #0]
 800312c:	688b      	ldr	r3, [r1, #8]
 800312e:	485d      	ldr	r0, [pc, #372]	; (80032a4 <UART_SetConfig+0x1ac>)
 8003130:	4003      	ands	r3, r0
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800313a:	210f      	movs	r1, #15
 800313c:	438b      	bics	r3, r1
 800313e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <UART_SetConfig+0x1b0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d01b      	beq.n	8003184 <UART_SetConfig+0x8c>
 800314c:	4a57      	ldr	r2, [pc, #348]	; (80032ac <UART_SetConfig+0x1b4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d029      	beq.n	80031a6 <UART_SetConfig+0xae>
 8003152:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003154:	69e0      	ldr	r0, [r4, #28]
 8003156:	2280      	movs	r2, #128	; 0x80
 8003158:	0212      	lsls	r2, r2, #8
 800315a:	4290      	cmp	r0, r2
 800315c:	d02d      	beq.n	80031ba <UART_SetConfig+0xc2>
    switch (clocksource)
 800315e:	2b04      	cmp	r3, #4
 8003160:	d100      	bne.n	8003164 <UART_SetConfig+0x6c>
 8003162:	e094      	b.n	800328e <UART_SetConfig+0x196>
 8003164:	d868      	bhi.n	8003238 <UART_SetConfig+0x140>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d100      	bne.n	800316c <UART_SetConfig+0x74>
 800316a:	e08a      	b.n	8003282 <UART_SetConfig+0x18a>
 800316c:	2b02      	cmp	r3, #2
 800316e:	d161      	bne.n	8003234 <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003170:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <UART_SetConfig+0x1b8>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2107      	movs	r1, #7
 8003178:	4019      	ands	r1, r3
 800317a:	3101      	adds	r1, #1
 800317c:	484d      	ldr	r0, [pc, #308]	; (80032b4 <UART_SetConfig+0x1bc>)
 800317e:	f7fc ffcd 	bl	800011c <__udivsi3>
        break;
 8003182:	e080      	b.n	8003286 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003184:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <UART_SetConfig+0x1b8>)
 8003186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003188:	2303      	movs	r3, #3
 800318a:	4013      	ands	r3, r2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d00c      	beq.n	80031aa <UART_SetConfig+0xb2>
 8003190:	d805      	bhi.n	800319e <UART_SetConfig+0xa6>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <UART_SetConfig+0xb6>
 8003196:	2b01      	cmp	r3, #1
 8003198:	d10b      	bne.n	80031b2 <UART_SetConfig+0xba>
 800319a:	3303      	adds	r3, #3
 800319c:	e7da      	b.n	8003154 <UART_SetConfig+0x5c>
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d109      	bne.n	80031b6 <UART_SetConfig+0xbe>
 80031a2:	3305      	adds	r3, #5
 80031a4:	e7d6      	b.n	8003154 <UART_SetConfig+0x5c>
 80031a6:	2300      	movs	r3, #0
 80031a8:	e7d4      	b.n	8003154 <UART_SetConfig+0x5c>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e7d2      	b.n	8003154 <UART_SetConfig+0x5c>
 80031ae:	2300      	movs	r3, #0
 80031b0:	e7d0      	b.n	8003154 <UART_SetConfig+0x5c>
 80031b2:	2310      	movs	r3, #16
 80031b4:	e7ce      	b.n	8003154 <UART_SetConfig+0x5c>
 80031b6:	2310      	movs	r3, #16
 80031b8:	e7cc      	b.n	8003154 <UART_SetConfig+0x5c>
    switch (clocksource)
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d037      	beq.n	800322e <UART_SetConfig+0x136>
 80031be:	d80f      	bhi.n	80031e0 <UART_SetConfig+0xe8>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02e      	beq.n	8003222 <UART_SetConfig+0x12a>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d109      	bne.n	80031dc <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80031c8:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <UART_SetConfig+0x1b8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	2107      	movs	r1, #7
 80031d0:	4019      	ands	r1, r3
 80031d2:	3101      	adds	r1, #1
 80031d4:	4837      	ldr	r0, [pc, #220]	; (80032b4 <UART_SetConfig+0x1bc>)
 80031d6:	f7fc ffa1 	bl	800011c <__udivsi3>
        break;
 80031da:	e024      	b.n	8003226 <UART_SetConfig+0x12e>
    switch (clocksource)
 80031dc:	2001      	movs	r0, #1
 80031de:	e047      	b.n	8003270 <UART_SetConfig+0x178>
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11c      	bne.n	800321e <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4a33      	ldr	r2, [pc, #204]	; (80032b8 <UART_SetConfig+0x1c0>)
 80031ea:	5a99      	ldrh	r1, [r3, r2]
 80031ec:	f7fc ff96 	bl	800011c <__udivsi3>
 80031f0:	0040      	lsls	r0, r0, #1
 80031f2:	6863      	ldr	r3, [r4, #4]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	18c0      	adds	r0, r0, r3
 80031f8:	6861      	ldr	r1, [r4, #4]
 80031fa:	f7fc ff8f 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031fe:	0002      	movs	r2, r0
 8003200:	3a10      	subs	r2, #16
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <UART_SetConfig+0x1c4>)
 8003204:	429a      	cmp	r2, r3
 8003206:	d845      	bhi.n	8003294 <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003208:	b282      	uxth	r2, r0
 800320a:	230f      	movs	r3, #15
 800320c:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320e:	0840      	lsrs	r0, r0, #1
 8003210:	3b08      	subs	r3, #8
 8003212:	4018      	ands	r0, r3
 8003214:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	60d8      	str	r0, [r3, #12]
 800321a:	2000      	movs	r0, #0
 800321c:	e028      	b.n	8003270 <UART_SetConfig+0x178>
    switch (clocksource)
 800321e:	2001      	movs	r0, #1
 8003220:	e026      	b.n	8003270 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003222:	f7fe fe75 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003226:	2800      	cmp	r0, #0
 8003228:	d1dc      	bne.n	80031e4 <UART_SetConfig+0xec>
 800322a:	2000      	movs	r0, #0
 800322c:	e020      	b.n	8003270 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800322e:	f7fe fe39 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
        break;
 8003232:	e7f8      	b.n	8003226 <UART_SetConfig+0x12e>
    switch (clocksource)
 8003234:	2001      	movs	r0, #1
 8003236:	e01b      	b.n	8003270 <UART_SetConfig+0x178>
 8003238:	2b08      	cmp	r3, #8
 800323a:	d118      	bne.n	800326e <UART_SetConfig+0x176>
 800323c:	2080      	movs	r0, #128	; 0x80
 800323e:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <UART_SetConfig+0x1c0>)
 8003246:	5a99      	ldrh	r1, [r3, r2]
 8003248:	f7fc ff68 	bl	800011c <__udivsi3>
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	18c0      	adds	r0, r0, r3
 8003252:	6861      	ldr	r1, [r4, #4]
 8003254:	f7fc ff62 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	0002      	movs	r2, r0
 800325a:	3a10      	subs	r2, #16
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <UART_SetConfig+0x1c4>)
 800325e:	429a      	cmp	r2, r3
 8003260:	d81a      	bhi.n	8003298 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	0400      	lsls	r0, r0, #16
 8003266:	0c00      	lsrs	r0, r0, #16
 8003268:	60d8      	str	r0, [r3, #12]
 800326a:	2000      	movs	r0, #0
 800326c:	e000      	b.n	8003270 <UART_SetConfig+0x178>
    switch (clocksource)
 800326e:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	226a      	movs	r2, #106	; 0x6a
 8003274:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8003276:	3a02      	subs	r2, #2
 8003278:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800327e:	6763      	str	r3, [r4, #116]	; 0x74
}
 8003280:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8003282:	f7fe fe45 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003286:	2800      	cmp	r0, #0
 8003288:	d1da      	bne.n	8003240 <UART_SetConfig+0x148>
 800328a:	2000      	movs	r0, #0
 800328c:	e7f0      	b.n	8003270 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7fe fe09 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
        break;
 8003292:	e7f8      	b.n	8003286 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003294:	2001      	movs	r0, #1
 8003296:	e7eb      	b.n	8003270 <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8003298:	2001      	movs	r0, #1
 800329a:	e7e9      	b.n	8003270 <UART_SetConfig+0x178>
 800329c:	cfff69f3 	.word	0xcfff69f3
 80032a0:	ffffcfff 	.word	0xffffcfff
 80032a4:	11fff4ff 	.word	0x11fff4ff
 80032a8:	40013800 	.word	0x40013800
 80032ac:	40004400 	.word	0x40004400
 80032b0:	40021000 	.word	0x40021000
 80032b4:	02dc6c00 	.word	0x02dc6c00
 80032b8:	08004438 	.word	0x08004438
 80032bc:	0000ffef 	.word	0x0000ffef

080032c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032c2:	07db      	lsls	r3, r3, #31
 80032c4:	d506      	bpl.n	80032d4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c6:	6802      	ldr	r2, [r0, #0]
 80032c8:	6853      	ldr	r3, [r2, #4]
 80032ca:	492c      	ldr	r1, [pc, #176]	; (800337c <UART_AdvFeatureConfig+0xbc>)
 80032cc:	400b      	ands	r3, r1
 80032ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032d6:	079b      	lsls	r3, r3, #30
 80032d8:	d506      	bpl.n	80032e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032da:	6802      	ldr	r2, [r0, #0]
 80032dc:	6853      	ldr	r3, [r2, #4]
 80032de:	4928      	ldr	r1, [pc, #160]	; (8003380 <UART_AdvFeatureConfig+0xc0>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032ea:	075b      	lsls	r3, r3, #29
 80032ec:	d506      	bpl.n	80032fc <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032ee:	6802      	ldr	r2, [r0, #0]
 80032f0:	6853      	ldr	r3, [r2, #4]
 80032f2:	4924      	ldr	r1, [pc, #144]	; (8003384 <UART_AdvFeatureConfig+0xc4>)
 80032f4:	400b      	ands	r3, r1
 80032f6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80032fe:	071b      	lsls	r3, r3, #28
 8003300:	d506      	bpl.n	8003310 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003302:	6802      	ldr	r2, [r0, #0]
 8003304:	6853      	ldr	r3, [r2, #4]
 8003306:	4920      	ldr	r1, [pc, #128]	; (8003388 <UART_AdvFeatureConfig+0xc8>)
 8003308:	400b      	ands	r3, r1
 800330a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800330c:	430b      	orrs	r3, r1
 800330e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003310:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003312:	06db      	lsls	r3, r3, #27
 8003314:	d506      	bpl.n	8003324 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003316:	6802      	ldr	r2, [r0, #0]
 8003318:	6893      	ldr	r3, [r2, #8]
 800331a:	491c      	ldr	r1, [pc, #112]	; (800338c <UART_AdvFeatureConfig+0xcc>)
 800331c:	400b      	ands	r3, r1
 800331e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003320:	430b      	orrs	r3, r1
 8003322:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003324:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003326:	069b      	lsls	r3, r3, #26
 8003328:	d506      	bpl.n	8003338 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800332a:	6802      	ldr	r2, [r0, #0]
 800332c:	6893      	ldr	r3, [r2, #8]
 800332e:	4918      	ldr	r1, [pc, #96]	; (8003390 <UART_AdvFeatureConfig+0xd0>)
 8003330:	400b      	ands	r3, r1
 8003332:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003334:	430b      	orrs	r3, r1
 8003336:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003338:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800333a:	065b      	lsls	r3, r3, #25
 800333c:	d50b      	bpl.n	8003356 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800333e:	6802      	ldr	r2, [r0, #0]
 8003340:	6853      	ldr	r3, [r2, #4]
 8003342:	4914      	ldr	r1, [pc, #80]	; (8003394 <UART_AdvFeatureConfig+0xd4>)
 8003344:	400b      	ands	r3, r1
 8003346:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003348:	430b      	orrs	r3, r1
 800334a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	035b      	lsls	r3, r3, #13
 8003350:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003352:	429a      	cmp	r2, r3
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003356:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	d506      	bpl.n	800336a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800335c:	6802      	ldr	r2, [r0, #0]
 800335e:	6853      	ldr	r3, [r2, #4]
 8003360:	490d      	ldr	r1, [pc, #52]	; (8003398 <UART_AdvFeatureConfig+0xd8>)
 8003362:	400b      	ands	r3, r1
 8003364:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003366:	430b      	orrs	r3, r1
 8003368:	6053      	str	r3, [r2, #4]
}
 800336a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800336c:	6802      	ldr	r2, [r0, #0]
 800336e:	6853      	ldr	r3, [r2, #4]
 8003370:	490a      	ldr	r1, [pc, #40]	; (800339c <UART_AdvFeatureConfig+0xdc>)
 8003372:	400b      	ands	r3, r1
 8003374:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003376:	430b      	orrs	r3, r1
 8003378:	6053      	str	r3, [r2, #4]
 800337a:	e7ec      	b.n	8003356 <UART_AdvFeatureConfig+0x96>
 800337c:	fffdffff 	.word	0xfffdffff
 8003380:	fffeffff 	.word	0xfffeffff
 8003384:	fffbffff 	.word	0xfffbffff
 8003388:	ffff7fff 	.word	0xffff7fff
 800338c:	ffffefff 	.word	0xffffefff
 8003390:	ffffdfff 	.word	0xffffdfff
 8003394:	ffefffff 	.word	0xffefffff
 8003398:	fff7ffff 	.word	0xfff7ffff
 800339c:	ff9fffff 	.word	0xff9fffff

080033a0 <UART_WaitOnFlagUntilTimeout>:
{
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	46ce      	mov	lr, r9
 80033a4:	4647      	mov	r7, r8
 80033a6:	b580      	push	{r7, lr}
 80033a8:	0006      	movs	r6, r0
 80033aa:	000d      	movs	r5, r1
 80033ac:	0017      	movs	r7, r2
 80033ae:	4699      	mov	r9, r3
 80033b0:	9b08      	ldr	r3, [sp, #32]
 80033b2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b4:	6833      	ldr	r3, [r6, #0]
 80033b6:	69dc      	ldr	r4, [r3, #28]
 80033b8:	402c      	ands	r4, r5
 80033ba:	1b64      	subs	r4, r4, r5
 80033bc:	4263      	negs	r3, r4
 80033be:	415c      	adcs	r4, r3
 80033c0:	42bc      	cmp	r4, r7
 80033c2:	d157      	bne.n	8003474 <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	4643      	mov	r3, r8
 80033c6:	3301      	adds	r3, #1
 80033c8:	d0f4      	beq.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ca:	f7fd fe45 	bl	8001058 <HAL_GetTick>
 80033ce:	464b      	mov	r3, r9
 80033d0:	1ac0      	subs	r0, r0, r3
 80033d2:	4540      	cmp	r0, r8
 80033d4:	d82e      	bhi.n	8003434 <UART_WaitOnFlagUntilTimeout+0x94>
 80033d6:	4643      	mov	r3, r8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02b      	beq.n	8003434 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033dc:	6833      	ldr	r3, [r6, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	0752      	lsls	r2, r2, #29
 80033e2:	d5e7      	bpl.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033e4:	69da      	ldr	r2, [r3, #28]
 80033e6:	0512      	lsls	r2, r2, #20
 80033e8:	d5e4      	bpl.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ea:	2280      	movs	r2, #128	; 0x80
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	2201      	movs	r2, #1
 80033f6:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033fa:	6831      	ldr	r1, [r6, #0]
 80033fc:	680b      	ldr	r3, [r1, #0]
 80033fe:	4c20      	ldr	r4, [pc, #128]	; (8003480 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8003400:	4023      	ands	r3, r4
 8003402:	600b      	str	r3, [r1, #0]
 8003404:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003408:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	6831      	ldr	r1, [r6, #0]
 8003412:	688b      	ldr	r3, [r1, #8]
 8003414:	4393      	bics	r3, r2
 8003416:	608b      	str	r3, [r1, #8]
 8003418:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800341c:	2320      	movs	r3, #32
 800341e:	3283      	adds	r2, #131	; 0x83
 8003420:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003422:	3204      	adds	r2, #4
 8003424:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003426:	3204      	adds	r2, #4
 8003428:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	2200      	movs	r2, #0
 800342e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8003430:	2003      	movs	r0, #3
 8003432:	e020      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003434:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	2201      	movs	r2, #1
 800343a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800343e:	6831      	ldr	r1, [r6, #0]
 8003440:	680b      	ldr	r3, [r1, #0]
 8003442:	4c0f      	ldr	r4, [pc, #60]	; (8003480 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8003444:	4023      	ands	r3, r4
 8003446:	600b      	str	r3, [r1, #0]
 8003448:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003454:	6831      	ldr	r1, [r6, #0]
 8003456:	688b      	ldr	r3, [r1, #8]
 8003458:	4393      	bics	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
 800345c:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003460:	2320      	movs	r3, #32
 8003462:	3283      	adds	r2, #131	; 0x83
 8003464:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003466:	3204      	adds	r2, #4
 8003468:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 800346a:	3360      	adds	r3, #96	; 0x60
 800346c:	2200      	movs	r2, #0
 800346e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8003470:	2003      	movs	r0, #3
 8003472:	e000      	b.n	8003476 <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8003474:	2000      	movs	r0, #0
}
 8003476:	bcc0      	pop	{r6, r7}
 8003478:	46b9      	mov	r9, r7
 800347a:	46b0      	mov	r8, r6
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	fffffe5f 	.word	0xfffffe5f

08003484 <HAL_UART_Transmit>:
{
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	46c6      	mov	lr, r8
 8003488:	b500      	push	{lr}
 800348a:	b082      	sub	sp, #8
 800348c:	0004      	movs	r4, r0
 800348e:	000d      	movs	r5, r1
 8003490:	4690      	mov	r8, r2
 8003492:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	2384      	movs	r3, #132	; 0x84
 8003496:	58c3      	ldr	r3, [r0, r3]
 8003498:	2b20      	cmp	r3, #32
 800349a:	d16a      	bne.n	8003572 <HAL_UART_Transmit+0xee>
    if ((pData == NULL) || (Size == 0U))
 800349c:	2900      	cmp	r1, #0
 800349e:	d100      	bne.n	80034a2 <HAL_UART_Transmit+0x1e>
 80034a0:	e06c      	b.n	800357c <HAL_UART_Transmit+0xf8>
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	d100      	bne.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a6:	e06b      	b.n	8003580 <HAL_UART_Transmit+0xfc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	015b      	lsls	r3, r3, #5
 80034ac:	6882      	ldr	r2, [r0, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d01f      	beq.n	80034f2 <HAL_UART_Transmit+0x6e>
    __HAL_LOCK(huart);
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	5ce3      	ldrb	r3, [r4, r3]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d064      	beq.n	8003584 <HAL_UART_Transmit+0x100>
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	2201      	movs	r2, #1
 80034be:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	330c      	adds	r3, #12
 80034c2:	2200      	movs	r2, #0
 80034c4:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c6:	3b08      	subs	r3, #8
 80034c8:	3221      	adds	r2, #33	; 0x21
 80034ca:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80034cc:	f7fd fdc4 	bl	8001058 <HAL_GetTick>
 80034d0:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 80034d2:	2354      	movs	r3, #84	; 0x54
 80034d4:	4642      	mov	r2, r8
 80034d6:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80034d8:	3302      	adds	r3, #2
 80034da:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	015b      	lsls	r3, r3, #5
 80034e0:	68a2      	ldr	r2, [r4, #8]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d00c      	beq.n	8003500 <HAL_UART_Transmit+0x7c>
      pdata16bits = NULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	4698      	mov	r8, r3
    __HAL_UNLOCK(huart);
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	2200      	movs	r2, #0
 80034ee:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80034f0:	e01d      	b.n	800352e <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f2:	6903      	ldr	r3, [r0, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1dc      	bne.n	80034b2 <HAL_UART_Transmit+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 80034f8:	07cb      	lsls	r3, r1, #31
 80034fa:	d5da      	bpl.n	80034b2 <HAL_UART_Transmit+0x2e>
        return  HAL_ERROR;
 80034fc:	2001      	movs	r0, #1
 80034fe:	e039      	b.n	8003574 <HAL_UART_Transmit+0xf0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003500:	6923      	ldr	r3, [r4, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Transmit+0x88>
      pdata16bits = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	4698      	mov	r8, r3
 800350a:	e7ee      	b.n	80034ea <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 800350c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800350e:	2500      	movs	r5, #0
 8003510:	e7eb      	b.n	80034ea <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003512:	4643      	mov	r3, r8
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	0ddb      	lsrs	r3, r3, #23
 800351c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800351e:	2302      	movs	r3, #2
 8003520:	469c      	mov	ip, r3
 8003522:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8003524:	2356      	movs	r3, #86	; 0x56
 8003526:	5ae2      	ldrh	r2, [r4, r3]
 8003528:	3a01      	subs	r2, #1
 800352a:	b292      	uxth	r2, r2
 800352c:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 800352e:	2356      	movs	r3, #86	; 0x56
 8003530:	5ae3      	ldrh	r3, [r4, r3]
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <HAL_UART_Transmit+0xd4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003538:	9600      	str	r6, [sp, #0]
 800353a:	003b      	movs	r3, r7
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	0020      	movs	r0, r4
 8003542:	f7ff ff2d 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 8003546:	2800      	cmp	r0, #0
 8003548:	d11e      	bne.n	8003588 <HAL_UART_Transmit+0x104>
      if (pdata8bits == NULL)
 800354a:	2d00      	cmp	r5, #0
 800354c:	d0e1      	beq.n	8003512 <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354e:	782a      	ldrb	r2, [r5, #0]
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003554:	3501      	adds	r5, #1
 8003556:	e7e5      	b.n	8003524 <HAL_UART_Transmit+0xa0>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003558:	9600      	str	r6, [sp, #0]
 800355a:	003b      	movs	r3, r7
 800355c:	2200      	movs	r2, #0
 800355e:	2140      	movs	r1, #64	; 0x40
 8003560:	0020      	movs	r0, r4
 8003562:	f7ff ff1d 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 8003566:	2800      	cmp	r0, #0
 8003568:	d110      	bne.n	800358c <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_READY;
 800356a:	2384      	movs	r3, #132	; 0x84
 800356c:	2220      	movs	r2, #32
 800356e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003570:	e000      	b.n	8003574 <HAL_UART_Transmit+0xf0>
    return HAL_BUSY;
 8003572:	2002      	movs	r0, #2
}
 8003574:	b002      	add	sp, #8
 8003576:	bc80      	pop	{r7}
 8003578:	46b8      	mov	r8, r7
 800357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	e7f9      	b.n	8003574 <HAL_UART_Transmit+0xf0>
 8003580:	2001      	movs	r0, #1
 8003582:	e7f7      	b.n	8003574 <HAL_UART_Transmit+0xf0>
    __HAL_LOCK(huart);
 8003584:	2002      	movs	r0, #2
 8003586:	e7f5      	b.n	8003574 <HAL_UART_Transmit+0xf0>
        return HAL_TIMEOUT;
 8003588:	2003      	movs	r0, #3
 800358a:	e7f3      	b.n	8003574 <HAL_UART_Transmit+0xf0>
      return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
 800358e:	e7f1      	b.n	8003574 <HAL_UART_Transmit+0xf0>

08003590 <UART_CheckIdleState>:
{
 8003590:	b530      	push	{r4, r5, lr}
 8003592:	b083      	sub	sp, #12
 8003594:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	238c      	movs	r3, #140	; 0x8c
 8003598:	2200      	movs	r2, #0
 800359a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800359c:	f7fd fd5c 	bl	8001058 <HAL_GetTick>
 80035a0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	0713      	lsls	r3, r2, #28
 80035a8:	d40f      	bmi.n	80035ca <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	075b      	lsls	r3, r3, #29
 80035b0:	d418      	bmi.n	80035e4 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80035b2:	2320      	movs	r3, #32
 80035b4:	2284      	movs	r2, #132	; 0x84
 80035b6:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80035b8:	3204      	adds	r2, #4
 80035ba:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035bc:	2300      	movs	r3, #0
 80035be:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80035c0:	3a08      	subs	r2, #8
 80035c2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80035c4:	2000      	movs	r0, #0
}
 80035c6:	b003      	add	sp, #12
 80035c8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ca:	2180      	movs	r1, #128	; 0x80
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <UART_CheckIdleState+0x70>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	0003      	movs	r3, r0
 80035d2:	2200      	movs	r2, #0
 80035d4:	0389      	lsls	r1, r1, #14
 80035d6:	0020      	movs	r0, r4
 80035d8:	f7ff fee2 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d0e4      	beq.n	80035aa <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80035e0:	2003      	movs	r0, #3
 80035e2:	e7f0      	b.n	80035c6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <UART_CheckIdleState+0x70>)
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	002b      	movs	r3, r5
 80035ec:	2200      	movs	r2, #0
 80035ee:	03c9      	lsls	r1, r1, #15
 80035f0:	0020      	movs	r0, r4
 80035f2:	f7ff fed5 	bl	80033a0 <UART_WaitOnFlagUntilTimeout>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d0db      	beq.n	80035b2 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 80035fa:	2003      	movs	r0, #3
 80035fc:	e7e3      	b.n	80035c6 <UART_CheckIdleState+0x36>
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	01ffffff 	.word	0x01ffffff

08003604 <HAL_UART_Init>:
{
 8003604:	b510      	push	{r4, lr}
 8003606:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003608:	d030      	beq.n	800366c <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800360a:	2384      	movs	r3, #132	; 0x84
 800360c:	58c3      	ldr	r3, [r0, r3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d022      	beq.n	8003658 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003612:	2384      	movs	r3, #132	; 0x84
 8003614:	2224      	movs	r2, #36	; 0x24
 8003616:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003618:	6822      	ldr	r2, [r4, #0]
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	438b      	bics	r3, r1
 8003620:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003622:	0020      	movs	r0, r4
 8003624:	f7ff fd68 	bl	80030f8 <UART_SetConfig>
 8003628:	2801      	cmp	r0, #1
 800362a:	d014      	beq.n	8003656 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800362c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	6853      	ldr	r3, [r2, #4]
 8003636:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_UART_Init+0x6c>)
 8003638:	400b      	ands	r3, r1
 800363a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363c:	6822      	ldr	r2, [r4, #0]
 800363e:	6893      	ldr	r3, [r2, #8]
 8003640:	212a      	movs	r1, #42	; 0x2a
 8003642:	438b      	bics	r3, r1
 8003644:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	3929      	subs	r1, #41	; 0x29
 800364c:	430b      	orrs	r3, r1
 800364e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003650:	0020      	movs	r0, r4
 8003652:	f7ff ff9d 	bl	8003590 <UART_CheckIdleState>
}
 8003656:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003658:	3380      	adds	r3, #128	; 0x80
 800365a:	2200      	movs	r2, #0
 800365c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800365e:	f7fd fc0f 	bl	8000e80 <HAL_UART_MspInit>
 8003662:	e7d6      	b.n	8003612 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003664:	0020      	movs	r0, r4
 8003666:	f7ff fe2b 	bl	80032c0 <UART_AdvFeatureConfig>
 800366a:	e7e2      	b.n	8003632 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
 800366e:	e7f2      	b.n	8003656 <HAL_UART_Init+0x52>
 8003670:	ffffb7ff 	.word	0xffffb7ff

08003674 <UART_Start_Receive_IT>:
{
 8003674:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8003676:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003678:	235c      	movs	r3, #92	; 0x5c
 800367a:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 800367c:	3302      	adds	r3, #2
 800367e:	52c2      	strh	r2, [r0, r3]
  huart->RxISR       = NULL;
 8003680:	2300      	movs	r3, #0
 8003682:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8003684:	6883      	ldr	r3, [r0, #8]
 8003686:	2180      	movs	r1, #128	; 0x80
 8003688:	0149      	lsls	r1, r1, #5
 800368a:	428b      	cmp	r3, r1
 800368c:	d008      	beq.n	80036a0 <UART_Start_Receive_IT+0x2c>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d115      	bne.n	80036be <UART_Start_Receive_IT+0x4a>
 8003692:	6903      	ldr	r3, [r0, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10e      	bne.n	80036b6 <UART_Start_Receive_IT+0x42>
 8003698:	3360      	adds	r3, #96	; 0x60
 800369a:	21ff      	movs	r1, #255	; 0xff
 800369c:	52c1      	strh	r1, [r0, r3]
 800369e:	e015      	b.n	80036cc <UART_Start_Receive_IT+0x58>
 80036a0:	6903      	ldr	r3, [r0, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <UART_Start_Receive_IT+0x3a>
 80036a6:	3360      	adds	r3, #96	; 0x60
 80036a8:	4949      	ldr	r1, [pc, #292]	; (80037d0 <UART_Start_Receive_IT+0x15c>)
 80036aa:	52c1      	strh	r1, [r0, r3]
 80036ac:	e00e      	b.n	80036cc <UART_Start_Receive_IT+0x58>
 80036ae:	2360      	movs	r3, #96	; 0x60
 80036b0:	21ff      	movs	r1, #255	; 0xff
 80036b2:	52c1      	strh	r1, [r0, r3]
 80036b4:	e00a      	b.n	80036cc <UART_Start_Receive_IT+0x58>
 80036b6:	2360      	movs	r3, #96	; 0x60
 80036b8:	217f      	movs	r1, #127	; 0x7f
 80036ba:	52c1      	strh	r1, [r0, r3]
 80036bc:	e006      	b.n	80036cc <UART_Start_Receive_IT+0x58>
 80036be:	2180      	movs	r1, #128	; 0x80
 80036c0:	0549      	lsls	r1, r1, #21
 80036c2:	428b      	cmp	r3, r1
 80036c4:	d034      	beq.n	8003730 <UART_Start_Receive_IT+0xbc>
 80036c6:	2360      	movs	r3, #96	; 0x60
 80036c8:	2100      	movs	r1, #0
 80036ca:	52c1      	strh	r1, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	238c      	movs	r3, #140	; 0x8c
 80036ce:	2100      	movs	r1, #0
 80036d0:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d2:	3b04      	subs	r3, #4
 80036d4:	3122      	adds	r1, #34	; 0x22
 80036d6:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	2401      	movs	r4, #1
 80036de:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	6801      	ldr	r1, [r0, #0]
 80036e4:	688b      	ldr	r3, [r1, #8]
 80036e6:	4323      	orrs	r3, r4
 80036e8:	608b      	str	r3, [r1, #8]
 80036ea:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	059b      	lsls	r3, r3, #22
 80036f2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80036f4:	4299      	cmp	r1, r3
 80036f6:	d026      	beq.n	8003746 <UART_Start_Receive_IT+0xd2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	6882      	ldr	r2, [r0, #8]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d052      	beq.n	80037a8 <UART_Start_Receive_IT+0x134>
      huart->RxISR = UART_RxISR_8BIT;
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <UART_Start_Receive_IT+0x160>)
 8003704:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	2200      	movs	r2, #0
 800370a:	54c2      	strb	r2, [r0, r3]
    if (huart->Init.Parity != UART_PARITY_NONE)
 800370c:	6903      	ldr	r3, [r0, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d050      	beq.n	80037b4 <UART_Start_Receive_IT+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003712:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	2301      	movs	r3, #1
 8003718:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800371c:	6802      	ldr	r2, [r0, #0]
 800371e:	6810      	ldr	r0, [r2, #0]
 8003720:	3320      	adds	r3, #32
 8003722:	33ff      	adds	r3, #255	; 0xff
 8003724:	4303      	orrs	r3, r0
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	f381 8810 	msr	PRIMASK, r1
}
 800372c:	2000      	movs	r0, #0
 800372e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003730:	6903      	ldr	r3, [r0, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <UART_Start_Receive_IT+0xca>
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	217f      	movs	r1, #127	; 0x7f
 800373a:	52c1      	strh	r1, [r0, r3]
 800373c:	e7c6      	b.n	80036cc <UART_Start_Receive_IT+0x58>
 800373e:	2360      	movs	r3, #96	; 0x60
 8003740:	213f      	movs	r1, #63	; 0x3f
 8003742:	52c1      	strh	r1, [r0, r3]
 8003744:	e7c2      	b.n	80036cc <UART_Start_Receive_IT+0x58>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003746:	2368      	movs	r3, #104	; 0x68
 8003748:	5ac3      	ldrh	r3, [r0, r3]
 800374a:	4293      	cmp	r3, r2
 800374c:	d8d4      	bhi.n	80036f8 <UART_Start_Receive_IT+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	015b      	lsls	r3, r3, #5
 8003752:	6882      	ldr	r2, [r0, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d021      	beq.n	800379c <UART_Start_Receive_IT+0x128>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <UART_Start_Receive_IT+0x164>)
 800375a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	2200      	movs	r2, #0
 8003760:	54c2      	strb	r2, [r0, r3]
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003762:	6903      	ldr	r3, [r0, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <UART_Start_Receive_IT+0x10c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003768:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	2301      	movs	r3, #1
 800376e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003772:	6802      	ldr	r2, [r0, #0]
 8003774:	6814      	ldr	r4, [r2, #0]
 8003776:	33ff      	adds	r3, #255	; 0xff
 8003778:	4323      	orrs	r3, r4
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	2301      	movs	r3, #1
 8003786:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800378a:	6802      	ldr	r2, [r0, #0]
 800378c:	6890      	ldr	r0, [r2, #8]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	055b      	lsls	r3, r3, #21
 8003792:	4303      	orrs	r3, r0
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	f381 8810 	msr	PRIMASK, r1
}
 800379a:	e7c7      	b.n	800372c <UART_Start_Receive_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	6903      	ldr	r3, [r0, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1da      	bne.n	8003758 <UART_Start_Receive_IT+0xe4>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <UART_Start_Receive_IT+0x168>)
 80037a4:	6703      	str	r3, [r0, #112]	; 0x70
 80037a6:	e7d9      	b.n	800375c <UART_Start_Receive_IT+0xe8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	6903      	ldr	r3, [r0, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1a9      	bne.n	8003702 <UART_Start_Receive_IT+0x8e>
      huart->RxISR = UART_RxISR_16BIT;
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <UART_Start_Receive_IT+0x16c>)
 80037b0:	6703      	str	r3, [r0, #112]	; 0x70
 80037b2:	e7a8      	b.n	8003706 <UART_Start_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b8:	2301      	movs	r3, #1
 80037ba:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80037be:	6802      	ldr	r2, [r0, #0]
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	2020      	movs	r0, #32
 80037c4:	4303      	orrs	r3, r0
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	f381 8810 	msr	PRIMASK, r1
}
 80037cc:	e7ae      	b.n	800372c <UART_Start_Receive_IT+0xb8>
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	000001ff 	.word	0x000001ff
 80037d4:	08002c3d 	.word	0x08002c3d
 80037d8:	08002da5 	.word	0x08002da5
 80037dc:	08002f4d 	.word	0x08002f4d
 80037e0:	08002cf1 	.word	0x08002cf1

080037e4 <HAL_UART_Receive_IT>:
{
 80037e4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e6:	2388      	movs	r3, #136	; 0x88
 80037e8:	58c3      	ldr	r3, [r0, r3]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d12c      	bne.n	8003848 <HAL_UART_Receive_IT+0x64>
    if ((pData == NULL) || (Size == 0U))
 80037ee:	2900      	cmp	r1, #0
 80037f0:	d02c      	beq.n	800384c <HAL_UART_Receive_IT+0x68>
 80037f2:	2a00      	cmp	r2, #0
 80037f4:	d02c      	beq.n	8003850 <HAL_UART_Receive_IT+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	6884      	ldr	r4, [r0, #8]
 80037fc:	429c      	cmp	r4, r3
 80037fe:	d01c      	beq.n	800383a <HAL_UART_Receive_IT+0x56>
    __HAL_LOCK(huart);
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	5cc3      	ldrb	r3, [r0, r3]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d025      	beq.n	8003854 <HAL_UART_Receive_IT+0x70>
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	2401      	movs	r4, #1
 800380c:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	2300      	movs	r3, #0
 8003810:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	d50c      	bpl.n	8003834 <HAL_UART_Receive_IT+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381a:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381e:	2301      	movs	r3, #1
 8003820:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003824:	6804      	ldr	r4, [r0, #0]
 8003826:	6825      	ldr	r5, [r4, #0]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	04db      	lsls	r3, r3, #19
 800382c:	432b      	orrs	r3, r5
 800382e:	6023      	str	r3, [r4, #0]
 8003830:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_IT(huart, pData, Size));
 8003834:	f7ff ff1e 	bl	8003674 <UART_Start_Receive_IT>
 8003838:	e007      	b.n	800384a <HAL_UART_Receive_IT+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383a:	6903      	ldr	r3, [r0, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1df      	bne.n	8003800 <HAL_UART_Receive_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003840:	07cb      	lsls	r3, r1, #31
 8003842:	d5dd      	bpl.n	8003800 <HAL_UART_Receive_IT+0x1c>
        return  HAL_ERROR;
 8003844:	2001      	movs	r0, #1
 8003846:	e000      	b.n	800384a <HAL_UART_Receive_IT+0x66>
    return HAL_BUSY;
 8003848:	2002      	movs	r0, #2
}
 800384a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800384c:	2001      	movs	r0, #1
 800384e:	e7fc      	b.n	800384a <HAL_UART_Receive_IT+0x66>
 8003850:	2001      	movs	r0, #1
 8003852:	e7fa      	b.n	800384a <HAL_UART_Receive_IT+0x66>
    __HAL_LOCK(huart);
 8003854:	2002      	movs	r0, #2
 8003856:	e7f8      	b.n	800384a <HAL_UART_Receive_IT+0x66>

08003858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800385c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800385e:	2b00      	cmp	r3, #0
 8003860:	d105      	bne.n	800386e <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8003862:	3301      	adds	r3, #1
 8003864:	226a      	movs	r2, #106	; 0x6a
 8003866:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8003868:	3a02      	subs	r2, #2
 800386a:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800386e:	6802      	ldr	r2, [r0, #0]
 8003870:	6895      	ldr	r5, [r2, #8]
 8003872:	0e6d      	lsrs	r5, r5, #25
 8003874:	2307      	movs	r3, #7
 8003876:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	0f52      	lsrs	r2, r2, #29
 800387c:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800387e:	4f08      	ldr	r7, [pc, #32]	; (80038a0 <UARTEx_SetNbDataToProcess+0x48>)
 8003880:	5cf8      	ldrb	r0, [r7, r3]
 8003882:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003884:	4e07      	ldr	r6, [pc, #28]	; (80038a4 <UARTEx_SetNbDataToProcess+0x4c>)
 8003886:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003888:	f7fc fcd2 	bl	8000230 <__divsi3>
 800388c:	236a      	movs	r3, #106	; 0x6a
 800388e:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003890:	5d78      	ldrb	r0, [r7, r5]
 8003892:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003894:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003896:	f7fc fccb 	bl	8000230 <__divsi3>
 800389a:	2368      	movs	r3, #104	; 0x68
 800389c:	52e0      	strh	r0, [r4, r3]
}
 800389e:	e7e5      	b.n	800386c <UARTEx_SetNbDataToProcess+0x14>
 80038a0:	08004458 	.word	0x08004458
 80038a4:	08004450 	.word	0x08004450

080038a8 <HAL_UARTEx_WakeupCallback>:
}
 80038a8:	4770      	bx	lr

080038aa <HAL_UARTEx_RxFifoFullCallback>:
}
 80038aa:	4770      	bx	lr

080038ac <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_UARTEx_DisableFifoMode>:
{
 80038b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	5cc3      	ldrb	r3, [r0, r3]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d015      	beq.n	80038e6 <HAL_UARTEx_DisableFifoMode+0x36>
 80038ba:	2480      	movs	r4, #128	; 0x80
 80038bc:	2601      	movs	r6, #1
 80038be:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 80038c0:	2584      	movs	r5, #132	; 0x84
 80038c2:	2324      	movs	r3, #36	; 0x24
 80038c4:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038c6:	6802      	ldr	r2, [r0, #0]
 80038c8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80038ca:	6811      	ldr	r1, [r2, #0]
 80038cc:	43b1      	bics	r1, r6
 80038ce:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038d0:	4a06      	ldr	r2, [pc, #24]	; (80038ec <HAL_UARTEx_DisableFifoMode+0x3c>)
 80038d2:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038d4:	2200      	movs	r2, #0
 80038d6:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	2320      	movs	r3, #32
 80038de:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 80038e0:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 80038e2:	2000      	movs	r0, #0
}
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80038e6:	2002      	movs	r0, #2
 80038e8:	e7fc      	b.n	80038e4 <HAL_UARTEx_DisableFifoMode+0x34>
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	dfffffff 	.word	0xdfffffff

080038f0 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	0004      	movs	r4, r0
 80038f4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	5cc3      	ldrb	r3, [r0, r3]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d01b      	beq.n	8003936 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80038fe:	2580      	movs	r5, #128	; 0x80
 8003900:	2001      	movs	r0, #1
 8003902:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003904:	2684      	movs	r6, #132	; 0x84
 8003906:	2324      	movs	r3, #36	; 0x24
 8003908:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	4381      	bics	r1, r0
 8003912:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003914:	6820      	ldr	r0, [r4, #0]
 8003916:	6883      	ldr	r3, [r0, #8]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	08d9      	lsrs	r1, r3, #3
 800391c:	4311      	orrs	r1, r2
 800391e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003920:	0020      	movs	r0, r4
 8003922:	f7ff ff99 	bl	8003858 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800392a:	2320      	movs	r3, #32
 800392c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800392e:	2300      	movs	r3, #0
 8003930:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003932:	2000      	movs	r0, #0
}
 8003934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003936:	2002      	movs	r0, #2
 8003938:	e7fc      	b.n	8003934 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800393c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	0004      	movs	r4, r0
 8003940:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	5c82      	ldrb	r2, [r0, r2]
 8003946:	2a01      	cmp	r2, #1
 8003948:	d01b      	beq.n	8003982 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800394a:	2580      	movs	r5, #128	; 0x80
 800394c:	2001      	movs	r0, #1
 800394e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	2684      	movs	r6, #132	; 0x84
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003956:	6822      	ldr	r2, [r4, #0]
 8003958:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800395a:	6811      	ldr	r1, [r2, #0]
 800395c:	4381      	bics	r1, r0
 800395e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	6891      	ldr	r1, [r2, #8]
 8003964:	4808      	ldr	r0, [pc, #32]	; (8003988 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003966:	4001      	ands	r1, r0
 8003968:	4319      	orrs	r1, r3
 800396a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800396c:	0020      	movs	r0, r4
 800396e:	f7ff ff73 	bl	8003858 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003976:	2320      	movs	r3, #32
 8003978:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800397a:	2300      	movs	r3, #0
 800397c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800397e:	2000      	movs	r0, #0
}
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003982:	2002      	movs	r0, #2
 8003984:	e7fc      	b.n	8003980 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	f1ffffff 	.word	0xf1ffffff

0800398c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800398c:	4b01      	ldr	r3, [pc, #4]	; (8003994 <LL_SetSystemCoreClock+0x8>)
 800398e:	6018      	str	r0, [r3, #0]
}
 8003990:	4770      	bx	lr
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	20000004 	.word	0x20000004

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000010 	.word	0x20000010

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	2600      	movs	r6, #0
 80039a8:	4d0c      	ldr	r5, [pc, #48]	; (80039dc <__libc_init_array+0x38>)
 80039aa:	4c0d      	ldr	r4, [pc, #52]	; (80039e0 <__libc_init_array+0x3c>)
 80039ac:	1b64      	subs	r4, r4, r5
 80039ae:	10a4      	asrs	r4, r4, #2
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	2600      	movs	r6, #0
 80039b6:	f000 fca3 	bl	8004300 <_init>
 80039ba:	4d0a      	ldr	r5, [pc, #40]	; (80039e4 <__libc_init_array+0x40>)
 80039bc:	4c0a      	ldr	r4, [pc, #40]	; (80039e8 <__libc_init_array+0x44>)
 80039be:	1b64      	subs	r4, r4, r5
 80039c0:	10a4      	asrs	r4, r4, #2
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	00b3      	lsls	r3, r6, #2
 80039ca:	58eb      	ldr	r3, [r5, r3]
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	00b3      	lsls	r3, r6, #2
 80039d4:	58eb      	ldr	r3, [r5, r3]
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08004494 	.word	0x08004494
 80039e0:	08004494 	.word	0x08004494
 80039e4:	08004494 	.word	0x08004494
 80039e8:	08004498 	.word	0x08004498

080039ec <memset>:
 80039ec:	0003      	movs	r3, r0
 80039ee:	1882      	adds	r2, r0, r2
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <memset+0xa>
 80039f4:	4770      	bx	lr
 80039f6:	7019      	strb	r1, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	e7f9      	b.n	80039f0 <memset+0x4>

080039fc <_vsniprintf_r>:
 80039fc:	b530      	push	{r4, r5, lr}
 80039fe:	0014      	movs	r4, r2
 8003a00:	0005      	movs	r5, r0
 8003a02:	001a      	movs	r2, r3
 8003a04:	b09b      	sub	sp, #108	; 0x6c
 8003a06:	2c00      	cmp	r4, #0
 8003a08:	da05      	bge.n	8003a16 <_vsniprintf_r+0x1a>
 8003a0a:	238b      	movs	r3, #139	; 0x8b
 8003a0c:	6003      	str	r3, [r0, #0]
 8003a0e:	2001      	movs	r0, #1
 8003a10:	4240      	negs	r0, r0
 8003a12:	b01b      	add	sp, #108	; 0x6c
 8003a14:	bd30      	pop	{r4, r5, pc}
 8003a16:	2382      	movs	r3, #130	; 0x82
 8003a18:	4668      	mov	r0, sp
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	8183      	strh	r3, [r0, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9100      	str	r1, [sp, #0]
 8003a22:	9104      	str	r1, [sp, #16]
 8003a24:	429c      	cmp	r4, r3
 8003a26:	d000      	beq.n	8003a2a <_vsniprintf_r+0x2e>
 8003a28:	1e63      	subs	r3, r4, #1
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	9305      	str	r3, [sp, #20]
 8003a2e:	2301      	movs	r3, #1
 8003a30:	4669      	mov	r1, sp
 8003a32:	425b      	negs	r3, r3
 8003a34:	81cb      	strh	r3, [r1, #14]
 8003a36:	0028      	movs	r0, r5
 8003a38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a3a:	f000 f879 	bl	8003b30 <_svfiprintf_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	da01      	bge.n	8003a46 <_vsniprintf_r+0x4a>
 8003a42:	238b      	movs	r3, #139	; 0x8b
 8003a44:	602b      	str	r3, [r5, #0]
 8003a46:	2c00      	cmp	r4, #0
 8003a48:	d0e3      	beq.n	8003a12 <_vsniprintf_r+0x16>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9a00      	ldr	r2, [sp, #0]
 8003a4e:	7013      	strb	r3, [r2, #0]
 8003a50:	e7df      	b.n	8003a12 <_vsniprintf_r+0x16>
	...

08003a54 <vsniprintf>:
 8003a54:	b507      	push	{r0, r1, r2, lr}
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	0013      	movs	r3, r2
 8003a5a:	000a      	movs	r2, r1
 8003a5c:	0001      	movs	r1, r0
 8003a5e:	4802      	ldr	r0, [pc, #8]	; (8003a68 <vsniprintf+0x14>)
 8003a60:	6800      	ldr	r0, [r0, #0]
 8003a62:	f7ff ffcb 	bl	80039fc <_vsniprintf_r>
 8003a66:	bd0e      	pop	{r1, r2, r3, pc}
 8003a68:	20000010 	.word	0x20000010

08003a6c <__ssputs_r>:
 8003a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6e:	688e      	ldr	r6, [r1, #8]
 8003a70:	b085      	sub	sp, #20
 8003a72:	0007      	movs	r7, r0
 8003a74:	000c      	movs	r4, r1
 8003a76:	9203      	str	r2, [sp, #12]
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	429e      	cmp	r6, r3
 8003a7c:	d83c      	bhi.n	8003af8 <__ssputs_r+0x8c>
 8003a7e:	2390      	movs	r3, #144	; 0x90
 8003a80:	898a      	ldrh	r2, [r1, #12]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	421a      	tst	r2, r3
 8003a86:	d034      	beq.n	8003af2 <__ssputs_r+0x86>
 8003a88:	6909      	ldr	r1, [r1, #16]
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	6960      	ldr	r0, [r4, #20]
 8003a8e:	1a5b      	subs	r3, r3, r1
 8003a90:	9302      	str	r3, [sp, #8]
 8003a92:	2303      	movs	r3, #3
 8003a94:	4343      	muls	r3, r0
 8003a96:	0fdd      	lsrs	r5, r3, #31
 8003a98:	18ed      	adds	r5, r5, r3
 8003a9a:	9b01      	ldr	r3, [sp, #4]
 8003a9c:	9802      	ldr	r0, [sp, #8]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	181b      	adds	r3, r3, r0
 8003aa2:	106d      	asrs	r5, r5, #1
 8003aa4:	42ab      	cmp	r3, r5
 8003aa6:	d900      	bls.n	8003aaa <__ssputs_r+0x3e>
 8003aa8:	001d      	movs	r5, r3
 8003aaa:	0553      	lsls	r3, r2, #21
 8003aac:	d532      	bpl.n	8003b14 <__ssputs_r+0xa8>
 8003aae:	0029      	movs	r1, r5
 8003ab0:	0038      	movs	r0, r7
 8003ab2:	f000 fb53 	bl	800415c <_malloc_r>
 8003ab6:	1e06      	subs	r6, r0, #0
 8003ab8:	d109      	bne.n	8003ace <__ssputs_r+0x62>
 8003aba:	230c      	movs	r3, #12
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	2340      	movs	r3, #64	; 0x40
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	89a2      	ldrh	r2, [r4, #12]
 8003ac4:	4240      	negs	r0, r0
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	b005      	add	sp, #20
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ace:	9a02      	ldr	r2, [sp, #8]
 8003ad0:	6921      	ldr	r1, [r4, #16]
 8003ad2:	f000 faba 	bl	800404a <memcpy>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <__ssputs_r+0xc0>)
 8003ada:	401a      	ands	r2, r3
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	81a3      	strh	r3, [r4, #12]
 8003ae2:	9b02      	ldr	r3, [sp, #8]
 8003ae4:	6126      	str	r6, [r4, #16]
 8003ae6:	18f6      	adds	r6, r6, r3
 8003ae8:	6026      	str	r6, [r4, #0]
 8003aea:	6165      	str	r5, [r4, #20]
 8003aec:	9e01      	ldr	r6, [sp, #4]
 8003aee:	1aed      	subs	r5, r5, r3
 8003af0:	60a5      	str	r5, [r4, #8]
 8003af2:	9b01      	ldr	r3, [sp, #4]
 8003af4:	429e      	cmp	r6, r3
 8003af6:	d900      	bls.n	8003afa <__ssputs_r+0x8e>
 8003af8:	9e01      	ldr	r6, [sp, #4]
 8003afa:	0032      	movs	r2, r6
 8003afc:	9903      	ldr	r1, [sp, #12]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	f000 faac 	bl	800405c <memmove>
 8003b04:	68a3      	ldr	r3, [r4, #8]
 8003b06:	2000      	movs	r0, #0
 8003b08:	1b9b      	subs	r3, r3, r6
 8003b0a:	60a3      	str	r3, [r4, #8]
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	199e      	adds	r6, r3, r6
 8003b10:	6026      	str	r6, [r4, #0]
 8003b12:	e7da      	b.n	8003aca <__ssputs_r+0x5e>
 8003b14:	002a      	movs	r2, r5
 8003b16:	0038      	movs	r0, r7
 8003b18:	f000 fb96 	bl	8004248 <_realloc_r>
 8003b1c:	1e06      	subs	r6, r0, #0
 8003b1e:	d1e0      	bne.n	8003ae2 <__ssputs_r+0x76>
 8003b20:	0038      	movs	r0, r7
 8003b22:	6921      	ldr	r1, [r4, #16]
 8003b24:	f000 faae 	bl	8004084 <_free_r>
 8003b28:	e7c7      	b.n	8003aba <__ssputs_r+0x4e>
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	fffffb7f 	.word	0xfffffb7f

08003b30 <_svfiprintf_r>:
 8003b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b32:	b0a1      	sub	sp, #132	; 0x84
 8003b34:	9003      	str	r0, [sp, #12]
 8003b36:	001d      	movs	r5, r3
 8003b38:	898b      	ldrh	r3, [r1, #12]
 8003b3a:	000f      	movs	r7, r1
 8003b3c:	0016      	movs	r6, r2
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	d511      	bpl.n	8003b66 <_svfiprintf_r+0x36>
 8003b42:	690b      	ldr	r3, [r1, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10e      	bne.n	8003b66 <_svfiprintf_r+0x36>
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	f000 fb07 	bl	800415c <_malloc_r>
 8003b4e:	6038      	str	r0, [r7, #0]
 8003b50:	6138      	str	r0, [r7, #16]
 8003b52:	2800      	cmp	r0, #0
 8003b54:	d105      	bne.n	8003b62 <_svfiprintf_r+0x32>
 8003b56:	230c      	movs	r3, #12
 8003b58:	9a03      	ldr	r2, [sp, #12]
 8003b5a:	3801      	subs	r0, #1
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	b021      	add	sp, #132	; 0x84
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	2340      	movs	r3, #64	; 0x40
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	2300      	movs	r3, #0
 8003b68:	ac08      	add	r4, sp, #32
 8003b6a:	6163      	str	r3, [r4, #20]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	7663      	strb	r3, [r4, #25]
 8003b70:	3310      	adds	r3, #16
 8003b72:	76a3      	strb	r3, [r4, #26]
 8003b74:	9507      	str	r5, [sp, #28]
 8003b76:	0035      	movs	r5, r6
 8003b78:	782b      	ldrb	r3, [r5, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <_svfiprintf_r+0x52>
 8003b7e:	2b25      	cmp	r3, #37	; 0x25
 8003b80:	d147      	bne.n	8003c12 <_svfiprintf_r+0xe2>
 8003b82:	1bab      	subs	r3, r5, r6
 8003b84:	9305      	str	r3, [sp, #20]
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d00c      	beq.n	8003ba4 <_svfiprintf_r+0x74>
 8003b8a:	0032      	movs	r2, r6
 8003b8c:	0039      	movs	r1, r7
 8003b8e:	9803      	ldr	r0, [sp, #12]
 8003b90:	f7ff ff6c 	bl	8003a6c <__ssputs_r>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d100      	bne.n	8003b9a <_svfiprintf_r+0x6a>
 8003b98:	e0ae      	b.n	8003cf8 <_svfiprintf_r+0x1c8>
 8003b9a:	6962      	ldr	r2, [r4, #20]
 8003b9c:	9b05      	ldr	r3, [sp, #20]
 8003b9e:	4694      	mov	ip, r2
 8003ba0:	4463      	add	r3, ip
 8003ba2:	6163      	str	r3, [r4, #20]
 8003ba4:	782b      	ldrb	r3, [r5, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d100      	bne.n	8003bac <_svfiprintf_r+0x7c>
 8003baa:	e0a5      	b.n	8003cf8 <_svfiprintf_r+0x1c8>
 8003bac:	2201      	movs	r2, #1
 8003bae:	2300      	movs	r3, #0
 8003bb0:	4252      	negs	r2, r2
 8003bb2:	6062      	str	r2, [r4, #4]
 8003bb4:	a904      	add	r1, sp, #16
 8003bb6:	3254      	adds	r2, #84	; 0x54
 8003bb8:	1852      	adds	r2, r2, r1
 8003bba:	1c6e      	adds	r6, r5, #1
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	60e3      	str	r3, [r4, #12]
 8003bc0:	60a3      	str	r3, [r4, #8]
 8003bc2:	7013      	strb	r3, [r2, #0]
 8003bc4:	65a3      	str	r3, [r4, #88]	; 0x58
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	7831      	ldrb	r1, [r6, #0]
 8003bca:	4854      	ldr	r0, [pc, #336]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003bcc:	f000 fa32 	bl	8004034 <memchr>
 8003bd0:	1c75      	adds	r5, r6, #1
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d11f      	bne.n	8003c16 <_svfiprintf_r+0xe6>
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	06d3      	lsls	r3, r2, #27
 8003bda:	d504      	bpl.n	8003be6 <_svfiprintf_r+0xb6>
 8003bdc:	2353      	movs	r3, #83	; 0x53
 8003bde:	a904      	add	r1, sp, #16
 8003be0:	185b      	adds	r3, r3, r1
 8003be2:	2120      	movs	r1, #32
 8003be4:	7019      	strb	r1, [r3, #0]
 8003be6:	0713      	lsls	r3, r2, #28
 8003be8:	d504      	bpl.n	8003bf4 <_svfiprintf_r+0xc4>
 8003bea:	2353      	movs	r3, #83	; 0x53
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	185b      	adds	r3, r3, r1
 8003bf0:	212b      	movs	r1, #43	; 0x2b
 8003bf2:	7019      	strb	r1, [r3, #0]
 8003bf4:	7833      	ldrb	r3, [r6, #0]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	d016      	beq.n	8003c28 <_svfiprintf_r+0xf8>
 8003bfa:	0035      	movs	r5, r6
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	200a      	movs	r0, #10
 8003c00:	68e3      	ldr	r3, [r4, #12]
 8003c02:	782a      	ldrb	r2, [r5, #0]
 8003c04:	1c6e      	adds	r6, r5, #1
 8003c06:	3a30      	subs	r2, #48	; 0x30
 8003c08:	2a09      	cmp	r2, #9
 8003c0a:	d94e      	bls.n	8003caa <_svfiprintf_r+0x17a>
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	d111      	bne.n	8003c34 <_svfiprintf_r+0x104>
 8003c10:	e017      	b.n	8003c42 <_svfiprintf_r+0x112>
 8003c12:	3501      	adds	r5, #1
 8003c14:	e7b0      	b.n	8003b78 <_svfiprintf_r+0x48>
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	1ac0      	subs	r0, r0, r3
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4083      	lsls	r3, r0
 8003c20:	4313      	orrs	r3, r2
 8003c22:	002e      	movs	r6, r5
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	e7ce      	b.n	8003bc6 <_svfiprintf_r+0x96>
 8003c28:	9b07      	ldr	r3, [sp, #28]
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9107      	str	r1, [sp, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db01      	blt.n	8003c38 <_svfiprintf_r+0x108>
 8003c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c36:	e004      	b.n	8003c42 <_svfiprintf_r+0x112>
 8003c38:	425b      	negs	r3, r3
 8003c3a:	60e3      	str	r3, [r4, #12]
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	782b      	ldrb	r3, [r5, #0]
 8003c44:	2b2e      	cmp	r3, #46	; 0x2e
 8003c46:	d10a      	bne.n	8003c5e <_svfiprintf_r+0x12e>
 8003c48:	786b      	ldrb	r3, [r5, #1]
 8003c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4c:	d135      	bne.n	8003cba <_svfiprintf_r+0x18a>
 8003c4e:	9b07      	ldr	r3, [sp, #28]
 8003c50:	3502      	adds	r5, #2
 8003c52:	1d1a      	adds	r2, r3, #4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	9207      	str	r2, [sp, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	db2b      	blt.n	8003cb4 <_svfiprintf_r+0x184>
 8003c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c5e:	4e30      	ldr	r6, [pc, #192]	; (8003d20 <_svfiprintf_r+0x1f0>)
 8003c60:	2203      	movs	r2, #3
 8003c62:	0030      	movs	r0, r6
 8003c64:	7829      	ldrb	r1, [r5, #0]
 8003c66:	f000 f9e5 	bl	8004034 <memchr>
 8003c6a:	2800      	cmp	r0, #0
 8003c6c:	d006      	beq.n	8003c7c <_svfiprintf_r+0x14c>
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	1b80      	subs	r0, r0, r6
 8003c72:	4083      	lsls	r3, r0
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	3501      	adds	r5, #1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	6023      	str	r3, [r4, #0]
 8003c7c:	7829      	ldrb	r1, [r5, #0]
 8003c7e:	2206      	movs	r2, #6
 8003c80:	4828      	ldr	r0, [pc, #160]	; (8003d24 <_svfiprintf_r+0x1f4>)
 8003c82:	1c6e      	adds	r6, r5, #1
 8003c84:	7621      	strb	r1, [r4, #24]
 8003c86:	f000 f9d5 	bl	8004034 <memchr>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d03c      	beq.n	8003d08 <_svfiprintf_r+0x1d8>
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <_svfiprintf_r+0x1f8>)
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d125      	bne.n	8003ce0 <_svfiprintf_r+0x1b0>
 8003c94:	2207      	movs	r2, #7
 8003c96:	9b07      	ldr	r3, [sp, #28]
 8003c98:	3307      	adds	r3, #7
 8003c9a:	4393      	bics	r3, r2
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	9307      	str	r3, [sp, #28]
 8003ca0:	6963      	ldr	r3, [r4, #20]
 8003ca2:	9a04      	ldr	r2, [sp, #16]
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	6163      	str	r3, [r4, #20]
 8003ca8:	e765      	b.n	8003b76 <_svfiprintf_r+0x46>
 8003caa:	4343      	muls	r3, r0
 8003cac:	0035      	movs	r5, r6
 8003cae:	2101      	movs	r1, #1
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	e7a6      	b.n	8003c02 <_svfiprintf_r+0xd2>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	425b      	negs	r3, r3
 8003cb8:	e7d0      	b.n	8003c5c <_svfiprintf_r+0x12c>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	6063      	str	r3, [r4, #4]
 8003cc4:	7829      	ldrb	r1, [r5, #0]
 8003cc6:	1c6e      	adds	r6, r5, #1
 8003cc8:	3930      	subs	r1, #48	; 0x30
 8003cca:	2909      	cmp	r1, #9
 8003ccc:	d903      	bls.n	8003cd6 <_svfiprintf_r+0x1a6>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0c5      	beq.n	8003c5e <_svfiprintf_r+0x12e>
 8003cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd4:	e7c3      	b.n	8003c5e <_svfiprintf_r+0x12e>
 8003cd6:	4342      	muls	r2, r0
 8003cd8:	0035      	movs	r5, r6
 8003cda:	2301      	movs	r3, #1
 8003cdc:	1852      	adds	r2, r2, r1
 8003cde:	e7f1      	b.n	8003cc4 <_svfiprintf_r+0x194>
 8003ce0:	ab07      	add	r3, sp, #28
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	003a      	movs	r2, r7
 8003ce6:	0021      	movs	r1, r4
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <_svfiprintf_r+0x1fc>)
 8003cea:	9803      	ldr	r0, [sp, #12]
 8003cec:	e000      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003cee:	bf00      	nop
 8003cf0:	9004      	str	r0, [sp, #16]
 8003cf2:	9b04      	ldr	r3, [sp, #16]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	d1d3      	bne.n	8003ca0 <_svfiprintf_r+0x170>
 8003cf8:	89bb      	ldrh	r3, [r7, #12]
 8003cfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003cfc:	065b      	lsls	r3, r3, #25
 8003cfe:	d400      	bmi.n	8003d02 <_svfiprintf_r+0x1d2>
 8003d00:	e72d      	b.n	8003b5e <_svfiprintf_r+0x2e>
 8003d02:	2001      	movs	r0, #1
 8003d04:	4240      	negs	r0, r0
 8003d06:	e72a      	b.n	8003b5e <_svfiprintf_r+0x2e>
 8003d08:	ab07      	add	r3, sp, #28
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	003a      	movs	r2, r7
 8003d0e:	0021      	movs	r1, r4
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <_svfiprintf_r+0x1fc>)
 8003d12:	9803      	ldr	r0, [sp, #12]
 8003d14:	f000 f87c 	bl	8003e10 <_printf_i>
 8003d18:	e7ea      	b.n	8003cf0 <_svfiprintf_r+0x1c0>
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	08004460 	.word	0x08004460
 8003d20:	08004466 	.word	0x08004466
 8003d24:	0800446a 	.word	0x0800446a
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a6d 	.word	0x08003a6d

08003d30 <_printf_common>:
 8003d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d32:	0015      	movs	r5, r2
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	688a      	ldr	r2, [r1, #8]
 8003d38:	690b      	ldr	r3, [r1, #16]
 8003d3a:	000c      	movs	r4, r1
 8003d3c:	9000      	str	r0, [sp, #0]
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	da00      	bge.n	8003d44 <_printf_common+0x14>
 8003d42:	0013      	movs	r3, r2
 8003d44:	0022      	movs	r2, r4
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	3243      	adds	r2, #67	; 0x43
 8003d4a:	7812      	ldrb	r2, [r2, #0]
 8003d4c:	2a00      	cmp	r2, #0
 8003d4e:	d001      	beq.n	8003d54 <_printf_common+0x24>
 8003d50:	3301      	adds	r3, #1
 8003d52:	602b      	str	r3, [r5, #0]
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	069b      	lsls	r3, r3, #26
 8003d58:	d502      	bpl.n	8003d60 <_printf_common+0x30>
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	2306      	movs	r3, #6
 8003d64:	0017      	movs	r7, r2
 8003d66:	401f      	ands	r7, r3
 8003d68:	421a      	tst	r2, r3
 8003d6a:	d027      	beq.n	8003dbc <_printf_common+0x8c>
 8003d6c:	0023      	movs	r3, r4
 8003d6e:	3343      	adds	r3, #67	; 0x43
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	4193      	sbcs	r3, r2
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	0692      	lsls	r2, r2, #26
 8003d7a:	d430      	bmi.n	8003dde <_printf_common+0xae>
 8003d7c:	0022      	movs	r2, r4
 8003d7e:	9901      	ldr	r1, [sp, #4]
 8003d80:	9800      	ldr	r0, [sp, #0]
 8003d82:	9e08      	ldr	r6, [sp, #32]
 8003d84:	3243      	adds	r2, #67	; 0x43
 8003d86:	47b0      	blx	r6
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	d025      	beq.n	8003dd8 <_printf_common+0xa8>
 8003d8c:	2306      	movs	r3, #6
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	682a      	ldr	r2, [r5, #0]
 8003d92:	68e1      	ldr	r1, [r4, #12]
 8003d94:	2500      	movs	r5, #0
 8003d96:	4003      	ands	r3, r0
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d103      	bne.n	8003da4 <_printf_common+0x74>
 8003d9c:	1a8d      	subs	r5, r1, r2
 8003d9e:	43eb      	mvns	r3, r5
 8003da0:	17db      	asrs	r3, r3, #31
 8003da2:	401d      	ands	r5, r3
 8003da4:	68a3      	ldr	r3, [r4, #8]
 8003da6:	6922      	ldr	r2, [r4, #16]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	dd01      	ble.n	8003db0 <_printf_common+0x80>
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	18ed      	adds	r5, r5, r3
 8003db0:	2700      	movs	r7, #0
 8003db2:	42bd      	cmp	r5, r7
 8003db4:	d120      	bne.n	8003df8 <_printf_common+0xc8>
 8003db6:	2000      	movs	r0, #0
 8003db8:	e010      	b.n	8003ddc <_printf_common+0xac>
 8003dba:	3701      	adds	r7, #1
 8003dbc:	68e3      	ldr	r3, [r4, #12]
 8003dbe:	682a      	ldr	r2, [r5, #0]
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	42bb      	cmp	r3, r7
 8003dc4:	ddd2      	ble.n	8003d6c <_printf_common+0x3c>
 8003dc6:	0022      	movs	r2, r4
 8003dc8:	2301      	movs	r3, #1
 8003dca:	9901      	ldr	r1, [sp, #4]
 8003dcc:	9800      	ldr	r0, [sp, #0]
 8003dce:	9e08      	ldr	r6, [sp, #32]
 8003dd0:	3219      	adds	r2, #25
 8003dd2:	47b0      	blx	r6
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d1f0      	bne.n	8003dba <_printf_common+0x8a>
 8003dd8:	2001      	movs	r0, #1
 8003dda:	4240      	negs	r0, r0
 8003ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dde:	2030      	movs	r0, #48	; 0x30
 8003de0:	18e1      	adds	r1, r4, r3
 8003de2:	3143      	adds	r1, #67	; 0x43
 8003de4:	7008      	strb	r0, [r1, #0]
 8003de6:	0021      	movs	r1, r4
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	3145      	adds	r1, #69	; 0x45
 8003dec:	7809      	ldrb	r1, [r1, #0]
 8003dee:	18a2      	adds	r2, r4, r2
 8003df0:	3243      	adds	r2, #67	; 0x43
 8003df2:	3302      	adds	r3, #2
 8003df4:	7011      	strb	r1, [r2, #0]
 8003df6:	e7c1      	b.n	8003d7c <_printf_common+0x4c>
 8003df8:	0022      	movs	r2, r4
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	9901      	ldr	r1, [sp, #4]
 8003dfe:	9800      	ldr	r0, [sp, #0]
 8003e00:	9e08      	ldr	r6, [sp, #32]
 8003e02:	321a      	adds	r2, #26
 8003e04:	47b0      	blx	r6
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d0e6      	beq.n	8003dd8 <_printf_common+0xa8>
 8003e0a:	3701      	adds	r7, #1
 8003e0c:	e7d1      	b.n	8003db2 <_printf_common+0x82>
	...

08003e10 <_printf_i>:
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	b08b      	sub	sp, #44	; 0x2c
 8003e14:	9206      	str	r2, [sp, #24]
 8003e16:	000a      	movs	r2, r1
 8003e18:	3243      	adds	r2, #67	; 0x43
 8003e1a:	9307      	str	r3, [sp, #28]
 8003e1c:	9005      	str	r0, [sp, #20]
 8003e1e:	9204      	str	r2, [sp, #16]
 8003e20:	7e0a      	ldrb	r2, [r1, #24]
 8003e22:	000c      	movs	r4, r1
 8003e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e26:	2a78      	cmp	r2, #120	; 0x78
 8003e28:	d807      	bhi.n	8003e3a <_printf_i+0x2a>
 8003e2a:	2a62      	cmp	r2, #98	; 0x62
 8003e2c:	d809      	bhi.n	8003e42 <_printf_i+0x32>
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	d100      	bne.n	8003e34 <_printf_i+0x24>
 8003e32:	e0c1      	b.n	8003fb8 <_printf_i+0x1a8>
 8003e34:	2a58      	cmp	r2, #88	; 0x58
 8003e36:	d100      	bne.n	8003e3a <_printf_i+0x2a>
 8003e38:	e08c      	b.n	8003f54 <_printf_i+0x144>
 8003e3a:	0026      	movs	r6, r4
 8003e3c:	3642      	adds	r6, #66	; 0x42
 8003e3e:	7032      	strb	r2, [r6, #0]
 8003e40:	e022      	b.n	8003e88 <_printf_i+0x78>
 8003e42:	0010      	movs	r0, r2
 8003e44:	3863      	subs	r0, #99	; 0x63
 8003e46:	2815      	cmp	r0, #21
 8003e48:	d8f7      	bhi.n	8003e3a <_printf_i+0x2a>
 8003e4a:	f7fc f95d 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e4e:	0016      	.short	0x0016
 8003e50:	fff6001f 	.word	0xfff6001f
 8003e54:	fff6fff6 	.word	0xfff6fff6
 8003e58:	001ffff6 	.word	0x001ffff6
 8003e5c:	fff6fff6 	.word	0xfff6fff6
 8003e60:	fff6fff6 	.word	0xfff6fff6
 8003e64:	003600a8 	.word	0x003600a8
 8003e68:	fff6009a 	.word	0xfff6009a
 8003e6c:	00b9fff6 	.word	0x00b9fff6
 8003e70:	0036fff6 	.word	0x0036fff6
 8003e74:	fff6fff6 	.word	0xfff6fff6
 8003e78:	009e      	.short	0x009e
 8003e7a:	0026      	movs	r6, r4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	3642      	adds	r6, #66	; 0x42
 8003e80:	1d11      	adds	r1, r2, #4
 8003e82:	6019      	str	r1, [r3, #0]
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	7033      	strb	r3, [r6, #0]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0a7      	b.n	8003fdc <_printf_i+0x1cc>
 8003e8c:	6808      	ldr	r0, [r1, #0]
 8003e8e:	6819      	ldr	r1, [r3, #0]
 8003e90:	1d0a      	adds	r2, r1, #4
 8003e92:	0605      	lsls	r5, r0, #24
 8003e94:	d50b      	bpl.n	8003eae <_printf_i+0x9e>
 8003e96:	680d      	ldr	r5, [r1, #0]
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	da03      	bge.n	8003ea6 <_printf_i+0x96>
 8003e9e:	232d      	movs	r3, #45	; 0x2d
 8003ea0:	9a04      	ldr	r2, [sp, #16]
 8003ea2:	426d      	negs	r5, r5
 8003ea4:	7013      	strb	r3, [r2, #0]
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <_printf_i+0x21c>)
 8003ea8:	270a      	movs	r7, #10
 8003eaa:	9303      	str	r3, [sp, #12]
 8003eac:	e01b      	b.n	8003ee6 <_printf_i+0xd6>
 8003eae:	680d      	ldr	r5, [r1, #0]
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	0641      	lsls	r1, r0, #25
 8003eb4:	d5f1      	bpl.n	8003e9a <_printf_i+0x8a>
 8003eb6:	b22d      	sxth	r5, r5
 8003eb8:	e7ef      	b.n	8003e9a <_printf_i+0x8a>
 8003eba:	680d      	ldr	r5, [r1, #0]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	1d08      	adds	r0, r1, #4
 8003ec0:	6018      	str	r0, [r3, #0]
 8003ec2:	062e      	lsls	r6, r5, #24
 8003ec4:	d501      	bpl.n	8003eca <_printf_i+0xba>
 8003ec6:	680d      	ldr	r5, [r1, #0]
 8003ec8:	e003      	b.n	8003ed2 <_printf_i+0xc2>
 8003eca:	066d      	lsls	r5, r5, #25
 8003ecc:	d5fb      	bpl.n	8003ec6 <_printf_i+0xb6>
 8003ece:	680d      	ldr	r5, [r1, #0]
 8003ed0:	b2ad      	uxth	r5, r5
 8003ed2:	4b56      	ldr	r3, [pc, #344]	; (800402c <_printf_i+0x21c>)
 8003ed4:	2708      	movs	r7, #8
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	2a6f      	cmp	r2, #111	; 0x6f
 8003eda:	d000      	beq.n	8003ede <_printf_i+0xce>
 8003edc:	3702      	adds	r7, #2
 8003ede:	0023      	movs	r3, r4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	3343      	adds	r3, #67	; 0x43
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	6863      	ldr	r3, [r4, #4]
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	db03      	blt.n	8003ef6 <_printf_i+0xe6>
 8003eee:	2204      	movs	r2, #4
 8003ef0:	6821      	ldr	r1, [r4, #0]
 8003ef2:	4391      	bics	r1, r2
 8003ef4:	6021      	str	r1, [r4, #0]
 8003ef6:	2d00      	cmp	r5, #0
 8003ef8:	d102      	bne.n	8003f00 <_printf_i+0xf0>
 8003efa:	9e04      	ldr	r6, [sp, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <_printf_i+0x10a>
 8003f00:	9e04      	ldr	r6, [sp, #16]
 8003f02:	0028      	movs	r0, r5
 8003f04:	0039      	movs	r1, r7
 8003f06:	f7fc f98f 	bl	8000228 <__aeabi_uidivmod>
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	3e01      	subs	r6, #1
 8003f0e:	5c5b      	ldrb	r3, [r3, r1]
 8003f10:	7033      	strb	r3, [r6, #0]
 8003f12:	002b      	movs	r3, r5
 8003f14:	0005      	movs	r5, r0
 8003f16:	429f      	cmp	r7, r3
 8003f18:	d9f3      	bls.n	8003f02 <_printf_i+0xf2>
 8003f1a:	2f08      	cmp	r7, #8
 8003f1c:	d109      	bne.n	8003f32 <_printf_i+0x122>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	07db      	lsls	r3, r3, #31
 8003f22:	d506      	bpl.n	8003f32 <_printf_i+0x122>
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	6922      	ldr	r2, [r4, #16]
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	dc02      	bgt.n	8003f32 <_printf_i+0x122>
 8003f2c:	2330      	movs	r3, #48	; 0x30
 8003f2e:	3e01      	subs	r6, #1
 8003f30:	7033      	strb	r3, [r6, #0]
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	1b9b      	subs	r3, r3, r6
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	9b07      	ldr	r3, [sp, #28]
 8003f3a:	0021      	movs	r1, r4
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	9805      	ldr	r0, [sp, #20]
 8003f40:	9b06      	ldr	r3, [sp, #24]
 8003f42:	aa09      	add	r2, sp, #36	; 0x24
 8003f44:	f7ff fef4 	bl	8003d30 <_printf_common>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d14c      	bne.n	8003fe6 <_printf_i+0x1d6>
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	4240      	negs	r0, r0
 8003f50:	b00b      	add	sp, #44	; 0x2c
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f54:	3145      	adds	r1, #69	; 0x45
 8003f56:	700a      	strb	r2, [r1, #0]
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <_printf_i+0x21c>)
 8003f5a:	9203      	str	r2, [sp, #12]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	6821      	ldr	r1, [r4, #0]
 8003f60:	ca20      	ldmia	r2!, {r5}
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	0608      	lsls	r0, r1, #24
 8003f66:	d516      	bpl.n	8003f96 <_printf_i+0x186>
 8003f68:	07cb      	lsls	r3, r1, #31
 8003f6a:	d502      	bpl.n	8003f72 <_printf_i+0x162>
 8003f6c:	2320      	movs	r3, #32
 8003f6e:	4319      	orrs	r1, r3
 8003f70:	6021      	str	r1, [r4, #0]
 8003f72:	2710      	movs	r7, #16
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	d1b2      	bne.n	8003ede <_printf_i+0xce>
 8003f78:	2320      	movs	r3, #32
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	439a      	bics	r2, r3
 8003f7e:	6022      	str	r2, [r4, #0]
 8003f80:	e7ad      	b.n	8003ede <_printf_i+0xce>
 8003f82:	2220      	movs	r2, #32
 8003f84:	6809      	ldr	r1, [r1, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	0022      	movs	r2, r4
 8003f8c:	2178      	movs	r1, #120	; 0x78
 8003f8e:	3245      	adds	r2, #69	; 0x45
 8003f90:	7011      	strb	r1, [r2, #0]
 8003f92:	4a27      	ldr	r2, [pc, #156]	; (8004030 <_printf_i+0x220>)
 8003f94:	e7e1      	b.n	8003f5a <_printf_i+0x14a>
 8003f96:	0648      	lsls	r0, r1, #25
 8003f98:	d5e6      	bpl.n	8003f68 <_printf_i+0x158>
 8003f9a:	b2ad      	uxth	r5, r5
 8003f9c:	e7e4      	b.n	8003f68 <_printf_i+0x158>
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	680d      	ldr	r5, [r1, #0]
 8003fa2:	1d10      	adds	r0, r2, #4
 8003fa4:	6949      	ldr	r1, [r1, #20]
 8003fa6:	6018      	str	r0, [r3, #0]
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	062e      	lsls	r6, r5, #24
 8003fac:	d501      	bpl.n	8003fb2 <_printf_i+0x1a2>
 8003fae:	6019      	str	r1, [r3, #0]
 8003fb0:	e002      	b.n	8003fb8 <_printf_i+0x1a8>
 8003fb2:	066d      	lsls	r5, r5, #25
 8003fb4:	d5fb      	bpl.n	8003fae <_printf_i+0x19e>
 8003fb6:	8019      	strh	r1, [r3, #0]
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9e04      	ldr	r6, [sp, #16]
 8003fbc:	6123      	str	r3, [r4, #16]
 8003fbe:	e7bb      	b.n	8003f38 <_printf_i+0x128>
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	1d11      	adds	r1, r2, #4
 8003fc4:	6019      	str	r1, [r3, #0]
 8003fc6:	6816      	ldr	r6, [r2, #0]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	0030      	movs	r0, r6
 8003fcc:	6862      	ldr	r2, [r4, #4]
 8003fce:	f000 f831 	bl	8004034 <memchr>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d001      	beq.n	8003fda <_printf_i+0x1ca>
 8003fd6:	1b80      	subs	r0, r0, r6
 8003fd8:	6060      	str	r0, [r4, #4]
 8003fda:	6863      	ldr	r3, [r4, #4]
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9a04      	ldr	r2, [sp, #16]
 8003fe2:	7013      	strb	r3, [r2, #0]
 8003fe4:	e7a8      	b.n	8003f38 <_printf_i+0x128>
 8003fe6:	6923      	ldr	r3, [r4, #16]
 8003fe8:	0032      	movs	r2, r6
 8003fea:	9906      	ldr	r1, [sp, #24]
 8003fec:	9805      	ldr	r0, [sp, #20]
 8003fee:	9d07      	ldr	r5, [sp, #28]
 8003ff0:	47a8      	blx	r5
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d0aa      	beq.n	8003f4c <_printf_i+0x13c>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d415      	bmi.n	8004028 <_printf_i+0x218>
 8003ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffe:	68e0      	ldr	r0, [r4, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	daa5      	bge.n	8003f50 <_printf_i+0x140>
 8004004:	0018      	movs	r0, r3
 8004006:	e7a3      	b.n	8003f50 <_printf_i+0x140>
 8004008:	0022      	movs	r2, r4
 800400a:	2301      	movs	r3, #1
 800400c:	9906      	ldr	r1, [sp, #24]
 800400e:	9805      	ldr	r0, [sp, #20]
 8004010:	9e07      	ldr	r6, [sp, #28]
 8004012:	3219      	adds	r2, #25
 8004014:	47b0      	blx	r6
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	d098      	beq.n	8003f4c <_printf_i+0x13c>
 800401a:	3501      	adds	r5, #1
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	42ab      	cmp	r3, r5
 8004024:	dcf0      	bgt.n	8004008 <_printf_i+0x1f8>
 8004026:	e7e9      	b.n	8003ffc <_printf_i+0x1ec>
 8004028:	2500      	movs	r5, #0
 800402a:	e7f7      	b.n	800401c <_printf_i+0x20c>
 800402c:	08004471 	.word	0x08004471
 8004030:	08004482 	.word	0x08004482

08004034 <memchr>:
 8004034:	b2c9      	uxtb	r1, r1
 8004036:	1882      	adds	r2, r0, r2
 8004038:	4290      	cmp	r0, r2
 800403a:	d101      	bne.n	8004040 <memchr+0xc>
 800403c:	2000      	movs	r0, #0
 800403e:	4770      	bx	lr
 8004040:	7803      	ldrb	r3, [r0, #0]
 8004042:	428b      	cmp	r3, r1
 8004044:	d0fb      	beq.n	800403e <memchr+0xa>
 8004046:	3001      	adds	r0, #1
 8004048:	e7f6      	b.n	8004038 <memchr+0x4>

0800404a <memcpy>:
 800404a:	2300      	movs	r3, #0
 800404c:	b510      	push	{r4, lr}
 800404e:	429a      	cmp	r2, r3
 8004050:	d100      	bne.n	8004054 <memcpy+0xa>
 8004052:	bd10      	pop	{r4, pc}
 8004054:	5ccc      	ldrb	r4, [r1, r3]
 8004056:	54c4      	strb	r4, [r0, r3]
 8004058:	3301      	adds	r3, #1
 800405a:	e7f8      	b.n	800404e <memcpy+0x4>

0800405c <memmove>:
 800405c:	b510      	push	{r4, lr}
 800405e:	4288      	cmp	r0, r1
 8004060:	d902      	bls.n	8004068 <memmove+0xc>
 8004062:	188b      	adds	r3, r1, r2
 8004064:	4298      	cmp	r0, r3
 8004066:	d303      	bcc.n	8004070 <memmove+0x14>
 8004068:	2300      	movs	r3, #0
 800406a:	e007      	b.n	800407c <memmove+0x20>
 800406c:	5c8b      	ldrb	r3, [r1, r2]
 800406e:	5483      	strb	r3, [r0, r2]
 8004070:	3a01      	subs	r2, #1
 8004072:	d2fb      	bcs.n	800406c <memmove+0x10>
 8004074:	bd10      	pop	{r4, pc}
 8004076:	5ccc      	ldrb	r4, [r1, r3]
 8004078:	54c4      	strb	r4, [r0, r3]
 800407a:	3301      	adds	r3, #1
 800407c:	429a      	cmp	r2, r3
 800407e:	d1fa      	bne.n	8004076 <memmove+0x1a>
 8004080:	e7f8      	b.n	8004074 <memmove+0x18>
	...

08004084 <_free_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	0005      	movs	r5, r0
 8004088:	2900      	cmp	r1, #0
 800408a:	d010      	beq.n	80040ae <_free_r+0x2a>
 800408c:	1f0c      	subs	r4, r1, #4
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da00      	bge.n	8004096 <_free_r+0x12>
 8004094:	18e4      	adds	r4, r4, r3
 8004096:	0028      	movs	r0, r5
 8004098:	f000 f918 	bl	80042cc <__malloc_lock>
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <_free_r+0x90>)
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <_free_r+0x2c>
 80040a4:	6063      	str	r3, [r4, #4]
 80040a6:	6014      	str	r4, [r2, #0]
 80040a8:	0028      	movs	r0, r5
 80040aa:	f000 f917 	bl	80042dc <__malloc_unlock>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	42a3      	cmp	r3, r4
 80040b2:	d908      	bls.n	80040c6 <_free_r+0x42>
 80040b4:	6821      	ldr	r1, [r4, #0]
 80040b6:	1860      	adds	r0, r4, r1
 80040b8:	4283      	cmp	r3, r0
 80040ba:	d1f3      	bne.n	80040a4 <_free_r+0x20>
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	1841      	adds	r1, r0, r1
 80040c2:	6021      	str	r1, [r4, #0]
 80040c4:	e7ee      	b.n	80040a4 <_free_r+0x20>
 80040c6:	001a      	movs	r2, r3
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <_free_r+0x4e>
 80040ce:	42a3      	cmp	r3, r4
 80040d0:	d9f9      	bls.n	80040c6 <_free_r+0x42>
 80040d2:	6811      	ldr	r1, [r2, #0]
 80040d4:	1850      	adds	r0, r2, r1
 80040d6:	42a0      	cmp	r0, r4
 80040d8:	d10b      	bne.n	80040f2 <_free_r+0x6e>
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	1809      	adds	r1, r1, r0
 80040de:	1850      	adds	r0, r2, r1
 80040e0:	6011      	str	r1, [r2, #0]
 80040e2:	4283      	cmp	r3, r0
 80040e4:	d1e0      	bne.n	80040a8 <_free_r+0x24>
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	1841      	adds	r1, r0, r1
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	6053      	str	r3, [r2, #4]
 80040f0:	e7da      	b.n	80040a8 <_free_r+0x24>
 80040f2:	42a0      	cmp	r0, r4
 80040f4:	d902      	bls.n	80040fc <_free_r+0x78>
 80040f6:	230c      	movs	r3, #12
 80040f8:	602b      	str	r3, [r5, #0]
 80040fa:	e7d5      	b.n	80040a8 <_free_r+0x24>
 80040fc:	6821      	ldr	r1, [r4, #0]
 80040fe:	1860      	adds	r0, r4, r1
 8004100:	4283      	cmp	r3, r0
 8004102:	d103      	bne.n	800410c <_free_r+0x88>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	1841      	adds	r1, r0, r1
 800410a:	6021      	str	r1, [r4, #0]
 800410c:	6063      	str	r3, [r4, #4]
 800410e:	6054      	str	r4, [r2, #4]
 8004110:	e7ca      	b.n	80040a8 <_free_r+0x24>
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	20000354 	.word	0x20000354

08004118 <sbrk_aligned>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	4e0f      	ldr	r6, [pc, #60]	; (8004158 <sbrk_aligned+0x40>)
 800411c:	000d      	movs	r5, r1
 800411e:	6831      	ldr	r1, [r6, #0]
 8004120:	0004      	movs	r4, r0
 8004122:	2900      	cmp	r1, #0
 8004124:	d102      	bne.n	800412c <sbrk_aligned+0x14>
 8004126:	f000 f8bf 	bl	80042a8 <_sbrk_r>
 800412a:	6030      	str	r0, [r6, #0]
 800412c:	0029      	movs	r1, r5
 800412e:	0020      	movs	r0, r4
 8004130:	f000 f8ba 	bl	80042a8 <_sbrk_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d00a      	beq.n	800414e <sbrk_aligned+0x36>
 8004138:	2303      	movs	r3, #3
 800413a:	1cc5      	adds	r5, r0, #3
 800413c:	439d      	bics	r5, r3
 800413e:	42a8      	cmp	r0, r5
 8004140:	d007      	beq.n	8004152 <sbrk_aligned+0x3a>
 8004142:	1a29      	subs	r1, r5, r0
 8004144:	0020      	movs	r0, r4
 8004146:	f000 f8af 	bl	80042a8 <_sbrk_r>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	d101      	bne.n	8004152 <sbrk_aligned+0x3a>
 800414e:	2501      	movs	r5, #1
 8004150:	426d      	negs	r5, r5
 8004152:	0028      	movs	r0, r5
 8004154:	bd70      	pop	{r4, r5, r6, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	20000358 	.word	0x20000358

0800415c <_malloc_r>:
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	2203      	movs	r2, #3
 8004160:	1ccb      	adds	r3, r1, #3
 8004162:	4393      	bics	r3, r2
 8004164:	3308      	adds	r3, #8
 8004166:	0006      	movs	r6, r0
 8004168:	001f      	movs	r7, r3
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d232      	bcs.n	80041d4 <_malloc_r+0x78>
 800416e:	270c      	movs	r7, #12
 8004170:	42b9      	cmp	r1, r7
 8004172:	d831      	bhi.n	80041d8 <_malloc_r+0x7c>
 8004174:	0030      	movs	r0, r6
 8004176:	f000 f8a9 	bl	80042cc <__malloc_lock>
 800417a:	4d32      	ldr	r5, [pc, #200]	; (8004244 <_malloc_r+0xe8>)
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	001c      	movs	r4, r3
 8004180:	2c00      	cmp	r4, #0
 8004182:	d12e      	bne.n	80041e2 <_malloc_r+0x86>
 8004184:	0039      	movs	r1, r7
 8004186:	0030      	movs	r0, r6
 8004188:	f7ff ffc6 	bl	8004118 <sbrk_aligned>
 800418c:	0004      	movs	r4, r0
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	d11e      	bne.n	80041d0 <_malloc_r+0x74>
 8004192:	682c      	ldr	r4, [r5, #0]
 8004194:	0025      	movs	r5, r4
 8004196:	2d00      	cmp	r5, #0
 8004198:	d14a      	bne.n	8004230 <_malloc_r+0xd4>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	0029      	movs	r1, r5
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	0030      	movs	r0, r6
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	f000 f880 	bl	80042a8 <_sbrk_r>
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	4283      	cmp	r3, r0
 80041ac:	d143      	bne.n	8004236 <_malloc_r+0xda>
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	3703      	adds	r7, #3
 80041b2:	1aff      	subs	r7, r7, r3
 80041b4:	2303      	movs	r3, #3
 80041b6:	439f      	bics	r7, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	2f0c      	cmp	r7, #12
 80041bc:	d200      	bcs.n	80041c0 <_malloc_r+0x64>
 80041be:	270c      	movs	r7, #12
 80041c0:	0039      	movs	r1, r7
 80041c2:	0030      	movs	r0, r6
 80041c4:	f7ff ffa8 	bl	8004118 <sbrk_aligned>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d034      	beq.n	8004236 <_malloc_r+0xda>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	19df      	adds	r7, r3, r7
 80041d0:	6027      	str	r7, [r4, #0]
 80041d2:	e013      	b.n	80041fc <_malloc_r+0xa0>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	dacb      	bge.n	8004170 <_malloc_r+0x14>
 80041d8:	230c      	movs	r3, #12
 80041da:	2500      	movs	r5, #0
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	0028      	movs	r0, r5
 80041e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041e2:	6822      	ldr	r2, [r4, #0]
 80041e4:	1bd1      	subs	r1, r2, r7
 80041e6:	d420      	bmi.n	800422a <_malloc_r+0xce>
 80041e8:	290b      	cmp	r1, #11
 80041ea:	d917      	bls.n	800421c <_malloc_r+0xc0>
 80041ec:	19e2      	adds	r2, r4, r7
 80041ee:	6027      	str	r7, [r4, #0]
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d111      	bne.n	8004218 <_malloc_r+0xbc>
 80041f4:	602a      	str	r2, [r5, #0]
 80041f6:	6863      	ldr	r3, [r4, #4]
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	6053      	str	r3, [r2, #4]
 80041fc:	0030      	movs	r0, r6
 80041fe:	0025      	movs	r5, r4
 8004200:	f000 f86c 	bl	80042dc <__malloc_unlock>
 8004204:	2207      	movs	r2, #7
 8004206:	350b      	adds	r5, #11
 8004208:	1d23      	adds	r3, r4, #4
 800420a:	4395      	bics	r5, r2
 800420c:	1aea      	subs	r2, r5, r3
 800420e:	429d      	cmp	r5, r3
 8004210:	d0e5      	beq.n	80041de <_malloc_r+0x82>
 8004212:	1b5b      	subs	r3, r3, r5
 8004214:	50a3      	str	r3, [r4, r2]
 8004216:	e7e2      	b.n	80041de <_malloc_r+0x82>
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e7ec      	b.n	80041f6 <_malloc_r+0x9a>
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	42a3      	cmp	r3, r4
 8004220:	d101      	bne.n	8004226 <_malloc_r+0xca>
 8004222:	602a      	str	r2, [r5, #0]
 8004224:	e7ea      	b.n	80041fc <_malloc_r+0xa0>
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	e7e8      	b.n	80041fc <_malloc_r+0xa0>
 800422a:	0023      	movs	r3, r4
 800422c:	6864      	ldr	r4, [r4, #4]
 800422e:	e7a7      	b.n	8004180 <_malloc_r+0x24>
 8004230:	002c      	movs	r4, r5
 8004232:	686d      	ldr	r5, [r5, #4]
 8004234:	e7af      	b.n	8004196 <_malloc_r+0x3a>
 8004236:	230c      	movs	r3, #12
 8004238:	0030      	movs	r0, r6
 800423a:	6033      	str	r3, [r6, #0]
 800423c:	f000 f84e 	bl	80042dc <__malloc_unlock>
 8004240:	e7cd      	b.n	80041de <_malloc_r+0x82>
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	20000354 	.word	0x20000354

08004248 <_realloc_r>:
 8004248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800424a:	0007      	movs	r7, r0
 800424c:	000e      	movs	r6, r1
 800424e:	0014      	movs	r4, r2
 8004250:	2900      	cmp	r1, #0
 8004252:	d105      	bne.n	8004260 <_realloc_r+0x18>
 8004254:	0011      	movs	r1, r2
 8004256:	f7ff ff81 	bl	800415c <_malloc_r>
 800425a:	0005      	movs	r5, r0
 800425c:	0028      	movs	r0, r5
 800425e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004260:	2a00      	cmp	r2, #0
 8004262:	d103      	bne.n	800426c <_realloc_r+0x24>
 8004264:	f7ff ff0e 	bl	8004084 <_free_r>
 8004268:	0025      	movs	r5, r4
 800426a:	e7f7      	b.n	800425c <_realloc_r+0x14>
 800426c:	f000 f83e 	bl	80042ec <_malloc_usable_size_r>
 8004270:	9001      	str	r0, [sp, #4]
 8004272:	4284      	cmp	r4, r0
 8004274:	d803      	bhi.n	800427e <_realloc_r+0x36>
 8004276:	0035      	movs	r5, r6
 8004278:	0843      	lsrs	r3, r0, #1
 800427a:	42a3      	cmp	r3, r4
 800427c:	d3ee      	bcc.n	800425c <_realloc_r+0x14>
 800427e:	0021      	movs	r1, r4
 8004280:	0038      	movs	r0, r7
 8004282:	f7ff ff6b 	bl	800415c <_malloc_r>
 8004286:	1e05      	subs	r5, r0, #0
 8004288:	d0e8      	beq.n	800425c <_realloc_r+0x14>
 800428a:	9b01      	ldr	r3, [sp, #4]
 800428c:	0022      	movs	r2, r4
 800428e:	429c      	cmp	r4, r3
 8004290:	d900      	bls.n	8004294 <_realloc_r+0x4c>
 8004292:	001a      	movs	r2, r3
 8004294:	0031      	movs	r1, r6
 8004296:	0028      	movs	r0, r5
 8004298:	f7ff fed7 	bl	800404a <memcpy>
 800429c:	0031      	movs	r1, r6
 800429e:	0038      	movs	r0, r7
 80042a0:	f7ff fef0 	bl	8004084 <_free_r>
 80042a4:	e7da      	b.n	800425c <_realloc_r+0x14>
	...

080042a8 <_sbrk_r>:
 80042a8:	2300      	movs	r3, #0
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	4d06      	ldr	r5, [pc, #24]	; (80042c8 <_sbrk_r+0x20>)
 80042ae:	0004      	movs	r4, r0
 80042b0:	0008      	movs	r0, r1
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	f7fc fe2e 	bl	8000f14 <_sbrk>
 80042b8:	1c43      	adds	r3, r0, #1
 80042ba:	d103      	bne.n	80042c4 <_sbrk_r+0x1c>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d000      	beq.n	80042c4 <_sbrk_r+0x1c>
 80042c2:	6023      	str	r3, [r4, #0]
 80042c4:	bd70      	pop	{r4, r5, r6, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	2000035c 	.word	0x2000035c

080042cc <__malloc_lock>:
 80042cc:	b510      	push	{r4, lr}
 80042ce:	4802      	ldr	r0, [pc, #8]	; (80042d8 <__malloc_lock+0xc>)
 80042d0:	f000 f814 	bl	80042fc <__retarget_lock_acquire_recursive>
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	20000360 	.word	0x20000360

080042dc <__malloc_unlock>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	4802      	ldr	r0, [pc, #8]	; (80042e8 <__malloc_unlock+0xc>)
 80042e0:	f000 f80d 	bl	80042fe <__retarget_lock_release_recursive>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	20000360 	.word	0x20000360

080042ec <_malloc_usable_size_r>:
 80042ec:	1f0b      	subs	r3, r1, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	1f18      	subs	r0, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da01      	bge.n	80042fa <_malloc_usable_size_r+0xe>
 80042f6:	580b      	ldr	r3, [r1, r0]
 80042f8:	18c0      	adds	r0, r0, r3
 80042fa:	4770      	bx	lr

080042fc <__retarget_lock_acquire_recursive>:
 80042fc:	4770      	bx	lr

080042fe <__retarget_lock_release_recursive>:
 80042fe:	4770      	bx	lr

08004300 <_init>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr

0800430c <_fini>:
 800430c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004312:	bc08      	pop	{r3}
 8004314:	469e      	mov	lr, r3
 8004316:	4770      	bx	lr
