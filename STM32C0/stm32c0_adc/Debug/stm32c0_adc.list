
stm32c0_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003774  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003948  08003948  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003948  08003948  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003948  08003948  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08003960  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003960  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdb0  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5f  00000000  00000000  0002bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002e9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014534  00000000  00000000  0002f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ede0  00000000  00000000  00043aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008023b  00000000  00000000  00052884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2abf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000d2b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800381c 	.word	0x0800381c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800381c 	.word	0x0800381c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fdiv+0x1c>
 800023a:	e070      	b.n	800031e <__aeabi_fdiv+0xfe>
 800023c:	2fff      	cmp	r7, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fdiv+0x22>
 8000240:	e075      	b.n	800032e <__aeabi_fdiv+0x10e>
 8000242:	00eb      	lsls	r3, r5, #3
 8000244:	2580      	movs	r5, #128	; 0x80
 8000246:	04ed      	lsls	r5, r5, #19
 8000248:	431d      	orrs	r5, r3
 800024a:	2300      	movs	r3, #0
 800024c:	4699      	mov	r9, r3
 800024e:	469a      	mov	sl, r3
 8000250:	3f7f      	subs	r7, #127	; 0x7f
 8000252:	0260      	lsls	r0, r4, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	0063      	lsls	r3, r4, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fe4      	lsrs	r4, r4, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d04e      	beq.n	8000300 <__aeabi_fdiv+0xe0>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d046      	beq.n	80002f4 <__aeabi_fdiv+0xd4>
 8000266:	4642      	mov	r2, r8
 8000268:	00d0      	lsls	r0, r2, #3
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	04d2      	lsls	r2, r2, #19
 800026e:	4302      	orrs	r2, r0
 8000270:	4690      	mov	r8, r2
 8000272:	2200      	movs	r2, #0
 8000274:	3b7f      	subs	r3, #127	; 0x7f
 8000276:	0031      	movs	r1, r6
 8000278:	1aff      	subs	r7, r7, r3
 800027a:	464b      	mov	r3, r9
 800027c:	4061      	eors	r1, r4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4313      	orrs	r3, r2
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d900      	bls.n	8000288 <__aeabi_fdiv+0x68>
 8000286:	e0b5      	b.n	80003f4 <__aeabi_fdiv+0x1d4>
 8000288:	486e      	ldr	r0, [pc, #440]	; (8000444 <__aeabi_fdiv+0x224>)
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	58c3      	ldr	r3, [r0, r3]
 800028e:	469f      	mov	pc, r3
 8000290:	2300      	movs	r3, #0
 8000292:	4698      	mov	r8, r3
 8000294:	0026      	movs	r6, r4
 8000296:	4645      	mov	r5, r8
 8000298:	4692      	mov	sl, r2
 800029a:	4653      	mov	r3, sl
 800029c:	2b02      	cmp	r3, #2
 800029e:	d100      	bne.n	80002a2 <__aeabi_fdiv+0x82>
 80002a0:	e089      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e09e      	b.n	80003e6 <__aeabi_fdiv+0x1c6>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d018      	beq.n	80002de <__aeabi_fdiv+0xbe>
 80002ac:	003b      	movs	r3, r7
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dd69      	ble.n	8000388 <__aeabi_fdiv+0x168>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	4b60      	ldr	r3, [pc, #384]	; (8000448 <__aeabi_fdiv+0x228>)
 80002c8:	401d      	ands	r5, r3
 80002ca:	003b      	movs	r3, r7
 80002cc:	3380      	adds	r3, #128	; 0x80
 80002ce:	2bfe      	cmp	r3, #254	; 0xfe
 80002d0:	dd00      	ble.n	80002d4 <__aeabi_fdiv+0xb4>
 80002d2:	e070      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002d4:	01ad      	lsls	r5, r5, #6
 80002d6:	0a6d      	lsrs	r5, r5, #9
 80002d8:	b2d8      	uxtb	r0, r3
 80002da:	e002      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80002dc:	000e      	movs	r6, r1
 80002de:	2000      	movs	r0, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	05c0      	lsls	r0, r0, #23
 80002e4:	4328      	orrs	r0, r5
 80002e6:	07f6      	lsls	r6, r6, #31
 80002e8:	4330      	orrs	r0, r6
 80002ea:	bce0      	pop	{r5, r6, r7}
 80002ec:	46ba      	mov	sl, r7
 80002ee:	46b1      	mov	r9, r6
 80002f0:	46a8      	mov	r8, r5
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f4:	4643      	mov	r3, r8
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d13f      	bne.n	800037a <__aeabi_fdiv+0x15a>
 80002fa:	2202      	movs	r2, #2
 80002fc:	3fff      	subs	r7, #255	; 0xff
 80002fe:	e003      	b.n	8000308 <__aeabi_fdiv+0xe8>
 8000300:	4643      	mov	r3, r8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d12d      	bne.n	8000362 <__aeabi_fdiv+0x142>
 8000306:	2201      	movs	r2, #1
 8000308:	0031      	movs	r1, r6
 800030a:	464b      	mov	r3, r9
 800030c:	4061      	eors	r1, r4
 800030e:	b2c9      	uxtb	r1, r1
 8000310:	4313      	orrs	r3, r2
 8000312:	2b0f      	cmp	r3, #15
 8000314:	d834      	bhi.n	8000380 <__aeabi_fdiv+0x160>
 8000316:	484d      	ldr	r0, [pc, #308]	; (800044c <__aeabi_fdiv+0x22c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	58c3      	ldr	r3, [r0, r3]
 800031c:	469f      	mov	pc, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d113      	bne.n	800034a <__aeabi_fdiv+0x12a>
 8000322:	2304      	movs	r3, #4
 8000324:	4699      	mov	r9, r3
 8000326:	3b03      	subs	r3, #3
 8000328:	2700      	movs	r7, #0
 800032a:	469a      	mov	sl, r3
 800032c:	e791      	b.n	8000252 <__aeabi_fdiv+0x32>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0x11e>
 8000332:	2308      	movs	r3, #8
 8000334:	4699      	mov	r9, r3
 8000336:	3b06      	subs	r3, #6
 8000338:	27ff      	movs	r7, #255	; 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e789      	b.n	8000252 <__aeabi_fdiv+0x32>
 800033e:	230c      	movs	r3, #12
 8000340:	4699      	mov	r9, r3
 8000342:	3b09      	subs	r3, #9
 8000344:	27ff      	movs	r7, #255	; 0xff
 8000346:	469a      	mov	sl, r3
 8000348:	e783      	b.n	8000252 <__aeabi_fdiv+0x32>
 800034a:	0028      	movs	r0, r5
 800034c:	f000 f8c2 	bl	80004d4 <__clzsi2>
 8000350:	2776      	movs	r7, #118	; 0x76
 8000352:	1f43      	subs	r3, r0, #5
 8000354:	409d      	lsls	r5, r3
 8000356:	2300      	movs	r3, #0
 8000358:	427f      	negs	r7, r7
 800035a:	4699      	mov	r9, r3
 800035c:	469a      	mov	sl, r3
 800035e:	1a3f      	subs	r7, r7, r0
 8000360:	e777      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000362:	4640      	mov	r0, r8
 8000364:	f000 f8b6 	bl	80004d4 <__clzsi2>
 8000368:	4642      	mov	r2, r8
 800036a:	1f43      	subs	r3, r0, #5
 800036c:	409a      	lsls	r2, r3
 800036e:	2376      	movs	r3, #118	; 0x76
 8000370:	425b      	negs	r3, r3
 8000372:	4690      	mov	r8, r2
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	2200      	movs	r2, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	23ff      	movs	r3, #255	; 0xff
 800037c:	2203      	movs	r2, #3
 800037e:	e77a      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000380:	000e      	movs	r6, r1
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	2500      	movs	r5, #0
 8000386:	e7ac      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000388:	2001      	movs	r0, #1
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	281b      	cmp	r0, #27
 800038e:	dca6      	bgt.n	80002de <__aeabi_fdiv+0xbe>
 8000390:	379e      	adds	r7, #158	; 0x9e
 8000392:	002a      	movs	r2, r5
 8000394:	40bd      	lsls	r5, r7
 8000396:	40c2      	lsrs	r2, r0
 8000398:	1e6b      	subs	r3, r5, #1
 800039a:	419d      	sbcs	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	076b      	lsls	r3, r5, #29
 80003a0:	d004      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003a2:	230f      	movs	r3, #15
 80003a4:	402b      	ands	r3, r5
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d000      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003aa:	3504      	adds	r5, #4
 80003ac:	016b      	lsls	r3, r5, #5
 80003ae:	d544      	bpl.n	800043a <__aeabi_fdiv+0x21a>
 80003b0:	2001      	movs	r0, #1
 80003b2:	2500      	movs	r5, #0
 80003b4:	e795      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003b6:	20ff      	movs	r0, #255	; 0xff
 80003b8:	2500      	movs	r5, #0
 80003ba:	e792      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003bc:	2580      	movs	r5, #128	; 0x80
 80003be:	2600      	movs	r6, #0
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	03ed      	lsls	r5, r5, #15
 80003c4:	e78d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003c6:	2300      	movs	r3, #0
 80003c8:	4698      	mov	r8, r3
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	03c0      	lsls	r0, r0, #15
 80003ce:	4205      	tst	r5, r0
 80003d0:	d009      	beq.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d2:	4643      	mov	r3, r8
 80003d4:	4203      	tst	r3, r0
 80003d6:	d106      	bne.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d8:	4645      	mov	r5, r8
 80003da:	4305      	orrs	r5, r0
 80003dc:	026d      	lsls	r5, r5, #9
 80003de:	0026      	movs	r6, r4
 80003e0:	20ff      	movs	r0, #255	; 0xff
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	e77d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003e6:	2080      	movs	r0, #128	; 0x80
 80003e8:	03c0      	lsls	r0, r0, #15
 80003ea:	4305      	orrs	r5, r0
 80003ec:	026d      	lsls	r5, r5, #9
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	0a6d      	lsrs	r5, r5, #9
 80003f2:	e776      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	016b      	lsls	r3, r5, #5
 80003f8:	0150      	lsls	r0, r2, #5
 80003fa:	4283      	cmp	r3, r0
 80003fc:	d219      	bcs.n	8000432 <__aeabi_fdiv+0x212>
 80003fe:	221b      	movs	r2, #27
 8000400:	2500      	movs	r5, #0
 8000402:	3f01      	subs	r7, #1
 8000404:	2601      	movs	r6, #1
 8000406:	001c      	movs	r4, r3
 8000408:	006d      	lsls	r5, r5, #1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2c00      	cmp	r4, #0
 800040e:	db01      	blt.n	8000414 <__aeabi_fdiv+0x1f4>
 8000410:	4298      	cmp	r0, r3
 8000412:	d801      	bhi.n	8000418 <__aeabi_fdiv+0x1f8>
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	4335      	orrs	r5, r6
 8000418:	3a01      	subs	r2, #1
 800041a:	2a00      	cmp	r2, #0
 800041c:	d1f3      	bne.n	8000406 <__aeabi_fdiv+0x1e6>
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4193      	sbcs	r3, r2
 8000422:	431d      	orrs	r5, r3
 8000424:	003b      	movs	r3, r7
 8000426:	337f      	adds	r3, #127	; 0x7f
 8000428:	000e      	movs	r6, r1
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd00      	ble.n	8000430 <__aeabi_fdiv+0x210>
 800042e:	e741      	b.n	80002b4 <__aeabi_fdiv+0x94>
 8000430:	e7aa      	b.n	8000388 <__aeabi_fdiv+0x168>
 8000432:	221a      	movs	r2, #26
 8000434:	2501      	movs	r5, #1
 8000436:	1a1b      	subs	r3, r3, r0
 8000438:	e7e4      	b.n	8000404 <__aeabi_fdiv+0x1e4>
 800043a:	01ad      	lsls	r5, r5, #6
 800043c:	2000      	movs	r0, #0
 800043e:	0a6d      	lsrs	r5, r5, #9
 8000440:	e74f      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	08003834 	.word	0x08003834
 8000448:	f7ffffff 	.word	0xf7ffffff
 800044c:	08003874 	.word	0x08003874

08000450 <__aeabi_ui2f>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	1e05      	subs	r5, r0, #0
 8000454:	d00e      	beq.n	8000474 <__aeabi_ui2f+0x24>
 8000456:	f000 f83d 	bl	80004d4 <__clzsi2>
 800045a:	239e      	movs	r3, #158	; 0x9e
 800045c:	0004      	movs	r4, r0
 800045e:	1a1b      	subs	r3, r3, r0
 8000460:	2b96      	cmp	r3, #150	; 0x96
 8000462:	dc0c      	bgt.n	800047e <__aeabi_ui2f+0x2e>
 8000464:	2808      	cmp	r0, #8
 8000466:	dd01      	ble.n	800046c <__aeabi_ui2f+0x1c>
 8000468:	3c08      	subs	r4, #8
 800046a:	40a5      	lsls	r5, r4
 800046c:	026d      	lsls	r5, r5, #9
 800046e:	0a6d      	lsrs	r5, r5, #9
 8000470:	b2d8      	uxtb	r0, r3
 8000472:	e001      	b.n	8000478 <__aeabi_ui2f+0x28>
 8000474:	2000      	movs	r0, #0
 8000476:	2500      	movs	r5, #0
 8000478:	05c0      	lsls	r0, r0, #23
 800047a:	4328      	orrs	r0, r5
 800047c:	bd70      	pop	{r4, r5, r6, pc}
 800047e:	2b99      	cmp	r3, #153	; 0x99
 8000480:	dd09      	ble.n	8000496 <__aeabi_ui2f+0x46>
 8000482:	0002      	movs	r2, r0
 8000484:	0029      	movs	r1, r5
 8000486:	321b      	adds	r2, #27
 8000488:	4091      	lsls	r1, r2
 800048a:	1e4a      	subs	r2, r1, #1
 800048c:	4191      	sbcs	r1, r2
 800048e:	2205      	movs	r2, #5
 8000490:	1a12      	subs	r2, r2, r0
 8000492:	40d5      	lsrs	r5, r2
 8000494:	430d      	orrs	r5, r1
 8000496:	2c05      	cmp	r4, #5
 8000498:	dc12      	bgt.n	80004c0 <__aeabi_ui2f+0x70>
 800049a:	0029      	movs	r1, r5
 800049c:	4e0c      	ldr	r6, [pc, #48]	; (80004d0 <__aeabi_ui2f+0x80>)
 800049e:	4031      	ands	r1, r6
 80004a0:	076a      	lsls	r2, r5, #29
 80004a2:	d009      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004a4:	200f      	movs	r0, #15
 80004a6:	4028      	ands	r0, r5
 80004a8:	2804      	cmp	r0, #4
 80004aa:	d005      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004ac:	3104      	adds	r1, #4
 80004ae:	014a      	lsls	r2, r1, #5
 80004b0:	d502      	bpl.n	80004b8 <__aeabi_ui2f+0x68>
 80004b2:	239f      	movs	r3, #159	; 0x9f
 80004b4:	4031      	ands	r1, r6
 80004b6:	1b1b      	subs	r3, r3, r4
 80004b8:	0189      	lsls	r1, r1, #6
 80004ba:	0a4d      	lsrs	r5, r1, #9
 80004bc:	b2d8      	uxtb	r0, r3
 80004be:	e7db      	b.n	8000478 <__aeabi_ui2f+0x28>
 80004c0:	1f62      	subs	r2, r4, #5
 80004c2:	4095      	lsls	r5, r2
 80004c4:	0029      	movs	r1, r5
 80004c6:	4e02      	ldr	r6, [pc, #8]	; (80004d0 <__aeabi_ui2f+0x80>)
 80004c8:	4031      	ands	r1, r6
 80004ca:	076a      	lsls	r2, r5, #29
 80004cc:	d0f4      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004ce:	e7e9      	b.n	80004a4 <__aeabi_ui2f+0x54>
 80004d0:	fbffffff 	.word	0xfbffffff

080004d4 <__clzsi2>:
 80004d4:	211c      	movs	r1, #28
 80004d6:	2301      	movs	r3, #1
 80004d8:	041b      	lsls	r3, r3, #16
 80004da:	4298      	cmp	r0, r3
 80004dc:	d301      	bcc.n	80004e2 <__clzsi2+0xe>
 80004de:	0c00      	lsrs	r0, r0, #16
 80004e0:	3910      	subs	r1, #16
 80004e2:	0a1b      	lsrs	r3, r3, #8
 80004e4:	4298      	cmp	r0, r3
 80004e6:	d301      	bcc.n	80004ec <__clzsi2+0x18>
 80004e8:	0a00      	lsrs	r0, r0, #8
 80004ea:	3908      	subs	r1, #8
 80004ec:	091b      	lsrs	r3, r3, #4
 80004ee:	4298      	cmp	r0, r3
 80004f0:	d301      	bcc.n	80004f6 <__clzsi2+0x22>
 80004f2:	0900      	lsrs	r0, r0, #4
 80004f4:	3904      	subs	r1, #4
 80004f6:	a202      	add	r2, pc, #8	; (adr r2, 8000500 <__clzsi2+0x2c>)
 80004f8:	5c10      	ldrb	r0, [r2, r0]
 80004fa:	1840      	adds	r0, r0, r1
 80004fc:	4770      	bx	lr
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	02020304 	.word	0x02020304
 8000504:	01010101 	.word	0x01010101
	...

08000510 <apInit>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  ledInit();
 8000514:	f000 f87d 	bl	8000612 <ledInit>
  pwmInit();
 8000518:	f000 f8e8 	bl	80006ec <pwmInit>
  adcInit();
 800051c:	f000 f830 	bl	8000580 <adcInit>

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <apMain>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apMain(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    }
    */

    //Non-Blocking & Encapsulation & Modularization
    ledSetDuty(_DEF_CH1, 100);
 800052e:	2164      	movs	r1, #100	; 0x64
 8000530:	2000      	movs	r0, #0
 8000532:	f000 f8bf 	bl	80006b4 <ledSetDuty>

    if (millis() - pre_time >= 500)
 8000536:	f000 f91f 	bl	8000778 <millis>
 800053a:	0002      	movs	r2, r0
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	1ad2      	subs	r2, r2, r3
 8000540:	23fa      	movs	r3, #250	; 0xfa
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	429a      	cmp	r2, r3
 8000546:	d306      	bcc.n	8000556 <apMain+0x2e>
    {
      pre_time = millis();
 8000548:	f000 f916 	bl	8000778 <millis>
 800054c:	0003      	movs	r3, r0
 800054e:	607b      	str	r3, [r7, #4]
      ledToggle(_DEF_CH1);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 f892 	bl	800067a <ledToggle>

    }

    adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.0f;
 8000556:	2000      	movs	r0, #0
 8000558:	f000 f840 	bl	80005dc <adcReadVoltage>
 800055c:	0003      	movs	r3, r0
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ff76 	bl	8000450 <__aeabi_ui2f>
 8000564:	1c03      	adds	r3, r0, #0
 8000566:	4904      	ldr	r1, [pc, #16]	; (8000578 <apMain+0x50>)
 8000568:	1c18      	adds	r0, r3, #0
 800056a:	f7ff fe59 	bl	8000220 <__aeabi_fdiv>
 800056e:	1c03      	adds	r3, r0, #0
 8000570:	1c1a      	adds	r2, r3, #0
 8000572:	4b02      	ldr	r3, [pc, #8]	; (800057c <apMain+0x54>)
 8000574:	601a      	str	r2, [r3, #0]
    ledSetDuty(_DEF_CH1, 100);
 8000576:	e7da      	b.n	800052e <apMain+0x6>
 8000578:	42c80000 	.word	0x42c80000
 800057c:	2000002c 	.word	0x2000002c

08000580 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  return true;
 8000584:	2301      	movs	r3, #1
}
 8000586:	0018      	movs	r0, r3
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <adcRead>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint16_t
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	0002      	movs	r2, r0
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	701a      	strb	r2, [r3, #0]
  uint16_t ret = 0;
 8000598:	240e      	movs	r4, #14
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
  switch (ch)
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d110      	bne.n	80005ca <adcRead+0x3e>
  {
    case _DEF_CH1:
      HAL_ADC_Start(&hadc1);
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <adcRead+0x4c>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 ff3e 	bl	800142c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 10);
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <adcRead+0x4c>)
 80005b2:	210a      	movs	r1, #10
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 ff87 	bl	80014c8 <HAL_ADC_PollForConversion>
      ret = HAL_ADC_GetValue(&hadc1);
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <adcRead+0x4c>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f811 	bl	80015e4 <HAL_ADC_GetValue>
 80005c2:	0002      	movs	r2, r0
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	801a      	strh	r2, [r3, #0]
      //HAL_ADC_Stop(&hadc1);
      break;
 80005c8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80005ca:	230e      	movs	r3, #14
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	881b      	ldrh	r3, [r3, #0]
}
 80005d0:	0018      	movs	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b005      	add	sp, #20
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	20000030 	.word	0x20000030

080005dc <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	0002      	movs	r2, r0
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	701a      	strb	r2, [r3, #0]
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ffcd 	bl	800058c <adcRead>
 80005f2:	0003      	movs	r3, r0
 80005f4:	60fb      	str	r3, [r7, #12]
  ret = (330 * adc_data) / 4096;
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	0013      	movs	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	189b      	adds	r3, r3, r2
 80005fe:	015a      	lsls	r2, r3, #5
 8000600:	189b      	adds	r3, r3, r2
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	0b1b      	lsrs	r3, r3, #12
 8000606:	60bb      	str	r3, [r7, #8]

  return ret;
 8000608:	68bb      	ldr	r3, [r7, #8]
}
 800060a:	0018      	movs	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}

08000612 <ledInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  return true;
 8000616:	2301      	movs	r3, #1
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	701a      	strb	r2, [r3, #0]
  switch(ch)
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d109      	bne.n	8000648 <ledOn+0x28>
  {
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <ledOn+0x30>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	2264      	movs	r2, #100	; 0x64
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b29b      	uxth	r3, r3
 800063e:	0019      	movs	r1, r3
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f861 	bl	8000708 <pwmWrite>
      break;
 8000646:	46c0      	nop			; (mov r8, r8)
  }
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b002      	add	sp, #8
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000

08000654 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <ledOff+0x1e>
  {
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
 8000668:	2164      	movs	r1, #100	; 0x64
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f84c 	bl	8000708 <pwmWrite>
      break;
 8000670:	46c0      	nop			; (mov r8, r8)
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}

0800067a <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	0002      	movs	r2, r0
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10d      	bne.n	80006aa <ledToggle+0x30>
  {
    case _DEF_CH1:
      //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
      if (pwmRead(_DEF_CH1) == 100)
 800068e:	2000      	movs	r0, #0
 8000690:	f000 f854 	bl	800073c <pwmRead>
 8000694:	0003      	movs	r3, r0
 8000696:	2b64      	cmp	r3, #100	; 0x64
 8000698:	d103      	bne.n	80006a2 <ledToggle+0x28>
      {
        ledOn(_DEF_CH1);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ffc0 	bl	8000620 <ledOn>
      }
      else
      {
        ledOff(_DEF_CH1);
      }
      break;
 80006a0:	e002      	b.n	80006a8 <ledToggle+0x2e>
        ledOff(_DEF_CH1);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ffd6 	bl	8000654 <ledOff>
      break;
 80006a8:	46c0      	nop			; (mov r8, r8)
  }
}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b002      	add	sp, #8
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <ledSetDuty>:
* Inputs        : ch, duty_data
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	1c0a      	adds	r2, r1, #0
 80006c4:	801a      	strh	r2, [r3, #0]
  switch(ch)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d107      	bne.n	80006de <ledSetDuty+0x2a>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ledSetDuty+0x34>)
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	1d39      	adds	r1, r7, #4
 80006d8:	8809      	ldrh	r1, [r1, #0]
 80006da:	52d1      	strh	r1, [r2, r3]
      break;
 80006dc:	46c0      	nop			; (mov r8, r8)
  }

}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000000 	.word	0x20000000

080006ec <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <pwmInit+0x18>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 f8e7 	bl	80028c8 <HAL_TIM_PWM_Start>

  return true;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	0018      	movs	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000094 	.word	0x20000094

08000708 <pwmWrite>:
* Inputs        : ch, duty
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	0002      	movs	r2, r0
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	1c0a      	adds	r2, r1, #0
 8000718:	801a      	strh	r2, [r3, #0]
  switch(ch)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d105      	bne.n	800072e <pwmWrite+0x26>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <pwmWrite+0x30>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 800072c:	46c0      	nop			; (mov r8, r8)
  }
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000094 	.word	0x20000094

0800073c <pwmRead>:
* Inputs        : ch
* Outputs       : pwm_data
* Return        : uint16_t
*****************************************************************************/
uint16_t pwmRead(uint8_t ch)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
  uint16_t pwm_data = 0;
 8000748:	210e      	movs	r1, #14
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	801a      	strh	r2, [r3, #0]


  switch(ch)
 8000750:	1dfb      	adds	r3, r7, #7
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d105      	bne.n	8000764 <pwmRead+0x28>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <pwmRead+0x38>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800075e:	187b      	adds	r3, r7, r1
 8000760:	801a      	strh	r2, [r3, #0]
      break;
 8000762:	46c0      	nop			; (mov r8, r8)
  }

  return pwm_data;
 8000764:	230e      	movs	r3, #14
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	881b      	ldrh	r3, [r3, #0]

}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b004      	add	sp, #16
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000094 	.word	0x20000094

08000778 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800077c:	f000 fb4e 	bl	8000e1c <HAL_GetTick>
 8000780:	0003      	movs	r3, r0
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 facc 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f80b 	bl	80007aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 f982 	bl	8000a9c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000798:	f000 f8b6 	bl	8000908 <MX_TIM1_Init>
  MX_ADC1_Init();
 800079c:	f000 f848 	bl	8000830 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 80007a0:	f7ff feb6 	bl	8000510 <apInit>
  apMain();
 80007a4:	f7ff fec0 	bl	8000528 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x20>

080007aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007aa:	b590      	push	{r4, r7, lr}
 80007ac:	b08d      	sub	sp, #52	; 0x34
 80007ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b0:	2414      	movs	r4, #20
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	0018      	movs	r0, r3
 80007b6:	231c      	movs	r3, #28
 80007b8:	001a      	movs	r2, r3
 80007ba:	2100      	movs	r1, #0
 80007bc:	f003 f826 	bl	800380c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	003b      	movs	r3, r7
 80007c2:	0018      	movs	r0, r3
 80007c4:	2314      	movs	r3, #20
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f003 f81f 	bl	800380c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2202      	movs	r2, #2
 80007d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0052      	lsls	r2, r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2240      	movs	r2, #64	; 0x40
 80007e6:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fb80 	bl	8001ef0 <HAL_RCC_OscConfig>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80007f4:	f000 f968 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	003b      	movs	r3, r7
 80007fa:	2207      	movs	r2, #7
 80007fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fe:	003b      	movs	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	003b      	movs	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	003b      	movs	r3, r7
 8000818:	2101      	movs	r1, #1
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fd62 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000824:	f000 f950 	bl	8000ac8 <Error_Handler>
  }
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b00d      	add	sp, #52	; 0x34
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	0018      	movs	r0, r3
 800083a:	230c      	movs	r3, #12
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f002 ffe4 	bl	800380c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000844:	4b2d      	ldr	r3, [pc, #180]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000846:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <MX_ADC1_Init+0xd0>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <MX_ADC1_Init+0xcc>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	05d2      	lsls	r2, r2, #23
 8000850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_ADC1_Init+0xcc>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000866:	2204      	movs	r2, #4
 8000868:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <MX_ADC1_Init+0xcc>)
 800086c:	2200      	movs	r2, #0
 800086e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000872:	2200      	movs	r2, #0
 8000874:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000878:	2200      	movs	r2, #0
 800087a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_ADC1_Init+0xcc>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000884:	2220      	movs	r2, #32
 8000886:	2100      	movs	r1, #0
 8000888:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_ADC1_Init+0xcc>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_ADC1_Init+0xcc>)
 8000898:	222c      	movs	r2, #44	; 0x2c
 800089a:	2100      	movs	r1, #0
 800089c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	2100      	movs	r1, #0
 80008b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 fbeb 	bl	800109c <HAL_ADC_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80008ca:	f000 f8fd 	bl	8000ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <MX_ADC1_Init+0xd4>)
 80008d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_ADC1_Init+0xcc>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fe88 	bl	80015fc <HAL_ADC_ConfigChannel>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f000 f8ea 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b004      	add	sp, #16
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000030 	.word	0x20000030
 8000900:	40012400 	.word	0x40012400
 8000904:	10000010 	.word	0x10000010

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	; 0x70
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	2310      	movs	r3, #16
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f002 ff77 	bl	800380c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091e:	2354      	movs	r3, #84	; 0x54
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f002 ff6f 	bl	800380c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2338      	movs	r3, #56	; 0x38
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f002 ff67 	bl	800380c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f002 ff60 	bl	800380c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b51      	ldr	r3, [pc, #324]	; (8000a94 <MX_TIM1_Init+0x18c>)
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <MX_TIM1_Init+0x190>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000954:	222f      	movs	r2, #47	; 0x2f
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b4e      	ldr	r3, [pc, #312]	; (8000a94 <MX_TIM1_Init+0x18c>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800095e:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000960:	2263      	movs	r2, #99	; 0x63
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <MX_TIM1_Init+0x18c>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b48      	ldr	r3, [pc, #288]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000978:	0018      	movs	r0, r3
 800097a:	f001 feed 	bl	8002758 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000982:	f000 f8a1 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2160      	movs	r1, #96	; 0x60
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b40      	ldr	r3, [pc, #256]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f002 f96e 	bl	8002c78 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009a0:	f000 f892 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_TIM1_Init+0x18c>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 ff2e 	bl	8002808 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009b0:	f000 f88a 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2154      	movs	r1, #84	; 0x54
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_TIM1_Init+0x18c>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f002 fdf0 	bl	80035b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80009d8:	f000 f876 	bl	8000ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009dc:	2138      	movs	r1, #56	; 0x38
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2260      	movs	r2, #96	; 0x60
 80009e2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a08:	1879      	adds	r1, r7, r1
 8000a0a:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 f832 	bl	8002a78 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000a18:	f000 f856 	bl	8000ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0192      	lsls	r2, r2, #6
 8000a40:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	0492      	lsls	r2, r2, #18
 8000a5a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a6e:	1d3a      	adds	r2, r7, #4
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 fdff 	bl	8003678 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000a7e:	f000 f823 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <MX_TIM1_Init+0x18c>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 f8c5 	bl	8000c14 <HAL_TIM_MspPostInit>

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b01c      	add	sp, #112	; 0x70
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000094 	.word	0x20000094
 8000a98:	40012c00 	.word	0x40012c00

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_GPIO_Init+0x28>)
 8000aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_GPIO_Init+0x28>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
 8000aae:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_GPIO_Init+0x28>)
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0549      	lsls	r1, r1, #21
 8000afc:	430a      	orrs	r2, r1
 8000afe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_MspInit+0x44>)
 8000b02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	055b      	lsls	r3, r3, #21
 8000b08:	4013      	ands	r3, r2
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b091      	sub	sp, #68	; 0x44
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	232c      	movs	r3, #44	; 0x2c
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	0018      	movs	r0, r3
 8000b2a:	2314      	movs	r3, #20
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f002 fe6c 	bl	800380c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	2410      	movs	r4, #16
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	231c      	movs	r3, #28
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f002 fe64 	bl	800380c <memset>
  if(hadc->Instance==ADC1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <HAL_ADC_MspInit+0xb0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d139      	bne.n	8000bc2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	01d2      	lsls	r2, r2, #7
 8000b54:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fd0c 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b68:	f7ff ffae 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	0349      	lsls	r1, r1, #13
 8000b76:	430a      	orrs	r2, r1
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	035b      	lsls	r3, r3, #13
 8000b82:	4013      	ands	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	430a      	orrs	r2, r1
 8000b92:	635a      	str	r2, [r3, #52]	; 0x34
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_ADC_MspInit+0xb4>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ba0:	212c      	movs	r1, #44	; 0x2c
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2203      	movs	r2, #3
 8000bac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	187a      	adds	r2, r7, r1
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 f825 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b011      	add	sp, #68	; 0x44
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40012400 	.word	0x40012400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_TIM_Base_MspInit+0x38>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10d      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_TIM_Base_MspInit+0x3c>)
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_TIM_Base_MspInit+0x3c>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	0109      	lsls	r1, r1, #4
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_TIM_Base_MspInit+0x3c>)
 8000bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40012c00 	.word	0x40012c00
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	240c      	movs	r4, #12
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	2314      	movs	r3, #20
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f002 fdf0 	bl	800380c <memset>
  if(htim->Instance==TIM1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <HAL_TIM_MspPostInit+0x70>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d122      	bne.n	8000c7c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_TIM_MspPostInit+0x74>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_TIM_MspPostInit+0x74>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_TIM_MspPostInit+0x74>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	0021      	movs	r1, r4
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2220      	movs	r2, #32
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2205      	movs	r2, #5
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 ffc8 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b009      	add	sp, #36	; 0x24
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f8a4 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SystemInit+0x14>)
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	0512      	lsls	r2, r2, #20
 8000cc6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cda:	e003      	b.n	8000ce4 <LoopCopyDataInit>

08000cdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000cde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ce0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ce2:	3104      	adds	r1, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ce8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cec:	d3f6      	bcc.n	8000cdc <CopyDataInit>
  ldr r2, =_sbss
 8000cee:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <LoopForever+0x12>)
  b LoopFillZerobss
 8000cf0:	e002      	b.n	8000cf8 <LoopFillZerobss>

08000cf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000cf4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf6:	3204      	adds	r2, #4

08000cf8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <LoopForever+0x16>)
  cmp r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cfc:	d3f9      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cfe:	f7ff ffdd 	bl	8000cbc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d02:	f002 fd5f 	bl	80037c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff fd3f 	bl	8000788 <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000d10:	08003950 	.word	0x08003950
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d18:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000d1c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000d20:	200000e4 	.word	0x200000e4

08000d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x3c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_Init+0x3c>)
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	0049      	lsls	r1, r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f810 	bl	8000d68 <HAL_InitTick>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d54:	f7ff febe 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	1dfb      	adds	r3, r7, #7
 8000d5a:	781b      	ldrb	r3, [r3, #0]
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	230f      	movs	r3, #15
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_InitTick+0x88>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d02b      	beq.n	8000dd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_InitTick+0x8c>)
 8000d82:	681c      	ldr	r4, [r3, #0]
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_InitTick+0x88>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	0019      	movs	r1, r3
 8000d8a:	23fa      	movs	r3, #250	; 0xfa
 8000d8c:	0098      	lsls	r0, r3, #2
 8000d8e:	f7ff f9bb 	bl	8000108 <__udivsi3>
 8000d92:	0003      	movs	r3, r0
 8000d94:	0019      	movs	r1, r3
 8000d96:	0020      	movs	r0, r4
 8000d98:	f7ff f9b6 	bl	8000108 <__udivsi3>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 ff27 	bl	8001bf2 <HAL_SYSTICK_Config>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d112      	bne.n	8000dce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d80a      	bhi.n	8000dc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	2301      	movs	r3, #1
 8000db2:	425b      	negs	r3, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 ff06 	bl	8001bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_InitTick+0x90>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e00d      	b.n	8000de0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e008      	b.n	8000de0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dce:	230f      	movs	r3, #15
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e003      	b.n	8000de0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000de0:	230f      	movs	r3, #15
 8000de2:	18fb      	adds	r3, r7, r3
 8000de4:	781b      	ldrb	r3, [r3, #0]
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b005      	add	sp, #20
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	2000000c 	.word	0x2000000c
 8000df4:	20000004 	.word	0x20000004
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_IncTick+0x18>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_IncTick+0x1c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	18d2      	adds	r2, r2, r3
 8000e0a:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <HAL_IncTick+0x18>)
 8000e0c:	601a      	str	r2, [r3, #0]
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000e0 	.word	0x200000e0
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <HAL_GetTick+0x10>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	200000e0 	.word	0x200000e0

08000e30 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e40:	401a      	ands	r2, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	ff3fffff 	.word	0xff3fffff

08000e58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	23c0      	movs	r3, #192	; 0xc0
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	4013      	ands	r3, r2
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	2104      	movs	r1, #4
 8000e86:	400a      	ands	r2, r1
 8000e88:	2107      	movs	r1, #7
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	43d2      	mvns	r2, r2
 8000e90:	401a      	ands	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2104      	movs	r1, #4
 8000e96:	400b      	ands	r3, r1
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4099      	lsls	r1, r3
 8000e9c:	000b      	movs	r3, r1
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	4091      	lsls	r1, r2
 8000ec4:	000a      	movs	r2, r1
 8000ec6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2104      	movs	r1, #4
 8000ecc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ece:	40da      	lsrs	r2, r3
 8000ed0:	0013      	movs	r3, r2
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	23c0      	movs	r3, #192	; 0xc0
 8000ee8:	011b      	lsls	r3, r3, #4
 8000eea:	4013      	ands	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}

08000efc <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	211f      	movs	r1, #31
 8000f10:	400a      	ands	r2, r1
 8000f12:	210f      	movs	r1, #15
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0e9b      	lsrs	r3, r3, #26
 8000f20:	210f      	movs	r1, #15
 8000f22:	4019      	ands	r1, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	201f      	movs	r0, #31
 8000f28:	4003      	ands	r3, r0
 8000f2a:	4099      	lsls	r1, r3
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	0a5b      	lsrs	r3, r3, #9
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	0252      	lsls	r2, r2, #9
 8000f70:	0a52      	lsrs	r2, r2, #9
 8000f72:	43d2      	mvns	r2, r2
 8000f74:	401a      	ands	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	0212      	lsls	r2, r2, #8
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	4904      	ldr	r1, [pc, #16]	; (8000fb8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000fa6:	400b      	ands	r3, r1
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	7fffff00 	.word	0x7fffff00

08000fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	0552      	lsls	r2, r2, #21
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	6fffffe8 	.word	0x6fffffe8

08000fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	055b      	lsls	r3, r3, #21
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d101      	bne.n	8001002 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}

0800100c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <LL_ADC_Enable+0x20>)
 800101a:	4013      	ands	r3, r2
 800101c:	2201      	movs	r2, #1
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	7fffffe8 	.word	0x7fffffe8

08001030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2201      	movs	r2, #1
 800103e:	4013      	ands	r3, r2
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <LL_ADC_IsEnabled+0x18>
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <LL_ADC_IsEnabled+0x1a>
 8001048:	2300      	movs	r3, #0
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <LL_ADC_REG_StartConversion+0x20>)
 8001062:	4013      	ands	r3, r2
 8001064:	2204      	movs	r2, #4
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	b002      	add	sp, #8
 8001072:	bd80      	pop	{r7, pc}
 8001074:	7fffffe8 	.word	0x7fffffe8

08001078 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2204      	movs	r2, #4
 8001086:	4013      	ands	r3, r2
 8001088:	2b04      	cmp	r3, #4
 800108a:	d101      	bne.n	8001090 <LL_ADC_REG_IsConversionOngoing+0x18>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001090:	2300      	movs	r3, #0
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a4:	231f      	movs	r3, #31
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e1a0      	b.n	8001404 <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10a      	bne.n	80010e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fd25 	bl	8000b1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2254      	movs	r2, #84	; 0x54
 80010dc:	2100      	movs	r1, #0
 80010de:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ff7d 	bl	8000fe4 <LL_ADC_IsInternalRegulatorEnabled>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d114      	bne.n	8001118 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0018      	movs	r0, r3
 80010f4:	f7ff ff62 	bl	8000fbc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80010f8:	4bc4      	ldr	r3, [pc, #784]	; (800140c <HAL_ADC_Init+0x370>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	49c4      	ldr	r1, [pc, #784]	; (8001410 <HAL_ADC_Init+0x374>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff f802 	bl	8000108 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800110a:	e002      	b.n	8001112 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3b01      	subs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f9      	bne.n	800110c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ff61 	bl	8000fe4 <LL_ADC_IsInternalRegulatorEnabled>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d10f      	bne.n	8001146 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	2210      	movs	r2, #16
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2201      	movs	r2, #1
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800113e:	231f      	movs	r3, #31
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	0018      	movs	r0, r3
 800114c:	f7ff ff94 	bl	8001078 <LL_ADC_REG_IsConversionOngoing>
 8001150:	0003      	movs	r3, r0
 8001152:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	2210      	movs	r2, #16
 800115a:	4013      	ands	r3, r2
 800115c:	d000      	beq.n	8001160 <HAL_ADC_Init+0xc4>
 800115e:	e144      	b.n	80013ea <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d000      	beq.n	8001168 <HAL_ADC_Init+0xcc>
 8001166:	e140      	b.n	80013ea <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	4aa9      	ldr	r2, [pc, #676]	; (8001414 <HAL_ADC_Init+0x378>)
 800116e:	4013      	ands	r3, r2
 8001170:	2202      	movs	r2, #2
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff57 	bl	8001030 <LL_ADC_IsEnabled>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d000      	beq.n	8001188 <HAL_ADC_Init+0xec>
 8001186:	e0ad      	b.n	80012e4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e1b      	ldrb	r3, [r3, #24]
 8001190:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001192:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e5b      	ldrb	r3, [r3, #25]
 8001198:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800119a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	7e9b      	ldrb	r3, [r3, #26]
 80011a0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_ADC_Init+0x116>
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	e000      	b.n	80011b4 <HAL_ADC_Init+0x118>
 80011b2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011b4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011ba:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da04      	bge.n	80011ce <HAL_ADC_Init+0x132>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	e001      	b.n	80011d2 <HAL_ADC_Init+0x136>
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80011d2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	212c      	movs	r1, #44	; 0x2c
 80011d8:	5c5b      	ldrb	r3, [r3, r1]
 80011da:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011dc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2220      	movs	r2, #32
 80011e8:	5c9b      	ldrb	r3, [r3, r2]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d115      	bne.n	800121a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e9b      	ldrb	r3, [r3, #26]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0252      	lsls	r2, r2, #9
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	e00b      	b.n	800121a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001206:	2220      	movs	r2, #32
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2201      	movs	r2, #1
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00a      	beq.n	8001238 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001226:	23e0      	movs	r3, #224	; 0xe0
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001230:	4313      	orrs	r3, r2
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4a76      	ldr	r2, [pc, #472]	; (8001418 <HAL_ADC_Init+0x37c>)
 8001240:	4013      	ands	r3, r2
 8001242:	0019      	movs	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	430a      	orrs	r2, r1
 800124c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	0f9b      	lsrs	r3, r3, #30
 8001254:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800125a:	4313      	orrs	r3, r2
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4313      	orrs	r3, r2
 8001260:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	223c      	movs	r2, #60	; 0x3c
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d111      	bne.n	8001290 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	0f9b      	lsrs	r3, r3, #30
 8001272:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001278:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800127e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001284:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	2201      	movs	r2, #1
 800128c:	4313      	orrs	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	4a61      	ldr	r2, [pc, #388]	; (800141c <HAL_ADC_Init+0x380>)
 8001298:	4013      	ands	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	23c0      	movs	r3, #192	; 0xc0
 80012ac:	061b      	lsls	r3, r3, #24
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d018      	beq.n	80012e4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d012      	beq.n	80012e4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	061b      	lsls	r3, r3, #24
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d00c      	beq.n	80012e4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HAL_ADC_Init+0x384>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_ADC_Init+0x388>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	23f0      	movs	r3, #240	; 0xf0
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	401a      	ands	r2, r3
 80012de:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_ADC_Init+0x384>)
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	001a      	movs	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	f7ff fdbf 	bl	8000e72 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6818      	ldr	r0, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	494a      	ldr	r1, [pc, #296]	; (8001428 <HAL_ADC_Init+0x38c>)
 80012fe:	001a      	movs	r2, r3
 8001300:	f7ff fdb7 	bl	8000e72 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2110      	movs	r1, #16
 8001318:	4249      	negs	r1, r1
 800131a:	430a      	orrs	r2, r1
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
 800131e:	e03a      	b.n	8001396 <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	429a      	cmp	r2, r3
 800132a:	d134      	bne.n	8001396 <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	e00c      	b.n	800134c <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	40da      	lsrs	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	220f      	movs	r2, #15
 8001340:	4013      	ands	r3, r2
 8001342:	2b0f      	cmp	r3, #15
 8001344:	d006      	beq.n	8001354 <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	3301      	adds	r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d9ef      	bls.n	8001332 <HAL_ADC_Init+0x296>
 8001352:	e000      	b.n	8001356 <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 8001354:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d109      	bne.n	8001370 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2110      	movs	r1, #16
 8001368:	4249      	negs	r1, r1
 800136a:	430a      	orrs	r2, r1
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
 800136e:	e012      	b.n	8001396 <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	3b01      	subs	r3, #1
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	221c      	movs	r2, #28
 8001380:	4013      	ands	r3, r2
 8001382:	2210      	movs	r2, #16
 8001384:	4252      	negs	r2, r2
 8001386:	409a      	lsls	r2, r3
 8001388:	0011      	movs	r1, r2
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2100      	movs	r1, #0
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff fd85 	bl	8000eac <LL_ADC_GetSamplingTimeCommonChannels>
 80013a2:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d10b      	bne.n	80013c4 <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	2203      	movs	r2, #3
 80013b8:	4393      	bics	r3, r2
 80013ba:	2201      	movs	r2, #1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013c2:	e01c      	b.n	80013fe <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c8:	2212      	movs	r2, #18
 80013ca:	4393      	bics	r3, r2
 80013cc:	2210      	movs	r2, #16
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2201      	movs	r2, #1
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013e0:	231f      	movs	r3, #31
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e8:	e009      	b.n	80013fe <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	2210      	movs	r2, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013f6:	231f      	movs	r3, #31
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80013fe:	231f      	movs	r3, #31
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	781b      	ldrb	r3, [r3, #0]
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b008      	add	sp, #32
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	00030d40 	.word	0x00030d40
 8001414:	fffffefd 	.word	0xfffffefd
 8001418:	fffe0201 	.word	0xfffe0201
 800141c:	1ffffc02 	.word	0x1ffffc02
 8001420:	40012708 	.word	0x40012708
 8001424:	ffc3ffff 	.word	0xffc3ffff
 8001428:	7fffff04 	.word	0x7fffff04

0800142c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff fe1d 	bl	8001078 <LL_ADC_REG_IsConversionOngoing>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d135      	bne.n	80014ae <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2254      	movs	r2, #84	; 0x54
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_ADC_Start+0x24>
 800144c:	2302      	movs	r3, #2
 800144e:	e035      	b.n	80014bc <HAL_ADC_Start+0x90>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2254      	movs	r2, #84	; 0x54
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001458:	250f      	movs	r5, #15
 800145a:	197c      	adds	r4, r7, r5
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0018      	movs	r0, r3
 8001460:	f000 faa2 	bl	80019a8 <ADC_Enable>
 8001464:	0003      	movs	r3, r0
 8001466:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001468:	197b      	adds	r3, r7, r5
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d119      	bne.n	80014a4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_ADC_Start+0x98>)
 8001476:	4013      	ands	r3, r2
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	0052      	lsls	r2, r2, #1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	221c      	movs	r2, #28
 800148e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2254      	movs	r2, #84	; 0x54
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fdd9 	bl	8001054 <LL_ADC_REG_StartConversion>
 80014a2:	e008      	b.n	80014b6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2254      	movs	r2, #84	; 0x54
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]
 80014ac:	e003      	b.n	80014b6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	2202      	movs	r2, #2
 80014b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b004      	add	sp, #16
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	fffff0fe 	.word	0xfffff0fe

080014c8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d102      	bne.n	80014e0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80014da:	2308      	movs	r3, #8
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e00f      	b.n	8001500 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	2220      	movs	r2, #32
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e06c      	b.n	80015d6 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80014fc:	2304      	movs	r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001500:	f7ff fc8c 	bl	8000e1c <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001508:	e019      	b.n	800153e <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	d016      	beq.n	800153e <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001510:	f7ff fc84 	bl	8000e1c <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d302      	bcc.n	8001526 <HAL_ADC_PollForConversion+0x5e>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	2204      	movs	r2, #4
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2254      	movs	r2, #84	; 0x54
 8001536:	2100      	movs	r1, #0
 8001538:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e04b      	b.n	80015d6 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	d0df      	beq.n	800150a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff fcbc 	bl	8000eda <LL_ADC_REG_IsTriggerSourceSWStart>
 8001562:	1e03      	subs	r3, r0, #0
 8001564:	d02e      	beq.n	80015c4 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e9b      	ldrb	r3, [r3, #26]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d12a      	bne.n	80015c4 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2208      	movs	r2, #8
 8001576:	4013      	ands	r3, r2
 8001578:	2b08      	cmp	r3, #8
 800157a:	d123      	bne.n	80015c4 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fd79 	bl	8001078 <LL_ADC_REG_IsConversionOngoing>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d110      	bne.n	80015ac <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	210c      	movs	r1, #12
 8001596:	438a      	bics	r2, r1
 8001598:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <HAL_ADC_PollForConversion+0x118>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	2201      	movs	r2, #1
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	659a      	str	r2, [r3, #88]	; 0x58
 80015aa:	e00b      	b.n	80015c4 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	2220      	movs	r2, #32
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2201      	movs	r2, #1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e1b      	ldrb	r3, [r3, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d103      	bne.n	80015d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	220c      	movs	r2, #12
 80015d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b004      	add	sp, #16
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	fffffefe 	.word	0xfffffefe

080015e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001606:	2317      	movs	r3, #23
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2254      	movs	r2, #84	; 0x54
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x24>
 800161c:	2302      	movs	r3, #2
 800161e:	e1be      	b.n	800199e <HAL_ADC_ConfigChannel+0x3a2>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2254      	movs	r2, #84	; 0x54
 8001624:	2101      	movs	r1, #1
 8001626:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fd23 	bl	8001078 <LL_ADC_REG_IsConversionOngoing>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d000      	beq.n	8001638 <HAL_ADC_ConfigChannel+0x3c>
 8001636:	e1a1      	b.n	800197c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d100      	bne.n	8001642 <HAL_ADC_ConfigChannel+0x46>
 8001640:	e152      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	429a      	cmp	r2, r3
 800164c:	d004      	beq.n	8001658 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001652:	4ac2      	ldr	r2, [pc, #776]	; (800195c <HAL_ADC_ConfigChannel+0x360>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d108      	bne.n	800166a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0019      	movs	r1, r3
 8001662:	0010      	movs	r0, r2
 8001664:	f7ff fc6a 	bl	8000f3c <LL_ADC_REG_SetSequencerChAdd>
 8001668:	e0ed      	b.n	8001846 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	211f      	movs	r1, #31
 8001674:	400b      	ands	r3, r1
 8001676:	210f      	movs	r1, #15
 8001678:	4099      	lsls	r1, r3
 800167a:	000b      	movs	r3, r1
 800167c:	43db      	mvns	r3, r3
 800167e:	4013      	ands	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	025b      	lsls	r3, r3, #9
 8001688:	0a5b      	lsrs	r3, r3, #9
 800168a:	d105      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x9c>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	221f      	movs	r2, #31
 8001694:	4013      	ands	r3, r2
 8001696:	e0bc      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d000      	beq.n	80016a4 <HAL_ADC_ConfigChannel+0xa8>
 80016a2:	e0b5      	b.n	8001810 <HAL_ADC_ConfigChannel+0x214>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d000      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0xb4>
 80016ae:	e0ad      	b.n	800180c <HAL_ADC_ConfigChannel+0x210>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2204      	movs	r2, #4
 80016b6:	4013      	ands	r3, r2
 80016b8:	d000      	beq.n	80016bc <HAL_ADC_ConfigChannel+0xc0>
 80016ba:	e0a5      	b.n	8001808 <HAL_ADC_ConfigChannel+0x20c>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2208      	movs	r2, #8
 80016c2:	4013      	ands	r3, r2
 80016c4:	d000      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0xcc>
 80016c6:	e09d      	b.n	8001804 <HAL_ADC_ConfigChannel+0x208>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2210      	movs	r2, #16
 80016ce:	4013      	ands	r3, r2
 80016d0:	d000      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0xd8>
 80016d2:	e095      	b.n	8001800 <HAL_ADC_ConfigChannel+0x204>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2220      	movs	r2, #32
 80016da:	4013      	ands	r3, r2
 80016dc:	d000      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0xe4>
 80016de:	e08d      	b.n	80017fc <HAL_ADC_ConfigChannel+0x200>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	4013      	ands	r3, r2
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_ConfigChannel+0xf0>
 80016ea:	e085      	b.n	80017f8 <HAL_ADC_ConfigChannel+0x1fc>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2280      	movs	r2, #128	; 0x80
 80016f2:	4013      	ands	r3, r2
 80016f4:	d000      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0xfc>
 80016f6:	e07d      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x1f8>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4013      	ands	r3, r2
 8001702:	d000      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x10a>
 8001704:	e074      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x1f4>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d000      	beq.n	8001714 <HAL_ADC_ConfigChannel+0x118>
 8001712:	e06b      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1f0>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	d000      	beq.n	8001722 <HAL_ADC_ConfigChannel+0x126>
 8001720:	e062      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x1ec>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	4013      	ands	r3, r2
 800172c:	d000      	beq.n	8001730 <HAL_ADC_ConfigChannel+0x134>
 800172e:	e059      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1e8>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	015b      	lsls	r3, r3, #5
 8001738:	4013      	ands	r3, r2
 800173a:	d151      	bne.n	80017e0 <HAL_ADC_ConfigChannel+0x1e4>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	4013      	ands	r3, r2
 8001746:	d149      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1e0>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	01db      	lsls	r3, r3, #7
 8001750:	4013      	ands	r3, r2
 8001752:	d141      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1dc>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4013      	ands	r3, r2
 800175e:	d139      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1d8>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4013      	ands	r3, r2
 800176a:	d131      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x1d4>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	029b      	lsls	r3, r3, #10
 8001774:	4013      	ands	r3, r2
 8001776:	d129      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1d0>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	02db      	lsls	r3, r3, #11
 8001780:	4013      	ands	r3, r2
 8001782:	d121      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x1cc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	031b      	lsls	r3, r3, #12
 800178c:	4013      	ands	r3, r2
 800178e:	d119      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1c8>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	035b      	lsls	r3, r3, #13
 8001798:	4013      	ands	r3, r2
 800179a:	d111      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1c4>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	039b      	lsls	r3, r3, #14
 80017a4:	4013      	ands	r3, r2
 80017a6:	d109      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1c0>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	03db      	lsls	r3, r3, #15
 80017b0:	4013      	ands	r3, r2
 80017b2:	d001      	beq.n	80017b8 <HAL_ADC_ConfigChannel+0x1bc>
 80017b4:	2316      	movs	r3, #22
 80017b6:	e02c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e02a      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017bc:	2315      	movs	r3, #21
 80017be:	e028      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017c0:	2314      	movs	r3, #20
 80017c2:	e026      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017c4:	2313      	movs	r3, #19
 80017c6:	e024      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017c8:	2312      	movs	r3, #18
 80017ca:	e022      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017cc:	2311      	movs	r3, #17
 80017ce:	e020      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017d0:	2310      	movs	r3, #16
 80017d2:	e01e      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017d4:	230f      	movs	r3, #15
 80017d6:	e01c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017d8:	230e      	movs	r3, #14
 80017da:	e01a      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017dc:	230d      	movs	r3, #13
 80017de:	e018      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017e0:	230c      	movs	r3, #12
 80017e2:	e016      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017e4:	230b      	movs	r3, #11
 80017e6:	e014      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017e8:	230a      	movs	r3, #10
 80017ea:	e012      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017ec:	2309      	movs	r3, #9
 80017ee:	e010      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017f0:	2308      	movs	r3, #8
 80017f2:	e00e      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017f4:	2307      	movs	r3, #7
 80017f6:	e00c      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017f8:	2306      	movs	r3, #6
 80017fa:	e00a      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 80017fc:	2305      	movs	r3, #5
 80017fe:	e008      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 8001800:	2304      	movs	r3, #4
 8001802:	e006      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 8001804:	2303      	movs	r3, #3
 8001806:	e004      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_ADC_ConfigChannel+0x216>
 8001810:	2300      	movs	r3, #0
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	6852      	ldr	r2, [r2, #4]
 8001816:	201f      	movs	r0, #31
 8001818:	4002      	ands	r2, r0
 800181a:	4093      	lsls	r3, r2
 800181c:	000a      	movs	r2, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	d808      	bhi.n	8001846 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	f7ff fb5b 	bl	8000efc <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	001a      	movs	r2, r3
 8001854:	f7ff fb96 	bl	8000f84 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db00      	blt.n	8001862 <HAL_ADC_ConfigChannel+0x266>
 8001860:	e096      	b.n	8001990 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff faf7 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <HAL_ADC_ConfigChannel+0x368>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d123      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001880:	d11e      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0412      	lsls	r2, r2, #16
 8001888:	4313      	orrs	r3, r2
 800188a:	4a35      	ldr	r2, [pc, #212]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 800188c:	0019      	movs	r1, r3
 800188e:	0010      	movs	r0, r2
 8001890:	f7ff face 	bl	8000e30 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001894:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_ADC_ConfigChannel+0x36c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_ADC_ConfigChannel+0x370>)
 800189a:	0018      	movs	r0, r3
 800189c:	f7fe fc34 	bl	8000108 <__udivsi3>
 80018a0:	0003      	movs	r3, r0
 80018a2:	001a      	movs	r2, r3
 80018a4:	0013      	movs	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	189b      	adds	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018be:	e067      	b.n	8001990 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a2a      	ldr	r2, [pc, #168]	; (8001970 <HAL_ADC_ConfigChannel+0x374>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d162      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	03db      	lsls	r3, r3, #15
 80018d0:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018d2:	d15d      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	03d2      	lsls	r2, r2, #15
 80018da:	4313      	orrs	r3, r2
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 80018de:	0019      	movs	r1, r3
 80018e0:	0010      	movs	r0, r2
 80018e2:	f7ff faa5 	bl	8000e30 <LL_ADC_SetCommonPathInternalCh>
 80018e6:	e053      	b.n	8001990 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	061b      	lsls	r3, r3, #24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d004      	beq.n	80018fe <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018f8:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_ADC_ConfigChannel+0x360>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d107      	bne.n	800190e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0019      	movs	r1, r3
 8001908:	0010      	movs	r0, r2
 800190a:	f7ff fb28 	bl	8000f5e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	da3c      	bge.n	8001990 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fa9d 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 800191e:	0003      	movs	r3, r0
 8001920:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_ADC_ConfigChannel+0x368>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d108      	bne.n	800193e <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_ADC_ConfigChannel+0x378>)
 8001930:	4013      	ands	r3, r2
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f7ff fa7a 	bl	8000e30 <LL_ADC_SetCommonPathInternalCh>
 800193c:	e028      	b.n	8001990 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_ADC_ConfigChannel+0x374>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d123      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_ADC_ConfigChannel+0x37c>)
 800194c:	4013      	ands	r3, r2
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_ADC_ConfigChannel+0x364>)
 8001950:	0019      	movs	r1, r3
 8001952:	0010      	movs	r0, r2
 8001954:	f7ff fa6c 	bl	8000e30 <LL_ADC_SetCommonPathInternalCh>
 8001958:	e01a      	b.n	8001990 <HAL_ADC_ConfigChannel+0x394>
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	80000004 	.word	0x80000004
 8001960:	40012708 	.word	0x40012708
 8001964:	a4000200 	.word	0xa4000200
 8001968:	20000004 	.word	0x20000004
 800196c:	00030d40 	.word	0x00030d40
 8001970:	a8000400 	.word	0xa8000400
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	2220      	movs	r2, #32
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001988:	2317      	movs	r3, #23
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2254      	movs	r2, #84	; 0x54
 8001994:	2100      	movs	r1, #0
 8001996:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001998:	2317      	movs	r3, #23
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)

080019a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fb39 	bl	8001030 <LL_ADC_IsEnabled>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d162      	bne.n	8001a88 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <ADC_Enable+0xec>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	d00d      	beq.n	80019ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	2210      	movs	r2, #16
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2201      	movs	r2, #1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e04f      	b.n	8001a8a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff fb0c 	bl	800100c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <ADC_Enable+0xf0>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7ff fa2e 	bl	8000e58 <LL_ADC_GetCommonPathInternalCh>
 80019fc:	0002      	movs	r2, r0
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d00f      	beq.n	8001a26 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <ADC_Enable+0xf4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4925      	ldr	r1, [pc, #148]	; (8001aa0 <ADC_Enable+0xf8>)
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7fe fb7b 	bl	8000108 <__udivsi3>
 8001a12:	0003      	movs	r3, r0
 8001a14:	3301      	adds	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a18:	e002      	b.n	8001a20 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7e5b      	ldrb	r3, [r3, #25]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d02c      	beq.n	8001a88 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f9f5 	bl	8000e1c <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a36:	e020      	b.n	8001a7a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff faf7 	bl	8001030 <LL_ADC_IsEnabled>
 8001a42:	1e03      	subs	r3, r0, #0
 8001a44:	d104      	bne.n	8001a50 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7ff fade 	bl	800100c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a50:	f7ff f9e4 	bl	8000e1c <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d90d      	bls.n	8001a7a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	2210      	movs	r2, #16
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	2201      	movs	r2, #1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e007      	b.n	8001a8a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d1d7      	bne.n	8001a38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	80000017 	.word	0x80000017
 8001a98:	40012708 	.word	0x40012708
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	00030d40 	.word	0x00030d40

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	0002      	movs	r2, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ab8:	d828      	bhi.n	8001b0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aba:	4a2f      	ldr	r2, [pc, #188]	; (8001b78 <__NVIC_SetPriority+0xd4>)
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	33c0      	adds	r3, #192	; 0xc0
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	589b      	ldr	r3, [r3, r2]
 8001aca:	1dfa      	adds	r2, r7, #7
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	0011      	movs	r1, r2
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	00d2      	lsls	r2, r2, #3
 8001ad6:	21ff      	movs	r1, #255	; 0xff
 8001ad8:	4091      	lsls	r1, r2
 8001ada:	000a      	movs	r2, r1
 8001adc:	43d2      	mvns	r2, r2
 8001ade:	401a      	ands	r2, r3
 8001ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	019b      	lsls	r3, r3, #6
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	401a      	ands	r2, r3
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	0018      	movs	r0, r3
 8001af0:	2303      	movs	r3, #3
 8001af2:	4003      	ands	r3, r0
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001af8:	481f      	ldr	r0, [pc, #124]	; (8001b78 <__NVIC_SetPriority+0xd4>)
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	430a      	orrs	r2, r1
 8001b04:	33c0      	adds	r3, #192	; 0xc0
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b0a:	e031      	b.n	8001b70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0c:	4a1b      	ldr	r2, [pc, #108]	; (8001b7c <__NVIC_SetPriority+0xd8>)
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	0019      	movs	r1, r3
 8001b14:	230f      	movs	r3, #15
 8001b16:	400b      	ands	r3, r1
 8001b18:	3b08      	subs	r3, #8
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3306      	adds	r3, #6
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	3304      	adds	r3, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	1dfa      	adds	r2, r7, #7
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	400a      	ands	r2, r1
 8001b30:	00d2      	lsls	r2, r2, #3
 8001b32:	21ff      	movs	r1, #255	; 0xff
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	43d2      	mvns	r2, r2
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	401a      	ands	r2, r3
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	4003      	ands	r3, r0
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <__NVIC_SetPriority+0xd8>)
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	001c      	movs	r4, r3
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4023      	ands	r3, r4
 8001b60:	3b08      	subs	r3, #8
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	430a      	orrs	r2, r1
 8001b66:	3306      	adds	r3, #6
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	18c3      	adds	r3, r0, r3
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	46c0      	nop			; (mov r8, r8)
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b003      	add	sp, #12
 8001b76:	bd90      	pop	{r4, r7, pc}
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1e5a      	subs	r2, r3, #1
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	045b      	lsls	r3, r3, #17
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d301      	bcc.n	8001b98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b94:	2301      	movs	r3, #1
 8001b96:	e010      	b.n	8001bba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <SysTick_Config+0x44>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	3a01      	subs	r2, #1
 8001b9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff ff7c 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x44>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x44>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	1c02      	adds	r2, r0, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	0011      	movs	r1, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff ffbf 	bl	8001b80 <SysTick_Config>
 8001c02:	0003      	movs	r3, r0
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c1a:	e153      	b.n	8001ec4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4091      	lsls	r1, r2
 8001c26:	000a      	movs	r2, r1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d100      	bne.n	8001c34 <HAL_GPIO_Init+0x28>
 8001c32:	e144      	b.n	8001ebe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x38>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b12      	cmp	r3, #18
 8001c42:	d125      	bne.n	8001c90 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	58d3      	ldr	r3, [r2, r3]
 8001c50:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2207      	movs	r2, #7
 8001c56:	4013      	ands	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	0013      	movs	r3, r2
 8001c60:	43da      	mvns	r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	401a      	ands	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2107      	movs	r1, #7
 8001c74:	400b      	ands	r3, r1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	0013      	movs	r3, r2
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	409a      	lsls	r2, r3
 8001c9e:	0013      	movs	r3, r2
 8001ca0:	43da      	mvns	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d00b      	beq.n	8001ce4 <HAL_GPIO_Init+0xd8>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd8:	2b11      	cmp	r3, #17
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	0013      	movs	r3, r2
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	409a      	lsls	r2, r3
 8001d06:	0013      	movs	r3, r2
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	2201      	movs	r2, #1
 8001d32:	401a      	ands	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	409a      	lsls	r2, r3
 8001d38:	0013      	movs	r3, r2
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d017      	beq.n	8001d7e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	4013      	ands	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	055b      	lsls	r3, r3, #21
 8001d86:	4013      	ands	r3, r2
 8001d88:	d100      	bne.n	8001d8c <HAL_GPIO_Init+0x180>
 8001d8a:	e098      	b.n	8001ebe <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3318      	adds	r3, #24
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	589b      	ldr	r3, [r3, r2]
 8001d98:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	220f      	movs	r2, #15
 8001da4:	409a      	lsls	r2, r3
 8001da6:	0013      	movs	r3, r2
 8001da8:	43da      	mvns	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	23a0      	movs	r3, #160	; 0xa0
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a48      	ldr	r2, [pc, #288]	; (8001ee0 <HAL_GPIO_Init+0x2d4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x1de>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x1da>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a46      	ldr	r2, [pc, #280]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x1d6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a45      	ldr	r2, [pc, #276]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x1d2>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e008      	b.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001dde:	2305      	movs	r3, #5
 8001de0:	e006      	b.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de2:	2303      	movs	r3, #3
 8001de4:	e004      	b.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e002      	b.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001dee:	2300      	movs	r3, #0
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	2103      	movs	r1, #3
 8001df4:	400a      	ands	r2, r1
 8001df6:	00d2      	lsls	r2, r2, #3
 8001df8:	4093      	lsls	r3, r2
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e00:	4936      	ldr	r1, [pc, #216]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3318      	adds	r3, #24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e0e:	4a33      	ldr	r2, [pc, #204]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	58d3      	ldr	r3, [r2, r3]
 8001e14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	025b      	lsls	r3, r3, #9
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e34:	4929      	ldr	r1, [pc, #164]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001e3c:	4a27      	ldr	r2, [pc, #156]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e3e:	2384      	movs	r3, #132	; 0x84
 8001e40:	58d3      	ldr	r3, [r2, r3]
 8001e42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	2380      	movs	r3, #128	; 0x80
 8001e54:	029b      	lsls	r3, r3, #10
 8001e56:	4013      	ands	r3, r2
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e62:	491e      	ldr	r1, [pc, #120]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e64:	2284      	movs	r2, #132	; 0x84
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4013      	ands	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	035b      	lsls	r3, r3, #13
 8001e82:	4013      	ands	r3, r2
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	4013      	ands	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_GPIO_Init+0x2d0>)
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	1e13      	subs	r3, r2, #0
 8001ece:	d000      	beq.n	8001ed2 <HAL_GPIO_Init+0x2c6>
 8001ed0:	e6a4      	b.n	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46c0      	nop			; (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b006      	add	sp, #24
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021800 	.word	0x40021800
 8001ee0:	50000400 	.word	0x50000400
 8001ee4:	50000800 	.word	0x50000800
 8001ee8:	50000c00 	.word	0x50000c00
 8001eec:	50001400 	.word	0x50001400

08001ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1e5      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d100      	bne.n	8001f0e <HAL_RCC_OscConfig+0x1e>
 8001f0c:	e06f      	b.n	8001fee <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4bc4      	ldr	r3, [pc, #784]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2238      	movs	r2, #56	; 0x38
 8001f14:	4013      	ands	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1e:	4bc0      	ldr	r3, [pc, #768]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	4013      	ands	r3, r2
 8001f28:	d061      	beq.n	8001fee <HAL_RCC_OscConfig+0xfe>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d15d      	bne.n	8001fee <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1cb      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	025b      	lsls	r3, r3, #9
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
 8001f42:	4bb7      	ldr	r3, [pc, #732]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4bb6      	ldr	r3, [pc, #728]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0249      	lsls	r1, r1, #9
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e020      	b.n	8001f94 <HAL_RCC_OscConfig+0xa4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	23a0      	movs	r3, #160	; 0xa0
 8001f58:	02db      	lsls	r3, r3, #11
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d10e      	bne.n	8001f7c <HAL_RCC_OscConfig+0x8c>
 8001f5e:	4bb0      	ldr	r3, [pc, #704]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4baf      	ldr	r3, [pc, #700]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	02c9      	lsls	r1, r1, #11
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4bac      	ldr	r3, [pc, #688]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4bab      	ldr	r3, [pc, #684]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0249      	lsls	r1, r1, #9
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xa4>
 8001f7c:	4ba8      	ldr	r3, [pc, #672]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4ba7      	ldr	r3, [pc, #668]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f82:	49a8      	ldr	r1, [pc, #672]	; (8002224 <HAL_RCC_OscConfig+0x334>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4ba5      	ldr	r3, [pc, #660]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4ba4      	ldr	r3, [pc, #656]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001f8e:	49a6      	ldr	r1, [pc, #664]	; (8002228 <HAL_RCC_OscConfig+0x338>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d014      	beq.n	8001fc6 <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff3e 	bl	8000e1c <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa6:	f7fe ff39 	bl	8000e1c <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e18a      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb8:	4b99      	ldr	r3, [pc, #612]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0xb6>
 8001fc4:	e013      	b.n	8001fee <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ff29 	bl	8000e1c <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff24 	bl	8000e1c <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e175      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe2:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	029b      	lsls	r3, r3, #10
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_OscConfig+0x10a>
 8001ff8:	e08c      	b.n	8002114 <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2238      	movs	r2, #56	; 0x38
 8002000:	4013      	ands	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d135      	bne.n	8002076 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200a:	4b85      	ldr	r3, [pc, #532]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4013      	ands	r3, r2
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x132>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e155      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b7f      	ldr	r3, [pc, #508]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a81      	ldr	r2, [pc, #516]	; (800222c <HAL_RCC_OscConfig+0x33c>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	021a      	lsls	r2, r3, #8
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7b      	ldr	r2, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x340>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	4b74      	ldr	r3, [pc, #464]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002052:	4b73      	ldr	r3, [pc, #460]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	0adb      	lsrs	r3, r3, #11
 8002058:	2207      	movs	r2, #7
 800205a:	4013      	ands	r3, r2
 800205c:	4a75      	ldr	r2, [pc, #468]	; (8002234 <HAL_RCC_OscConfig+0x344>)
 800205e:	40da      	lsrs	r2, r3
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <HAL_RCC_OscConfig+0x348>)
 8002062:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002064:	4b75      	ldr	r3, [pc, #468]	; (800223c <HAL_RCC_OscConfig+0x34c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0018      	movs	r0, r3
 800206a:	f7fe fe7d 	bl	8000d68 <HAL_InitTick>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d050      	beq.n	8002114 <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e12b      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d030      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800207e:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x340>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b62      	ldr	r3, [pc, #392]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0049      	lsls	r1, r1, #1
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe febc 	bl	8000e1c <HAL_GetTick>
 80020a4:	0003      	movs	r3, r0
 80020a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7fe feb7 	bl	8000e1c <HAL_GetTick>
 80020ae:	0002      	movs	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e108      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a57      	ldr	r2, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x33c>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	021a      	lsls	r2, r3, #8
 80020d8:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e019      	b.n	8002114 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b4e      	ldr	r3, [pc, #312]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80020e6:	4956      	ldr	r1, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x350>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fe96 	bl	8000e1c <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe fe91 	bl	8000e1c <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0e2      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002108:	4b45      	ldr	r3, [pc, #276]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4013      	ands	r3, r2
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2208      	movs	r2, #8
 800211a:	4013      	ands	r3, r2
 800211c:	d047      	beq.n	80021ae <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800211e:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2238      	movs	r2, #56	; 0x38
 8002124:	4013      	ands	r3, r2
 8002126:	2b18      	cmp	r3, #24
 8002128:	d10a      	bne.n	8002140 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d03c      	beq.n	80021ae <HAL_RCC_OscConfig+0x2be>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d138      	bne.n	80021ae <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0c6      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d019      	beq.n	800217c <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800214a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800214c:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800214e:	2101      	movs	r1, #1
 8002150:	430a      	orrs	r2, r1
 8002152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7fe fe62 	bl	8000e1c <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe fe5d 	bl	8000e1c <HAL_GetTick>
 8002162:	0002      	movs	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0ae      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002174:	2202      	movs	r2, #2
 8002176:	4013      	ands	r3, r2
 8002178:	d0f1      	beq.n	800215e <HAL_RCC_OscConfig+0x26e>
 800217a:	e018      	b.n	80021ae <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800217e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fe48 	bl	8000e1c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002192:	f7fe fe43 	bl	8000e1c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e094      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d1f1      	bne.n	8002192 <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2204      	movs	r2, #4
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_RCC_OscConfig+0x2ca>
 80021b8:	e088      	b.n	80022cc <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	230f      	movs	r3, #15
 80021bc:	18fb      	adds	r3, r7, r3
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2238      	movs	r2, #56	; 0x38
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d100      	bne.n	80021da <HAL_RCC_OscConfig+0x2ea>
 80021d8:	e078      	b.n	80022cc <HAL_RCC_OscConfig+0x3dc>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d000      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2f4>
 80021e2:	e073      	b.n	80022cc <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e072      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x30e>
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80021f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0x36c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d11e      	bne.n	8002244 <HAL_RCC_OscConfig+0x354>
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 800220c:	2104      	movs	r1, #4
 800220e:	430a      	orrs	r2, r1
 8002210:	65da      	str	r2, [r3, #92]	; 0x5c
 8002212:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002216:	4b02      	ldr	r3, [pc, #8]	; (8002220 <HAL_RCC_OscConfig+0x330>)
 8002218:	2101      	movs	r1, #1
 800221a:	430a      	orrs	r2, r1
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0x36c>
 8002220:	40021000 	.word	0x40021000
 8002224:	fffeffff 	.word	0xfffeffff
 8002228:	fffbffff 	.word	0xfffbffff
 800222c:	ffff80ff 	.word	0xffff80ff
 8002230:	ffffc7ff 	.word	0xffffc7ff
 8002234:	02dc6c00 	.word	0x02dc6c00
 8002238:	20000004 	.word	0x20000004
 800223c:	20000008 	.word	0x20000008
 8002240:	fffffeff 	.word	0xfffffeff
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 8002246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 800224a:	2101      	movs	r1, #1
 800224c:	438a      	bics	r2, r1
 800224e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 8002252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 8002256:	2104      	movs	r1, #4
 8002258:	438a      	bics	r2, r1
 800225a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d014      	beq.n	800228e <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fdda 	bl	8000e1c <HAL_GetTick>
 8002268:	0003      	movs	r3, r0
 800226a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800226c:	e009      	b.n	8002282 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fdd5 	bl	8000e1c <HAL_GetTick>
 8002272:	0002      	movs	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x3ec>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e025      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x37e>
 800228c:	e013      	b.n	80022b6 <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7fe fdc5 	bl	8000e1c <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002296:	e009      	b.n	80022ac <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fdc0 	bl	8000e1c <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCC_OscConfig+0x3ec>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e010      	b.n	80022ce <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022b6:	230f      	movs	r3, #15
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 80022c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_OscConfig+0x3e8>)
 80022c6:	4906      	ldr	r1, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x3f0>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b006      	add	sp, #24
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00001388 	.word	0x00001388
 80022e0:	efffffff 	.word	0xefffffff

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0e9      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2207      	movs	r2, #7
 80022fe:	4013      	ands	r3, r2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d91e      	bls.n	8002344 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2207      	movs	r2, #7
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002318:	f7fe fd80 	bl	8000e1c <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002320:	e009      	b.n	8002336 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002322:	f7fe fd7b 	bl	8000e1c <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4a6a      	ldr	r2, [pc, #424]	; (80024d8 <HAL_RCC_ClockConfig+0x1f4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e0ca      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2207      	movs	r2, #7
 800233c:	4013      	ands	r3, r2
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d017      	beq.n	800237e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002358:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a60      	ldr	r2, [pc, #384]	; (80024e0 <HAL_RCC_ClockConfig+0x1fc>)
 800235e:	401a      	ands	r2, r3
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	21b0      	movs	r1, #176	; 0xb0
 8002364:	0109      	lsls	r1, r1, #4
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4a5d      	ldr	r2, [pc, #372]	; (80024e4 <HAL_RCC_ClockConfig+0x200>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	d055      	beq.n	8002434 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002388:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	221c      	movs	r2, #28
 800238e:	4393      	bics	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a4:	4b4d      	ldr	r3, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	029b      	lsls	r3, r3, #10
 80023ac:	4013      	ands	r3, r2
 80023ae:	d11f      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e08b      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4013      	ands	r3, r2
 80023c6:	d113      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e07f      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d108      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e074      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e06d      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4393      	bics	r3, r2
 80023f8:	0019      	movs	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002404:	f7fe fd0a 	bl	8000e1c <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240c:	e009      	b.n	8002422 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240e:	f7fe fd05 	bl	8000e1c <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <HAL_RCC_ClockConfig+0x1f4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e054      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2238      	movs	r2, #56	; 0x38
 8002428:	401a      	ands	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	429a      	cmp	r2, r3
 8002432:	d1ec      	bne.n	800240e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2207      	movs	r2, #7
 800243a:	4013      	ands	r3, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d21e      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2207      	movs	r2, #7
 8002448:	4393      	bics	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002454:	f7fe fce2 	bl	8000e1c <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800245c:	e009      	b.n	8002472 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245e:	f7fe fcdd 	bl	8000e1c <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <HAL_RCC_ClockConfig+0x1f4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e02c      	b.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2207      	movs	r2, #7
 8002478:	4013      	ands	r3, r2
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d1ee      	bne.n	800245e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2204      	movs	r2, #4
 8002486:	4013      	ands	r3, r2
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x204>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800249e:	f000 f82b 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024a2:	0001      	movs	r1, r0
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	220f      	movs	r2, #15
 80024ac:	401a      	ands	r2, r3
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_ClockConfig+0x208>)
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	58d3      	ldr	r3, [r2, r3]
 80024b4:	221f      	movs	r2, #31
 80024b6:	4013      	ands	r3, r2
 80024b8:	000a      	movs	r2, r1
 80024ba:	40da      	lsrs	r2, r3
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_RCC_ClockConfig+0x20c>)
 80024be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_RCC_ClockConfig+0x210>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fe fc4f 	bl	8000d68 <HAL_InitTick>
 80024ca:	0003      	movs	r3, r0
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b004      	add	sp, #16
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40022000 	.word	0x40022000
 80024d8:	00001388 	.word	0x00001388
 80024dc:	40021000 	.word	0x40021000
 80024e0:	ffff84ff 	.word	0xffff84ff
 80024e4:	fffff0ff 	.word	0xfffff0ff
 80024e8:	ffff8fff 	.word	0xffff8fff
 80024ec:	080038b4 	.word	0x080038b4
 80024f0:	20000004 	.word	0x20000004
 80024f4:	20000008 	.word	0x20000008

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024fe:	4b1c      	ldr	r3, [pc, #112]	; (8002570 <HAL_RCC_GetSysClockFreq+0x78>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2238      	movs	r2, #56	; 0x38
 8002504:	4013      	ands	r3, r2
 8002506:	d10f      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_GetSysClockFreq+0x78>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0adb      	lsrs	r3, r3, #11
 800250e:	2207      	movs	r2, #7
 8002510:	4013      	ands	r3, r2
 8002512:	2201      	movs	r2, #1
 8002514:	409a      	lsls	r2, r3
 8002516:	0013      	movs	r3, r2
 8002518:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	4815      	ldr	r0, [pc, #84]	; (8002574 <HAL_RCC_GetSysClockFreq+0x7c>)
 800251e:	f7fd fdf3 	bl	8000108 <__udivsi3>
 8002522:	0003      	movs	r3, r0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	e01e      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <HAL_RCC_GetSysClockFreq+0x78>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2238      	movs	r2, #56	; 0x38
 800252e:	4013      	ands	r3, r2
 8002530:	2b08      	cmp	r3, #8
 8002532:	d102      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_GetSysClockFreq+0x80>)
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	e015      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_GetSysClockFreq+0x78>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2238      	movs	r2, #56	; 0x38
 8002540:	4013      	ands	r3, r2
 8002542:	2b20      	cmp	r3, #32
 8002544:	d103      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_GetSysClockFreq+0x78>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2238      	movs	r2, #56	; 0x38
 8002554:	4013      	ands	r3, r2
 8002556:	2b18      	cmp	r3, #24
 8002558:	d103      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800255a:	23fa      	movs	r3, #250	; 0xfa
 800255c:	01db      	lsls	r3, r3, #7
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	e001      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002566:	687b      	ldr	r3, [r7, #4]
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	02dc6c00 	.word	0x02dc6c00
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002584:	2313      	movs	r3, #19
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800258c:	2312      	movs	r3, #18
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	4013      	ands	r3, r2
 800259e:	d100      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025a0:	e079      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2011      	movs	r0, #17
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	4013      	ands	r3, r2
 80025b4:	d110      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b61      	ldr	r3, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	0549      	lsls	r1, r1, #21
 80025c0:	430a      	orrs	r2, r1
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	055b      	lsls	r3, r3, #21
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	183b      	adds	r3, r7, r0
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025d8:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d014      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002600:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002602:	4b4e      	ldr	r3, [pc, #312]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0249      	lsls	r1, r1, #9
 8002608:	430a      	orrs	r2, r1
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800260e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002612:	494c      	ldr	r1, [pc, #304]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002614:	400a      	ands	r2, r1
 8002616:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002618:	4b48      	ldr	r3, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2201      	movs	r2, #1
 8002622:	4013      	ands	r3, r2
 8002624:	d016      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fe fbf9 	bl	8000e1c <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800262e:	e00c      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fbf4 	bl	8000e1c <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	4a43      	ldr	r2, [pc, #268]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d904      	bls.n	800264a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002640:	2313      	movs	r3, #19
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]
          break;
 8002648:	e004      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800264a:	4b3c      	ldr	r3, [pc, #240]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	d0ed      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002654:	2313      	movs	r3, #19
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800266e:	430a      	orrs	r2, r1
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c
 8002672:	e005      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	2312      	movs	r3, #18
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2213      	movs	r2, #19
 800267a:	18ba      	adds	r2, r7, r2
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002680:	2311      	movs	r3, #17
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d105      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800268c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002690:	492e      	ldr	r1, [pc, #184]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	400a      	ands	r2, r1
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	4013      	ands	r3, r2
 800269e:	d009      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	2203      	movs	r2, #3
 80026a6:	4393      	bics	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	4013      	ands	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	0019      	movs	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	01db      	lsls	r3, r3, #7
 80026da:	4013      	ands	r3, r2
 80026dc:	d008      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026de:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	0899      	lsrs	r1, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026ec:	430a      	orrs	r2, r1
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800270c:	430a      	orrs	r2, r1
 800270e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da09      	bge.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	22e0      	movs	r2, #224	; 0xe0
 800271e:	4393      	bics	r3, r2
 8002720:	0019      	movs	r1, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800272c:	2312      	movs	r3, #18
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b006      	add	sp, #24
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	40021000 	.word	0x40021000
 8002740:	fffffcff 	.word	0xfffffcff
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	00001388 	.word	0x00001388
 800274c:	efffffff 	.word	0xefffffff
 8002750:	ffffcfff 	.word	0xffffcfff
 8002754:	ffff3fff 	.word	0xffff3fff

08002758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e04a      	b.n	8002800 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	223d      	movs	r2, #61	; 0x3d
 800276e:	5c9b      	ldrb	r3, [r3, r2]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d107      	bne.n	8002786 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223c      	movs	r2, #60	; 0x3c
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe fa27 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	223d      	movs	r2, #61	; 0x3d
 800278a:	2102      	movs	r1, #2
 800278c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	0019      	movs	r1, r3
 8002798:	0010      	movs	r0, r2
 800279a:	f000 fb43 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2248      	movs	r2, #72	; 0x48
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	223e      	movs	r2, #62	; 0x3e
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	223f      	movs	r2, #63	; 0x3f
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2240      	movs	r2, #64	; 0x40
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2241      	movs	r2, #65	; 0x41
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2242      	movs	r2, #66	; 0x42
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2243      	movs	r2, #67	; 0x43
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2244      	movs	r2, #68	; 0x44
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2245      	movs	r2, #69	; 0x45
 80027e2:	2101      	movs	r1, #1
 80027e4:	5499      	strb	r1, [r3, r2]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2246      	movs	r2, #70	; 0x46
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2247      	movs	r2, #71	; 0x47
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223d      	movs	r2, #61	; 0x3d
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e04a      	b.n	80028b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223d      	movs	r2, #61	; 0x3d
 800281e:	5c9b      	ldrb	r3, [r3, r2]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	223c      	movs	r2, #60	; 0x3c
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f841 	bl	80028b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223d      	movs	r2, #61	; 0x3d
 800283a:	2102      	movs	r1, #2
 800283c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	0019      	movs	r1, r3
 8002848:	0010      	movs	r0, r2
 800284a:	f000 faeb 	bl	8002e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2248      	movs	r2, #72	; 0x48
 8002852:	2101      	movs	r1, #1
 8002854:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	223e      	movs	r2, #62	; 0x3e
 800285a:	2101      	movs	r1, #1
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	223f      	movs	r2, #63	; 0x3f
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2241      	movs	r2, #65	; 0x41
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2242      	movs	r2, #66	; 0x42
 800287a:	2101      	movs	r1, #1
 800287c:	5499      	strb	r1, [r3, r2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2243      	movs	r2, #67	; 0x43
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2244      	movs	r2, #68	; 0x44
 800288a:	2101      	movs	r1, #1
 800288c:	5499      	strb	r1, [r3, r2]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2245      	movs	r2, #69	; 0x45
 8002892:	2101      	movs	r1, #1
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2246      	movs	r2, #70	; 0x46
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2247      	movs	r2, #71	; 0x47
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	; 0x3d
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <HAL_TIM_PWM_Start+0x22>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	223e      	movs	r2, #62	; 0x3e
 80028dc:	5c9b      	ldrb	r3, [r3, r2]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	4193      	sbcs	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e037      	b.n	800295a <HAL_TIM_PWM_Start+0x92>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d108      	bne.n	8002902 <HAL_TIM_PWM_Start+0x3a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	223f      	movs	r2, #63	; 0x3f
 80028f4:	5c9b      	ldrb	r3, [r3, r2]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	4193      	sbcs	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	e02b      	b.n	800295a <HAL_TIM_PWM_Start+0x92>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d108      	bne.n	800291a <HAL_TIM_PWM_Start+0x52>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	5c9b      	ldrb	r3, [r3, r2]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	4193      	sbcs	r3, r2
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e01f      	b.n	800295a <HAL_TIM_PWM_Start+0x92>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d108      	bne.n	8002932 <HAL_TIM_PWM_Start+0x6a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2241      	movs	r2, #65	; 0x41
 8002924:	5c9b      	ldrb	r3, [r3, r2]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	1e5a      	subs	r2, r3, #1
 800292c:	4193      	sbcs	r3, r2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e013      	b.n	800295a <HAL_TIM_PWM_Start+0x92>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b10      	cmp	r3, #16
 8002936:	d108      	bne.n	800294a <HAL_TIM_PWM_Start+0x82>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2242      	movs	r2, #66	; 0x42
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	1e5a      	subs	r2, r3, #1
 8002944:	4193      	sbcs	r3, r2
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e007      	b.n	800295a <HAL_TIM_PWM_Start+0x92>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2243      	movs	r2, #67	; 0x43
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	1e5a      	subs	r2, r3, #1
 8002956:	4193      	sbcs	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07b      	b.n	8002a5a <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0xaa>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	223e      	movs	r2, #62	; 0x3e
 800296c:	2102      	movs	r1, #2
 800296e:	5499      	strb	r1, [r3, r2]
 8002970:	e023      	b.n	80029ba <HAL_TIM_PWM_Start+0xf2>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b04      	cmp	r3, #4
 8002976:	d104      	bne.n	8002982 <HAL_TIM_PWM_Start+0xba>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223f      	movs	r2, #63	; 0x3f
 800297c:	2102      	movs	r1, #2
 800297e:	5499      	strb	r1, [r3, r2]
 8002980:	e01b      	b.n	80029ba <HAL_TIM_PWM_Start+0xf2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d104      	bne.n	8002992 <HAL_TIM_PWM_Start+0xca>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	2102      	movs	r1, #2
 800298e:	5499      	strb	r1, [r3, r2]
 8002990:	e013      	b.n	80029ba <HAL_TIM_PWM_Start+0xf2>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_PWM_Start+0xda>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2241      	movs	r2, #65	; 0x41
 800299c:	2102      	movs	r1, #2
 800299e:	5499      	strb	r1, [r3, r2]
 80029a0:	e00b      	b.n	80029ba <HAL_TIM_PWM_Start+0xf2>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d104      	bne.n	80029b2 <HAL_TIM_PWM_Start+0xea>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2242      	movs	r2, #66	; 0x42
 80029ac:	2102      	movs	r1, #2
 80029ae:	5499      	strb	r1, [r3, r2]
 80029b0:	e003      	b.n	80029ba <HAL_TIM_PWM_Start+0xf2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2243      	movs	r2, #67	; 0x43
 80029b6:	2102      	movs	r1, #2
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fdd2 	bl	800356c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_TIM_PWM_Start+0x19c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x11e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <HAL_TIM_PWM_Start+0x1a0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x11e>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_TIM_PWM_Start+0x1a4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PWM_Start+0x122>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_TIM_PWM_Start+0x124>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0209      	lsls	r1, r1, #8
 80029fe:	430a      	orrs	r2, r1
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_TIM_PWM_Start+0x19c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d004      	beq.n	8002a16 <HAL_TIM_PWM_Start+0x14e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_TIM_PWM_Start+0x1a8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d116      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_TIM_PWM_Start+0x1ac>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d016      	beq.n	8002a56 <HAL_TIM_PWM_Start+0x18e>
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	025b      	lsls	r3, r3, #9
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d011      	beq.n	8002a56 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	e008      	b.n	8002a56 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2101      	movs	r1, #1
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	e000      	b.n	8002a58 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014400 	.word	0x40014400
 8002a6c:	40014800 	.word	0x40014800
 8002a70:	40000400 	.word	0x40000400
 8002a74:	00010007 	.word	0x00010007

08002a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2317      	movs	r3, #23
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	223c      	movs	r2, #60	; 0x3c
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0e5      	b.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	223c      	movs	r2, #60	; 0x3c
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b14      	cmp	r3, #20
 8002aa6:	d900      	bls.n	8002aaa <HAL_TIM_PWM_ConfigChannel+0x32>
 8002aa8:	e0d1      	b.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	009a      	lsls	r2, r3, #2
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002ab0:	18d3      	adds	r3, r2, r3
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fa1c 	bl	8002efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2108      	movs	r1, #8
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2104      	movs	r1, #4
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6999      	ldr	r1, [r3, #24]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	619a      	str	r2, [r3, #24]
      break;
 8002af6:	e0af      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 fa7b 	bl	8002ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0109      	lsls	r1, r1, #4
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4954      	ldr	r1, [pc, #336]	; (8002c74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	619a      	str	r2, [r3, #24]
      break;
 8002b3c:	e08c      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	0011      	movs	r1, r2
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fad6 	bl	80030f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2108      	movs	r1, #8
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2104      	movs	r1, #4
 8002b68:	438a      	bics	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	69d9      	ldr	r1, [r3, #28]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	61da      	str	r2, [r3, #28]
      break;
 8002b7e:	e06b      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 fb37 	bl	80031fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	0109      	lsls	r1, r1, #4
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4932      	ldr	r1, [pc, #200]	; (8002c74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002bac:	400a      	ands	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69d9      	ldr	r1, [r3, #28]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	61da      	str	r2, [r3, #28]
      break;
 8002bc4:	e048      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fb78 	bl	80032c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2108      	movs	r1, #8
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2104      	movs	r1, #4
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c06:	e027      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fbb1 	bl	8003378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0109      	lsls	r1, r1, #4
 8002c24:	430a      	orrs	r2, r1
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4910      	ldr	r1, [pc, #64]	; (8002c74 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	021a      	lsls	r2, r3, #8
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c4c:	e004      	b.n	8002c58 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002c4e:	2317      	movs	r3, #23
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
      break;
 8002c56:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	223c      	movs	r2, #60	; 0x3c
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5499      	strb	r1, [r3, r2]

  return status;
 8002c60:	2317      	movs	r3, #23
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b006      	add	sp, #24
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	080038f4 	.word	0x080038f4
 8002c74:	fffffbff 	.word	0xfffffbff

08002c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223c      	movs	r2, #60	; 0x3c
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_ConfigClockSource+0x20>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0bc      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x19a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	223c      	movs	r2, #60	; 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223d      	movs	r2, #61	; 0x3d
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a5a      	ldr	r2, [pc, #360]	; (8002e1c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	0192      	lsls	r2, r2, #6
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d040      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0xde>
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0192      	lsls	r2, r2, #6
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d900      	bls.n	8002cde <HAL_TIM_ConfigClockSource+0x66>
 8002cdc:	e088      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	0152      	lsls	r2, r2, #5
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_TIM_ConfigClockSource+0x70>
 8002ce6:	e088      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x182>
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	0152      	lsls	r2, r2, #5
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d900      	bls.n	8002cf2 <HAL_TIM_ConfigClockSource+0x7a>
 8002cf0:	e07e      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cf2:	2b70      	cmp	r3, #112	; 0x70
 8002cf4:	d018      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0xb0>
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_ConfigClockSource+0x82>
 8002cf8:	e07a      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2b60      	cmp	r3, #96	; 0x60
 8002cfc:	d04f      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x126>
 8002cfe:	d900      	bls.n	8002d02 <HAL_TIM_ConfigClockSource+0x8a>
 8002d00:	e076      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d02:	2b50      	cmp	r3, #80	; 0x50
 8002d04:	d03b      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x106>
 8002d06:	d900      	bls.n	8002d0a <HAL_TIM_ConfigClockSource+0x92>
 8002d08:	e072      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d057      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x146>
 8002d0e:	d900      	bls.n	8002d12 <HAL_TIM_ConfigClockSource+0x9a>
 8002d10:	e06e      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d12:	2b30      	cmp	r3, #48	; 0x30
 8002d14:	d063      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d16:	d86b      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d060      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d1c:	d868      	bhi.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d05d      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d05b      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x166>
 8002d26:	e063      	b.n	8002df0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f000 fbf8 	bl	800352c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2277      	movs	r2, #119	; 0x77
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e052      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f000 fbe1 	bl	800352c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	01c9      	lsls	r1, r1, #7
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
      break;
 8002d7c:	e03e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	f000 fb52 	bl	8003434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2150      	movs	r1, #80	; 0x50
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 fbac 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e02e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	001a      	movs	r2, r3
 8002dac:	f000 fb70 	bl	8003490 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2160      	movs	r1, #96	; 0x60
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fb9c 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e01e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	001a      	movs	r2, r3
 8002dcc:	f000 fb32 	bl	8003434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2140      	movs	r1, #64	; 0x40
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f000 fb8c 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e00e      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f000 fb83 	bl	80034f4 <TIM_ITRx_SetConfig>
      break;
 8002dee:	e005      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002df0:	230f      	movs	r3, #15
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002dfa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	223d      	movs	r2, #61	; 0x3d
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223c      	movs	r2, #60	; 0x3c
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]

  return status;
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	ffceff88 	.word	0xffceff88
 8002e20:	ffff00ff 	.word	0xffff00ff

08002e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <TIM_Base_SetConfig+0xc0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_Base_SetConfig+0x20>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <TIM_Base_SetConfig+0xc4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d108      	bne.n	8002e56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2270      	movs	r2, #112	; 0x70
 8002e48:	4393      	bics	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <TIM_Base_SetConfig+0xc0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00f      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <TIM_Base_SetConfig+0xc4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a20      	ldr	r2, [pc, #128]	; (8002eec <TIM_Base_SetConfig+0xc8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <TIM_Base_SetConfig+0xcc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0x5a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <TIM_Base_SetConfig+0xd0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <TIM_Base_SetConfig+0xd4>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	4393      	bics	r3, r2
 8002e96:	001a      	movs	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <TIM_Base_SetConfig+0xc0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0xaa>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <TIM_Base_SetConfig+0xcc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0xaa>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <TIM_Base_SetConfig+0xd0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d103      	bne.n	8002ed6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	615a      	str	r2, [r3, #20]
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b004      	add	sp, #16
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40012c00 	.word	0x40012c00
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40002000 	.word	0x40002000
 8002ef0:	40014400 	.word	0x40014400
 8002ef4:	40014800 	.word	0x40014800
 8002ef8:	fffffcff 	.word	0xfffffcff

08002efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	001a      	movs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <TIM_OC1_SetConfig+0xe8>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2203      	movs	r2, #3
 8002f32:	4393      	bics	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4393      	bics	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a24      	ldr	r2, [pc, #144]	; (8002fe8 <TIM_OC1_SetConfig+0xec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_OC1_SetConfig+0x6e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <TIM_OC1_SetConfig+0xf0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_OC1_SetConfig+0x6e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <TIM_OC1_SetConfig+0xf4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10c      	bne.n	8002f84 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	4393      	bics	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	4393      	bics	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <TIM_OC1_SetConfig+0xec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d007      	beq.n	8002f9c <TIM_OC1_SetConfig+0xa0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a17      	ldr	r2, [pc, #92]	; (8002fec <TIM_OC1_SetConfig+0xf0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_OC1_SetConfig+0xa0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <TIM_OC1_SetConfig+0xf4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d111      	bne.n	8002fc0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <TIM_OC1_SetConfig+0xf8>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <TIM_OC1_SetConfig+0xfc>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	fffeff8f 	.word	0xfffeff8f
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffeff 	.word	0xfffffeff
 8002ff8:	fffffdff 	.word	0xfffffdff

08002ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2210      	movs	r2, #16
 800300c:	4393      	bics	r3, r2
 800300e:	001a      	movs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <TIM_OC2_SetConfig+0xe0>)
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a2b      	ldr	r2, [pc, #172]	; (80030e0 <TIM_OC2_SetConfig+0xe4>)
 8003032:	4013      	ands	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2220      	movs	r2, #32
 8003046:	4393      	bics	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <TIM_OC2_SetConfig+0xe8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	4393      	bics	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	4393      	bics	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <TIM_OC2_SetConfig+0xe8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_OC2_SetConfig+0x96>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <TIM_OC2_SetConfig+0xec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_OC2_SetConfig+0x96>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <TIM_OC2_SetConfig+0xf0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d113      	bne.n	80030ba <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <TIM_OC2_SetConfig+0xf4>)
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4a15      	ldr	r2, [pc, #84]	; (80030f4 <TIM_OC2_SetConfig+0xf8>)
 800309e:	4013      	ands	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	621a      	str	r2, [r3, #32]
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b006      	add	sp, #24
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	feff8fff 	.word	0xfeff8fff
 80030e0:	fffffcff 	.word	0xfffffcff
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800
 80030f0:	fffffbff 	.word	0xfffffbff
 80030f4:	fffff7ff 	.word	0xfffff7ff

080030f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <TIM_OC3_SetConfig+0xdc>)
 8003108:	401a      	ands	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a2d      	ldr	r2, [pc, #180]	; (80031d8 <TIM_OC3_SetConfig+0xe0>)
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2203      	movs	r2, #3
 800312c:	4393      	bics	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <TIM_OC3_SetConfig+0xe4>)
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <TIM_OC3_SetConfig+0xe8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d10d      	bne.n	8003172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <TIM_OC3_SetConfig+0xec>)
 800315a:	4013      	ands	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <TIM_OC3_SetConfig+0xf0>)
 800316e:	4013      	ands	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <TIM_OC3_SetConfig+0xe8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_OC3_SetConfig+0x92>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <TIM_OC3_SetConfig+0xf4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_OC3_SetConfig+0x92>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <TIM_OC3_SetConfig+0xf8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d113      	bne.n	80031b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <TIM_OC3_SetConfig+0xfc>)
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <TIM_OC3_SetConfig+0x100>)
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	fffffeff 	.word	0xfffffeff
 80031d8:	fffeff8f 	.word	0xfffeff8f
 80031dc:	fffffdff 	.word	0xfffffdff
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	fffff7ff 	.word	0xfffff7ff
 80031e8:	fffffbff 	.word	0xfffffbff
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800
 80031f4:	ffffefff 	.word	0xffffefff
 80031f8:	ffffdfff 	.word	0xffffdfff

080031fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <TIM_OC4_SetConfig+0xa8>)
 800320c:	401a      	ands	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a20      	ldr	r2, [pc, #128]	; (80032a8 <TIM_OC4_SetConfig+0xac>)
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <TIM_OC4_SetConfig+0xb0>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <TIM_OC4_SetConfig+0xb4>)
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <TIM_OC4_SetConfig+0xb8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_OC4_SetConfig+0x70>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <TIM_OC4_SetConfig+0xbc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_OC4_SetConfig+0x70>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <TIM_OC4_SetConfig+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d109      	bne.n	8003280 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <TIM_OC4_SetConfig+0xc4>)
 8003270:	4013      	ands	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b006      	add	sp, #24
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	ffffefff 	.word	0xffffefff
 80032a8:	feff8fff 	.word	0xfeff8fff
 80032ac:	fffffcff 	.word	0xfffffcff
 80032b0:	ffffdfff 	.word	0xffffdfff
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40014400 	.word	0x40014400
 80032bc:	40014800 	.word	0x40014800
 80032c0:	ffffbfff 	.word	0xffffbfff

080032c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	4a23      	ldr	r2, [pc, #140]	; (8003360 <TIM_OC5_SetConfig+0x9c>)
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <TIM_OC5_SetConfig+0xa0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a19      	ldr	r2, [pc, #100]	; (8003368 <TIM_OC5_SetConfig+0xa4>)
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	041b      	lsls	r3, r3, #16
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a15      	ldr	r2, [pc, #84]	; (800336c <TIM_OC5_SetConfig+0xa8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <TIM_OC5_SetConfig+0x66>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <TIM_OC5_SetConfig+0xac>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_OC5_SetConfig+0x66>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a13      	ldr	r2, [pc, #76]	; (8003374 <TIM_OC5_SetConfig+0xb0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d109      	bne.n	800333e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <TIM_OC5_SetConfig+0x9c>)
 800332e:	4013      	ands	r3, r2
 8003330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b006      	add	sp, #24
 800335e:	bd80      	pop	{r7, pc}
 8003360:	fffeffff 	.word	0xfffeffff
 8003364:	fffeff8f 	.word	0xfffeff8f
 8003368:	fffdffff 	.word	0xfffdffff
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	4a24      	ldr	r2, [pc, #144]	; (8003418 <TIM_OC6_SetConfig+0xa0>)
 8003388:	401a      	ands	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <TIM_OC6_SetConfig+0xa4>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	021b      	lsls	r3, r3, #8
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4a1a      	ldr	r2, [pc, #104]	; (8003420 <TIM_OC6_SetConfig+0xa8>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a16      	ldr	r2, [pc, #88]	; (8003424 <TIM_OC6_SetConfig+0xac>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_OC6_SetConfig+0x68>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <TIM_OC6_SetConfig+0xb0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC6_SetConfig+0x68>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC6_SetConfig+0xb4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d109      	bne.n	80033f4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <TIM_OC6_SetConfig+0xb8>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	621a      	str	r2, [r3, #32]
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46bd      	mov	sp, r7
 8003412:	b006      	add	sp, #24
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	ffefffff 	.word	0xffefffff
 800341c:	feff8fff 	.word	0xfeff8fff
 8003420:	ffdfffff 	.word	0xffdfffff
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40014400 	.word	0x40014400
 800342c:	40014800 	.word	0x40014800
 8003430:	fffbffff 	.word	0xfffbffff

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2201      	movs	r2, #1
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	22f0      	movs	r2, #240	; 0xf0
 800345e:	4393      	bics	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	220a      	movs	r2, #10
 8003470:	4393      	bics	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}

08003490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	2210      	movs	r2, #16
 80034a2:	4393      	bics	r3, r2
 80034a4:	001a      	movs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a0d      	ldr	r2, [pc, #52]	; (80034f0 <TIM_TI2_ConfigInputStage+0x60>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	031b      	lsls	r3, r3, #12
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	22a0      	movs	r2, #160	; 0xa0
 80034cc:	4393      	bics	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b006      	add	sp, #24
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	ffff0fff 	.word	0xffff0fff

080034f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a08      	ldr	r2, [pc, #32]	; (8003528 <TIM_ITRx_SetConfig+0x34>)
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	2207      	movs	r2, #7
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	ffcfff8f 	.word	0xffcfff8f

0800352c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <TIM_ETR_SetConfig+0x3c>)
 8003544:	4013      	ands	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	021a      	lsls	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	431a      	orrs	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b006      	add	sp, #24
 8003566:	bd80      	pop	{r7, pc}
 8003568:	ffff00ff 	.word	0xffff00ff

0800356c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	221f      	movs	r2, #31
 800357c:	4013      	ands	r3, r2
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	0013      	movs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	43d2      	mvns	r2, r2
 800358e:	401a      	ands	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1a      	ldr	r2, [r3, #32]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	211f      	movs	r1, #31
 800359c:	400b      	ands	r3, r1
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4099      	lsls	r1, r3
 80035a2:	000b      	movs	r3, r1
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b006      	add	sp, #24
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	223c      	movs	r2, #60	; 0x3c
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e04a      	b.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	223c      	movs	r2, #60	; 0x3c
 80035d0:	2101      	movs	r1, #1
 80035d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	223d      	movs	r2, #61	; 0x3d
 80035d8:	2102      	movs	r1, #2
 80035da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1e      	ldr	r2, [pc, #120]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2270      	movs	r2, #112	; 0x70
 800360c:	4393      	bics	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a11      	ldr	r2, [pc, #68]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d10c      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	4393      	bics	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4313      	orrs	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	223d      	movs	r2, #61	; 0x3d
 8003654:	2101      	movs	r1, #1
 8003656:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	223c      	movs	r2, #60	; 0x3c
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b004      	add	sp, #16
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	40012c00 	.word	0x40012c00
 8003670:	ff0fffff 	.word	0xff0fffff
 8003674:	40000400 	.word	0x40000400

08003678 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223c      	movs	r2, #60	; 0x3c
 800368a:	5c9b      	ldrb	r3, [r3, r2]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e079      	b.n	8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	223c      	movs	r2, #60	; 0x3c
 8003698:	2101      	movs	r1, #1
 800369a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	4393      	bics	r3, r2
 80036a2:	001a      	movs	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80036b0:	401a      	ands	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4a35      	ldr	r2, [pc, #212]	; (8003794 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80036be:	401a      	ands	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a33      	ldr	r2, [pc, #204]	; (8003798 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80036cc:	401a      	ands	r2, r3
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a30      	ldr	r2, [pc, #192]	; (800379c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80036da:	401a      	ands	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a2e      	ldr	r2, [pc, #184]	; (80037a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80036e8:	401a      	ands	r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80036f6:	401a      	ands	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003704:	401a      	ands	r2, r3
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d106      	bne.n	8003728 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a24      	ldr	r2, [pc, #144]	; (80037b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800371e:	401a      	ands	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d121      	bne.n	8003776 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003736:	401a      	ands	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	051b      	lsls	r3, r3, #20
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003746:	401a      	ands	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003754:	401a      	ands	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d106      	bne.n	8003776 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800376c:	401a      	ands	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	223c      	movs	r2, #60	; 0x3c
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b004      	add	sp, #16
 800378e:	bd80      	pop	{r7, pc}
 8003790:	fffffcff 	.word	0xfffffcff
 8003794:	fffffbff 	.word	0xfffffbff
 8003798:	fffff7ff 	.word	0xfffff7ff
 800379c:	ffffefff 	.word	0xffffefff
 80037a0:	ffffdfff 	.word	0xffffdfff
 80037a4:	ffffbfff 	.word	0xffffbfff
 80037a8:	fff0ffff 	.word	0xfff0ffff
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	ff0fffff 	.word	0xff0fffff
 80037b8:	feffffff 	.word	0xfeffffff
 80037bc:	fdffffff 	.word	0xfdffffff
 80037c0:	dfffffff 	.word	0xdfffffff

080037c4 <__libc_init_array>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	2600      	movs	r6, #0
 80037c8:	4d0c      	ldr	r5, [pc, #48]	; (80037fc <__libc_init_array+0x38>)
 80037ca:	4c0d      	ldr	r4, [pc, #52]	; (8003800 <__libc_init_array+0x3c>)
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	42a6      	cmp	r6, r4
 80037d2:	d109      	bne.n	80037e8 <__libc_init_array+0x24>
 80037d4:	2600      	movs	r6, #0
 80037d6:	f000 f821 	bl	800381c <_init>
 80037da:	4d0a      	ldr	r5, [pc, #40]	; (8003804 <__libc_init_array+0x40>)
 80037dc:	4c0a      	ldr	r4, [pc, #40]	; (8003808 <__libc_init_array+0x44>)
 80037de:	1b64      	subs	r4, r4, r5
 80037e0:	10a4      	asrs	r4, r4, #2
 80037e2:	42a6      	cmp	r6, r4
 80037e4:	d105      	bne.n	80037f2 <__libc_init_array+0x2e>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	00b3      	lsls	r3, r6, #2
 80037ea:	58eb      	ldr	r3, [r5, r3]
 80037ec:	4798      	blx	r3
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7ee      	b.n	80037d0 <__libc_init_array+0xc>
 80037f2:	00b3      	lsls	r3, r6, #2
 80037f4:	58eb      	ldr	r3, [r5, r3]
 80037f6:	4798      	blx	r3
 80037f8:	3601      	adds	r6, #1
 80037fa:	e7f2      	b.n	80037e2 <__libc_init_array+0x1e>
 80037fc:	08003948 	.word	0x08003948
 8003800:	08003948 	.word	0x08003948
 8003804:	08003948 	.word	0x08003948
 8003808:	0800394c 	.word	0x0800394c

0800380c <memset>:
 800380c:	0003      	movs	r3, r0
 800380e:	1882      	adds	r2, r0, r2
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	7019      	strb	r1, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <_init>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr

08003828 <_fini>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr
