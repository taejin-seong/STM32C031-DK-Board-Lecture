
stm32c0_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000800  08000800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  080008c0  080008c0  000008c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005224  08005224  00005224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ac  080055ac  00010074  2**0
                  CONTENTS
  4 .ARM          00000000  080055ac  080055ac  00010074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055ac  080055ac  00010074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055ac  080055ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b0  080055b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080055b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000074  08005628  00010074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08005628  000105d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfd4  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ae  00000000  00000000  0002e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012ee5  00000000  00000000  0003231e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00045208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  00046410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a6a8  00000000  00000000  00047618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022b56  00000000  00000000  00061cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000935de  00000000  00000000  00084816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117df4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003310  00000000  00000000  00117e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080008c0 <__do_global_dtors_aux>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	4c06      	ldr	r4, [pc, #24]	; (80008dc <__do_global_dtors_aux+0x1c>)
 80008c4:	7823      	ldrb	r3, [r4, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <__do_global_dtors_aux+0x1a>
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <__do_global_dtors_aux+0x20>)
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <__do_global_dtors_aux+0x16>
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <__do_global_dtors_aux+0x24>)
 80008d2:	e000      	b.n	80008d6 <__do_global_dtors_aux+0x16>
 80008d4:	bf00      	nop
 80008d6:	2301      	movs	r3, #1
 80008d8:	7023      	strb	r3, [r4, #0]
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	20000074 	.word	0x20000074
 80008e0:	00000000 	.word	0x00000000
 80008e4:	0800520c 	.word	0x0800520c

080008e8 <frame_dummy>:
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <frame_dummy+0x14>)
 80008ea:	b510      	push	{r4, lr}
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <frame_dummy+0x10>
 80008f0:	4903      	ldr	r1, [pc, #12]	; (8000900 <frame_dummy+0x18>)
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <frame_dummy+0x1c>)
 80008f4:	e000      	b.n	80008f8 <frame_dummy+0x10>
 80008f6:	bf00      	nop
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	00000000 	.word	0x00000000
 8000900:	20000078 	.word	0x20000078
 8000904:	0800520c 	.word	0x0800520c

08000908 <strcmp>:
 8000908:	7802      	ldrb	r2, [r0, #0]
 800090a:	780b      	ldrb	r3, [r1, #0]
 800090c:	2a00      	cmp	r2, #0
 800090e:	d003      	beq.n	8000918 <strcmp+0x10>
 8000910:	3001      	adds	r0, #1
 8000912:	3101      	adds	r1, #1
 8000914:	429a      	cmp	r2, r3
 8000916:	d0f7      	beq.n	8000908 <strcmp>
 8000918:	1ad0      	subs	r0, r2, r3
 800091a:	4770      	bx	lr

0800091c <__gnu_thumb1_case_shi>:
 800091c:	b403      	push	{r0, r1}
 800091e:	4671      	mov	r1, lr
 8000920:	0849      	lsrs	r1, r1, #1
 8000922:	0040      	lsls	r0, r0, #1
 8000924:	0049      	lsls	r1, r1, #1
 8000926:	5e09      	ldrsh	r1, [r1, r0]
 8000928:	0049      	lsls	r1, r1, #1
 800092a:	448e      	add	lr, r1
 800092c:	bc03      	pop	{r0, r1}
 800092e:	4770      	bx	lr

08000930 <__udivsi3>:
 8000930:	2200      	movs	r2, #0
 8000932:	0843      	lsrs	r3, r0, #1
 8000934:	428b      	cmp	r3, r1
 8000936:	d374      	bcc.n	8000a22 <__udivsi3+0xf2>
 8000938:	0903      	lsrs	r3, r0, #4
 800093a:	428b      	cmp	r3, r1
 800093c:	d35f      	bcc.n	80009fe <__udivsi3+0xce>
 800093e:	0a03      	lsrs	r3, r0, #8
 8000940:	428b      	cmp	r3, r1
 8000942:	d344      	bcc.n	80009ce <__udivsi3+0x9e>
 8000944:	0b03      	lsrs	r3, r0, #12
 8000946:	428b      	cmp	r3, r1
 8000948:	d328      	bcc.n	800099c <__udivsi3+0x6c>
 800094a:	0c03      	lsrs	r3, r0, #16
 800094c:	428b      	cmp	r3, r1
 800094e:	d30d      	bcc.n	800096c <__udivsi3+0x3c>
 8000950:	22ff      	movs	r2, #255	; 0xff
 8000952:	0209      	lsls	r1, r1, #8
 8000954:	ba12      	rev	r2, r2
 8000956:	0c03      	lsrs	r3, r0, #16
 8000958:	428b      	cmp	r3, r1
 800095a:	d302      	bcc.n	8000962 <__udivsi3+0x32>
 800095c:	1212      	asrs	r2, r2, #8
 800095e:	0209      	lsls	r1, r1, #8
 8000960:	d065      	beq.n	8000a2e <__udivsi3+0xfe>
 8000962:	0b03      	lsrs	r3, r0, #12
 8000964:	428b      	cmp	r3, r1
 8000966:	d319      	bcc.n	800099c <__udivsi3+0x6c>
 8000968:	e000      	b.n	800096c <__udivsi3+0x3c>
 800096a:	0a09      	lsrs	r1, r1, #8
 800096c:	0bc3      	lsrs	r3, r0, #15
 800096e:	428b      	cmp	r3, r1
 8000970:	d301      	bcc.n	8000976 <__udivsi3+0x46>
 8000972:	03cb      	lsls	r3, r1, #15
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	4152      	adcs	r2, r2
 8000978:	0b83      	lsrs	r3, r0, #14
 800097a:	428b      	cmp	r3, r1
 800097c:	d301      	bcc.n	8000982 <__udivsi3+0x52>
 800097e:	038b      	lsls	r3, r1, #14
 8000980:	1ac0      	subs	r0, r0, r3
 8000982:	4152      	adcs	r2, r2
 8000984:	0b43      	lsrs	r3, r0, #13
 8000986:	428b      	cmp	r3, r1
 8000988:	d301      	bcc.n	800098e <__udivsi3+0x5e>
 800098a:	034b      	lsls	r3, r1, #13
 800098c:	1ac0      	subs	r0, r0, r3
 800098e:	4152      	adcs	r2, r2
 8000990:	0b03      	lsrs	r3, r0, #12
 8000992:	428b      	cmp	r3, r1
 8000994:	d301      	bcc.n	800099a <__udivsi3+0x6a>
 8000996:	030b      	lsls	r3, r1, #12
 8000998:	1ac0      	subs	r0, r0, r3
 800099a:	4152      	adcs	r2, r2
 800099c:	0ac3      	lsrs	r3, r0, #11
 800099e:	428b      	cmp	r3, r1
 80009a0:	d301      	bcc.n	80009a6 <__udivsi3+0x76>
 80009a2:	02cb      	lsls	r3, r1, #11
 80009a4:	1ac0      	subs	r0, r0, r3
 80009a6:	4152      	adcs	r2, r2
 80009a8:	0a83      	lsrs	r3, r0, #10
 80009aa:	428b      	cmp	r3, r1
 80009ac:	d301      	bcc.n	80009b2 <__udivsi3+0x82>
 80009ae:	028b      	lsls	r3, r1, #10
 80009b0:	1ac0      	subs	r0, r0, r3
 80009b2:	4152      	adcs	r2, r2
 80009b4:	0a43      	lsrs	r3, r0, #9
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d301      	bcc.n	80009be <__udivsi3+0x8e>
 80009ba:	024b      	lsls	r3, r1, #9
 80009bc:	1ac0      	subs	r0, r0, r3
 80009be:	4152      	adcs	r2, r2
 80009c0:	0a03      	lsrs	r3, r0, #8
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d301      	bcc.n	80009ca <__udivsi3+0x9a>
 80009c6:	020b      	lsls	r3, r1, #8
 80009c8:	1ac0      	subs	r0, r0, r3
 80009ca:	4152      	adcs	r2, r2
 80009cc:	d2cd      	bcs.n	800096a <__udivsi3+0x3a>
 80009ce:	09c3      	lsrs	r3, r0, #7
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d301      	bcc.n	80009d8 <__udivsi3+0xa8>
 80009d4:	01cb      	lsls	r3, r1, #7
 80009d6:	1ac0      	subs	r0, r0, r3
 80009d8:	4152      	adcs	r2, r2
 80009da:	0983      	lsrs	r3, r0, #6
 80009dc:	428b      	cmp	r3, r1
 80009de:	d301      	bcc.n	80009e4 <__udivsi3+0xb4>
 80009e0:	018b      	lsls	r3, r1, #6
 80009e2:	1ac0      	subs	r0, r0, r3
 80009e4:	4152      	adcs	r2, r2
 80009e6:	0943      	lsrs	r3, r0, #5
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d301      	bcc.n	80009f0 <__udivsi3+0xc0>
 80009ec:	014b      	lsls	r3, r1, #5
 80009ee:	1ac0      	subs	r0, r0, r3
 80009f0:	4152      	adcs	r2, r2
 80009f2:	0903      	lsrs	r3, r0, #4
 80009f4:	428b      	cmp	r3, r1
 80009f6:	d301      	bcc.n	80009fc <__udivsi3+0xcc>
 80009f8:	010b      	lsls	r3, r1, #4
 80009fa:	1ac0      	subs	r0, r0, r3
 80009fc:	4152      	adcs	r2, r2
 80009fe:	08c3      	lsrs	r3, r0, #3
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d301      	bcc.n	8000a08 <__udivsi3+0xd8>
 8000a04:	00cb      	lsls	r3, r1, #3
 8000a06:	1ac0      	subs	r0, r0, r3
 8000a08:	4152      	adcs	r2, r2
 8000a0a:	0883      	lsrs	r3, r0, #2
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d301      	bcc.n	8000a14 <__udivsi3+0xe4>
 8000a10:	008b      	lsls	r3, r1, #2
 8000a12:	1ac0      	subs	r0, r0, r3
 8000a14:	4152      	adcs	r2, r2
 8000a16:	0843      	lsrs	r3, r0, #1
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d301      	bcc.n	8000a20 <__udivsi3+0xf0>
 8000a1c:	004b      	lsls	r3, r1, #1
 8000a1e:	1ac0      	subs	r0, r0, r3
 8000a20:	4152      	adcs	r2, r2
 8000a22:	1a41      	subs	r1, r0, r1
 8000a24:	d200      	bcs.n	8000a28 <__udivsi3+0xf8>
 8000a26:	4601      	mov	r1, r0
 8000a28:	4152      	adcs	r2, r2
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4770      	bx	lr
 8000a2e:	e7ff      	b.n	8000a30 <__udivsi3+0x100>
 8000a30:	b501      	push	{r0, lr}
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f8f0 	bl	8000c18 <__aeabi_idiv0>
 8000a38:	bd02      	pop	{r1, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)

08000a3c <__aeabi_uidivmod>:
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	d0f7      	beq.n	8000a30 <__udivsi3+0x100>
 8000a40:	e776      	b.n	8000930 <__udivsi3>
 8000a42:	4770      	bx	lr

08000a44 <__divsi3>:
 8000a44:	4603      	mov	r3, r0
 8000a46:	430b      	orrs	r3, r1
 8000a48:	d47f      	bmi.n	8000b4a <__divsi3+0x106>
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	0843      	lsrs	r3, r0, #1
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d374      	bcc.n	8000b3c <__divsi3+0xf8>
 8000a52:	0903      	lsrs	r3, r0, #4
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d35f      	bcc.n	8000b18 <__divsi3+0xd4>
 8000a58:	0a03      	lsrs	r3, r0, #8
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d344      	bcc.n	8000ae8 <__divsi3+0xa4>
 8000a5e:	0b03      	lsrs	r3, r0, #12
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d328      	bcc.n	8000ab6 <__divsi3+0x72>
 8000a64:	0c03      	lsrs	r3, r0, #16
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d30d      	bcc.n	8000a86 <__divsi3+0x42>
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	0209      	lsls	r1, r1, #8
 8000a6e:	ba12      	rev	r2, r2
 8000a70:	0c03      	lsrs	r3, r0, #16
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d302      	bcc.n	8000a7c <__divsi3+0x38>
 8000a76:	1212      	asrs	r2, r2, #8
 8000a78:	0209      	lsls	r1, r1, #8
 8000a7a:	d065      	beq.n	8000b48 <__divsi3+0x104>
 8000a7c:	0b03      	lsrs	r3, r0, #12
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d319      	bcc.n	8000ab6 <__divsi3+0x72>
 8000a82:	e000      	b.n	8000a86 <__divsi3+0x42>
 8000a84:	0a09      	lsrs	r1, r1, #8
 8000a86:	0bc3      	lsrs	r3, r0, #15
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d301      	bcc.n	8000a90 <__divsi3+0x4c>
 8000a8c:	03cb      	lsls	r3, r1, #15
 8000a8e:	1ac0      	subs	r0, r0, r3
 8000a90:	4152      	adcs	r2, r2
 8000a92:	0b83      	lsrs	r3, r0, #14
 8000a94:	428b      	cmp	r3, r1
 8000a96:	d301      	bcc.n	8000a9c <__divsi3+0x58>
 8000a98:	038b      	lsls	r3, r1, #14
 8000a9a:	1ac0      	subs	r0, r0, r3
 8000a9c:	4152      	adcs	r2, r2
 8000a9e:	0b43      	lsrs	r3, r0, #13
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d301      	bcc.n	8000aa8 <__divsi3+0x64>
 8000aa4:	034b      	lsls	r3, r1, #13
 8000aa6:	1ac0      	subs	r0, r0, r3
 8000aa8:	4152      	adcs	r2, r2
 8000aaa:	0b03      	lsrs	r3, r0, #12
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d301      	bcc.n	8000ab4 <__divsi3+0x70>
 8000ab0:	030b      	lsls	r3, r1, #12
 8000ab2:	1ac0      	subs	r0, r0, r3
 8000ab4:	4152      	adcs	r2, r2
 8000ab6:	0ac3      	lsrs	r3, r0, #11
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d301      	bcc.n	8000ac0 <__divsi3+0x7c>
 8000abc:	02cb      	lsls	r3, r1, #11
 8000abe:	1ac0      	subs	r0, r0, r3
 8000ac0:	4152      	adcs	r2, r2
 8000ac2:	0a83      	lsrs	r3, r0, #10
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	d301      	bcc.n	8000acc <__divsi3+0x88>
 8000ac8:	028b      	lsls	r3, r1, #10
 8000aca:	1ac0      	subs	r0, r0, r3
 8000acc:	4152      	adcs	r2, r2
 8000ace:	0a43      	lsrs	r3, r0, #9
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d301      	bcc.n	8000ad8 <__divsi3+0x94>
 8000ad4:	024b      	lsls	r3, r1, #9
 8000ad6:	1ac0      	subs	r0, r0, r3
 8000ad8:	4152      	adcs	r2, r2
 8000ada:	0a03      	lsrs	r3, r0, #8
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d301      	bcc.n	8000ae4 <__divsi3+0xa0>
 8000ae0:	020b      	lsls	r3, r1, #8
 8000ae2:	1ac0      	subs	r0, r0, r3
 8000ae4:	4152      	adcs	r2, r2
 8000ae6:	d2cd      	bcs.n	8000a84 <__divsi3+0x40>
 8000ae8:	09c3      	lsrs	r3, r0, #7
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d301      	bcc.n	8000af2 <__divsi3+0xae>
 8000aee:	01cb      	lsls	r3, r1, #7
 8000af0:	1ac0      	subs	r0, r0, r3
 8000af2:	4152      	adcs	r2, r2
 8000af4:	0983      	lsrs	r3, r0, #6
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d301      	bcc.n	8000afe <__divsi3+0xba>
 8000afa:	018b      	lsls	r3, r1, #6
 8000afc:	1ac0      	subs	r0, r0, r3
 8000afe:	4152      	adcs	r2, r2
 8000b00:	0943      	lsrs	r3, r0, #5
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d301      	bcc.n	8000b0a <__divsi3+0xc6>
 8000b06:	014b      	lsls	r3, r1, #5
 8000b08:	1ac0      	subs	r0, r0, r3
 8000b0a:	4152      	adcs	r2, r2
 8000b0c:	0903      	lsrs	r3, r0, #4
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d301      	bcc.n	8000b16 <__divsi3+0xd2>
 8000b12:	010b      	lsls	r3, r1, #4
 8000b14:	1ac0      	subs	r0, r0, r3
 8000b16:	4152      	adcs	r2, r2
 8000b18:	08c3      	lsrs	r3, r0, #3
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d301      	bcc.n	8000b22 <__divsi3+0xde>
 8000b1e:	00cb      	lsls	r3, r1, #3
 8000b20:	1ac0      	subs	r0, r0, r3
 8000b22:	4152      	adcs	r2, r2
 8000b24:	0883      	lsrs	r3, r0, #2
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d301      	bcc.n	8000b2e <__divsi3+0xea>
 8000b2a:	008b      	lsls	r3, r1, #2
 8000b2c:	1ac0      	subs	r0, r0, r3
 8000b2e:	4152      	adcs	r2, r2
 8000b30:	0843      	lsrs	r3, r0, #1
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d301      	bcc.n	8000b3a <__divsi3+0xf6>
 8000b36:	004b      	lsls	r3, r1, #1
 8000b38:	1ac0      	subs	r0, r0, r3
 8000b3a:	4152      	adcs	r2, r2
 8000b3c:	1a41      	subs	r1, r0, r1
 8000b3e:	d200      	bcs.n	8000b42 <__divsi3+0xfe>
 8000b40:	4601      	mov	r1, r0
 8000b42:	4152      	adcs	r2, r2
 8000b44:	4610      	mov	r0, r2
 8000b46:	4770      	bx	lr
 8000b48:	e05d      	b.n	8000c06 <__divsi3+0x1c2>
 8000b4a:	0fca      	lsrs	r2, r1, #31
 8000b4c:	d000      	beq.n	8000b50 <__divsi3+0x10c>
 8000b4e:	4249      	negs	r1, r1
 8000b50:	1003      	asrs	r3, r0, #32
 8000b52:	d300      	bcc.n	8000b56 <__divsi3+0x112>
 8000b54:	4240      	negs	r0, r0
 8000b56:	4053      	eors	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	469c      	mov	ip, r3
 8000b5c:	0903      	lsrs	r3, r0, #4
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d32d      	bcc.n	8000bbe <__divsi3+0x17a>
 8000b62:	0a03      	lsrs	r3, r0, #8
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d312      	bcc.n	8000b8e <__divsi3+0x14a>
 8000b68:	22fc      	movs	r2, #252	; 0xfc
 8000b6a:	0189      	lsls	r1, r1, #6
 8000b6c:	ba12      	rev	r2, r2
 8000b6e:	0a03      	lsrs	r3, r0, #8
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d30c      	bcc.n	8000b8e <__divsi3+0x14a>
 8000b74:	0189      	lsls	r1, r1, #6
 8000b76:	1192      	asrs	r2, r2, #6
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	d308      	bcc.n	8000b8e <__divsi3+0x14a>
 8000b7c:	0189      	lsls	r1, r1, #6
 8000b7e:	1192      	asrs	r2, r2, #6
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d304      	bcc.n	8000b8e <__divsi3+0x14a>
 8000b84:	0189      	lsls	r1, r1, #6
 8000b86:	d03a      	beq.n	8000bfe <__divsi3+0x1ba>
 8000b88:	1192      	asrs	r2, r2, #6
 8000b8a:	e000      	b.n	8000b8e <__divsi3+0x14a>
 8000b8c:	0989      	lsrs	r1, r1, #6
 8000b8e:	09c3      	lsrs	r3, r0, #7
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d301      	bcc.n	8000b98 <__divsi3+0x154>
 8000b94:	01cb      	lsls	r3, r1, #7
 8000b96:	1ac0      	subs	r0, r0, r3
 8000b98:	4152      	adcs	r2, r2
 8000b9a:	0983      	lsrs	r3, r0, #6
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d301      	bcc.n	8000ba4 <__divsi3+0x160>
 8000ba0:	018b      	lsls	r3, r1, #6
 8000ba2:	1ac0      	subs	r0, r0, r3
 8000ba4:	4152      	adcs	r2, r2
 8000ba6:	0943      	lsrs	r3, r0, #5
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	d301      	bcc.n	8000bb0 <__divsi3+0x16c>
 8000bac:	014b      	lsls	r3, r1, #5
 8000bae:	1ac0      	subs	r0, r0, r3
 8000bb0:	4152      	adcs	r2, r2
 8000bb2:	0903      	lsrs	r3, r0, #4
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	d301      	bcc.n	8000bbc <__divsi3+0x178>
 8000bb8:	010b      	lsls	r3, r1, #4
 8000bba:	1ac0      	subs	r0, r0, r3
 8000bbc:	4152      	adcs	r2, r2
 8000bbe:	08c3      	lsrs	r3, r0, #3
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d301      	bcc.n	8000bc8 <__divsi3+0x184>
 8000bc4:	00cb      	lsls	r3, r1, #3
 8000bc6:	1ac0      	subs	r0, r0, r3
 8000bc8:	4152      	adcs	r2, r2
 8000bca:	0883      	lsrs	r3, r0, #2
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d301      	bcc.n	8000bd4 <__divsi3+0x190>
 8000bd0:	008b      	lsls	r3, r1, #2
 8000bd2:	1ac0      	subs	r0, r0, r3
 8000bd4:	4152      	adcs	r2, r2
 8000bd6:	d2d9      	bcs.n	8000b8c <__divsi3+0x148>
 8000bd8:	0843      	lsrs	r3, r0, #1
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d301      	bcc.n	8000be2 <__divsi3+0x19e>
 8000bde:	004b      	lsls	r3, r1, #1
 8000be0:	1ac0      	subs	r0, r0, r3
 8000be2:	4152      	adcs	r2, r2
 8000be4:	1a41      	subs	r1, r0, r1
 8000be6:	d200      	bcs.n	8000bea <__divsi3+0x1a6>
 8000be8:	4601      	mov	r1, r0
 8000bea:	4663      	mov	r3, ip
 8000bec:	4152      	adcs	r2, r2
 8000bee:	105b      	asrs	r3, r3, #1
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	d301      	bcc.n	8000bf8 <__divsi3+0x1b4>
 8000bf4:	4240      	negs	r0, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d500      	bpl.n	8000bfc <__divsi3+0x1b8>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	4770      	bx	lr
 8000bfe:	4663      	mov	r3, ip
 8000c00:	105b      	asrs	r3, r3, #1
 8000c02:	d300      	bcc.n	8000c06 <__divsi3+0x1c2>
 8000c04:	4240      	negs	r0, r0
 8000c06:	b501      	push	{r0, lr}
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f805 	bl	8000c18 <__aeabi_idiv0>
 8000c0e:	bd02      	pop	{r1, pc}

08000c10 <__aeabi_idivmod>:
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d0f8      	beq.n	8000c06 <__divsi3+0x1c2>
 8000c14:	e716      	b.n	8000a44 <__divsi3>
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_idiv0>:
 8000c18:	4770      	bx	lr
 8000c1a:	46c0      	nop			; (mov r8, r8)

08000c1c <ledISR>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void ledISR(void *arg)
{
 8000c1c:	b510      	push	{r4, lr}
	ledToggle(_DEF_CH1);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fa72 	bl	8001108 <ledToggle>
}
 8000c24:	bd10      	pop	{r4, pc}
	...

08000c28 <infoCli>:
* Inputs        : uint8_t,  const char
* Outputs       :
* Return        : void
*****************************************************************************/
void infoCli(uint8_t argc, const char **argv)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2a:	46c6      	mov	lr, r8
 8000c2c:	b500      	push	{lr}
 8000c2e:	0006      	movs	r6, r0
 8000c30:	000f      	movs	r7, r1
	bool ret = false;


	//1.1. info - test
	if (argc == 1 && cliIsStr(argv[0], "test"))
 8000c32:	2801      	cmp	r0, #1
 8000c34:	d00c      	beq.n	8000c50 <infoCli+0x28>
	bool ret = false;
 8000c36:	2400      	movs	r4, #0
		ret = true;
	}


	//1.2. info - print
	if (argc == 2 && cliIsStr(argv[0], "print"))
 8000c38:	2e02      	cmp	r6, #2
 8000c3a:	d013      	beq.n	8000c64 <infoCli+0x3c>
		ret= true;
	}


	//1.3. info - button
	if (argc == 1 && cliIsStr(argv[0], "button"))
 8000c3c:	2e01      	cmp	r6, #1
 8000c3e:	d029      	beq.n	8000c94 <infoCli+0x6c>
	}



	//1.4. info - jump boot
	if (argc == 1 && cliIsStr(argv[0], "jump_boot"))
 8000c40:	2e01      	cmp	r6, #1
 8000c42:	d048      	beq.n	8000cd6 <infoCli+0xae>

		ret = true;
	}


	if (ret == false)
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d100      	bne.n	8000c4a <infoCli+0x22>
 8000c48:	e070      	b.n	8000d2c <infoCli+0x104>
		cliPrintf("info print 0~10\n");
		cliPrintf("info button\n");
		cliPrintf("info jump_boot\n");
	}

}
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc == 1 && cliIsStr(argv[0], "test"))
 8000c50:	493d      	ldr	r1, [pc, #244]	; (8000d48 <infoCli+0x120>)
 8000c52:	6838      	ldr	r0, [r7, #0]
 8000c54:	f000 f996 	bl	8000f84 <cliIsStr>
 8000c58:	1e04      	subs	r4, r0, #0
 8000c5a:	d0ed      	beq.n	8000c38 <infoCli+0x10>
		cliPrintf("infoCli run test\n");
 8000c5c:	483b      	ldr	r0, [pc, #236]	; (8000d4c <infoCli+0x124>)
 8000c5e:	f000 f963 	bl	8000f28 <cliPrintf>
		ret = true;
 8000c62:	e7e9      	b.n	8000c38 <infoCli+0x10>
	if (argc == 2 && cliIsStr(argv[0], "print"))
 8000c64:	493a      	ldr	r1, [pc, #232]	; (8000d50 <infoCli+0x128>)
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	f000 f98c 	bl	8000f84 <cliIsStr>
 8000c6c:	4680      	mov	r8, r0
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d0e4      	beq.n	8000c3c <infoCli+0x14>
		count = (uint8_t)cliGetData(argv[1]);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f98f 	bl	8000f96 <cliGetData>
 8000c78:	0005      	movs	r5, r0
		for (int i = 0; i < count; i++)
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	e004      	b.n	8000c88 <infoCli+0x60>
			cliPrintf("print %d/%d\n", i+1, count);
 8000c7e:	3401      	adds	r4, #1
 8000c80:	0021      	movs	r1, r4
 8000c82:	4834      	ldr	r0, [pc, #208]	; (8000d54 <infoCli+0x12c>)
 8000c84:	f000 f950 	bl	8000f28 <cliPrintf>
		for (int i = 0; i < count; i++)
 8000c88:	22ff      	movs	r2, #255	; 0xff
 8000c8a:	402a      	ands	r2, r5
 8000c8c:	4294      	cmp	r4, r2
 8000c8e:	dbf6      	blt.n	8000c7e <infoCli+0x56>
		ret= true;
 8000c90:	4644      	mov	r4, r8
 8000c92:	e7d3      	b.n	8000c3c <infoCli+0x14>
	if (argc == 1 && cliIsStr(argv[0], "button"))
 8000c94:	4930      	ldr	r1, [pc, #192]	; (8000d58 <infoCli+0x130>)
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f000 f974 	bl	8000f84 <cliIsStr>
 8000c9c:	1e05      	subs	r5, r0, #0
 8000c9e:	d112      	bne.n	8000cc6 <infoCli+0x9e>
 8000ca0:	e7ce      	b.n	8000c40 <infoCli+0x18>
				cliPrintf("%d", buttonGetPressed(i));
 8000ca2:	b2e0      	uxtb	r0, r4
 8000ca4:	f000 f8ea 	bl	8000e7c <buttonGetPressed>
 8000ca8:	0001      	movs	r1, r0
 8000caa:	482c      	ldr	r0, [pc, #176]	; (8000d5c <infoCli+0x134>)
 8000cac:	f000 f93c 	bl	8000f28 <cliPrintf>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 8000cb0:	3401      	adds	r4, #1
 8000cb2:	2c04      	cmp	r4, #4
 8000cb4:	ddf5      	ble.n	8000ca2 <infoCli+0x7a>
			cliPrintf("\n");
 8000cb6:	482a      	ldr	r0, [pc, #168]	; (8000d60 <infoCli+0x138>)
 8000cb8:	f000 f936 	bl	8000f28 <cliPrintf>
			delay(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f000 fcba 	bl	8001636 <delay>
	    wdgRefresh();
 8000cc2:	f000 fce1 	bl	8001688 <wdgRefresh>
		while (cliKeepLoop())
 8000cc6:	f000 f96c 	bl	8000fa2 <cliKeepLoop>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <infoCli+0xaa>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 8000cce:	2400      	movs	r4, #0
 8000cd0:	e7ef      	b.n	8000cb2 <infoCli+0x8a>
		ret = true;
 8000cd2:	002c      	movs	r4, r5
 8000cd4:	e7b4      	b.n	8000c40 <infoCli+0x18>
	if (argc == 1 && cliIsStr(argv[0], "jump_boot"))
 8000cd6:	6838      	ldr	r0, [r7, #0]
 8000cd8:	4922      	ldr	r1, [pc, #136]	; (8000d64 <infoCli+0x13c>)
 8000cda:	f000 f953 	bl	8000f84 <cliIsStr>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d0b0      	beq.n	8000c44 <infoCli+0x1c>
		HAL_DeInit();
 8000ce2:	f001 f8c7 	bl	8001e74 <HAL_DeInit>
		HAL_RCC_DeInit();
 8000ce6:	f002 f815 	bl	8002d14 <HAL_RCC_DeInit>
		SysTick->CTRL = 0;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <infoCli+0x140>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000cf0:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 8000cf2:	609a      	str	r2, [r3, #8]
		for (int i = 0; i < 8; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e00f      	b.n	8000d18 <infoCli+0xf0>
			NVIC->ICER[i] = 0xFFFFFFFF;
 8000cf8:	491c      	ldr	r1, [pc, #112]	; (8000d6c <infoCli+0x144>)
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	3220      	adds	r2, #32
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	2001      	movs	r0, #1
 8000d02:	4240      	negs	r0, r0
 8000d04:	5050      	str	r0, [r2, r1]
			NVIC->ICPR[i] = 0xFFFFFFFF;
 8000d06:	001a      	movs	r2, r3
 8000d08:	3260      	adds	r2, #96	; 0x60
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	5050      	str	r0, [r2, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d12:	f3bf 8f6f 	isb	sy
		for (int i = 0; i < 8; i++)
 8000d16:	3301      	adds	r3, #1
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	dded      	ble.n	8000cf8 <infoCli+0xd0>
		__set_MSP(*(uint32_t *)(0x1FFF0000));
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <infoCli+0x148>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000d20:	f383 8808 	msr	MSP, r3
		(*jump_boot)();
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <infoCli+0x14c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4798      	blx	r3
	if (ret == false)
 8000d2a:	e78e      	b.n	8000c4a <infoCli+0x22>
		cliPrintf("info test\n");
 8000d2c:	4812      	ldr	r0, [pc, #72]	; (8000d78 <infoCli+0x150>)
 8000d2e:	f000 f8fb 	bl	8000f28 <cliPrintf>
		cliPrintf("info print 0~10\n");
 8000d32:	4812      	ldr	r0, [pc, #72]	; (8000d7c <infoCli+0x154>)
 8000d34:	f000 f8f8 	bl	8000f28 <cliPrintf>
		cliPrintf("info button\n");
 8000d38:	4811      	ldr	r0, [pc, #68]	; (8000d80 <infoCli+0x158>)
 8000d3a:	f000 f8f5 	bl	8000f28 <cliPrintf>
		cliPrintf("info jump_boot\n");
 8000d3e:	4811      	ldr	r0, [pc, #68]	; (8000d84 <infoCli+0x15c>)
 8000d40:	f000 f8f2 	bl	8000f28 <cliPrintf>
}
 8000d44:	e781      	b.n	8000c4a <infoCli+0x22>
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	08005224 	.word	0x08005224
 8000d4c:	0800522c 	.word	0x0800522c
 8000d50:	08005240 	.word	0x08005240
 8000d54:	08005248 	.word	0x08005248
 8000d58:	08005258 	.word	0x08005258
 8000d5c:	08005260 	.word	0x08005260
 8000d60:	080053d8 	.word	0x080053d8
 8000d64:	08005264 	.word	0x08005264
 8000d68:	e000e010 	.word	0xe000e010
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	1fff0000 	.word	0x1fff0000
 8000d74:	1fff0004 	.word	0x1fff0004
 8000d78:	08005270 	.word	0x08005270
 8000d7c:	0800527c 	.word	0x0800527c
 8000d80:	08005290 	.word	0x08005290
 8000d84:	080052a0 	.word	0x080052a0

08000d88 <apInit>:
{
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	b084      	sub	sp, #16
	wdgInit();
 8000d8c:	f000 fc5b 	bl	8001646 <wdgInit>
	wdgBegin(2000); //4s
 8000d90:	20fa      	movs	r0, #250	; 0xfa
 8000d92:	00c0      	lsls	r0, r0, #3
 8000d94:	f000 fc5a 	bl	800164c <wdgBegin>
	cliInit();
 8000d98:	f000 f8ac 	bl	8000ef4 <cliInit>
	swtimerInit();
 8000d9c:	f000 fb2e 	bl	80013fc <swtimerInit>
	rtcInit();
 8000da0:	f000 f9e8 	bl	8001174 <rtcInit>
  ledInit();
 8000da4:	f000 f998 	bl	80010d8 <ledInit>
  pwmInit();
 8000da8:	f000 f9c6 	bl	8001138 <pwmInit>
  adcInit();
 8000dac:	f000 f842 	bl	8000e34 <adcInit>
  buttonInit();
 8000db0:	f000 f861 	bl	8000e76 <buttonInit>
  uartInit();
 8000db4:	f000 fbb8 	bl	8001528 <uartInit>
  cliAdd("info", infoCli);
 8000db8:	490e      	ldr	r1, [pc, #56]	; (8000df4 <apInit+0x6c>)
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <apInit+0x70>)
 8000dbc:	f000 f87a 	bl	8000eb4 <cliAdd>
  if (swtimerGetCh(&timer_ch) == true)
 8000dc0:	200f      	movs	r0, #15
 8000dc2:	4468      	add	r0, sp
 8000dc4:	f000 fb34 	bl	8001430 <swtimerGetCh>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d105      	bne.n	8000dd8 <apInit+0x50>
  uartPrintf(_DEF_CH1, "Firmware Begin...\n");
 8000dcc:	490b      	ldr	r1, [pc, #44]	; (8000dfc <apInit+0x74>)
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 fc04 	bl	80015dc <uartPrintf>
}
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bd10      	pop	{r4, pc}
  	swtimerSet(timer_ch, ledISR, NULL, SWTIMER_LOOP, 100);
 8000dd8:	240f      	movs	r4, #15
 8000dda:	446c      	add	r4, sp
 8000ddc:	7820      	ldrb	r0, [r4, #0]
 8000dde:	2364      	movs	r3, #100	; 0x64
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	2200      	movs	r2, #0
 8000de6:	4906      	ldr	r1, [pc, #24]	; (8000e00 <apInit+0x78>)
 8000de8:	f000 fb30 	bl	800144c <swtimerSet>
  	swtimerStart(timer_ch);
 8000dec:	7820      	ldrb	r0, [r4, #0]
 8000dee:	f000 fb45 	bl	800147c <swtimerStart>
 8000df2:	e7eb      	b.n	8000dcc <apInit+0x44>
 8000df4:	08000c29 	.word	0x08000c29
 8000df8:	080052b0 	.word	0x080052b0
 8000dfc:	080052b8 	.word	0x080052b8
 8000e00:	08000c1d 	.word	0x08000c1d

08000e04 <apMain>:
{
 8000e04:	b510      	push	{r4, lr}
  ledSetDuty(_DEF_CH1, 100);
 8000e06:	2164      	movs	r1, #100	; 0x64
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 f98d 	bl	8001128 <ledSetDuty>
  pre_time = millis();
 8000e0e:	f000 fc16 	bl	800163e <millis>
 8000e12:	0004      	movs	r4, r0
 8000e14:	e006      	b.n	8000e24 <apMain+0x20>
      pre_time = millis();
 8000e16:	f000 fc12 	bl	800163e <millis>
 8000e1a:	0004      	movs	r4, r0
    cliMain();
 8000e1c:	f000 f8cc 	bl	8000fb8 <cliMain>
    wdgRefresh();
 8000e20:	f000 fc32 	bl	8001688 <wdgRefresh>
    if (millis() - pre_time >= 500)
 8000e24:	f000 fc0b 	bl	800163e <millis>
 8000e28:	1b00      	subs	r0, r0, r4
 8000e2a:	22fa      	movs	r2, #250	; 0xfa
 8000e2c:	0052      	lsls	r2, r2, #1
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d2f1      	bcs.n	8000e16 <apMain+0x12>
 8000e32:	e7f3      	b.n	8000e1c <apMain+0x18>

08000e34 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 8000e34:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000e36:	4c05      	ldr	r4, [pc, #20]	; (8000e4c <adcInit+0x18>)
 8000e38:	0020      	movs	r0, r4
 8000e3a:	f001 fc65 	bl	8002708 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 8000e3e:	2203      	movs	r2, #3
 8000e40:	4903      	ldr	r1, [pc, #12]	; (8000e50 <adcInit+0x1c>)
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 fbbc 	bl	80025c0 <HAL_ADC_Start_DMA>
  return true;
}
 8000e48:	2001      	movs	r0, #1
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	20000354 	.word	0x20000354
 8000e50:	20000090 	.word	0x20000090

08000e54 <adcRead>:
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;

  ret = adc_data[ch];
 8000e54:	0040      	lsls	r0, r0, #1
 8000e56:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <adcRead+0x8>)
 8000e58:	5ac0      	ldrh	r0, [r0, r3]

  return ret;
}
 8000e5a:	4770      	bx	lr
 8000e5c:	20000090 	.word	0x20000090

08000e60 <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 8000e60:	b510      	push	{r4, lr}
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 8000e62:	f7ff fff7 	bl	8000e54 <adcRead>
 8000e66:	0003      	movs	r3, r0
  ret = (330 * adc_data) / 4096;
 8000e68:	0080      	lsls	r0, r0, #2
 8000e6a:	18c0      	adds	r0, r0, r3
 8000e6c:	0143      	lsls	r3, r0, #5
 8000e6e:	18c0      	adds	r0, r0, r3
 8000e70:	0040      	lsls	r0, r0, #1
 8000e72:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 8000e74:	bd10      	pop	{r4, pc}

08000e76 <buttonInit>:
* Return        : bool
*****************************************************************************/
bool buttonInit(void)
{
  return true;
}
 8000e76:	2001      	movs	r0, #1
 8000e78:	4770      	bx	lr
	...

08000e7c <buttonGetPressed>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool buttonGetPressed(uint8_t ch)
{
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if (ch >= BUTTON_MAX_CH)
 8000e80:	2804      	cmp	r0, #4
 8000e82:	d901      	bls.n	8000e88 <buttonGetPressed+0xc>
  {
    return false;
 8000e84:	2000      	movs	r0, #0
    ret = true;
  }


  return ret;
}
 8000e86:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffe9 	bl	8000e60 <adcReadVoltage>
  if (adc_voltage >= button_adc[ch].adc_min  &&  adc_voltage <= button_adc[ch].adc_max)
 8000e8e:	00a3      	lsls	r3, r4, #2
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <buttonGetPressed+0x34>)
 8000e92:	5a9b      	ldrh	r3, [r3, r2]
 8000e94:	4283      	cmp	r3, r0
 8000e96:	d806      	bhi.n	8000ea6 <buttonGetPressed+0x2a>
 8000e98:	00a4      	lsls	r4, r4, #2
 8000e9a:	1914      	adds	r4, r2, r4
 8000e9c:	8863      	ldrh	r3, [r4, #2]
 8000e9e:	4283      	cmp	r3, r0
 8000ea0:	d203      	bcs.n	8000eaa <buttonGetPressed+0x2e>
  bool ret = false;
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	e7ef      	b.n	8000e86 <buttonGetPressed+0xa>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	e7ed      	b.n	8000e86 <buttonGetPressed+0xa>
    ret = true;
 8000eaa:	2001      	movs	r0, #1
 8000eac:	e7eb      	b.n	8000e86 <buttonGetPressed+0xa>
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	080052cc 	.word	0x080052cc

08000eb4 <cliAdd>:
* Inputs        : const char, func ptr
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliAdd(const char *cmd_str, void (*cmd_func)(uint8_t argc, const char **argv))
{
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	000d      	movs	r5, r1
	if (cli_cmd_count >= CLI_CMD_LIST_MAX)
 8000eba:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <cliAdd+0x38>)
 8000ebc:	7814      	ldrb	r4, [r2, #0]
 8000ebe:	2c07      	cmp	r4, #7
 8000ec0:	d901      	bls.n	8000ec6 <cliAdd+0x12>
	{
		return false;
 8000ec2:	2000      	movs	r0, #0
	strncpy(cli_cmd_func[cli_cmd_count].cmd_str,  cmd_str,  8);
	cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
	cli_cmd_count++;

	return true;
}
 8000ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	strncpy(cli_cmd_func[cli_cmd_count].cmd_str,  cmd_str,  8);
 8000ec6:	4f0a      	ldr	r7, [pc, #40]	; (8000ef0 <cliAdd+0x3c>)
 8000ec8:	0066      	lsls	r6, r4, #1
 8000eca:	1930      	adds	r0, r6, r4
 8000ecc:	0080      	lsls	r0, r0, #2
 8000ece:	1838      	adds	r0, r7, r0
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	0019      	movs	r1, r3
 8000ed4:	f003 fc3a 	bl	800474c <strncpy>
	cli_cmd_func[cli_cmd_count].cmd_func = cmd_func;
 8000ed8:	1936      	adds	r6, r6, r4
 8000eda:	00b6      	lsls	r6, r6, #2
 8000edc:	19be      	adds	r6, r7, r6
 8000ede:	60b5      	str	r5, [r6, #8]
	cli_cmd_count++;
 8000ee0:	3401      	adds	r4, #1
 8000ee2:	4b02      	ldr	r3, [pc, #8]	; (8000eec <cliAdd+0x38>)
 8000ee4:	701c      	strb	r4, [r3, #0]
	return true;
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	e7ec      	b.n	8000ec4 <cliAdd+0x10>
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	2000013a 	.word	0x2000013a
 8000ef0:	2000013c 	.word	0x2000013c

08000ef4 <cliInit>:
{
 8000ef4:	b510      	push	{r4, lr}
	for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e007      	b.n	8000f0a <cliInit+0x16>
		cli_cmd_func[i].cmd_func = NULL;
 8000efa:	005a      	lsls	r2, r3, #1
 8000efc:	18d2      	adds	r2, r2, r3
 8000efe:	0091      	lsls	r1, r2, #2
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <cliInit+0x28>)
 8000f02:	1852      	adds	r2, r2, r1
 8000f04:	2100      	movs	r1, #0
 8000f06:	6091      	str	r1, [r2, #8]
	for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 8000f08:	3301      	adds	r3, #1
 8000f0a:	2b07      	cmp	r3, #7
 8000f0c:	ddf5      	ble.n	8000efa <cliInit+0x6>
	cliAdd("help", cliHelp);
 8000f0e:	4904      	ldr	r1, [pc, #16]	; (8000f20 <cliInit+0x2c>)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <cliInit+0x30>)
 8000f12:	f7ff ffcf 	bl	8000eb4 <cliAdd>
}
 8000f16:	2001      	movs	r0, #1
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	2000013c 	.word	0x2000013c
 8000f20:	08000f45 	.word	0x08000f45
 8000f24:	080052e0 	.word	0x080052e0

08000f28 <cliPrintf>:
* Inputs        : const char, ...
* Outputs       : Use the uart write action to output a formatted string.(for CLI mode)
* Return        : void
*****************************************************************************/
void cliPrintf(const char *fmt, ...)
{
 8000f28:	b40f      	push	{r0, r1, r2, r3}
 8000f2a:	b500      	push	{lr}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	aa04      	add	r2, sp, #16
 8000f30:	ca02      	ldmia	r2!, {r1}
	va_list arg;

	va_start(arg, fmt);
 8000f32:	9201      	str	r2, [sp, #4]
	uartVPrintf(cli_ch, fmt, arg);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 fb6a 	bl	800160e <uartVPrintf>
	va_end(arg);
}
 8000f3a:	b003      	add	sp, #12
 8000f3c:	bc08      	pop	{r3}
 8000f3e:	b004      	add	sp, #16
 8000f40:	4718      	bx	r3
	...

08000f44 <cliHelp>:
{
 8000f44:	b510      	push	{r4, lr}
	cliPrintf("---------------------------\n");
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <cliHelp+0x30>)
 8000f48:	f7ff ffee 	bl	8000f28 <cliPrintf>
	for (int i = 0; i < cli_cmd_count; i++)
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	e008      	b.n	8000f62 <cliHelp+0x1e>
		cliPrintf("%s\n", cli_cmd_func[i].cmd_str);
 8000f50:	0063      	lsls	r3, r4, #1
 8000f52:	191b      	adds	r3, r3, r4
 8000f54:	009a      	lsls	r2, r3, #2
 8000f56:	4908      	ldr	r1, [pc, #32]	; (8000f78 <cliHelp+0x34>)
 8000f58:	1889      	adds	r1, r1, r2
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <cliHelp+0x38>)
 8000f5c:	f7ff ffe4 	bl	8000f28 <cliPrintf>
	for (int i = 0; i < cli_cmd_count; i++)
 8000f60:	3401      	adds	r4, #1
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <cliHelp+0x3c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	dcf2      	bgt.n	8000f50 <cliHelp+0xc>
	cliPrintf("---------------------------\n");
 8000f6a:	4802      	ldr	r0, [pc, #8]	; (8000f74 <cliHelp+0x30>)
 8000f6c:	f7ff ffdc 	bl	8000f28 <cliPrintf>
}
 8000f70:	bd10      	pop	{r4, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	080052e8 	.word	0x080052e8
 8000f78:	2000013c 	.word	0x2000013c
 8000f7c:	08005308 	.word	0x08005308
 8000f80:	2000013a 	.word	0x2000013a

08000f84 <cliIsStr>:
* Inputs        : const char, const char
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliIsStr(const char *p_arg, const char *p_str)
{
 8000f84:	b510      	push	{r4, lr}
	if (strcmp(p_arg, p_str) == 0)
 8000f86:	f7ff fcbf 	bl	8000908 <strcmp>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	d101      	bne.n	8000f92 <cliIsStr+0xe>
	{
		return true;
 8000f8e:	3001      	adds	r0, #1
	}
	else
	{
		return false;
	}
}
 8000f90:	bd10      	pop	{r4, pc}
		return false;
 8000f92:	2000      	movs	r0, #0
 8000f94:	e7fc      	b.n	8000f90 <cliIsStr+0xc>

08000f96 <cliGetData>:
* Inputs        : const char
* Outputs       : ret
* Return        : int32_t
*****************************************************************************/
int32_t cliGetData(const char *p_arg)
{
 8000f96:	b510      	push	{r4, lr}
	int32_t ret;

	ret = (int32_t)strtoul(p_arg, (char **)NULL, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f003 fca8 	bl	80048f0 <strtoul>

	return ret;
}
 8000fa0:	bd10      	pop	{r4, pc}

08000fa2 <cliKeepLoop>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliKeepLoop(void)
{
 8000fa2:	b510      	push	{r4, lr}
	if (uartAvailable(cli_ch) == 0)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fae1 	bl	800156c <uartAvailable>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d101      	bne.n	8000fb2 <cliKeepLoop+0x10>
	{
		return true;
 8000fae:	3001      	adds	r0, #1
	else
	{
		return false;
	}

}
 8000fb0:	bd10      	pop	{r4, pc}
		return false;
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	e7fc      	b.n	8000fb0 <cliKeepLoop+0xe>
	...

08000fb8 <cliMain>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool cliMain(void)
{
 8000fb8:	b530      	push	{r4, r5, lr}
 8000fba:	b083      	sub	sp, #12
	bool ret = false;

  if (uartAvailable(cli_ch) > 0)
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 fad5 	bl	800156c <uartAvailable>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d103      	bne.n	8000fce <cliMain+0x16>
	bool ret = false;
 8000fc6:	2400      	movs	r4, #0
  		uartWrite(cli_ch, &rx_data, 1);
  	}
  }

  return ret;
}
 8000fc8:	0020      	movs	r0, r4
 8000fca:	b003      	add	sp, #12
 8000fcc:	bd30      	pop	{r4, r5, pc}
  	rx_data = uartRead(cli_ch);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 faec 	bl	80015ac <uartRead>
 8000fd4:	466a      	mov	r2, sp
 8000fd6:	70d0      	strb	r0, [r2, #3]
  	if (rx_data == '\r') //Enter Key Input
 8000fd8:	280d      	cmp	r0, #13
 8000fda:	d007      	beq.n	8000fec <cliMain+0x34>
  	else if (rx_data == 0x08) //Backspace Key input
 8000fdc:	2808      	cmp	r0, #8
 8000fde:	d04a      	beq.n	8001076 <cliMain+0xbe>
  	else if (cli_buf_index < (128 - 1))
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <cliMain+0xf8>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2b7e      	cmp	r3, #126	; 0x7e
 8000fe6:	d955      	bls.n	8001094 <cliMain+0xdc>
	bool ret = false;
 8000fe8:	2400      	movs	r4, #0
 8000fea:	e7ed      	b.n	8000fc8 <cliMain+0x10>
  		cli_buf[cli_buf_index] = 0;
 8000fec:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <cliMain+0xf8>)
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	4d30      	ldr	r5, [pc, #192]	; (80010b4 <cliMain+0xfc>)
 8000ff2:	2400      	movs	r4, #0
 8000ff4:	54ac      	strb	r4, [r5, r2]
  		cli_buf_index = 0;
 8000ff6:	801c      	strh	r4, [r3, #0]
  		uartPrintf(cli_ch, "\r\n");
 8000ff8:	492f      	ldr	r1, [pc, #188]	; (80010b8 <cliMain+0x100>)
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 faee 	bl	80015dc <uartPrintf>
  		char *str_ptr = cli_buf;
 8001000:	9501      	str	r5, [sp, #4]
  		cli_argc = 0;
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <cliMain+0x104>)
 8001004:	801c      	strh	r4, [r3, #0]
  		while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8001006:	e006      	b.n	8001016 <cliMain+0x5e>
  			cli_argv[cli_argc] = tok;
 8001008:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <cliMain+0x104>)
 800100a:	8813      	ldrh	r3, [r2, #0]
 800100c:	009c      	lsls	r4, r3, #2
 800100e:	492c      	ldr	r1, [pc, #176]	; (80010c0 <cliMain+0x108>)
 8001010:	5060      	str	r0, [r4, r1]
  			cli_argc++;
 8001012:	3301      	adds	r3, #1
 8001014:	8013      	strh	r3, [r2, #0]
  		while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL)
 8001016:	aa01      	add	r2, sp, #4
 8001018:	492a      	ldr	r1, [pc, #168]	; (80010c4 <cliMain+0x10c>)
 800101a:	9801      	ldr	r0, [sp, #4]
 800101c:	f003 fbd9 	bl	80047d2 <strtok_r>
 8001020:	2800      	cmp	r0, #0
 8001022:	d1f1      	bne.n	8001008 <cliMain+0x50>
  		for (int i = 0; i < cli_cmd_count; i++)
 8001024:	2400      	movs	r4, #0
 8001026:	e000      	b.n	800102a <cliMain+0x72>
 8001028:	3401      	adds	r4, #1
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <cliMain+0x110>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	42a3      	cmp	r3, r4
 8001030:	dd1b      	ble.n	800106a <cliMain+0xb2>
  			if (strcmp(cli_argv[0], cli_cmd_func[i].cmd_str) == 0)
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <cliMain+0x108>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	0061      	lsls	r1, r4, #1
 8001038:	1909      	adds	r1, r1, r4
 800103a:	0089      	lsls	r1, r1, #2
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <cliMain+0x114>)
 800103e:	1859      	adds	r1, r3, r1
 8001040:	f7ff fc62 	bl	8000908 <strcmp>
 8001044:	2800      	cmp	r0, #0
 8001046:	d1ef      	bne.n	8001028 <cliMain+0x70>
  				if (cli_cmd_func[i].cmd_func != NULL)
 8001048:	0063      	lsls	r3, r4, #1
 800104a:	191b      	adds	r3, r3, r4
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <cliMain+0x114>)
 8001050:	18d3      	adds	r3, r2, r3
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0e7      	beq.n	8001028 <cliMain+0x70>
  					cli_cmd_func[i].cmd_func(cli_argc - 1, (const char **)&cli_argv[1]);
 8001058:	4919      	ldr	r1, [pc, #100]	; (80010c0 <cliMain+0x108>)
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <cliMain+0x104>)
 800105c:	8810      	ldrh	r0, [r2, #0]
 800105e:	3801      	subs	r0, #1
 8001060:	b2c0      	uxtb	r0, r0
 8001062:	3104      	adds	r1, #4
 8001064:	4798      	blx	r3
  					ret = true;
 8001066:	2401      	movs	r4, #1
  					break;
 8001068:	e000      	b.n	800106c <cliMain+0xb4>
	bool ret = false;
 800106a:	2400      	movs	r4, #0
  		uartPrintf(cli_ch,  "cli# ");
 800106c:	4918      	ldr	r1, [pc, #96]	; (80010d0 <cliMain+0x118>)
 800106e:	2000      	movs	r0, #0
 8001070:	f000 fab4 	bl	80015dc <uartPrintf>
 8001074:	e7a8      	b.n	8000fc8 <cliMain+0x10>
  		if (cli_buf_index > 0)
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <cliMain+0xf8>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <cliMain+0xca>
	bool ret = false;
 800107e:	2400      	movs	r4, #0
 8001080:	e7a2      	b.n	8000fc8 <cliMain+0x10>
  			cli_buf_index--;
 8001082:	3b01      	subs	r3, #1
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <cliMain+0xf8>)
 8001086:	8013      	strh	r3, [r2, #0]
  			uartPrintf(cli_ch, "\b \b");
 8001088:	4912      	ldr	r1, [pc, #72]	; (80010d4 <cliMain+0x11c>)
 800108a:	2000      	movs	r0, #0
 800108c:	f000 faa6 	bl	80015dc <uartPrintf>
	bool ret = false;
 8001090:	2400      	movs	r4, #0
 8001092:	e799      	b.n	8000fc8 <cliMain+0x10>
  		cli_buf[cli_buf_index] = rx_data;
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <cliMain+0xfc>)
 8001096:	54d0      	strb	r0, [r2, r3]
  		cli_buf_index++;
 8001098:	3301      	adds	r3, #1
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <cliMain+0xf8>)
 800109c:	8013      	strh	r3, [r2, #0]
  		uartWrite(cli_ch, &rx_data, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	466b      	mov	r3, sp
 80010a2:	1cd9      	adds	r1, r3, #3
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 fa4d 	bl	8001544 <uartWrite>
	bool ret = false;
 80010aa:	2400      	movs	r4, #0
 80010ac:	e78c      	b.n	8000fc8 <cliMain+0x10>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	20000138 	.word	0x20000138
 80010b4:	200000b8 	.word	0x200000b8
 80010b8:	0800530c 	.word	0x0800530c
 80010bc:	20000096 	.word	0x20000096
 80010c0:	20000098 	.word	0x20000098
 80010c4:	08005314 	.word	0x08005314
 80010c8:	2000013a 	.word	0x2000013a
 80010cc:	2000013c 	.word	0x2000013c
 80010d0:	08005310 	.word	0x08005310
 80010d4:	08005318 	.word	0x08005318

080010d8 <ledInit>:
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
  return true;
}
 80010d8:	2001      	movs	r0, #1
 80010da:	4770      	bx	lr

080010dc <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 80010dc:	b510      	push	{r4, lr}
  switch(ch)
 80010de:	2800      	cmp	r0, #0
 80010e0:	d000      	beq.n	80010e4 <ledOn+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
      break;
  }
}
 80010e2:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <ledOn+0x18>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2164      	movs	r1, #100	; 0x64
 80010ea:	1ac9      	subs	r1, r1, r3
 80010ec:	b289      	uxth	r1, r1
 80010ee:	f000 f82d 	bl	800114c <pwmWrite>
}
 80010f2:	e7f6      	b.n	80010e2 <ledOn+0x6>
 80010f4:	20000000 	.word	0x20000000

080010f8 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 80010f8:	b510      	push	{r4, lr}
  switch(ch)
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d000      	beq.n	8001100 <ledOff+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
      break;
  }
}
 80010fe:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100);
 8001100:	2164      	movs	r1, #100	; 0x64
 8001102:	f000 f823 	bl	800114c <pwmWrite>
}
 8001106:	e7fa      	b.n	80010fe <ledOff+0x6>

08001108 <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 8001108:	b510      	push	{r4, lr}
  switch(ch)
 800110a:	2800      	cmp	r0, #0
 800110c:	d000      	beq.n	8001110 <ledToggle+0x8>
      {
        ledOff(_DEF_CH1);
      }
      break;
  }
}
 800110e:	bd10      	pop	{r4, pc}
      if (pwmRead(_DEF_CH1) == 100)
 8001110:	f000 f824 	bl	800115c <pwmRead>
 8001114:	2864      	cmp	r0, #100	; 0x64
 8001116:	d003      	beq.n	8001120 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ffed 	bl	80010f8 <ledOff>
}
 800111e:	e7f6      	b.n	800110e <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ffdb 	bl	80010dc <ledOn>
 8001126:	e7f2      	b.n	800110e <ledToggle+0x6>

08001128 <ledSetDuty>:
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
  switch(ch)
 8001128:	2800      	cmp	r0, #0
 800112a:	d102      	bne.n	8001132 <ledSetDuty+0xa>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 800112c:	0040      	lsls	r0, r0, #1
 800112e:	4b01      	ldr	r3, [pc, #4]	; (8001134 <ledSetDuty+0xc>)
 8001130:	52c1      	strh	r1, [r0, r3]
      break;
  }

}
 8001132:	4770      	bx	lr
 8001134:	20000000 	.word	0x20000000

08001138 <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 8001138:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800113a:	2100      	movs	r1, #0
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <pwmInit+0x10>)
 800113e:	f002 fcd3 	bl	8003ae8 <HAL_TIM_PWM_Start>

  return true;
}
 8001142:	2001      	movs	r0, #1
 8001144:	bd10      	pop	{r4, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	20000498 	.word	0x20000498

0800114c <pwmWrite>:
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
  switch(ch)
 800114c:	2800      	cmp	r0, #0
 800114e:	d102      	bne.n	8001156 <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 8001150:	4b01      	ldr	r3, [pc, #4]	; (8001158 <pwmWrite+0xc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6359      	str	r1, [r3, #52]	; 0x34
      break;
  }
}
 8001156:	4770      	bx	lr
 8001158:	20000498 	.word	0x20000498

0800115c <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;


  switch(ch)
 800115c:	2800      	cmp	r0, #0
 800115e:	d104      	bne.n	800116a <pwmRead+0xe>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <pwmRead+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001166:	b280      	uxth	r0, r0
      break;
  }

  return pwm_data;

}
 8001168:	4770      	bx	lr
  uint16_t pwm_data = 0;
 800116a:	2000      	movs	r0, #0
 800116c:	e7fc      	b.n	8001168 <pwmRead+0xc>
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	20000498 	.word	0x20000498

08001174 <rtcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcInit(void)
{
 8001174:	b510      	push	{r4, lr}
	cliAdd("rtc", rtcCli);
 8001176:	4903      	ldr	r1, [pc, #12]	; (8001184 <rtcInit+0x10>)
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <rtcInit+0x14>)
 800117a:	f7ff fe9b 	bl	8000eb4 <cliAdd>

	return true;

}
 800117e:	2001      	movs	r0, #1
 8001180:	bd10      	pop	{r4, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	080012b5 	.word	0x080012b5
 8001188:	0800531c 	.word	0x0800531c

0800118c <rtcGetInfo>:
* Inputs        : rtc_info_t ptr
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcGetInfo(rtc_info_t *rtc_info)
{
 800118c:	b510      	push	{r4, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8001192:	2214      	movs	r2, #20
 8001194:	2100      	movs	r1, #0
 8001196:	a801      	add	r0, sp, #4
 8001198:	f003 fad0 	bl	800473c <memset>
  RTC_DateTypeDef sDate = {0};
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011a0:	2200      	movs	r2, #0
 80011a2:	a901      	add	r1, sp, #4
 80011a4:	4811      	ldr	r0, [pc, #68]	; (80011ec <rtcGetInfo+0x60>)
 80011a6:	f001 ffe9 	bl	800317c <HAL_RTC_GetTime>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d002      	beq.n	80011b4 <rtcGetInfo+0x28>
  {
    return false;
 80011ae:	2000      	movs	r0, #0
  rtc_info->date.year    = sDate.Year;
  rtc_info->date.month   = sDate.Month;
  rtc_info->date.day     = sDate.Date;

  return true;
}
 80011b0:	b006      	add	sp, #24
 80011b2:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011b4:	2200      	movs	r2, #0
 80011b6:	4669      	mov	r1, sp
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <rtcGetInfo+0x60>)
 80011ba:	f002 f80b 	bl	80031d4 <HAL_RTC_GetDate>
 80011be:	2800      	cmp	r0, #0
 80011c0:	d111      	bne.n	80011e6 <rtcGetInfo+0x5a>
  rtc_info->time.hours   = sTime.Hours;
 80011c2:	ab01      	add	r3, sp, #4
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	7022      	strb	r2, [r4, #0]
  rtc_info->time.minutes = sTime.Minutes;
 80011c8:	785a      	ldrb	r2, [r3, #1]
 80011ca:	7062      	strb	r2, [r4, #1]
  rtc_info->time.seconds = sTime.Seconds;
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	70a3      	strb	r3, [r4, #2]
  rtc_info->date.year    = sDate.Year;
 80011d0:	466b      	mov	r3, sp
 80011d2:	78db      	ldrb	r3, [r3, #3]
 80011d4:	70e3      	strb	r3, [r4, #3]
  rtc_info->date.month   = sDate.Month;
 80011d6:	466b      	mov	r3, sp
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	7123      	strb	r3, [r4, #4]
  rtc_info->date.day     = sDate.Date;
 80011dc:	466b      	mov	r3, sp
 80011de:	789b      	ldrb	r3, [r3, #2]
 80011e0:	7163      	strb	r3, [r4, #5]
  return true;
 80011e2:	3001      	adds	r0, #1
 80011e4:	e7e4      	b.n	80011b0 <rtcGetInfo+0x24>
  	return false;
 80011e6:	2000      	movs	r0, #0
 80011e8:	e7e2      	b.n	80011b0 <rtcGetInfo+0x24>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	20000470 	.word	0x20000470

080011f0 <rtcSetTime>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcSetTime(rtc_time_t *rtc_time)
{
 80011f0:	b510      	push	{r4, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80011f6:	2214      	movs	r2, #20
 80011f8:	2100      	movs	r1, #0
 80011fa:	a801      	add	r0, sp, #4
 80011fc:	f003 fa9e 	bl	800473c <memset>
  RTC_DateTypeDef sDate = {0};
 8001200:	2300      	movs	r3, #0
 8001202:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001204:	2200      	movs	r2, #0
 8001206:	a901      	add	r1, sp, #4
 8001208:	4810      	ldr	r0, [pc, #64]	; (800124c <rtcSetTime+0x5c>)
 800120a:	f001 ffb7 	bl	800317c <HAL_RTC_GetTime>
 800120e:	2800      	cmp	r0, #0
 8001210:	d002      	beq.n	8001218 <rtcSetTime+0x28>
  {
    return false;
 8001212:	2000      	movs	r0, #0
  {
    return false;
  }

  return true;
}
 8001214:	b006      	add	sp, #24
 8001216:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001218:	2200      	movs	r2, #0
 800121a:	4669      	mov	r1, sp
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <rtcSetTime+0x5c>)
 800121e:	f001 ffd9 	bl	80031d4 <HAL_RTC_GetDate>
 8001222:	2800      	cmp	r0, #0
 8001224:	d001      	beq.n	800122a <rtcSetTime+0x3a>
  	return false;
 8001226:	2000      	movs	r0, #0
 8001228:	e7f4      	b.n	8001214 <rtcSetTime+0x24>
  sTime.Hours   = rtc_time->hours;
 800122a:	7823      	ldrb	r3, [r4, #0]
 800122c:	a901      	add	r1, sp, #4
 800122e:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = rtc_time->minutes;
 8001230:	7863      	ldrb	r3, [r4, #1]
 8001232:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = rtc_time->seconds;
 8001234:	78a3      	ldrb	r3, [r4, #2]
 8001236:	708b      	strb	r3, [r1, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001238:	2200      	movs	r2, #0
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <rtcSetTime+0x5c>)
 800123c:	f001 fed8 	bl	8002ff0 <HAL_RTC_SetTime>
 8001240:	2800      	cmp	r0, #0
 8001242:	d101      	bne.n	8001248 <rtcSetTime+0x58>
  return true;
 8001244:	3001      	adds	r0, #1
 8001246:	e7e5      	b.n	8001214 <rtcSetTime+0x24>
    return false;
 8001248:	2000      	movs	r0, #0
 800124a:	e7e3      	b.n	8001214 <rtcSetTime+0x24>
 800124c:	20000470 	.word	0x20000470

08001250 <rtcSetDate>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool rtcSetDate(rtc_date_t *rtc_date)
{
 8001250:	b510      	push	{r4, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	0004      	movs	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a801      	add	r0, sp, #4
 800125c:	f003 fa6e 	bl	800473c <memset>
  RTC_DateTypeDef sDate = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]


  if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001264:	2200      	movs	r2, #0
 8001266:	a901      	add	r1, sp, #4
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <rtcSetDate+0x60>)
 800126a:	f001 ff87 	bl	800317c <HAL_RTC_GetTime>
 800126e:	2800      	cmp	r0, #0
 8001270:	d002      	beq.n	8001278 <rtcSetDate+0x28>
  {
    return false;
 8001272:	2000      	movs	r0, #0
  {
  	return false;
  }

  return true;
}
 8001274:	b006      	add	sp, #24
 8001276:	bd10      	pop	{r4, pc}
  if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001278:	2200      	movs	r2, #0
 800127a:	4669      	mov	r1, sp
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <rtcSetDate+0x60>)
 800127e:	f001 ffa9 	bl	80031d4 <HAL_RTC_GetDate>
 8001282:	2800      	cmp	r0, #0
 8001284:	d001      	beq.n	800128a <rtcSetDate+0x3a>
  	return false;
 8001286:	2000      	movs	r0, #0
 8001288:	e7f4      	b.n	8001274 <rtcSetDate+0x24>
  sDate.Year   = rtc_date->year;
 800128a:	7823      	ldrb	r3, [r4, #0]
 800128c:	466a      	mov	r2, sp
 800128e:	70d3      	strb	r3, [r2, #3]
  sDate.Month  = rtc_date->month;
 8001290:	7863      	ldrb	r3, [r4, #1]
 8001292:	7053      	strb	r3, [r2, #1]
  sDate.Date   = rtc_date->day;
 8001294:	78a3      	ldrb	r3, [r4, #2]
 8001296:	7093      	strb	r3, [r2, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001298:	2200      	movs	r2, #0
 800129a:	4669      	mov	r1, sp
 800129c:	4804      	ldr	r0, [pc, #16]	; (80012b0 <rtcSetDate+0x60>)
 800129e:	f001 ff0d 	bl	80030bc <HAL_RTC_SetDate>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d101      	bne.n	80012aa <rtcSetDate+0x5a>
  return true;
 80012a6:	3001      	adds	r0, #1
 80012a8:	e7e4      	b.n	8001274 <rtcSetDate+0x24>
  	return false;
 80012aa:	2000      	movs	r0, #0
 80012ac:	e7e2      	b.n	8001274 <rtcSetDate+0x24>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	20000470 	.word	0x20000470

080012b4 <rtcCli>:
* Inputs        : uint8_t, const char double ptr
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
void rtcCli(uint8_t argc, const char **argv)
{
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	46c6      	mov	lr, r8
 80012b8:	b500      	push	{lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	0004      	movs	r4, r0
 80012be:	000e      	movs	r6, r1
	bool ret = false;

	if (argc == 2 && cliIsStr(argv[0],"get") && cliIsStr(argv[1], "info"))
 80012c0:	2802      	cmp	r0, #2
 80012c2:	d00b      	beq.n	80012dc <rtcCli+0x28>
	bool ret = false;
 80012c4:	2500      	movs	r5, #0
		}

		ret = true;
	}

	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "time"))
 80012c6:	2c05      	cmp	r4, #5
 80012c8:	d030      	beq.n	800132c <rtcCli+0x78>

		ret = true;
	}


	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "date"))
 80012ca:	2c05      	cmp	r4, #5
 80012cc:	d052      	beq.n	8001374 <rtcCli+0xc0>

		ret = true;
	}


	if (ret == false)
 80012ce:	2d00      	cmp	r5, #0
 80012d0:	d100      	bne.n	80012d4 <rtcCli+0x20>
 80012d2:	e072      	b.n	80013ba <rtcCli+0x106>
	{
		cliPrintf("rtc get info\n");
		cliPrintf("rtc set time [h] [m] [s]\n");
		cliPrintf("rtc set date [y] [m] [d]\n");
	}
}
 80012d4:	b006      	add	sp, #24
 80012d6:	bc80      	pop	{r7}
 80012d8:	46b8      	mov	r8, r7
 80012da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc == 2 && cliIsStr(argv[0],"get") && cliIsStr(argv[1], "info"))
 80012dc:	493c      	ldr	r1, [pc, #240]	; (80013d0 <rtcCli+0x11c>)
 80012de:	6830      	ldr	r0, [r6, #0]
 80012e0:	f7ff fe50 	bl	8000f84 <cliIsStr>
 80012e4:	1e05      	subs	r5, r0, #0
 80012e6:	d0ee      	beq.n	80012c6 <rtcCli+0x12>
 80012e8:	493a      	ldr	r1, [pc, #232]	; (80013d4 <rtcCli+0x120>)
 80012ea:	6870      	ldr	r0, [r6, #4]
 80012ec:	f7ff fe4a 	bl	8000f84 <cliIsStr>
 80012f0:	1e05      	subs	r5, r0, #0
 80012f2:	d116      	bne.n	8001322 <rtcCli+0x6e>
 80012f4:	e7e7      	b.n	80012c6 <rtcCli+0x12>
			rtcGetInfo(&rtc_info);
 80012f6:	af04      	add	r7, sp, #16
 80012f8:	0038      	movs	r0, r7
 80012fa:	f7ff ff47 	bl	800118c <rtcGetInfo>
								rtc_info.date.year,
 80012fe:	78f9      	ldrb	r1, [r7, #3]
								rtc_info.date.month,
 8001300:	793a      	ldrb	r2, [r7, #4]
								rtc_info.date.day,
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	4698      	mov	r8, r3
								rtc_info.time.hours,
 8001306:	7838      	ldrb	r0, [r7, #0]
								rtc_info.time.minutes,
 8001308:	787b      	ldrb	r3, [r7, #1]
								rtc_info.time.seconds);
 800130a:	78bf      	ldrb	r7, [r7, #2]
			cliPrintf("Y:%02d M:%02d D:%02d, H:%02d M:%02d S:%02d\n",
 800130c:	9702      	str	r7, [sp, #8]
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4643      	mov	r3, r8
 8001314:	4830      	ldr	r0, [pc, #192]	; (80013d8 <rtcCli+0x124>)
 8001316:	f7ff fe07 	bl	8000f28 <cliPrintf>
			delay(1000);
 800131a:	20fa      	movs	r0, #250	; 0xfa
 800131c:	0080      	lsls	r0, r0, #2
 800131e:	f000 f98a 	bl	8001636 <delay>
		while (cliKeepLoop())
 8001322:	f7ff fe3e 	bl	8000fa2 <cliKeepLoop>
 8001326:	2800      	cmp	r0, #0
 8001328:	d1e5      	bne.n	80012f6 <rtcCli+0x42>
 800132a:	e7cc      	b.n	80012c6 <rtcCli+0x12>
	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "time"))
 800132c:	492b      	ldr	r1, [pc, #172]	; (80013dc <rtcCli+0x128>)
 800132e:	6830      	ldr	r0, [r6, #0]
 8001330:	f7ff fe28 	bl	8000f84 <cliIsStr>
 8001334:	2800      	cmp	r0, #0
 8001336:	d0c8      	beq.n	80012ca <rtcCli+0x16>
 8001338:	4929      	ldr	r1, [pc, #164]	; (80013e0 <rtcCli+0x12c>)
 800133a:	6870      	ldr	r0, [r6, #4]
 800133c:	f7ff fe22 	bl	8000f84 <cliIsStr>
 8001340:	1e07      	subs	r7, r0, #0
 8001342:	d0c2      	beq.n	80012ca <rtcCli+0x16>
		rtc_time.hours   = cliGetData(argv[2]);
 8001344:	68b0      	ldr	r0, [r6, #8]
 8001346:	f7ff fe26 	bl	8000f96 <cliGetData>
 800134a:	ad04      	add	r5, sp, #16
 800134c:	7028      	strb	r0, [r5, #0]
		rtc_time.minutes = cliGetData(argv[3]);
 800134e:	68f0      	ldr	r0, [r6, #12]
 8001350:	f7ff fe21 	bl	8000f96 <cliGetData>
 8001354:	7068      	strb	r0, [r5, #1]
		rtc_time.seconds = cliGetData(argv[4]);
 8001356:	6930      	ldr	r0, [r6, #16]
 8001358:	f7ff fe1d 	bl	8000f96 <cliGetData>
 800135c:	70a8      	strb	r0, [r5, #2]
		rtcSetTime(&rtc_time);
 800135e:	0028      	movs	r0, r5
 8001360:	f7ff ff46 	bl	80011f0 <rtcSetTime>
							rtc_time.hours,
 8001364:	7829      	ldrb	r1, [r5, #0]
							rtc_time.minutes,
 8001366:	786a      	ldrb	r2, [r5, #1]
							rtc_time.seconds);
 8001368:	78ab      	ldrb	r3, [r5, #2]
		cliPrintf("H:%02d M:%02d S:%02d\n",
 800136a:	481e      	ldr	r0, [pc, #120]	; (80013e4 <rtcCli+0x130>)
 800136c:	f7ff fddc 	bl	8000f28 <cliPrintf>
		ret = true;
 8001370:	003d      	movs	r5, r7
 8001372:	e7aa      	b.n	80012ca <rtcCli+0x16>
	if (argc == 5 && cliIsStr(argv[0], "set") && cliIsStr(argv[1], "date"))
 8001374:	4919      	ldr	r1, [pc, #100]	; (80013dc <rtcCli+0x128>)
 8001376:	6830      	ldr	r0, [r6, #0]
 8001378:	f7ff fe04 	bl	8000f84 <cliIsStr>
 800137c:	2800      	cmp	r0, #0
 800137e:	d0a6      	beq.n	80012ce <rtcCli+0x1a>
 8001380:	4919      	ldr	r1, [pc, #100]	; (80013e8 <rtcCli+0x134>)
 8001382:	6870      	ldr	r0, [r6, #4]
 8001384:	f7ff fdfe 	bl	8000f84 <cliIsStr>
 8001388:	2800      	cmp	r0, #0
 800138a:	d0a0      	beq.n	80012ce <rtcCli+0x1a>
		rtc_date.year  = cliGetData(argv[2]);
 800138c:	68b0      	ldr	r0, [r6, #8]
 800138e:	f7ff fe02 	bl	8000f96 <cliGetData>
 8001392:	ac04      	add	r4, sp, #16
 8001394:	7020      	strb	r0, [r4, #0]
		rtc_date.month = cliGetData(argv[3]);
 8001396:	68f0      	ldr	r0, [r6, #12]
 8001398:	f7ff fdfd 	bl	8000f96 <cliGetData>
 800139c:	7060      	strb	r0, [r4, #1]
		rtc_date.day   = cliGetData(argv[4]);
 800139e:	6930      	ldr	r0, [r6, #16]
 80013a0:	f7ff fdf9 	bl	8000f96 <cliGetData>
 80013a4:	70a0      	strb	r0, [r4, #2]
		rtcSetDate(&rtc_date);
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7ff ff52 	bl	8001250 <rtcSetDate>
							rtc_date.year,
 80013ac:	7821      	ldrb	r1, [r4, #0]
							rtc_date.month,
 80013ae:	7862      	ldrb	r2, [r4, #1]
							rtc_date.day);
 80013b0:	78a3      	ldrb	r3, [r4, #2]
		cliPrintf("Y:%02d M:%02d D:%02d\n",
 80013b2:	480e      	ldr	r0, [pc, #56]	; (80013ec <rtcCli+0x138>)
 80013b4:	f7ff fdb8 	bl	8000f28 <cliPrintf>
	if (ret == false)
 80013b8:	e78c      	b.n	80012d4 <rtcCli+0x20>
		cliPrintf("rtc get info\n");
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <rtcCli+0x13c>)
 80013bc:	f7ff fdb4 	bl	8000f28 <cliPrintf>
		cliPrintf("rtc set time [h] [m] [s]\n");
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <rtcCli+0x140>)
 80013c2:	f7ff fdb1 	bl	8000f28 <cliPrintf>
		cliPrintf("rtc set date [y] [m] [d]\n");
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <rtcCli+0x144>)
 80013c8:	f7ff fdae 	bl	8000f28 <cliPrintf>
}
 80013cc:	e782      	b.n	80012d4 <rtcCli+0x20>
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	08005320 	.word	0x08005320
 80013d4:	080052b0 	.word	0x080052b0
 80013d8:	08005324 	.word	0x08005324
 80013dc:	08005350 	.word	0x08005350
 80013e0:	08005354 	.word	0x08005354
 80013e4:	0800535c 	.word	0x0800535c
 80013e8:	08005374 	.word	0x08005374
 80013ec:	0800537c 	.word	0x0800537c
 80013f0:	08005394 	.word	0x08005394
 80013f4:	080053a4 	.word	0x080053a4
 80013f8:	080053c0 	.word	0x080053c0

080013fc <swtimerInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerInit(void)
{
 80013fc:	b510      	push	{r4, lr}
	for (int i = 0; i < SWTIMER_MAX_CH; i++)
 80013fe:	2200      	movs	r2, #0
 8001400:	e00a      	b.n	8001418 <swtimerInit+0x1c>
	{
		swtimer_tbl[i].enable = false;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <swtimerInit+0x2c>)
 8001404:	0091      	lsls	r1, r2, #2
 8001406:	1888      	adds	r0, r1, r2
 8001408:	0084      	lsls	r4, r0, #2
 800140a:	2000      	movs	r0, #0
 800140c:	54e0      	strb	r0, [r4, r3]
		swtimer_tbl[i].counter = 0;
 800140e:	191b      	adds	r3, r3, r4
 8001410:	6058      	str	r0, [r3, #4]
		swtimer_tbl[i].func = NULL;
 8001412:	60d8      	str	r0, [r3, #12]
		swtimer_tbl[i].func_arg = NULL;
 8001414:	6118      	str	r0, [r3, #16]
	for (int i = 0; i < SWTIMER_MAX_CH; i++)
 8001416:	3201      	adds	r2, #1
 8001418:	2a07      	cmp	r2, #7
 800141a:	ddf2      	ble.n	8001402 <swtimerInit+0x6>
	}

	HAL_TIM_Base_Start_IT(&htim14);
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <swtimerInit+0x30>)
 800141e:	f002 f84b 	bl	80034b8 <HAL_TIM_Base_Start_IT>
	return true;
}
 8001422:	2001      	movs	r0, #1
 8001424:	bd10      	pop	{r4, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	200001a0 	.word	0x200001a0
 800142c:	200004e4 	.word	0x200004e4

08001430 <swtimerGetCh>:
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerGetCh(uint8_t *p_ch)
{
	if (swtimer_count >= SWTIMER_MAX_CH)
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <swtimerGetCh+0x18>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b07      	cmp	r3, #7
 8001436:	d805      	bhi.n	8001444 <swtimerGetCh+0x14>
	{
		return false;
	}

	*p_ch = swtimer_count;
 8001438:	7003      	strb	r3, [r0, #0]

	swtimer_count++;
 800143a:	3301      	adds	r3, #1
 800143c:	4a02      	ldr	r2, [pc, #8]	; (8001448 <swtimerGetCh+0x18>)
 800143e:	7013      	strb	r3, [r2, #0]

	return true;
 8001440:	2001      	movs	r0, #1
}
 8001442:	4770      	bx	lr
		return false;
 8001444:	2000      	movs	r0, #0
 8001446:	e7fc      	b.n	8001442 <swtimerGetCh+0x12>
 8001448:	2000019c 	.word	0x2000019c

0800144c <swtimerSet>:
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerSet(uint8_t ch,  void (*func)(void *arg), void *func_arg, SwtimerMode_t mode,
								uint32_t time_ms)
{
 800144c:	b570      	push	{r4, r5, r6, lr}
	if (ch >= SWTIMER_MAX_CH)
 800144e:	2807      	cmp	r0, #7
 8001450:	d810      	bhi.n	8001474 <swtimerSet+0x28>
	{
		return false;
	}

	swtimer_tbl[ch].func = func;
 8001452:	4e09      	ldr	r6, [pc, #36]	; (8001478 <swtimerSet+0x2c>)
 8001454:	0085      	lsls	r5, r0, #2
 8001456:	182c      	adds	r4, r5, r0
 8001458:	00a4      	lsls	r4, r4, #2
 800145a:	1934      	adds	r4, r6, r4
 800145c:	60e1      	str	r1, [r4, #12]
	swtimer_tbl[ch].func_arg = func_arg;
 800145e:	6122      	str	r2, [r4, #16]
	swtimer_tbl[ch].mode = mode;
 8001460:	7063      	strb	r3, [r4, #1]
	swtimer_tbl[ch].counter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	6063      	str	r3, [r4, #4]
	swtimer_tbl[ch].reload = time_ms;
 8001466:	9a04      	ldr	r2, [sp, #16]
 8001468:	60a2      	str	r2, [r4, #8]
	swtimer_tbl[ch].enable = false;
 800146a:	1828      	adds	r0, r5, r0
 800146c:	0080      	lsls	r0, r0, #2
 800146e:	5583      	strb	r3, [r0, r6]

	return true;
 8001470:	2001      	movs	r0, #1
}
 8001472:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8001474:	2000      	movs	r0, #0
 8001476:	e7fc      	b.n	8001472 <swtimerSet+0x26>
 8001478:	200001a0 	.word	0x200001a0

0800147c <swtimerStart>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool swtimerStart(uint8_t ch)
{
 800147c:	b510      	push	{r4, lr}
	if (ch >= SWTIMER_MAX_CH)
 800147e:	2807      	cmp	r0, #7
 8001480:	d80c      	bhi.n	800149c <swtimerStart+0x20>
	{
		return false;
	}

	swtimer_tbl[ch].counter = 0;
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <swtimerStart+0x24>)
 8001484:	0083      	lsls	r3, r0, #2
 8001486:	181a      	adds	r2, r3, r0
 8001488:	0092      	lsls	r2, r2, #2
 800148a:	188a      	adds	r2, r1, r2
 800148c:	2400      	movs	r4, #0
 800148e:	6054      	str	r4, [r2, #4]
	swtimer_tbl[ch].enable = true;
 8001490:	1818      	adds	r0, r3, r0
 8001492:	0080      	lsls	r0, r0, #2
 8001494:	2201      	movs	r2, #1
 8001496:	5442      	strb	r2, [r0, r1]

	return true;
 8001498:	2001      	movs	r0, #1
}
 800149a:	bd10      	pop	{r4, pc}
		return false;
 800149c:	2000      	movs	r0, #0
 800149e:	e7fc      	b.n	800149a <swtimerStart+0x1e>
 80014a0:	200001a0 	.word	0x200001a0

080014a4 <swtimerISR>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void swtimerISR(void)
{
 80014a4:	b510      	push	{r4, lr}
	//While checking the number of swtimers set,
	for (int i = 0; i <swtimer_count; i++)
 80014a6:	2400      	movs	r4, #0
 80014a8:	e000      	b.n	80014ac <swtimerISR+0x8>
 80014aa:	3401      	adds	r4, #1
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <swtimerISR+0x68>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	42a3      	cmp	r3, r4
 80014b2:	dd29      	ble.n	8001508 <swtimerISR+0x64>
	{
		//if there is an active swtimer, the count value is increased.
		if (swtimer_tbl[i].enable == true)
 80014b4:	00a3      	lsls	r3, r4, #2
 80014b6:	191b      	adds	r3, r3, r4
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <swtimerISR+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f3      	beq.n	80014aa <swtimerISR+0x6>
		{
			swtimer_tbl[i].counter++;
 80014c2:	00a2      	lsls	r2, r4, #2
 80014c4:	1912      	adds	r2, r2, r4
 80014c6:	0091      	lsls	r1, r2, #2
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <swtimerISR+0x6c>)
 80014ca:	185b      	adds	r3, r3, r1
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	3201      	adds	r2, #1
 80014d0:	605a      	str	r2, [r3, #4]

			//When the timer counter becomes equal to the periodic value and..
			if (swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3e8      	bcc.n	80014aa <swtimerISR+0x6>
			{
				//there is a defined function pointer,
				if (swtimer_tbl[i].func != NULL)
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <swtimerISR+0x6c>)
 80014da:	185b      	adds	r3, r3, r1
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d003      	beq.n	80014ea <swtimerISR+0x46>
				{
					//the function of the defined function pointer is called.
					swtimer_tbl[i].func(swtimer_tbl[i].func_arg);
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <swtimerISR+0x6c>)
 80014e4:	185b      	adds	r3, r3, r1
 80014e6:	6918      	ldr	r0, [r3, #16]
 80014e8:	4790      	blx	r2
				}

				//Reset the counter value to 0.
				swtimer_tbl[i].counter = 0;
 80014ea:	00a2      	lsls	r2, r4, #2
 80014ec:	1912      	adds	r2, r2, r4
 80014ee:	0091      	lsls	r1, r2, #2
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <swtimerISR+0x6c>)
 80014f2:	185b      	adds	r3, r3, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]

				//If SWTIMER_ONETIME mode, enable is turned off.
				//cf) If SWTIMER_LOOP mode, repeat the above procedure.
				if (swtimer_tbl[i].mode == SWTIMER_ONETIME)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d1d5      	bne.n	80014aa <swtimerISR+0x6>
				{
					swtimer_tbl[i].enable = false;
 80014fe:	000a      	movs	r2, r1
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <swtimerISR+0x6c>)
 8001502:	2100      	movs	r1, #0
 8001504:	54d1      	strb	r1, [r2, r3]
 8001506:	e7d0      	b.n	80014aa <swtimerISR+0x6>
				}
			}
		}
	}
}
 8001508:	bd10      	pop	{r4, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	2000019c 	.word	0x2000019c
 8001510:	200001a0 	.word	0x200001a0

08001514 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b510      	push	{r4, lr}
	if (htim == &htim14)
 8001516:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001518:	4283      	cmp	r3, r0
 800151a:	d000      	beq.n	800151e <HAL_TIM_PeriodElapsedCallback+0xa>
	{
		swtimerISR();
	}
}
 800151c:	bd10      	pop	{r4, pc}
		swtimerISR();
 800151e:	f7ff ffc1 	bl	80014a4 <swtimerISR>
}
 8001522:	e7fb      	b.n	800151c <HAL_TIM_PeriodElapsedCallback+0x8>
 8001524:	200004e4 	.word	0x200004e4

08001528 <uartInit>:
* Inputs        : bool
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool uartInit(void)
{
 8001528:	b510      	push	{r4, lr}
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0052      	lsls	r2, r2, #1
 800152e:	4903      	ldr	r1, [pc, #12]	; (800153c <uartInit+0x14>)
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <uartInit+0x18>)
 8001532:	f003 f803 	bl	800453c <HAL_UART_Receive_DMA>
	return true;
}
 8001536:	2001      	movs	r0, #1
 8001538:	bd10      	pop	{r4, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	20000240 	.word	0x20000240
 8001540:	20000530 	.word	0x20000530

08001544 <uartWrite>:
* Inputs        : void
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001544:	b510      	push	{r4, lr}
 8001546:	0014      	movs	r4, r2
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ref;

	switch(ch)
 8001548:	2800      	cmp	r0, #0
 800154a:	d001      	beq.n	8001550 <uartWrite+0xc>
	uint32_t ret = 0;
 800154c:	2000      	movs	r0, #0
			break;
	}


	return ret;
}
 800154e:	bd10      	pop	{r4, pc}
			hal_ref = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001550:	b292      	uxth	r2, r2
 8001552:	2364      	movs	r3, #100	; 0x64
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <uartWrite+0x24>)
 8001556:	f002 fe9b 	bl	8004290 <HAL_UART_Transmit>
			if (hal_ref == HAL_OK)
 800155a:	2800      	cmp	r0, #0
 800155c:	d001      	beq.n	8001562 <uartWrite+0x1e>
	uint32_t ret = 0;
 800155e:	2000      	movs	r0, #0
 8001560:	e7f5      	b.n	800154e <uartWrite+0xa>
				ret = length;
 8001562:	0020      	movs	r0, r4
	return ret;
 8001564:	e7f3      	b.n	800154e <uartWrite+0xa>
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	20000530 	.word	0x20000530

0800156c <uartAvailable>:
*****************************************************************************/
uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
 800156c:	2800      	cmp	r0, #0
 800156e:	d115      	bne.n	800159c <uartAvailable+0x30>
	{
		case _DEF_CH1:
			q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <uartAvailable+0x34>)
 8001572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	b29b      	uxth	r3, r3
 800157a:	425a      	negs	r2, r3
 800157c:	23ff      	movs	r3, #255	; 0xff
 800157e:	4013      	ands	r3, r2
 8001580:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <uartAvailable+0x38>)
 8001582:	8013      	strh	r3, [r2, #0]
			// Calculating the number of buffers stored.
			ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8001584:	3301      	adds	r3, #1
 8001586:	33ff      	adds	r3, #255	; 0xff
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <uartAvailable+0x3c>)
 800158a:	8810      	ldrh	r0, [r2, #0]
 800158c:	1a1b      	subs	r3, r3, r0
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	0e12      	lsrs	r2, r2, #24
 8001592:	189b      	adds	r3, r3, r2
 8001594:	20ff      	movs	r0, #255	; 0xff
 8001596:	4018      	ands	r0, r3
 8001598:	1a80      	subs	r0, r0, r2
			break;
	}

	return ret;
}
 800159a:	4770      	bx	lr
	uint32_t ret = 0;
 800159c:	2000      	movs	r0, #0
	return ret;
 800159e:	e7fc      	b.n	800159a <uartAvailable+0x2e>
 80015a0:	20000530 	.word	0x20000530
 80015a4:	20000340 	.word	0x20000340
 80015a8:	20000342 	.word	0x20000342

080015ac <uartRead>:
*****************************************************************************/
uint8_t uartRead(uint8_t ch)
{
	uint8_t ret =0;

	switch(ch)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d10d      	bne.n	80015cc <uartRead+0x20>
	{
		case _DEF_CH1:
			if (q_out != q_in)
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <uartRead+0x24>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <uartRead+0x28>)
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d008      	beq.n	80015ce <uartRead+0x22>
			{
				ret = q_buf[q_out];
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <uartRead+0x2c>)
 80015be:	5cd0      	ldrb	r0, [r2, r3]
				q_out = (q_out + 1) % UART_Q_BUF_MAX;
 80015c0:	3301      	adds	r3, #1
 80015c2:	22ff      	movs	r2, #255	; 0xff
 80015c4:	4013      	ands	r3, r2
 80015c6:	4a02      	ldr	r2, [pc, #8]	; (80015d0 <uartRead+0x24>)
 80015c8:	8013      	strh	r3, [r2, #0]
 80015ca:	e000      	b.n	80015ce <uartRead+0x22>
	uint8_t ret =0;
 80015cc:	2000      	movs	r0, #0
			}
			break;
	}

	return ret;
}
 80015ce:	4770      	bx	lr
 80015d0:	20000342 	.word	0x20000342
 80015d4:	20000340 	.word	0x20000340
 80015d8:	20000240 	.word	0x20000240

080015dc <uartPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 80015dc:	b40e      	push	{r1, r2, r3}
 80015de:	b510      	push	{r4, lr}
 80015e0:	b0c3      	sub	sp, #268	; 0x10c
 80015e2:	0004      	movs	r4, r0
 80015e4:	ab45      	add	r3, sp, #276	; 0x114
 80015e6:	cb04      	ldmia	r3!, {r2}
	uint32_t ret = 0;
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 80015e8:	9341      	str	r3, [sp, #260]	; 0x104

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	0049      	lsls	r1, r1, #1
 80015ee:	a801      	add	r0, sp, #4
 80015f0:	f003 f9b6 	bl	8004960 <vsniprintf>
 80015f4:	1e02      	subs	r2, r0, #0

	va_end(arg);

	if (len > 0)
 80015f6:	dc05      	bgt.n	8001604 <uartPrintf+0x28>
	uint32_t ret = 0;
 80015f8:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 80015fa:	b043      	add	sp, #268	; 0x10c
 80015fc:	bc10      	pop	{r4}
 80015fe:	bc08      	pop	{r3}
 8001600:	b003      	add	sp, #12
 8001602:	4718      	bx	r3
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 8001604:	a901      	add	r1, sp, #4
 8001606:	0020      	movs	r0, r4
 8001608:	f7ff ff9c 	bl	8001544 <uartWrite>
 800160c:	e7f5      	b.n	80015fa <uartPrintf+0x1e>

0800160e <uartVPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartVPrintf(uint8_t ch, const char *fmt, va_list arg)
{
 800160e:	b510      	push	{r4, lr}
 8001610:	b0c0      	sub	sp, #256	; 0x100
 8001612:	0004      	movs	r4, r0
 8001614:	0013      	movs	r3, r2
	uint32_t ret = 0;
	char print_buf[256];

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 8001616:	2080      	movs	r0, #128	; 0x80
 8001618:	000a      	movs	r2, r1
 800161a:	0041      	lsls	r1, r0, #1
 800161c:	4668      	mov	r0, sp
 800161e:	f003 f99f 	bl	8004960 <vsniprintf>
 8001622:	1e02      	subs	r2, r0, #0

	if (len > 0)
 8001624:	dc02      	bgt.n	800162c <uartVPrintf+0x1e>
	uint32_t ret = 0;
 8001626:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 8001628:	b040      	add	sp, #256	; 0x100
 800162a:	bd10      	pop	{r4, pc}
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 800162c:	4669      	mov	r1, sp
 800162e:	0020      	movs	r0, r4
 8001630:	f7ff ff88 	bl	8001544 <uartWrite>
 8001634:	e7f8      	b.n	8001628 <uartVPrintf+0x1a>

08001636 <delay>:




void delay(uint32_t time_ms)
{
 8001636:	b510      	push	{r4, lr}
  HAL_Delay(time_ms);
 8001638:	f000 fc82 	bl	8001f40 <HAL_Delay>
}
 800163c:	bd10      	pop	{r4, pc}

0800163e <millis>:

uint32_t millis(void)
{
 800163e:	b510      	push	{r4, lr}
  return HAL_GetTick();
 8001640:	f000 fc78 	bl	8001f34 <HAL_GetTick>
}
 8001644:	bd10      	pop	{r4, pc}

08001646 <wdgInit>:
* Return        : bool
*****************************************************************************/
bool wdgInit(void)
{
	return true;
}
 8001646:	2001      	movs	r0, #1
 8001648:	4770      	bx	lr
	...

0800164c <wdgBegin>:
* Inputs        : uint32_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool wdgBegin(uint32_t time_ms)
{
 800164c:	b510      	push	{r4, lr}
	if (time_ms >= 4095)
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <wdgBegin+0x2c>)
 8001650:	4298      	cmp	r0, r3
 8001652:	d901      	bls.n	8001658 <wdgBegin+0xc>
	{
		return false;
 8001654:	2000      	movs	r0, #0
  {
  	return false;
  }

	return true;
}
 8001656:	bd10      	pop	{r4, pc}
  hiwdg.Instance = IWDG;
 8001658:	4808      	ldr	r0, [pc, #32]	; (800167c <wdgBegin+0x30>)
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <wdgBegin+0x34>)
 800165c:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800165e:	2303      	movs	r3, #3
 8001660:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Window = 4095;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <wdgBegin+0x38>)
 8001664:	60c3      	str	r3, [r0, #12]
  hiwdg.Init.Reload = 4095;
 8001666:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001668:	f001 fb18 	bl	8002c9c <HAL_IWDG_Init>
 800166c:	2800      	cmp	r0, #0
 800166e:	d101      	bne.n	8001674 <wdgBegin+0x28>
	return true;
 8001670:	3001      	adds	r0, #1
 8001672:	e7f0      	b.n	8001656 <wdgBegin+0xa>
  	return false;
 8001674:	2000      	movs	r0, #0
 8001676:	e7ee      	b.n	8001656 <wdgBegin+0xa>
 8001678:	00000ffe 	.word	0x00000ffe
 800167c:	20000344 	.word	0x20000344
 8001680:	40003000 	.word	0x40003000
 8001684:	00000fff 	.word	0x00000fff

08001688 <wdgRefresh>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool wdgRefresh(void)
{
 8001688:	b510      	push	{r4, lr}
	HAL_IWDG_Refresh(&hiwdg);
 800168a:	4802      	ldr	r0, [pc, #8]	; (8001694 <wdgRefresh+0xc>)
 800168c:	f001 fb3a 	bl	8002d04 <HAL_IWDG_Refresh>
	return true;
}
 8001690:	2001      	movs	r0, #1
 8001692:	bd10      	pop	{r4, pc}
 8001694:	20000344 	.word	0x20000344

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001698:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <MX_DMA_Init+0x18>)
 800169c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800169e:	2301      	movs	r3, #1
 80016a0:	4319      	orrs	r1, r3
 80016a2:	6391      	str	r1, [r2, #56]	; 0x38
 80016a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016a6:	4013      	ands	r3, r2
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	9b01      	ldr	r3, [sp, #4]

}
 80016ac:	b002      	add	sp, #8
 80016ae:	4770      	bx	lr
 80016b0:	40021000 	.word	0x40021000

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_GPIO_Init+0x38>)
 80016b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ba:	2204      	movs	r2, #4
 80016bc:	4311      	orrs	r1, r2
 80016be:	6359      	str	r1, [r3, #52]	; 0x34
 80016c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c2:	400a      	ands	r2, r1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ca:	2201      	movs	r2, #1
 80016cc:	4311      	orrs	r1, r2
 80016ce:	6359      	str	r1, [r3, #52]	; 0x34
 80016d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d2:	400a      	ands	r2, r1
 80016d4:	9202      	str	r2, [sp, #8]
 80016d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016da:	2202      	movs	r2, #2
 80016dc:	4311      	orrs	r1, r2
 80016de:	6359      	str	r1, [r3, #52]	; 0x34
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	401a      	ands	r2, r3
 80016e4:	9203      	str	r2, [sp, #12]
 80016e6:	9b03      	ldr	r3, [sp, #12]

}
 80016e8:	b004      	add	sp, #16
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000

080016f0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <Error_Handler+0x2>

080016f4 <MX_TIM1_Init>:
{
 80016f4:	b500      	push	{lr}
 80016f6:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f8:	2210      	movs	r2, #16
 80016fa:	2100      	movs	r1, #0
 80016fc:	a818      	add	r0, sp, #96	; 0x60
 80016fe:	f003 f81d 	bl	800473c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	220c      	movs	r2, #12
 8001704:	2100      	movs	r1, #0
 8001706:	a815      	add	r0, sp, #84	; 0x54
 8001708:	f003 f818 	bl	800473c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170c:	221c      	movs	r2, #28
 800170e:	2100      	movs	r1, #0
 8001710:	a80e      	add	r0, sp, #56	; 0x38
 8001712:	f003 f813 	bl	800473c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001716:	2234      	movs	r2, #52	; 0x34
 8001718:	2100      	movs	r1, #0
 800171a:	a801      	add	r0, sp, #4
 800171c:	f003 f80e 	bl	800473c <memset>
  htim1.Instance = TIM1;
 8001720:	4830      	ldr	r0, [pc, #192]	; (80017e4 <MX_TIM1_Init+0xf0>)
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <MX_TIM1_Init+0xf4>)
 8001724:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8001726:	232f      	movs	r3, #47	; 0x2f
 8001728:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	2300      	movs	r3, #0
 800172c:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 800172e:	2263      	movs	r2, #99	; 0x63
 8001730:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001732:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001734:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001738:	f001 fff6 	bl	8003728 <HAL_TIM_Base_Init>
 800173c:	2800      	cmp	r0, #0
 800173e:	d144      	bne.n	80017ca <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001746:	a918      	add	r1, sp, #96	; 0x60
 8001748:	4826      	ldr	r0, [pc, #152]	; (80017e4 <MX_TIM1_Init+0xf0>)
 800174a:	f002 f93b 	bl	80039c4 <HAL_TIM_ConfigClockSource>
 800174e:	2800      	cmp	r0, #0
 8001750:	d13d      	bne.n	80017ce <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001752:	4824      	ldr	r0, [pc, #144]	; (80017e4 <MX_TIM1_Init+0xf0>)
 8001754:	f002 f818 	bl	8003788 <HAL_TIM_PWM_Init>
 8001758:	2800      	cmp	r0, #0
 800175a:	d13a      	bne.n	80017d2 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001760:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001764:	a915      	add	r1, sp, #84	; 0x54
 8001766:	481f      	ldr	r0, [pc, #124]	; (80017e4 <MX_TIM1_Init+0xf0>)
 8001768:	f002 fa54 	bl	8003c14 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	2800      	cmp	r0, #0
 800176e:	d132      	bne.n	80017d6 <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001770:	2360      	movs	r3, #96	; 0x60
 8001772:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001778:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800177a:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177c:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800177e:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001780:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001782:	2200      	movs	r2, #0
 8001784:	a90e      	add	r1, sp, #56	; 0x38
 8001786:	4817      	ldr	r0, [pc, #92]	; (80017e4 <MX_TIM1_Init+0xf0>)
 8001788:	f002 f86e 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 800178c:	2800      	cmp	r0, #0
 800178e:	d124      	bne.n	80017da <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001794:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001796:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001798:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800179a:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0192      	lsls	r2, r2, #6
 80017a0:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a2:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a4:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017a6:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0492      	lsls	r2, r2, #18
 80017ac:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017ae:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017b0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b2:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <MX_TIM1_Init+0xf0>)
 80017b8:	f002 fa64 	bl	8003c84 <HAL_TIMEx_ConfigBreakDeadTime>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d10e      	bne.n	80017de <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <MX_TIM1_Init+0xf0>)
 80017c2:	f000 fa79 	bl	8001cb8 <HAL_TIM_MspPostInit>
}
 80017c6:	b01d      	add	sp, #116	; 0x74
 80017c8:	bd00      	pop	{pc}
    Error_Handler();
 80017ca:	f7ff ff91 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80017ce:	f7ff ff8f 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80017d2:	f7ff ff8d 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80017d6:	f7ff ff8b 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80017da:	f7ff ff89 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80017de:	f7ff ff87 	bl	80016f0 <Error_Handler>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	20000498 	.word	0x20000498
 80017e8:	40012c00 	.word	0x40012c00

080017ec <MX_ADC1_Init>:
{
 80017ec:	b500      	push	{lr}
 80017ee:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80017f0:	220c      	movs	r2, #12
 80017f2:	2100      	movs	r1, #0
 80017f4:	a801      	add	r0, sp, #4
 80017f6:	f002 ffa1 	bl	800473c <memset>
  hadc1.Instance = ADC1;
 80017fa:	4828      	ldr	r0, [pc, #160]	; (800189c <MX_ADC1_Init+0xb0>)
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_ADC1_Init+0xb4>)
 80017fe:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	05db      	lsls	r3, r3, #23
 8001804:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001806:	2300      	movs	r3, #0
 8001808:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	0392      	lsls	r2, r2, #14
 8001810:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001812:	2204      	movs	r2, #4
 8001814:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001816:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001818:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800181a:	3a03      	subs	r2, #3
 800181c:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 800181e:	2103      	movs	r1, #3
 8001820:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001822:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001824:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001826:	3129      	adds	r1, #41	; 0x29
 8001828:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800182a:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800182c:	3925      	subs	r1, #37	; 0x25
 800182e:	6341      	str	r1, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001830:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8001832:	3135      	adds	r1, #53	; 0x35
 8001834:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8001836:	3207      	adds	r2, #7
 8001838:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800183a:	3278      	adds	r2, #120	; 0x78
 800183c:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800183e:	6483      	str	r3, [r0, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001840:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001842:	f000 fb8f 	bl	8001f64 <HAL_ADC_Init>
 8001846:	2800      	cmp	r0, #0
 8001848:	d120      	bne.n	800188c <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_ADC1_Init+0xb8>)
 800184c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800184e:	2300      	movs	r3, #0
 8001850:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001852:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001854:	a901      	add	r1, sp, #4
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <MX_ADC1_Init+0xb0>)
 8001858:	f000 fd0e 	bl	8002278 <HAL_ADC_ConfigChannel>
 800185c:	2800      	cmp	r0, #0
 800185e:	d117      	bne.n	8001890 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_ADC1_Init+0xbc>)
 8001862:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001864:	2304      	movs	r3, #4
 8001866:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	a901      	add	r1, sp, #4
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <MX_ADC1_Init+0xb0>)
 800186c:	f000 fd04 	bl	8002278 <HAL_ADC_ConfigChannel>
 8001870:	2800      	cmp	r0, #0
 8001872:	d10f      	bne.n	8001894 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <MX_ADC1_Init+0xc0>)
 8001876:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001878:	2308      	movs	r3, #8
 800187a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187c:	a901      	add	r1, sp, #4
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <MX_ADC1_Init+0xb0>)
 8001880:	f000 fcfa 	bl	8002278 <HAL_ADC_ConfigChannel>
 8001884:	2800      	cmp	r0, #0
 8001886:	d107      	bne.n	8001898 <MX_ADC1_Init+0xac>
}
 8001888:	b005      	add	sp, #20
 800188a:	bd00      	pop	{pc}
    Error_Handler();
 800188c:	f7ff ff30 	bl	80016f0 <Error_Handler>
    Error_Handler();
 8001890:	f7ff ff2e 	bl	80016f0 <Error_Handler>
    Error_Handler();
 8001894:	f7ff ff2c 	bl	80016f0 <Error_Handler>
    Error_Handler();
 8001898:	f7ff ff2a 	bl	80016f0 <Error_Handler>
 800189c:	20000354 	.word	0x20000354
 80018a0:	40012400 	.word	0x40012400
 80018a4:	10000010 	.word	0x10000010
 80018a8:	a4000200 	.word	0xa4000200
 80018ac:	a8000400 	.word	0xa8000400

080018b0 <MX_USART1_UART_Init>:
{
 80018b0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80018b2:	4817      	ldr	r0, [pc, #92]	; (8001910 <MX_USART1_UART_Init+0x60>)
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_USART1_UART_Init+0x64>)
 80018b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80018b8:	23e1      	movs	r3, #225	; 0xe1
 80018ba:	025b      	lsls	r3, r3, #9
 80018bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	2300      	movs	r3, #0
 80018c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c6:	220c      	movs	r2, #12
 80018c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018d0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d4:	f002 fd9c 	bl	8004410 <HAL_UART_Init>
 80018d8:	2800      	cmp	r0, #0
 80018da:	d111      	bne.n	8001900 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018dc:	2100      	movs	r1, #0
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x60>)
 80018e0:	f002 feae 	bl	8004640 <HAL_UARTEx_SetTxFifoThreshold>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d10d      	bne.n	8001904 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e8:	2100      	movs	r1, #0
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x60>)
 80018ec:	f002 fece 	bl	800468c <HAL_UARTEx_SetRxFifoThreshold>
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d109      	bne.n	8001908 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x60>)
 80018f6:	f002 fe83 	bl	8004600 <HAL_UARTEx_DisableFifoMode>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d106      	bne.n	800190c <MX_USART1_UART_Init+0x5c>
}
 80018fe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001900:	f7ff fef6 	bl	80016f0 <Error_Handler>
    Error_Handler();
 8001904:	f7ff fef4 	bl	80016f0 <Error_Handler>
    Error_Handler();
 8001908:	f7ff fef2 	bl	80016f0 <Error_Handler>
    Error_Handler();
 800190c:	f7ff fef0 	bl	80016f0 <Error_Handler>
 8001910:	20000530 	.word	0x20000530
 8001914:	40013800 	.word	0x40013800

08001918 <MX_TIM14_Init>:
{
 8001918:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <MX_TIM14_Init+0x28>)
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_TIM14_Init+0x2c>)
 800191e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 8001920:	232f      	movs	r3, #47	; 0x2f
 8001922:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	2300      	movs	r3, #0
 8001926:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <MX_TIM14_Init+0x30>)
 800192a:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800192c:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001930:	f001 fefa 	bl	8003728 <HAL_TIM_Base_Init>
 8001934:	2800      	cmp	r0, #0
 8001936:	d100      	bne.n	800193a <MX_TIM14_Init+0x22>
}
 8001938:	bd10      	pop	{r4, pc}
    Error_Handler();
 800193a:	f7ff fed9 	bl	80016f0 <Error_Handler>
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	200004e4 	.word	0x200004e4
 8001944:	40002000 	.word	0x40002000
 8001948:	000003e7 	.word	0x000003e7

0800194c <MX_RTC_Init>:
{
 800194c:	b500      	push	{lr}
 800194e:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8001950:	2214      	movs	r2, #20
 8001952:	2100      	movs	r1, #0
 8001954:	a801      	add	r0, sp, #4
 8001956:	f002 fef1 	bl	800473c <memset>
  RTC_DateTypeDef sDate = {0};
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <MX_RTC_Init+0x80>)
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <MX_RTC_Init+0x84>)
 8001962:	6002      	str	r2, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001964:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001966:	227f      	movs	r2, #127	; 0x7f
 8001968:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800196a:	3280      	adds	r2, #128	; 0x80
 800196c:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800196e:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001970:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001972:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	05d2      	lsls	r2, r2, #23
 8001978:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800197a:	6203      	str	r3, [r0, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800197c:	f001 fad8 	bl	8002f30 <HAL_RTC_Init>
 8001980:	2800      	cmp	r0, #0
 8001982:	d11d      	bne.n	80019c0 <MX_RTC_Init+0x74>
  sTime.Hours = 0;
 8001984:	a901      	add	r1, sp, #4
 8001986:	2300      	movs	r3, #0
 8001988:	700b      	strb	r3, [r1, #0]
  sTime.Minutes = 0;
 800198a:	704b      	strb	r3, [r1, #1]
  sTime.Seconds = 0;
 800198c:	708b      	strb	r3, [r1, #2]
  sTime.SubSeconds = 0;
 800198e:	604b      	str	r3, [r1, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001990:	60cb      	str	r3, [r1, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001992:	610b      	str	r3, [r1, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001994:	2200      	movs	r2, #0
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <MX_RTC_Init+0x80>)
 8001998:	f001 fb2a 	bl	8002ff0 <HAL_RTC_SetTime>
 800199c:	2800      	cmp	r0, #0
 800199e:	d111      	bne.n	80019c4 <MX_RTC_Init+0x78>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019a0:	2301      	movs	r3, #1
 80019a2:	466a      	mov	r2, sp
 80019a4:	7013      	strb	r3, [r2, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80019a6:	7053      	strb	r3, [r2, #1]
  sDate.Date = 1;
 80019a8:	7093      	strb	r3, [r2, #2]
  sDate.Year = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	70d3      	strb	r3, [r2, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80019ae:	2200      	movs	r2, #0
 80019b0:	4669      	mov	r1, sp
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <MX_RTC_Init+0x80>)
 80019b4:	f001 fb82 	bl	80030bc <HAL_RTC_SetDate>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d105      	bne.n	80019c8 <MX_RTC_Init+0x7c>
}
 80019bc:	b007      	add	sp, #28
 80019be:	bd00      	pop	{pc}
    Error_Handler();
 80019c0:	f7ff fe96 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80019c4:	f7ff fe94 	bl	80016f0 <Error_Handler>
    Error_Handler();
 80019c8:	f7ff fe92 	bl	80016f0 <Error_Handler>
 80019cc:	20000470 	.word	0x20000470
 80019d0:	40002800 	.word	0x40002800

080019d4 <SystemClock_Config>:
{
 80019d4:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80019d6:	4a28      	ldr	r2, [pc, #160]	; (8001a78 <SystemClock_Config+0xa4>)
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	2107      	movs	r1, #7
 80019dc:	438b      	bics	r3, r1
 80019de:	3906      	subs	r1, #6
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019e4:	4a25      	ldr	r2, [pc, #148]	; (8001a7c <SystemClock_Config+0xa8>)
 80019e6:	6811      	ldr	r1, [r2, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	430b      	orrs	r3, r1
 80019ee:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <SystemClock_Config+0xa8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	055b      	lsls	r3, r3, #21
 80019f6:	d5fb      	bpl.n	80019f0 <SystemClock_Config+0x1c>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019f8:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <SystemClock_Config+0xa8>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4920      	ldr	r1, [pc, #128]	; (8001a80 <SystemClock_Config+0xac>)
 80019fe:	4011      	ands	r1, r2
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	01d2      	lsls	r2, r2, #7
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	491e      	ldr	r1, [pc, #120]	; (8001a84 <SystemClock_Config+0xb0>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CSR2, RCC_CSR2_LSION);
 8001a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60
  return ((READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == (RCC_CSR2_LSIRDY)) ? 1UL : 0UL);
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	079b      	lsls	r3, r3, #30
 8001a1e:	d5fb      	bpl.n	8001a18 <SystemClock_Config+0x44>
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a24:	2104      	movs	r1, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 8001a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a2c:	3903      	subs	r1, #3
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	65da      	str	r2, [r3, #92]	; 0x5c
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a36:	079b      	lsls	r3, r3, #30
 8001a38:	d5fb      	bpl.n	8001a32 <SystemClock_Config+0x5e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	4912      	ldr	r1, [pc, #72]	; (8001a88 <SystemClock_Config+0xb4>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	2107      	movs	r1, #7
 8001a48:	438a      	bics	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2238      	movs	r2, #56	; 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a52:	421a      	tst	r2, r3
 8001a54:	d1fa      	bne.n	8001a4c <SystemClock_Config+0x78>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <SystemClock_Config+0xa8>)
 8001a58:	6893      	ldr	r3, [r2, #8]
 8001a5a:	490c      	ldr	r1, [pc, #48]	; (8001a8c <SystemClock_Config+0xb8>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <SystemClock_Config+0xbc>)
 8001a62:	f002 fe3b 	bl	80046dc <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 fa18 	bl	8001e9c <HAL_InitTick>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d100      	bne.n	8001a72 <SystemClock_Config+0x9e>
}
 8001a70:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001a72:	f7ff fe3d 	bl	80016f0 <Error_Handler>
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	40022000 	.word	0x40022000
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	ffff80ff 	.word	0xffff80ff
 8001a84:	ffffc7ff 	.word	0xffffc7ff
 8001a88:	fffff0ff 	.word	0xfffff0ff
 8001a8c:	ffff8fff 	.word	0xffff8fff
 8001a90:	02dc6c00 	.word	0x02dc6c00

08001a94 <main>:
{
 8001a94:	b510      	push	{r4, lr}
  HAL_Init();
 8001a96:	f000 fa2d 	bl	8001ef4 <HAL_Init>
  SystemClock_Config();
 8001a9a:	f7ff ff9b 	bl	80019d4 <SystemClock_Config>
  MX_GPIO_Init();
 8001a9e:	f7ff fe09 	bl	80016b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001aa2:	f7ff fe27 	bl	80016f4 <MX_TIM1_Init>
  MX_DMA_Init();
 8001aa6:	f7ff fdf7 	bl	8001698 <MX_DMA_Init>
  MX_ADC1_Init();
 8001aaa:	f7ff fe9f 	bl	80017ec <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001aae:	f7ff feff 	bl	80018b0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8001ab2:	f7ff ff31 	bl	8001918 <MX_TIM14_Init>
  MX_RTC_Init();
 8001ab6:	f7ff ff49 	bl	800194c <MX_RTC_Init>
  apInit();
 8001aba:	f7ff f965 	bl	8000d88 <apInit>
  apMain();
 8001abe:	f7ff f9a1 	bl	8000e04 <apMain>
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <main+0x2e>

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_MspInit+0x2c>)
 8001ac8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001aca:	2201      	movs	r2, #1
 8001acc:	4311      	orrs	r1, r2
 8001ace:	6419      	str	r1, [r3, #64]	; 0x40
 8001ad0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ada:	2180      	movs	r1, #128	; 0x80
 8001adc:	0549      	lsls	r1, r1, #21
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	b002      	add	sp, #8
 8001aec:	4770      	bx	lr
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b510      	push	{r4, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	2214      	movs	r2, #20
 8001afc:	2100      	movs	r1, #0
 8001afe:	a803      	add	r0, sp, #12
 8001b00:	f002 fe1c 	bl	800473c <memset>
  if(hadc->Instance==ADC1)
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_ADC_MspInit+0x94>)
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b0c:	b008      	add	sp, #32
 8001b0e:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001b10:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_ADC_MspInit+0x98>)
 8001b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	0892      	lsrs	r2, r2, #2
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b1c:	2080      	movs	r0, #128	; 0x80
 8001b1e:	0340      	lsls	r0, r0, #13
 8001b20:	4301      	orrs	r1, r0
 8001b22:	6419      	str	r1, [r3, #64]	; 0x40
 8001b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b26:	4002      	ands	r2, r0
 8001b28:	9201      	str	r2, [sp, #4]
 8001b2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4311      	orrs	r1, r2
 8001b32:	6359      	str	r1, [r3, #52]	; 0x34
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	401a      	ands	r2, r3
 8001b38:	9202      	str	r2, [sp, #8]
 8001b3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	3b0d      	subs	r3, #13
 8001b42:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	20a0      	movs	r0, #160	; 0xa0
 8001b46:	a903      	add	r1, sp, #12
 8001b48:	05c0      	lsls	r0, r0, #23
 8001b4a:	f000 ffc9 	bl	8002ae0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <HAL_ADC_MspInit+0x9c>)
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_ADC_MspInit+0xa0>)
 8001b52:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b54:	2305      	movs	r3, #5
 8001b56:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b62:	3280      	adds	r2, #128	; 0x80
 8001b64:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	00d2      	lsls	r2, r2, #3
 8001b6a:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b72:	f000 ff0d 	bl	8002990 <HAL_DMA_Init>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d103      	bne.n	8001b82 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_ADC_MspInit+0x9c>)
 8001b7c:	6523      	str	r3, [r4, #80]	; 0x50
 8001b7e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001b80:	e7c4      	b.n	8001b0c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001b82:	f7ff fdb5 	bl	80016f0 <Error_Handler>
 8001b86:	e7f8      	b.n	8001b7a <HAL_ADC_MspInit+0x86>
 8001b88:	40012400 	.word	0x40012400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	200003b8 	.word	0x200003b8
 8001b94:	40020008 	.word	0x40020008

08001b98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b98:	b082      	sub	sp, #8
  if(hrtc->Instance==RTC)
 8001b9a:	6802      	ldr	r2, [r0, #0]
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_RTC_MspInit+0xac>)
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RTC_MspInit+0xe>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ba2:	b002      	add	sp, #8
 8001ba4:	4770      	bx	lr
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL));
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	22c0      	movs	r2, #192	; 0xc0
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d02e      	beq.n	8001c16 <HAL_RTC_MspInit+0x7e>
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APBENR1, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	d43a      	bmi.n	8001c36 <HAL_RTC_MspInit+0x9e>
  SET_BIT(RCC->APBENR1, Periphs);
 8001bc0:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001bc2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bc4:	2080      	movs	r0, #128	; 0x80
 8001bc6:	0540      	lsls	r0, r0, #21
 8001bc8:	4301      	orrs	r1, r0
 8001bca:	63d1      	str	r1, [r2, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8001bcc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001bce:	4003      	ands	r3, r0
 8001bd0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001bd2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bd4:	2101      	movs	r1, #1
  * @rmtoll CSR1         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001bd8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0252      	lsls	r2, r2, #9
 8001bde:	4302      	orrs	r2, r0
 8001be0:	65da      	str	r2, [r3, #92]	; 0x5c
  * @rmtoll CSR1         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR1, RCC_CSR1_RTCRST);
 8001be2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <HAL_RTC_MspInit+0xb4>)
 8001be6:	4002      	ands	r2, r0
 8001be8:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEBYP);
 8001bea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bec:	2004      	movs	r0, #4
 8001bee:	4302      	orrs	r2, r0
 8001bf0:	65da      	str	r2, [r3, #92]	; 0x5c
  SET_BIT(RCC->CSR1, RCC_CSR1_LSEON);
 8001bf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001bf4:	3803      	subs	r0, #3
 8001bf6:	4302      	orrs	r2, r0
 8001bf8:	65da      	str	r2, [r3, #92]	; 0x5c
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	079b      	lsls	r3, r3, #30
 8001c00:	d5fb      	bpl.n	8001bfa <HAL_RTC_MspInit+0x62>
  MODIFY_REG(RCC->CSR1, RCC_CSR1_RTCSEL, Source);
 8001c02:	4811      	ldr	r0, [pc, #68]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001c04:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <HAL_RTC_MspInit+0xb8>)
 8001c08:	401a      	ands	r2, r3
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	65c3      	str	r3, [r0, #92]	; 0x5c
    if (pwrclkchanged == SET)
 8001c12:	2901      	cmp	r1, #1
 8001c14:	d011      	beq.n	8001c3a <HAL_RTC_MspInit+0xa2>
    __HAL_RCC_RTC_ENABLE();
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_RTC_MspInit+0xb0>)
 8001c18:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	0212      	lsls	r2, r2, #8
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	00c9      	lsls	r1, r1, #3
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	400b      	ands	r3, r1
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	9b00      	ldr	r3, [sp, #0]
}
 8001c34:	e7b5      	b.n	8001ba2 <HAL_RTC_MspInit+0xa>
    FlagStatus pwrclkchanged = RESET;
 8001c36:	2100      	movs	r1, #0
 8001c38:	e7cd      	b.n	8001bd6 <HAL_RTC_MspInit+0x3e>
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8001c3a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001c3c:	4905      	ldr	r1, [pc, #20]	; (8001c54 <HAL_RTC_MspInit+0xbc>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	63c3      	str	r3, [r0, #60]	; 0x3c
}
 8001c42:	e7e8      	b.n	8001c16 <HAL_RTC_MspInit+0x7e>
 8001c44:	40002800 	.word	0x40002800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	fffeffff 	.word	0xfffeffff
 8001c50:	fffffcff 	.word	0xfffffcff
 8001c54:	efffffff 	.word	0xefffffff

08001c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c58:	b500      	push	{lr}
 8001c5a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_TIM_Base_MspInit+0x54>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_TIM_Base_MspInit+0x58>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00c      	beq.n	8001c84 <HAL_TIM_Base_MspInit+0x2c>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c6a:	b003      	add	sp, #12
 8001c6c:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6e:	4a11      	ldr	r2, [pc, #68]	; (8001cb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c70:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c72:	2080      	movs	r0, #128	; 0x80
 8001c74:	0100      	lsls	r0, r0, #4
 8001c76:	4301      	orrs	r1, r0
 8001c78:	6411      	str	r1, [r2, #64]	; 0x40
 8001c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c7c:	4003      	ands	r3, r0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	9b00      	ldr	r3, [sp, #0]
 8001c82:	e7f2      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c84:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_Base_MspInit+0x5c>)
 8001c86:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001c88:	2080      	movs	r0, #128	; 0x80
 8001c8a:	0200      	lsls	r0, r0, #8
 8001c8c:	4301      	orrs	r1, r0
 8001c8e:	6411      	str	r1, [r2, #64]	; 0x40
 8001c90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c92:	4003      	ands	r3, r0
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	2013      	movs	r0, #19
 8001c9e:	f000 fdcb 	bl	8002838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001ca2:	2013      	movs	r0, #19
 8001ca4:	f000 fdf8 	bl	8002898 <HAL_NVIC_EnableIRQ>
}
 8001ca8:	e7df      	b.n	8001c6a <HAL_TIM_Base_MspInit+0x12>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40002000 	.word	0x40002000
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b510      	push	{r4, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	2214      	movs	r2, #20
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	a801      	add	r0, sp, #4
 8001cc4:	f002 fd3a 	bl	800473c <memset>
  if(htim->Instance==TIM1)
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_TIM_MspPostInit+0x48>)
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <HAL_TIM_MspPostInit+0x4c>)
 8001cd6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001cd8:	2301      	movs	r3, #1
 8001cda:	4319      	orrs	r1, r3
 8001cdc:	6351      	str	r1, [r2, #52]	; 0x34
 8001cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8001cee:	3303      	adds	r3, #3
 8001cf0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	20a0      	movs	r0, #160	; 0xa0
 8001cf4:	a901      	add	r1, sp, #4
 8001cf6:	05c0      	lsls	r0, r0, #23
 8001cf8:	f000 fef2 	bl	8002ae0 <HAL_GPIO_Init>
}
 8001cfc:	e7e8      	b.n	8001cd0 <HAL_TIM_MspPostInit+0x18>
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	2214      	movs	r2, #20
 8001d10:	2100      	movs	r1, #0
 8001d12:	a803      	add	r0, sp, #12
 8001d14:	f002 fd12 	bl	800473c <memset>
  if(huart->Instance==USART1)
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_UART_MspInit+0x8c>)
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d20:	b008      	add	sp, #32
 8001d22:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0x90>)
 8001d26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d28:	2103      	movs	r1, #3
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d30:	2080      	movs	r0, #128	; 0x80
 8001d32:	01c0      	lsls	r0, r0, #7
 8001d34:	4301      	orrs	r1, r0
 8001d36:	6419      	str	r1, [r3, #64]	; 0x40
 8001d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3a:	4002      	ands	r2, r0
 8001d3c:	9201      	str	r2, [sp, #4]
 8001d3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d42:	2202      	movs	r2, #2
 8001d44:	4311      	orrs	r1, r2
 8001d46:	6359      	str	r1, [r3, #52]	; 0x34
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d50:	23c0      	movs	r3, #192	; 0xc0
 8001d52:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	a903      	add	r1, sp, #12
 8001d58:	4810      	ldr	r0, [pc, #64]	; (8001d9c <HAL_UART_MspInit+0x94>)
 8001d5a:	f000 fec1 	bl	8002ae0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <HAL_UART_MspInit+0x98>)
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_UART_MspInit+0x9c>)
 8001d62:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d64:	2332      	movs	r3, #50	; 0x32
 8001d66:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d72:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d74:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d76:	3a60      	subs	r2, #96	; 0x60
 8001d78:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7a:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d7c:	f000 fe08 	bl	8002990 <HAL_DMA_Init>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d103      	bne.n	8001d8c <HAL_UART_MspInit+0x84>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_UART_MspInit+0x98>)
 8001d86:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001d88:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001d8a:	e7c9      	b.n	8001d20 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8001d8c:	f7ff fcb0 	bl	80016f0 <Error_Handler>
 8001d90:	e7f8      	b.n	8001d84 <HAL_UART_MspInit+0x7c>
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	40013800 	.word	0x40013800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	50000400 	.word	0x50000400
 8001da0:	20000414 	.word	0x20000414
 8001da4:	4002001c 	.word	0x4002001c

08001da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler>

08001daa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler>

08001dac <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db2:	f000 f8b3 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	bd10      	pop	{r4, pc}

08001db8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001db8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001dba:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TIM14_IRQHandler+0xc>)
 8001dbc:	f001 fbb6 	bl	800352c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	200004e4 	.word	0x200004e4

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <_sbrk+0x38>)
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <_sbrk+0x3c>)
 8001dd0:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd2:	490d      	ldr	r1, [pc, #52]	; (8001e08 <_sbrk+0x40>)
 8001dd4:	6809      	ldr	r1, [r1, #0]
 8001dd6:	2900      	cmp	r1, #0
 8001dd8:	d007      	beq.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dda:	490b      	ldr	r1, [pc, #44]	; (8001e08 <_sbrk+0x40>)
 8001ddc:	6808      	ldr	r0, [r1, #0]
 8001dde:	18c3      	adds	r3, r0, r3
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d806      	bhi.n	8001df2 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <_sbrk+0x40>)
 8001de6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001de8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001dea:	4907      	ldr	r1, [pc, #28]	; (8001e08 <_sbrk+0x40>)
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <_sbrk+0x44>)
 8001dee:	6008      	str	r0, [r1, #0]
 8001df0:	e7f3      	b.n	8001dda <_sbrk+0x12>
    errno = ENOMEM;
 8001df2:	f002 fc79 	bl	80046e8 <__errno>
 8001df6:	230c      	movs	r3, #12
 8001df8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	4240      	negs	r0, r0
 8001dfe:	e7f3      	b.n	8001de8 <_sbrk+0x20>
 8001e00:	20003000 	.word	0x20003000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	200005c0 	.word	0x200005c0
 8001e0c:	200005d8 	.word	0x200005d8

08001e10 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e10:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <SystemInit+0x8>)
 8001e12:	4a02      	ldr	r2, [pc, #8]	; (8001e1c <SystemInit+0xc>)
 8001e14:	609a      	str	r2, [r3, #8]
#endif
}
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	08000800 	.word	0x08000800

08001e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e20:	480d      	ldr	r0, [pc, #52]	; (8001e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <LoopForever+0xa>)
  ldr r3, =_edata
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LoopForever+0xe>)
  adds r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopForever+0x12>)
  b LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001e40:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e42:	3204      	adds	r2, #4

08001e44 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <LoopForever+0x16>)
  cmp r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e4a:	f7ff ffe1 	bl	8001e10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001e4e:	f002 fc51 	bl	80046f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e52:	f7ff fe1f 	bl	8001a94 <main>

08001e56 <LoopForever>:

LoopForever:
    b LoopForever
 8001e56:	e7fe      	b.n	8001e56 <LoopForever>
  ldr   r0, =_estack
 8001e58:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001e5c:	080055b4 	.word	0x080055b4
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e64:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001e68:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001e6c:	200005d8 	.word	0x200005d8

08001e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC1_IRQHandler>

08001e72 <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001e72:	4770      	bx	lr

08001e74 <HAL_DeInit>:
{
 8001e74:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_DeInit+0x24>)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4249      	negs	r1, r1
 8001e7c:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8001e7e:	2200      	movs	r2, #0
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB2_FORCE_RESET();
 8001e82:	6319      	str	r1, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB_FORCE_RESET();
 8001e86:	6299      	str	r1, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_IOP_FORCE_RESET();
 8001e8a:	6259      	str	r1, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_MspDeInit();
 8001e8e:	f7ff fff0 	bl	8001e72 <HAL_MspDeInit>
}
 8001e92:	2000      	movs	r0, #0
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_InitTick+0x4c>)
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	2900      	cmp	r1, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ea8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001eaa:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eac:	20fa      	movs	r0, #250	; 0xfa
 8001eae:	0080      	lsls	r0, r0, #2
 8001eb0:	f7fe fd3e 	bl	8000930 <__udivsi3>
 8001eb4:	0001      	movs	r1, r0
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_InitTick+0x50>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f7fe fd39 	bl	8000930 <__udivsi3>
 8001ebe:	f000 fcf7 	bl	80028b0 <HAL_SYSTICK_Config>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	2c03      	cmp	r4, #3
 8001ec8:	d901      	bls.n	8001ece <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e7ed      	b.n	8001eaa <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ece:	3001      	adds	r0, #1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	0021      	movs	r1, r4
 8001ed4:	4240      	negs	r0, r0
 8001ed6:	f000 fcaf 	bl	8002838 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_InitTick+0x54>)
 8001edc:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e7e3      	b.n	8001eaa <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	e7e1      	b.n	8001eaa <HAL_InitTick+0xe>
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000008 	.word	0x20000008
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <HAL_Init>:
{
 8001ef4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_Init+0x24>)
 8001ef8:	6811      	ldr	r1, [r2, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	430b      	orrs	r3, r1
 8001f00:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff ffca 	bl	8001e9c <HAL_InitTick>
 8001f08:	1e04      	subs	r4, r0, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001f0c:	2401      	movs	r4, #1
}
 8001f0e:	0020      	movs	r0, r4
 8001f10:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8001f12:	f7ff fdd7 	bl	8001ac4 <HAL_MspInit>
 8001f16:	e7fa      	b.n	8001f0e <HAL_Init+0x1a>
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f1c:	4a03      	ldr	r2, [pc, #12]	; (8001f2c <HAL_IncTick+0x10>)
 8001f1e:	6813      	ldr	r3, [r2, #0]
 8001f20:	4903      	ldr	r1, [pc, #12]	; (8001f30 <HAL_IncTick+0x14>)
 8001f22:	6809      	ldr	r1, [r1, #0]
 8001f24:	185b      	adds	r3, r3, r1
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	4770      	bx	lr
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	200005c4 	.word	0x200005c4
 8001f30:	20000008 	.word	0x20000008

08001f34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f34:	4b01      	ldr	r3, [pc, #4]	; (8001f3c <HAL_GetTick+0x8>)
 8001f36:	6818      	ldr	r0, [r3, #0]
}
 8001f38:	4770      	bx	lr
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	200005c4 	.word	0x200005c4

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fff6 	bl	8001f34 <HAL_GetTick>
 8001f48:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	1c63      	adds	r3, r4, #1
 8001f4c:	d002      	beq.n	8001f54 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_Delay+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	1b40      	subs	r0, r0, r5
 8001f5a:	42a0      	cmp	r0, r4
 8001f5c:	d3fa      	bcc.n	8001f54 <HAL_Delay+0x14>
  {
  }
}
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	20000008 	.word	0x20000008

08001f64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d100      	bne.n	8001f74 <HAL_ADC_Init+0x10>
 8001f72:	e119      	b.n	80021a8 <HAL_ADC_Init+0x244>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f7a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	00d2      	lsls	r2, r2, #3
 8001f80:	d41b      	bmi.n	8001fba <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4989      	ldr	r1, [pc, #548]	; (80021ac <HAL_ADC_Init+0x248>)
 8001f86:	4011      	ands	r1, r2
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0552      	lsls	r2, r2, #21
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001f90:	4b87      	ldr	r3, [pc, #540]	; (80021b0 <HAL_ADC_Init+0x24c>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	4987      	ldr	r1, [pc, #540]	; (80021b4 <HAL_ADC_Init+0x250>)
 8001f96:	f7fe fccb 	bl	8000930 <__udivsi3>
 8001f9a:	0040      	lsls	r0, r0, #1
 8001f9c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8001f9e:	e009      	b.n	8001fb4 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8001fa0:	f7ff fda8 	bl	8001af4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001fa8:	2254      	movs	r2, #84	; 0x54
 8001faa:	54a3      	strb	r3, [r4, r2]
 8001fac:	e7e5      	b.n	8001f7a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fba:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	00d2      	lsls	r2, r2, #3
 8001fc0:	d500      	bpl.n	8001fc4 <HAL_ADC_Init+0x60>
 8001fc2:	e09d      	b.n	8002100 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001fce:	390f      	subs	r1, #15
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	2104      	movs	r1, #4
 8001fda:	000d      	movs	r5, r1
 8001fdc:	4015      	ands	r5, r2
 8001fde:	4211      	tst	r1, r2
 8001fe0:	d000      	beq.n	8001fe4 <HAL_ADC_Init+0x80>
 8001fe2:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001fe6:	06d2      	lsls	r2, r2, #27
 8001fe8:	d500      	bpl.n	8001fec <HAL_ADC_Init+0x88>
 8001fea:	e0d6      	b.n	800219a <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	d000      	beq.n	8001ff2 <HAL_ADC_Init+0x8e>
 8001ff0:	e0d3      	b.n	800219a <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ff2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001ff4:	4970      	ldr	r1, [pc, #448]	; (80021b8 <HAL_ADC_Init+0x254>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	3106      	adds	r1, #6
 8001ffa:	31ff      	adds	r1, #255	; 0xff
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	07d2      	lsls	r2, r2, #31
 8002004:	d452      	bmi.n	80020ac <HAL_ADC_Init+0x148>
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002006:	7e22      	ldrb	r2, [r4, #24]
 8002008:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800200a:	68a1      	ldr	r1, [r4, #8]
 800200c:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800200e:	7e61      	ldrb	r1, [r4, #25]
 8002010:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002012:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002014:	7ea6      	ldrb	r6, [r4, #26]
 8002016:	0371      	lsls	r1, r6, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002018:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800201a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800201c:	2900      	cmp	r1, #0
 800201e:	d001      	beq.n	8002024 <HAL_ADC_Init+0xc0>
 8002020:	2180      	movs	r1, #128	; 0x80
 8002022:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002024:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002026:	68e1      	ldr	r1, [r4, #12]
 8002028:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800202a:	6921      	ldr	r1, [r4, #16]
 800202c:	2900      	cmp	r1, #0
 800202e:	db69      	blt.n	8002104 <HAL_ADC_Init+0x1a0>
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8002034:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	5c61      	ldrb	r1, [r4, r1]
 800203a:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800203c:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800203e:	2120      	movs	r1, #32
 8002040:	5c61      	ldrb	r1, [r4, r1]
 8002042:	2901      	cmp	r1, #1
 8002044:	d061      	beq.n	800210a <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002046:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002048:	2900      	cmp	r1, #0
 800204a:	d005      	beq.n	8002058 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800204c:	26e0      	movs	r6, #224	; 0xe0
 800204e:	0076      	lsls	r6, r6, #1
 8002050:	4031      	ands	r1, r6
 8002052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002054:	4331      	orrs	r1, r6
 8002056:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	4e58      	ldr	r6, [pc, #352]	; (80021bc <HAL_ADC_Init+0x258>)
 800205c:	4031      	ands	r1, r6
 800205e:	430a      	orrs	r2, r1
 8002060:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002062:	6863      	ldr	r3, [r4, #4]
 8002064:	0f9b      	lsrs	r3, r3, #30
 8002066:	079b      	lsls	r3, r3, #30
 8002068:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800206a:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800206c:	213c      	movs	r1, #60	; 0x3c
 800206e:	5c61      	ldrb	r1, [r4, r1]
 8002070:	2901      	cmp	r1, #1
 8002072:	d059      	beq.n	8002128 <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002074:	6821      	ldr	r1, [r4, #0]
 8002076:	690b      	ldr	r3, [r1, #16]
 8002078:	4e51      	ldr	r6, [pc, #324]	; (80021c0 <HAL_ADC_Init+0x25c>)
 800207a:	4033      	ands	r3, r6
 800207c:	4313      	orrs	r3, r2
 800207e:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	22c0      	movs	r2, #192	; 0xc0
 8002084:	0612      	lsls	r2, r2, #24
 8002086:	4293      	cmp	r3, r2
 8002088:	d010      	beq.n	80020ac <HAL_ADC_Init+0x148>
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	05d2      	lsls	r2, r2, #23
 800208e:	4293      	cmp	r3, r2
 8002090:	d00c      	beq.n	80020ac <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	0612      	lsls	r2, r2, #24
 8002096:	4293      	cmp	r3, r2
 8002098:	d008      	beq.n	80020ac <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800209a:	494a      	ldr	r1, [pc, #296]	; (80021c4 <HAL_ADC_Init+0x260>)
 800209c:	680a      	ldr	r2, [r1, #0]
 800209e:	4e4a      	ldr	r6, [pc, #296]	; (80021c8 <HAL_ADC_Init+0x264>)
 80020a0:	4032      	ands	r2, r6
 80020a2:	26f0      	movs	r6, #240	; 0xf0
 80020a4:	03b6      	lsls	r6, r6, #14
 80020a6:	4033      	ands	r3, r6
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80020ac:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80020ae:	6953      	ldr	r3, [r2, #20]
 80020b0:	2107      	movs	r1, #7
 80020b2:	438b      	bics	r3, r1
 80020b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020b6:	430b      	orrs	r3, r1
 80020b8:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80020ba:	6821      	ldr	r1, [r4, #0]
 80020bc:	694b      	ldr	r3, [r1, #20]
 80020be:	2270      	movs	r2, #112	; 0x70
 80020c0:	4393      	bics	r3, r2
 80020c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	4313      	orrs	r3, r2
 80020c8:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80020ca:	6923      	ldr	r3, [r4, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d135      	bne.n	800213c <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80020d0:	6822      	ldr	r2, [r4, #0]
 80020d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80020d4:	3b10      	subs	r3, #16
 80020d6:	430b      	orrs	r3, r1
 80020d8:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80020da:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020dc:	695a      	ldr	r2, [r3, #20]
 80020de:	2307      	movs	r3, #7
 80020e0:	4013      	ands	r3, r2
 80020e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d04f      	beq.n	8002188 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ea:	2212      	movs	r2, #18
 80020ec:	4393      	bics	r3, r2
 80020ee:	3a02      	subs	r2, #2
 80020f0:	4313      	orrs	r3, r2
 80020f2:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020f6:	3a0f      	subs	r2, #15
 80020f8:	4313      	orrs	r3, r2
 80020fa:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
 80020fe:	e051      	b.n	80021a4 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002100:	2000      	movs	r0, #0
 8002102:	e768      	b.n	8001fd6 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002104:	0049      	lsls	r1, r1, #1
 8002106:	0849      	lsrs	r1, r1, #1
 8002108:	e794      	b.n	8002034 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800210a:	2e00      	cmp	r6, #0
 800210c:	d103      	bne.n	8002116 <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800210e:	2180      	movs	r1, #128	; 0x80
 8002110:	0249      	lsls	r1, r1, #9
 8002112:	430a      	orrs	r2, r1
 8002114:	e797      	b.n	8002046 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002116:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002118:	2620      	movs	r6, #32
 800211a:	4331      	orrs	r1, r6
 800211c:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002120:	3e1f      	subs	r6, #31
 8002122:	4331      	orrs	r1, r6
 8002124:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002126:	e78e      	b.n	8002046 <HAL_ADC_Init+0xe2>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002128:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800212a:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 800212c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800212e:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002132:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002134:	4313      	orrs	r3, r2
 8002136:	2201      	movs	r2, #1
 8002138:	431a      	orrs	r2, r3
 800213a:	e79b      	b.n	8002074 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800213c:	2280      	movs	r2, #128	; 0x80
 800213e:	0392      	lsls	r2, r2, #14
 8002140:	4293      	cmp	r3, r2
 8002142:	d1ca      	bne.n	80020da <HAL_ADC_Init+0x176>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002144:	2d07      	cmp	r5, #7
 8002146:	d808      	bhi.n	800215a <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002148:	00ab      	lsls	r3, r5, #2
 800214a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800214c:	40da      	lsrs	r2, r3
 800214e:	230f      	movs	r3, #15
 8002150:	4013      	ands	r3, r2
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d001      	beq.n	800215a <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002156:	3501      	adds	r5, #1
 8002158:	e7f4      	b.n	8002144 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800215a:	2d01      	cmp	r5, #1
 800215c:	d00d      	beq.n	800217a <HAL_ADC_Init+0x216>
        MODIFY_REG(hadc->Instance->CHSELR,
 800215e:	6821      	ldr	r1, [r4, #0]
 8002160:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002162:	69e3      	ldr	r3, [r4, #28]
 8002164:	3b01      	subs	r3, #1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	221c      	movs	r2, #28
 800216a:	401a      	ands	r2, r3
 800216c:	2310      	movs	r3, #16
 800216e:	425b      	negs	r3, r3
 8002170:	4093      	lsls	r3, r2
 8002172:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002174:	4313      	orrs	r3, r2
 8002176:	628b      	str	r3, [r1, #40]	; 0x28
 8002178:	e7af      	b.n	80020da <HAL_ADC_Init+0x176>
        SET_BIT(hadc->Instance->CHSELR,
 800217a:	6822      	ldr	r2, [r4, #0]
 800217c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800217e:	2310      	movs	r3, #16
 8002180:	425b      	negs	r3, r3
 8002182:	430b      	orrs	r3, r1
 8002184:	6293      	str	r3, [r2, #40]	; 0x28
 8002186:	e7a8      	b.n	80020da <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 8002188:	2300      	movs	r3, #0
 800218a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800218c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800218e:	2203      	movs	r2, #3
 8002190:	4393      	bics	r3, r2
 8002192:	3a02      	subs	r2, #2
 8002194:	4313      	orrs	r3, r2
 8002196:	65a3      	str	r3, [r4, #88]	; 0x58
 8002198:	e004      	b.n	80021a4 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800219c:	2210      	movs	r2, #16
 800219e:	4313      	orrs	r3, r2
 80021a0:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021a2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80021a4:	b002      	add	sp, #8
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
 80021aa:	e7fb      	b.n	80021a4 <HAL_ADC_Init+0x240>
 80021ac:	6fffffe8 	.word	0x6fffffe8
 80021b0:	20000004 	.word	0x20000004
 80021b4:	00030d40 	.word	0x00030d40
 80021b8:	fffffefd 	.word	0xfffffefd
 80021bc:	fffe0201 	.word	0xfffe0201
 80021c0:	1ffffc02 	.word	0x1ffffc02
 80021c4:	40012708 	.word	0x40012708
 80021c8:	ffc3ffff 	.word	0xffc3ffff

080021cc <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021cc:	4770      	bx	lr

080021ce <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021ce:	4770      	bx	lr

080021d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80021d0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d4:	f7ff fffb 	bl	80021ce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d8:	bd10      	pop	{r4, pc}

080021da <HAL_ADC_ErrorCallback>:
}
 80021da:	4770      	bx	lr

080021dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80021dc:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021de:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80021e2:	2240      	movs	r2, #64	; 0x40
 80021e4:	4313      	orrs	r3, r2
 80021e6:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80021ea:	3a3c      	subs	r2, #60	; 0x3c
 80021ec:	4313      	orrs	r3, r2
 80021ee:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021f0:	f7ff fff3 	bl	80021da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f4:	bd10      	pop	{r4, pc}
	...

080021f8 <ADC_DMAConvCplt>:
{
 80021f8:	b510      	push	{r4, lr}
 80021fa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021fe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002200:	2150      	movs	r1, #80	; 0x50
 8002202:	4211      	tst	r1, r2
 8002204:	d12a      	bne.n	800225c <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002206:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4313      	orrs	r3, r2
 800220e:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002210:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002212:	68d9      	ldr	r1, [r3, #12]
 8002214:	22c0      	movs	r2, #192	; 0xc0
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	4211      	tst	r1, r2
 800221a:	d113      	bne.n	8002244 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800221c:	7e82      	ldrb	r2, [r0, #26]
 800221e:	2a00      	cmp	r2, #0
 8002220:	d110      	bne.n	8002244 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	0712      	lsls	r2, r2, #28
 8002226:	d50d      	bpl.n	8002244 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	0752      	lsls	r2, r2, #29
 800222c:	d40d      	bmi.n	800224a <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	210c      	movs	r1, #12
 8002232:	438a      	bics	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002236:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <ADC_DMAConvCplt+0x7c>)
 800223a:	4013      	ands	r3, r2
 800223c:	3204      	adds	r2, #4
 800223e:	32ff      	adds	r2, #255	; 0xff
 8002240:	4313      	orrs	r3, r2
 8002242:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8002244:	f7ff ffc2 	bl	80021cc <HAL_ADC_ConvCpltCallback>
}
 8002248:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800224c:	2220      	movs	r2, #32
 800224e:	4313      	orrs	r3, r2
 8002250:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002254:	3a1f      	subs	r2, #31
 8002256:	4313      	orrs	r3, r2
 8002258:	65c3      	str	r3, [r0, #92]	; 0x5c
 800225a:	e7f3      	b.n	8002244 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800225c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800225e:	06d2      	lsls	r2, r2, #27
 8002260:	d404      	bmi.n	800226c <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002262:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002266:	0018      	movs	r0, r3
 8002268:	4790      	blx	r2
}
 800226a:	e7ed      	b.n	8002248 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 800226c:	f7ff ffb5 	bl	80021da <HAL_ADC_ErrorCallback>
 8002270:	e7ea      	b.n	8002248 <ADC_DMAConvCplt+0x50>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	fffffefe 	.word	0xfffffefe

08002278 <HAL_ADC_ConfigChannel>:
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800227e:	2300      	movs	r3, #0
 8002280:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002282:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8002284:	3354      	adds	r3, #84	; 0x54
 8002286:	5cc3      	ldrb	r3, [r0, r3]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d100      	bne.n	800228e <HAL_ADC_ConfigChannel+0x16>
 800228c:	e122      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x25c>
 800228e:	2354      	movs	r3, #84	; 0x54
 8002290:	2201      	movs	r2, #1
 8002292:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002294:	6800      	ldr	r0, [r0, #0]
 8002296:	6883      	ldr	r3, [r0, #8]
 8002298:	3203      	adds	r2, #3
 800229a:	0016      	movs	r6, r2
 800229c:	401e      	ands	r6, r3
 800229e:	421a      	tst	r2, r3
 80022a0:	d009      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022a4:	321c      	adds	r2, #28
 80022a6:	4313      	orrs	r3, r2
 80022a8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80022aa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80022ac:	2354      	movs	r3, #84	; 0x54
 80022ae:	2200      	movs	r2, #0
 80022b0:	54e2      	strb	r2, [r4, r3]
}
 80022b2:	b003      	add	sp, #12
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 80022b6:	684b      	ldr	r3, [r1, #4]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d100      	bne.n	80022be <HAL_ADC_ConfigChannel+0x46>
 80022bc:	e0d6      	b.n	800246c <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	0612      	lsls	r2, r2, #24
 80022c2:	4295      	cmp	r5, r2
 80022c4:	d026      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x9c>
 80022c6:	4a84      	ldr	r2, [pc, #528]	; (80024d8 <HAL_ADC_ConfigChannel+0x260>)
 80022c8:	4295      	cmp	r5, r2
 80022ca:	d023      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80022cc:	221f      	movs	r2, #31
 80022ce:	4013      	ands	r3, r2
 80022d0:	3a10      	subs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80022d6:	4395      	bics	r5, r2
 80022d8:	002a      	movs	r2, r5
 80022da:	680d      	ldr	r5, [r1, #0]
 80022dc:	026f      	lsls	r7, r5, #9
 80022de:	d12f      	bne.n	8002340 <HAL_ADC_ConfigChannel+0xc8>
 80022e0:	0ead      	lsrs	r5, r5, #26
 80022e2:	261f      	movs	r6, #31
 80022e4:	402e      	ands	r6, r5
 80022e6:	409e      	lsls	r6, r3
 80022e8:	4316      	orrs	r6, r2
 80022ea:	6626      	str	r6, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80022ec:	684d      	ldr	r5, [r1, #4]
 80022ee:	08ab      	lsrs	r3, r5, #2
 80022f0:	3301      	adds	r3, #1
 80022f2:	69e2      	ldr	r2, [r4, #28]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d813      	bhi.n	8002320 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 80022f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80022fa:	231f      	movs	r3, #31
 80022fc:	401d      	ands	r5, r3
 80022fe:	3b10      	subs	r3, #16
 8002300:	001e      	movs	r6, r3
 8002302:	40ae      	lsls	r6, r5
 8002304:	43b2      	bics	r2, r6
 8002306:	680e      	ldr	r6, [r1, #0]
 8002308:	0eb6      	lsrs	r6, r6, #26
 800230a:	4033      	ands	r3, r6
 800230c:	40ab      	lsls	r3, r5
 800230e:	4313      	orrs	r3, r2
 8002310:	6283      	str	r3, [r0, #40]	; 0x28
}
 8002312:	e005      	b.n	8002320 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002314:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002316:	680b      	ldr	r3, [r1, #0]
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	0a5b      	lsrs	r3, r3, #9
 800231c:	4313      	orrs	r3, r2
 800231e:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002320:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002322:	6942      	ldr	r2, [r0, #20]
 8002324:	680b      	ldr	r3, [r1, #0]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	439a      	bics	r2, r3
 800232a:	688d      	ldr	r5, [r1, #8]
 800232c:	402b      	ands	r3, r5
 800232e:	4d6b      	ldr	r5, [pc, #428]	; (80024dc <HAL_ADC_ConfigChannel+0x264>)
 8002330:	402b      	ands	r3, r5
 8002332:	4313      	orrs	r3, r2
 8002334:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002336:	680b      	ldr	r3, [r1, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db5f      	blt.n	80023fc <HAL_ADC_ConfigChannel+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	e7b5      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002340:	07ef      	lsls	r7, r5, #31
 8002342:	d4d0      	bmi.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 8002344:	07ae      	lsls	r6, r5, #30
 8002346:	d42f      	bmi.n	80023a8 <HAL_ADC_ConfigChannel+0x130>
 8002348:	076e      	lsls	r6, r5, #29
 800234a:	d42f      	bmi.n	80023ac <HAL_ADC_ConfigChannel+0x134>
 800234c:	072e      	lsls	r6, r5, #28
 800234e:	d42f      	bmi.n	80023b0 <HAL_ADC_ConfigChannel+0x138>
 8002350:	06ee      	lsls	r6, r5, #27
 8002352:	d42f      	bmi.n	80023b4 <HAL_ADC_ConfigChannel+0x13c>
 8002354:	06ae      	lsls	r6, r5, #26
 8002356:	d42f      	bmi.n	80023b8 <HAL_ADC_ConfigChannel+0x140>
 8002358:	066e      	lsls	r6, r5, #25
 800235a:	d42f      	bmi.n	80023bc <HAL_ADC_ConfigChannel+0x144>
 800235c:	062e      	lsls	r6, r5, #24
 800235e:	d42f      	bmi.n	80023c0 <HAL_ADC_ConfigChannel+0x148>
 8002360:	05ee      	lsls	r6, r5, #23
 8002362:	d42f      	bmi.n	80023c4 <HAL_ADC_ConfigChannel+0x14c>
 8002364:	05ae      	lsls	r6, r5, #22
 8002366:	d42f      	bmi.n	80023c8 <HAL_ADC_ConfigChannel+0x150>
 8002368:	056e      	lsls	r6, r5, #21
 800236a:	d42f      	bmi.n	80023cc <HAL_ADC_ConfigChannel+0x154>
 800236c:	052e      	lsls	r6, r5, #20
 800236e:	d42f      	bmi.n	80023d0 <HAL_ADC_ConfigChannel+0x158>
 8002370:	04ee      	lsls	r6, r5, #19
 8002372:	d42f      	bmi.n	80023d4 <HAL_ADC_ConfigChannel+0x15c>
 8002374:	04ae      	lsls	r6, r5, #18
 8002376:	d42f      	bmi.n	80023d8 <HAL_ADC_ConfigChannel+0x160>
 8002378:	046e      	lsls	r6, r5, #17
 800237a:	d42f      	bmi.n	80023dc <HAL_ADC_ConfigChannel+0x164>
 800237c:	042e      	lsls	r6, r5, #16
 800237e:	d42f      	bmi.n	80023e0 <HAL_ADC_ConfigChannel+0x168>
 8002380:	03ee      	lsls	r6, r5, #15
 8002382:	d42f      	bmi.n	80023e4 <HAL_ADC_ConfigChannel+0x16c>
 8002384:	03ae      	lsls	r6, r5, #14
 8002386:	d42f      	bmi.n	80023e8 <HAL_ADC_ConfigChannel+0x170>
 8002388:	036e      	lsls	r6, r5, #13
 800238a:	d42f      	bmi.n	80023ec <HAL_ADC_ConfigChannel+0x174>
 800238c:	032e      	lsls	r6, r5, #12
 800238e:	d42f      	bmi.n	80023f0 <HAL_ADC_ConfigChannel+0x178>
 8002390:	02ee      	lsls	r6, r5, #11
 8002392:	d42f      	bmi.n	80023f4 <HAL_ADC_ConfigChannel+0x17c>
 8002394:	02ae      	lsls	r6, r5, #10
 8002396:	d42f      	bmi.n	80023f8 <HAL_ADC_ConfigChannel+0x180>
 8002398:	2780      	movs	r7, #128	; 0x80
 800239a:	03ff      	lsls	r7, r7, #15
 800239c:	002e      	movs	r6, r5
 800239e:	403e      	ands	r6, r7
 80023a0:	423d      	tst	r5, r7
 80023a2:	d0a0      	beq.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023a4:	2616      	movs	r6, #22
 80023a6:	e79e      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023a8:	2601      	movs	r6, #1
 80023aa:	e79c      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023ac:	2602      	movs	r6, #2
 80023ae:	e79a      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023b0:	2603      	movs	r6, #3
 80023b2:	e798      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023b4:	2604      	movs	r6, #4
 80023b6:	e796      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023b8:	2605      	movs	r6, #5
 80023ba:	e794      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023bc:	2606      	movs	r6, #6
 80023be:	e792      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023c0:	2607      	movs	r6, #7
 80023c2:	e790      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023c4:	2608      	movs	r6, #8
 80023c6:	e78e      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023c8:	2609      	movs	r6, #9
 80023ca:	e78c      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023cc:	260a      	movs	r6, #10
 80023ce:	e78a      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023d0:	260b      	movs	r6, #11
 80023d2:	e788      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023d4:	260c      	movs	r6, #12
 80023d6:	e786      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023d8:	260d      	movs	r6, #13
 80023da:	e784      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023dc:	260e      	movs	r6, #14
 80023de:	e782      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023e0:	260f      	movs	r6, #15
 80023e2:	e780      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023e4:	2610      	movs	r6, #16
 80023e6:	e77e      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023e8:	2611      	movs	r6, #17
 80023ea:	e77c      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023ec:	2612      	movs	r6, #18
 80023ee:	e77a      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023f0:	2613      	movs	r6, #19
 80023f2:	e778      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023f4:	2614      	movs	r6, #20
 80023f6:	e776      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
 80023f8:	2615      	movs	r6, #21
 80023fa:	e774      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	22c0      	movs	r2, #192	; 0xc0
 8002402:	0412      	lsls	r2, r2, #16
 8002404:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002406:	4837      	ldr	r0, [pc, #220]	; (80024e4 <HAL_ADC_ConfigChannel+0x26c>)
 8002408:	4283      	cmp	r3, r0
 800240a:	d004      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x19e>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800240c:	4836      	ldr	r0, [pc, #216]	; (80024e8 <HAL_ADC_ConfigChannel+0x270>)
 800240e:	4283      	cmp	r3, r0
 8002410:	d01f      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2000      	movs	r0, #0
 8002414:	e74a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002416:	0208      	lsls	r0, r1, #8
 8002418:	d4f8      	bmi.n	800240c <HAL_ADC_ConfigChannel+0x194>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8002420:	492f      	ldr	r1, [pc, #188]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 8002422:	680b      	ldr	r3, [r1, #0]
 8002424:	4831      	ldr	r0, [pc, #196]	; (80024ec <HAL_ADC_ConfigChannel+0x274>)
 8002426:	4003      	ands	r3, r0
 8002428:	431a      	orrs	r2, r3
 800242a:	600a      	str	r2, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_ADC_ConfigChannel+0x278>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	4930      	ldr	r1, [pc, #192]	; (80024f4 <HAL_ADC_ConfigChannel+0x27c>)
 8002432:	f7fe fa7d 	bl	8000930 <__udivsi3>
 8002436:	0043      	lsls	r3, r0, #1
 8002438:	181b      	adds	r3, r3, r0
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3301      	adds	r3, #1
 800243e:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002440:	e002      	b.n	8002448 <HAL_ADC_ConfigChannel+0x1d0>
            wait_loop_index--;
 8002442:	9b01      	ldr	r3, [sp, #4]
 8002444:	3b01      	subs	r3, #1
 8002446:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002448:	9b01      	ldr	r3, [sp, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f9      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x1ca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2000      	movs	r0, #0
 8002450:	e72c      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002452:	024b      	lsls	r3, r1, #9
 8002454:	d43c      	bmi.n	80024d0 <HAL_ADC_ConfigChannel+0x258>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	03db      	lsls	r3, r3, #15
 800245a:	431a      	orrs	r2, r3
 800245c:	4920      	ldr	r1, [pc, #128]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 800245e:	680b      	ldr	r3, [r1, #0]
 8002460:	4822      	ldr	r0, [pc, #136]	; (80024ec <HAL_ADC_ConfigChannel+0x274>)
 8002462:	4003      	ands	r3, r0
 8002464:	431a      	orrs	r2, r3
 8002466:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2000      	movs	r0, #0
}
 800246a:	e71f      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	429d      	cmp	r5, r3
 8002472:	d002      	beq.n	800247a <HAL_ADC_ConfigChannel+0x202>
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_ADC_ConfigChannel+0x260>)
 8002476:	429d      	cmp	r5, r3
 8002478:	d105      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800247a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800247c:	680b      	ldr	r3, [r1, #0]
 800247e:	025b      	lsls	r3, r3, #9
 8002480:	0a5b      	lsrs	r3, r3, #9
 8002482:	439a      	bics	r2, r3
 8002484:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002486:	680b      	ldr	r3, [r1, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	db01      	blt.n	8002490 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2000      	movs	r0, #0
 800248e:	e70d      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 8002492:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002494:	4913      	ldr	r1, [pc, #76]	; (80024e4 <HAL_ADC_ConfigChannel+0x26c>)
 8002496:	428b      	cmp	r3, r1
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x22c>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800249a:	4913      	ldr	r1, [pc, #76]	; (80024e8 <HAL_ADC_ConfigChannel+0x270>)
 800249c:	428b      	cmp	r3, r1
 800249e:	d00c      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x242>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a0:	2000      	movs	r0, #0
 80024a2:	e703      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	03db      	lsls	r3, r3, #15
 80024a8:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80024aa:	490d      	ldr	r1, [pc, #52]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 80024ac:	680b      	ldr	r3, [r1, #0]
 80024ae:	480f      	ldr	r0, [pc, #60]	; (80024ec <HAL_ADC_ConfigChannel+0x274>)
 80024b0:	4003      	ands	r3, r0
 80024b2:	431a      	orrs	r2, r3
 80024b4:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2000      	movs	r0, #0
}
 80024b8:	e6f8      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <HAL_ADC_ConfigChannel+0x268>)
 80024c2:	680b      	ldr	r3, [r1, #0]
 80024c4:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_ADC_ConfigChannel+0x274>)
 80024c6:	4003      	ands	r3, r0
 80024c8:	431a      	orrs	r2, r3
 80024ca:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2000      	movs	r0, #0
}
 80024ce:	e6ed      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
 80024d0:	2000      	movs	r0, #0
 80024d2:	e6eb      	b.n	80022ac <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80024d4:	2002      	movs	r0, #2
 80024d6:	e6ec      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x3a>
 80024d8:	80000004 	.word	0x80000004
 80024dc:	7fffff00 	.word	0x7fffff00
 80024e0:	40012708 	.word	0x40012708
 80024e4:	a4000200 	.word	0xa4000200
 80024e8:	a8000400 	.word	0xa8000400
 80024ec:	ff3fffff 	.word	0xff3fffff
 80024f0:	20000004 	.word	0x20000004
 80024f4:	00030d40 	.word	0x00030d40

080024f8 <ADC_Enable>:
{
 80024f8:	b530      	push	{r4, r5, lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80024fe:	2300      	movs	r3, #0
 8002500:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002502:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	07d2      	lsls	r2, r2, #31
 8002508:	d44d      	bmi.n	80025a6 <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <ADC_Enable+0xb4>)
 800250e:	4211      	tst	r1, r2
 8002510:	d111      	bne.n	8002536 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4926      	ldr	r1, [pc, #152]	; (80025b0 <ADC_Enable+0xb8>)
 8002516:	400a      	ands	r2, r1
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 800251e:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <ADC_Enable+0xbc>)
 8002520:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	d517      	bpl.n	8002556 <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <ADC_Enable+0xc0>)
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	4924      	ldr	r1, [pc, #144]	; (80025bc <ADC_Enable+0xc4>)
 800252c:	f7fe fa00 	bl	8000930 <__udivsi3>
 8002530:	3001      	adds	r0, #1
 8002532:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8002534:	e00c      	b.n	8002550 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002536:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002538:	2210      	movs	r2, #16
 800253a:	4313      	orrs	r3, r2
 800253c:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002540:	3a0f      	subs	r2, #15
 8002542:	4313      	orrs	r3, r2
 8002544:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8002546:	2001      	movs	r0, #1
 8002548:	e02e      	b.n	80025a8 <ADC_Enable+0xb0>
        wait_loop_index--;
 800254a:	9b01      	ldr	r3, [sp, #4]
 800254c:	3b01      	subs	r3, #1
 800254e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002550:	9b01      	ldr	r3, [sp, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002556:	7e63      	ldrb	r3, [r4, #25]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <ADC_Enable+0x68>
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
 800255e:	e023      	b.n	80025a8 <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8002560:	f7ff fce8 	bl	8001f34 <HAL_GetTick>
 8002564:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002566:	e004      	b.n	8002572 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002568:	f7ff fce4 	bl	8001f34 <HAL_GetTick>
 800256c:	1b40      	subs	r0, r0, r5
 800256e:	2802      	cmp	r0, #2
 8002570:	d80d      	bhi.n	800258e <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	07d2      	lsls	r2, r2, #31
 8002578:	d413      	bmi.n	80025a2 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	07d2      	lsls	r2, r2, #31
 800257e:	d4f3      	bmi.n	8002568 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	490b      	ldr	r1, [pc, #44]	; (80025b0 <ADC_Enable+0xb8>)
 8002584:	400a      	ands	r2, r1
 8002586:	2101      	movs	r1, #1
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	e7ec      	b.n	8002568 <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002590:	2210      	movs	r2, #16
 8002592:	4313      	orrs	r3, r2
 8002594:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002598:	3a0f      	subs	r2, #15
 800259a:	4313      	orrs	r3, r2
 800259c:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800259e:	2001      	movs	r0, #1
 80025a0:	e002      	b.n	80025a8 <ADC_Enable+0xb0>
  return HAL_OK;
 80025a2:	2000      	movs	r0, #0
 80025a4:	e000      	b.n	80025a8 <ADC_Enable+0xb0>
 80025a6:	2000      	movs	r0, #0
}
 80025a8:	b003      	add	sp, #12
 80025aa:	bd30      	pop	{r4, r5, pc}
 80025ac:	80000017 	.word	0x80000017
 80025b0:	7fffffe8 	.word	0x7fffffe8
 80025b4:	40012708 	.word	0x40012708
 80025b8:	20000004 	.word	0x20000004
 80025bc:	00030d40 	.word	0x00030d40

080025c0 <HAL_ADC_Start_DMA>:
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	0004      	movs	r4, r0
 80025c4:	000d      	movs	r5, r1
 80025c6:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	0752      	lsls	r2, r2, #29
 80025ce:	d447      	bmi.n	8002660 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80025d0:	2254      	movs	r2, #84	; 0x54
 80025d2:	5c82      	ldrb	r2, [r0, r2]
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	d045      	beq.n	8002664 <HAL_ADC_Start_DMA+0xa4>
 80025d8:	2201      	movs	r2, #1
 80025da:	2154      	movs	r1, #84	; 0x54
 80025dc:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80025de:	68d9      	ldr	r1, [r3, #12]
 80025e0:	420a      	tst	r2, r1
 80025e2:	d10d      	bne.n	8002600 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	07d2      	lsls	r2, r2, #31
 80025e8:	d505      	bpl.n	80025f6 <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	491e      	ldr	r1, [pc, #120]	; (8002668 <HAL_ADC_Start_DMA+0xa8>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	2102      	movs	r1, #2
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	68d3      	ldr	r3, [r2, #12]
 80025fa:	2101      	movs	r1, #1
 80025fc:	430b      	orrs	r3, r1
 80025fe:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8002600:	0020      	movs	r0, r4
 8002602:	f7ff ff79 	bl	80024f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002606:	2800      	cmp	r0, #0
 8002608:	d12b      	bne.n	8002662 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800260a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_ADC_Start_DMA+0xac>)
 800260e:	401a      	ands	r2, r3
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	4313      	orrs	r3, r2
 8002616:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8002618:	2300      	movs	r3, #0
 800261a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800261c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800261e:	4914      	ldr	r1, [pc, #80]	; (8002670 <HAL_ADC_Start_DMA+0xb0>)
 8002620:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002622:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002624:	4913      	ldr	r1, [pc, #76]	; (8002674 <HAL_ADC_Start_DMA+0xb4>)
 8002626:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002628:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800262a:	4913      	ldr	r1, [pc, #76]	; (8002678 <HAL_ADC_Start_DMA+0xb8>)
 800262c:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800262e:	6822      	ldr	r2, [r4, #0]
 8002630:	211c      	movs	r1, #28
 8002632:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002634:	2254      	movs	r2, #84	; 0x54
 8002636:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	390c      	subs	r1, #12
 800263e:	430b      	orrs	r3, r1
 8002640:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002642:	6821      	ldr	r1, [r4, #0]
 8002644:	3140      	adds	r1, #64	; 0x40
 8002646:	0033      	movs	r3, r6
 8002648:	002a      	movs	r2, r5
 800264a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800264c:	f000 f9f8 	bl	8002a40 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002650:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002652:	6893      	ldr	r3, [r2, #8]
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_ADC_Start_DMA+0xa8>)
 8002656:	400b      	ands	r3, r1
 8002658:	2104      	movs	r1, #4
 800265a:	430b      	orrs	r3, r1
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e000      	b.n	8002662 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8002660:	2002      	movs	r0, #2
}
 8002662:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8002664:	2002      	movs	r0, #2
 8002666:	e7fc      	b.n	8002662 <HAL_ADC_Start_DMA+0xa2>
 8002668:	7fffffe8 	.word	0x7fffffe8
 800266c:	fffff0fe 	.word	0xfffff0fe
 8002670:	080021f9 	.word	0x080021f9
 8002674:	080021d1 	.word	0x080021d1
 8002678:	080021dd 	.word	0x080021dd

0800267c <ADC_Disable>:
{
 800267c:	b570      	push	{r4, r5, r6, lr}
 800267e:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002680:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	2102      	movs	r1, #2
 8002686:	0008      	movs	r0, r1
 8002688:	4010      	ands	r0, r2
 800268a:	4211      	tst	r1, r2
 800268c:	d000      	beq.n	8002690 <ADC_Disable+0x14>
 800268e:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	07d2      	lsls	r2, r2, #31
 8002694:	d531      	bpl.n	80026fa <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002696:	2800      	cmp	r0, #0
 8002698:	d131      	bne.n	80026fe <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	2205      	movs	r2, #5
 800269e:	400a      	ands	r2, r1
 80026a0:	2a01      	cmp	r2, #1
 80026a2:	d009      	beq.n	80026b8 <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026a6:	2210      	movs	r2, #16
 80026a8:	4313      	orrs	r3, r2
 80026aa:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ae:	3a0f      	subs	r2, #15
 80026b0:	4313      	orrs	r3, r2
 80026b2:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
 80026b6:	e021      	b.n	80026fc <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	4912      	ldr	r1, [pc, #72]	; (8002704 <ADC_Disable+0x88>)
 80026bc:	400a      	ands	r2, r1
 80026be:	2102      	movs	r1, #2
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	2203      	movs	r2, #3
 80026c8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80026ca:	f7ff fc33 	bl	8001f34 <HAL_GetTick>
 80026ce:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	07db      	lsls	r3, r3, #31
 80026d6:	d50e      	bpl.n	80026f6 <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026d8:	f7ff fc2c 	bl	8001f34 <HAL_GetTick>
 80026dc:	1b40      	subs	r0, r0, r5
 80026de:	2802      	cmp	r0, #2
 80026e0:	d9f6      	bls.n	80026d0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026e4:	2210      	movs	r2, #16
 80026e6:	4313      	orrs	r3, r2
 80026e8:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026ec:	3a0f      	subs	r2, #15
 80026ee:	4313      	orrs	r3, r2
 80026f0:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
 80026f4:	e002      	b.n	80026fc <ADC_Disable+0x80>
  return HAL_OK;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e000      	b.n	80026fc <ADC_Disable+0x80>
 80026fa:	2000      	movs	r0, #0
}
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80026fe:	2000      	movs	r0, #0
 8002700:	e7fc      	b.n	80026fc <ADC_Disable+0x80>
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	7fffffe8 	.word	0x7fffffe8

08002708 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	b083      	sub	sp, #12
 800270c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002712:	3354      	adds	r3, #84	; 0x54
 8002714:	5cc3      	ldrb	r3, [r0, r3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d100      	bne.n	800271c <HAL_ADCEx_Calibration_Start+0x14>
 800271a:	e086      	b.n	800282a <HAL_ADCEx_Calibration_Start+0x122>
 800271c:	2601      	movs	r6, #1
 800271e:	2354      	movs	r3, #84	; 0x54
 8002720:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002722:	f7ff ffab 	bl	800267c <ADC_Disable>
 8002726:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002728:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	0031      	movs	r1, r6
 800272e:	4011      	ands	r1, r2
 8002730:	4216      	tst	r6, r2
 8002732:	d009      	beq.n	8002748 <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002734:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002736:	2210      	movs	r2, #16
 8002738:	4313      	orrs	r3, r2
 800273a:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273c:	2354      	movs	r3, #84	; 0x54
 800273e:	2200      	movs	r2, #0
 8002740:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8002742:	0028      	movs	r0, r5
 8002744:	b003      	add	sp, #12
 8002746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002748:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800274a:	4839      	ldr	r0, [pc, #228]	; (8002830 <HAL_ADCEx_Calibration_Start+0x128>)
 800274c:	4002      	ands	r2, r0
 800274e:	3006      	adds	r0, #6
 8002750:	30ff      	adds	r0, #255	; 0xff
 8002752:	4302      	orrs	r2, r0
 8002754:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002756:	68de      	ldr	r6, [r3, #12]
 8002758:	3001      	adds	r0, #1
 800275a:	4006      	ands	r6, r0
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4382      	bics	r2, r0
 8002760:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8002762:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002764:	e005      	b.n	8002772 <HAL_ADCEx_Calibration_Start+0x6a>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002766:	22b4      	movs	r2, #180	; 0xb4
 8002768:	589a      	ldr	r2, [r3, r2]
 800276a:	237f      	movs	r3, #127	; 0x7f
 800276c:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800276e:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002770:	3101      	adds	r1, #1
 8002772:	2907      	cmp	r1, #7
 8002774:	d81e      	bhi.n	80027b4 <HAL_ADCEx_Calibration_Start+0xac>
      LL_ADC_StartCalibration(hadc->Instance);
 8002776:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4a2e      	ldr	r2, [pc, #184]	; (8002834 <HAL_ADCEx_Calibration_Start+0x12c>)
 800277c:	401a      	ands	r2, r3
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	4313      	orrs	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002786:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	2a00      	cmp	r2, #0
 800278c:	daeb      	bge.n	8002766 <HAL_ADCEx_Calibration_Start+0x5e>
        wait_loop_index++;
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	3301      	adds	r3, #1
 8002792:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002794:	9a01      	ldr	r2, [sp, #4]
 8002796:	23ae      	movs	r3, #174	; 0xae
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	429a      	cmp	r2, r3
 800279c:	d3f3      	bcc.n	8002786 <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 800279e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027a0:	2212      	movs	r2, #18
 80027a2:	4393      	bics	r3, r2
 80027a4:	3a02      	subs	r2, #2
 80027a6:	4313      	orrs	r3, r2
 80027a8:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80027aa:	2354      	movs	r3, #84	; 0x54
 80027ac:	2200      	movs	r2, #0
 80027ae:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80027b0:	2501      	movs	r5, #1
 80027b2:	e7c6      	b.n	8002742 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 80027b4:	f7fe f8bc 	bl	8000930 <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 80027b8:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	4f1d      	ldr	r7, [pc, #116]	; (8002834 <HAL_ADCEx_Calibration_Start+0x12c>)
 80027be:	403a      	ands	r2, r7
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CALFACT,
 80027c6:	23b4      	movs	r3, #180	; 0xb4
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	58d2      	ldr	r2, [r2, r3]
 80027cc:	317e      	adds	r1, #126	; 0x7e
 80027ce:	438a      	bics	r2, r1
 80027d0:	4310      	orrs	r0, r2
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	50d0      	str	r0, [r2, r3]
    LL_ADC_Disable(hadc->Instance);
 80027d6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80027d8:	6893      	ldr	r3, [r2, #8]
 80027da:	403b      	ands	r3, r7
 80027dc:	397d      	subs	r1, #125	; 0x7d
 80027de:	430b      	orrs	r3, r1
 80027e0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80027e2:	f7ff fba7 	bl	8001f34 <HAL_GetTick>
 80027e6:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	07d2      	lsls	r2, r2, #31
 80027ee:	d409      	bmi.n	8002804 <HAL_ADCEx_Calibration_Start+0xfc>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	4316      	orrs	r6, r2
 80027f4:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80027f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80027f8:	2203      	movs	r2, #3
 80027fa:	4393      	bics	r3, r2
 80027fc:	3a02      	subs	r2, #2
 80027fe:	4313      	orrs	r3, r2
 8002800:	65a3      	str	r3, [r4, #88]	; 0x58
 8002802:	e79b      	b.n	800273c <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002804:	f7ff fb96 	bl	8001f34 <HAL_GetTick>
 8002808:	1bc0      	subs	r0, r0, r7
 800280a:	2802      	cmp	r0, #2
 800280c:	d9ec      	bls.n	80027e8 <HAL_ADCEx_Calibration_Start+0xe0>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	07db      	lsls	r3, r3, #31
 8002814:	d5e8      	bpl.n	80027e8 <HAL_ADCEx_Calibration_Start+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002818:	2210      	movs	r2, #16
 800281a:	4313      	orrs	r3, r2
 800281c:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002820:	3a0f      	subs	r2, #15
 8002822:	4313      	orrs	r3, r2
 8002824:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8002826:	2501      	movs	r5, #1
 8002828:	e78b      	b.n	8002742 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800282a:	2502      	movs	r5, #2
 800282c:	e789      	b.n	8002742 <HAL_ADCEx_Calibration_Start+0x3a>
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	fffffefd 	.word	0xfffffefd
 8002834:	7fffffe8 	.word	0x7fffffe8

08002838 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800283a:	2800      	cmp	r0, #0
 800283c:	db11      	blt.n	8002862 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283e:	0883      	lsrs	r3, r0, #2
 8002840:	4e13      	ldr	r6, [pc, #76]	; (8002890 <HAL_NVIC_SetPriority+0x58>)
 8002842:	33c0      	adds	r3, #192	; 0xc0
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	599d      	ldr	r5, [r3, r6]
 8002848:	2403      	movs	r4, #3
 800284a:	4020      	ands	r0, r4
 800284c:	00c0      	lsls	r0, r0, #3
 800284e:	22ff      	movs	r2, #255	; 0xff
 8002850:	0014      	movs	r4, r2
 8002852:	4084      	lsls	r4, r0
 8002854:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002856:	0189      	lsls	r1, r1, #6
 8002858:	400a      	ands	r2, r1
 800285a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800285c:	432a      	orrs	r2, r5
 800285e:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002860:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002862:	230f      	movs	r3, #15
 8002864:	4003      	ands	r3, r0
 8002866:	3b08      	subs	r3, #8
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3306      	adds	r3, #6
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_NVIC_SetPriority+0x5c>)
 8002870:	4694      	mov	ip, r2
 8002872:	4463      	add	r3, ip
 8002874:	685c      	ldr	r4, [r3, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	4010      	ands	r0, r2
 800287a:	00c0      	lsls	r0, r0, #3
 800287c:	32fc      	adds	r2, #252	; 0xfc
 800287e:	0015      	movs	r5, r2
 8002880:	4085      	lsls	r5, r0
 8002882:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002884:	0189      	lsls	r1, r1, #6
 8002886:	400a      	ands	r2, r1
 8002888:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288a:	4322      	orrs	r2, r4
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e7e7      	b.n	8002860 <HAL_NVIC_SetPriority+0x28>
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002898:	2800      	cmp	r0, #0
 800289a:	db05      	blt.n	80028a8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289c:	231f      	movs	r3, #31
 800289e:	4018      	ands	r0, r3
 80028a0:	3b1e      	subs	r3, #30
 80028a2:	4083      	lsls	r3, r0
 80028a4:	4a01      	ldr	r2, [pc, #4]	; (80028ac <HAL_NVIC_EnableIRQ+0x14>)
 80028a6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028a8:	4770      	bx	lr
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	3801      	subs	r0, #1
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	045b      	lsls	r3, r3, #17
 80028b6:	4298      	cmp	r0, r3
 80028b8:	d20f      	bcs.n	80028da <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_SYSTICK_Config+0x30>)
 80028bc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028be:	4809      	ldr	r0, [pc, #36]	; (80028e4 <HAL_SYSTICK_Config+0x34>)
 80028c0:	6a03      	ldr	r3, [r0, #32]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	21c0      	movs	r1, #192	; 0xc0
 80028c8:	0609      	lsls	r1, r1, #24
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ce:	2300      	movs	r3, #0
 80028d0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d2:	3307      	adds	r3, #7
 80028d4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d6:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80028d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80028da:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 80028dc:	e7fc      	b.n	80028d8 <HAL_SYSTICK_Config+0x28>
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	e000e010 	.word	0xe000e010
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ea:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80028ec:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80028ee:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028f0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80028f2:	2c00      	cmp	r4, #0
 80028f4:	d002      	beq.n	80028fc <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80028f8:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80028fa:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80028fc:	4f0b      	ldr	r7, [pc, #44]	; (800292c <DMA_SetConfig+0x44>)
 80028fe:	687c      	ldr	r4, [r7, #4]
 8002900:	261c      	movs	r6, #28
 8002902:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002904:	402e      	ands	r6, r5
 8002906:	2501      	movs	r5, #1
 8002908:	40b5      	lsls	r5, r6
 800290a:	432c      	orrs	r4, r5
 800290c:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800290e:	6804      	ldr	r4, [r0, #0]
 8002910:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002912:	6883      	ldr	r3, [r0, #8]
 8002914:	2b10      	cmp	r3, #16
 8002916:	d004      	beq.n	8002922 <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002918:	6803      	ldr	r3, [r0, #0]
 800291a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	60da      	str	r2, [r3, #12]
  }
}
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8002922:	6803      	ldr	r3, [r0, #0]
 8002924:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002926:	6803      	ldr	r3, [r0, #0]
 8002928:	60d9      	str	r1, [r3, #12]
 800292a:	e7f9      	b.n	8002920 <DMA_SetConfig+0x38>
 800292c:	40020000 	.word	0x40020000

08002930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002930:	b510      	push	{r4, lr}
 8002932:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002934:	20ff      	movs	r0, #255	; 0xff
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	4018      	ands	r0, r3
 800293a:	3808      	subs	r0, #8
 800293c:	2114      	movs	r1, #20
 800293e:	f7fd fff7 	bl	8000930 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002944:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002946:	4a06      	ldr	r2, [pc, #24]	; (8002960 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002948:	4694      	mov	ip, r2
 800294a:	4463      	add	r3, ip
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	6463      	str	r3, [r4, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8002952:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002954:	231c      	movs	r3, #28
 8002956:	4018      	ands	r0, r3
 8002958:	3b1b      	subs	r3, #27
 800295a:	4083      	lsls	r3, r0
 800295c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800295e:	bd10      	pop	{r4, pc}
 8002960:	10008200 	.word	0x10008200
 8002964:	40020880 	.word	0x40020880

08002968 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002968:	23ff      	movs	r3, #255	; 0xff
 800296a:	6842      	ldr	r2, [r0, #4]
 800296c:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800296e:	4a06      	ldr	r2, [pc, #24]	; (8002988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8002970:	189a      	adds	r2, r3, r2
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	6502      	str	r2, [r0, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8002978:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800297a:	3b01      	subs	r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	401a      	ands	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	4093      	lsls	r3, r2
 8002984:	6583      	str	r3, [r0, #88]	; 0x58
}
 8002986:	4770      	bx	lr
 8002988:	1000823f 	.word	0x1000823f
 800298c:	40020940 	.word	0x40020940

08002990 <HAL_DMA_Init>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8002994:	d04d      	beq.n	8002a32 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002996:	6805      	ldr	r5, [r0, #0]
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_DMA_Init+0xa8>)
 800299a:	18e8      	adds	r0, r5, r3
 800299c:	2114      	movs	r1, #20
 800299e:	f7fd ffc7 	bl	8000930 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80029a2:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80029a4:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a6:	2325      	movs	r3, #37	; 0x25
 80029a8:	2202      	movs	r2, #2
 80029aa:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_DMA_Init+0xac>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80029b4:	6821      	ldr	r1, [r4, #0]
 80029b6:	680a      	ldr	r2, [r1, #0]
 80029b8:	68a3      	ldr	r3, [r4, #8]
 80029ba:	68e0      	ldr	r0, [r4, #12]
 80029bc:	4303      	orrs	r3, r0
 80029be:	6920      	ldr	r0, [r4, #16]
 80029c0:	4303      	orrs	r3, r0
 80029c2:	6960      	ldr	r0, [r4, #20]
 80029c4:	4303      	orrs	r3, r0
 80029c6:	69a0      	ldr	r0, [r4, #24]
 80029c8:	4303      	orrs	r3, r0
 80029ca:	69e0      	ldr	r0, [r4, #28]
 80029cc:	4303      	orrs	r3, r0
 80029ce:	6a20      	ldr	r0, [r4, #32]
 80029d0:	4303      	orrs	r3, r0
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029d6:	0020      	movs	r0, r4
 80029d8:	f7ff ffaa 	bl	8002930 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	01db      	lsls	r3, r3, #7
 80029e0:	68a2      	ldr	r2, [r4, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d018      	beq.n	8002a18 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029e8:	23ff      	movs	r3, #255	; 0xff
 80029ea:	6861      	ldr	r1, [r4, #4]
 80029ec:	400b      	ands	r3, r1
 80029ee:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80029f4:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029f6:	6863      	ldr	r3, [r4, #4]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d90f      	bls.n	8002a1e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a02:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a04:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002a0a:	2225      	movs	r2, #37	; 0x25
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002a10:	3a01      	subs	r2, #1
 8002a12:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002a14:	2000      	movs	r0, #0
}
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6063      	str	r3, [r4, #4]
 8002a1c:	e7e3      	b.n	80029e6 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a1e:	0020      	movs	r0, r4
 8002a20:	f7ff ffa2 	bl	8002968 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e7e9      	b.n	8002a06 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8002a32:	2001      	movs	r0, #1
 8002a34:	e7ef      	b.n	8002a16 <HAL_DMA_Init+0x86>
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	bffdfff8 	.word	0xbffdfff8
 8002a3c:	ffff800f 	.word	0xffff800f

08002a40 <HAL_DMA_Start_IT>:
{
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8002a44:	2024      	movs	r0, #36	; 0x24
 8002a46:	5c20      	ldrb	r0, [r4, r0]
 8002a48:	2801      	cmp	r0, #1
 8002a4a:	d046      	beq.n	8002ada <HAL_DMA_Start_IT+0x9a>
 8002a4c:	2024      	movs	r0, #36	; 0x24
 8002a4e:	2501      	movs	r5, #1
 8002a50:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8002a52:	3001      	adds	r0, #1
 8002a54:	5c20      	ldrb	r0, [r4, r0]
 8002a56:	2801      	cmp	r0, #1
 8002a58:	d007      	beq.n	8002a6a <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8002a5a:	2324      	movs	r3, #36	; 0x24
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8002a60:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8002a62:	2324      	movs	r3, #36	; 0x24
 8002a64:	2200      	movs	r2, #0
 8002a66:	54e2      	strb	r2, [r4, r3]
}
 8002a68:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6a:	3024      	adds	r0, #36	; 0x24
 8002a6c:	3501      	adds	r5, #1
 8002a6e:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a70:	2000      	movs	r0, #0
 8002a72:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002a74:	6825      	ldr	r5, [r4, #0]
 8002a76:	6828      	ldr	r0, [r5, #0]
 8002a78:	2601      	movs	r6, #1
 8002a7a:	43b0      	bics	r0, r6
 8002a7c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a7e:	0020      	movs	r0, r4
 8002a80:	f7ff ff32 	bl	80028e8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01c      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a8a:	6822      	ldr	r2, [r4, #0]
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	210e      	movs	r1, #14
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	03d2      	lsls	r2, r2, #15
 8002a9a:	d504      	bpl.n	8002aa6 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	0052      	lsls	r2, r2, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002aa6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aac:	6819      	ldr	r1, [r3, #0]
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	0052      	lsls	r2, r2, #1
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	430b      	orrs	r3, r1
 8002abe:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e7ce      	b.n	8002a62 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	2104      	movs	r1, #4
 8002aca:	438b      	bics	r3, r1
 8002acc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	3106      	adds	r1, #6
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e7dc      	b.n	8002a94 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8002ada:	2002      	movs	r0, #2
 8002adc:	e7c4      	b.n	8002a68 <HAL_DMA_Start_IT+0x28>
	...

08002ae0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae2:	46d6      	mov	lr, sl
 8002ae4:	464f      	mov	r7, r9
 8002ae6:	4646      	mov	r6, r8
 8002ae8:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002aea:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002aec:	e03b      	b.n	8002b66 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002aee:	2504      	movs	r5, #4
 8002af0:	e000      	b.n	8002af4 <HAL_GPIO_Init+0x14>
 8002af2:	2500      	movs	r5, #0
 8002af4:	40a5      	lsls	r5, r4
 8002af6:	002c      	movs	r4, r5
 8002af8:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002afa:	4d63      	ldr	r5, [pc, #396]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002afc:	3218      	adds	r2, #24
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002b06:	464a      	mov	r2, r9
 8002b08:	43d2      	mvns	r2, r2
 8002b0a:	0025      	movs	r5, r4
 8002b0c:	464e      	mov	r6, r9
 8002b0e:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b10:	684e      	ldr	r6, [r1, #4]
 8002b12:	03f6      	lsls	r6, r6, #15
 8002b14:	d502      	bpl.n	8002b1c <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002b16:	464d      	mov	r5, r9
 8002b18:	432c      	orrs	r4, r5
 8002b1a:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002b1c:	4c5a      	ldr	r4, [pc, #360]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002b1e:	2780      	movs	r7, #128	; 0x80
 8002b20:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8002b22:	2584      	movs	r5, #132	; 0x84
 8002b24:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002b26:	0025      	movs	r5, r4
 8002b28:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b2a:	684e      	ldr	r6, [r1, #4]
 8002b2c:	03b6      	lsls	r6, r6, #14
 8002b2e:	d502      	bpl.n	8002b36 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8002b30:	464d      	mov	r5, r9
 8002b32:	432c      	orrs	r4, r5
 8002b34:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002b36:	4c54      	ldr	r4, [pc, #336]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002b38:	2784      	movs	r7, #132	; 0x84
 8002b3a:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b3c:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8002b3e:	0025      	movs	r5, r4
 8002b40:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b42:	684e      	ldr	r6, [r1, #4]
 8002b44:	02f6      	lsls	r6, r6, #11
 8002b46:	d502      	bpl.n	8002b4e <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002b48:	464d      	mov	r5, r9
 8002b4a:	432c      	orrs	r4, r5
 8002b4c:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8002b4e:	4c4e      	ldr	r4, [pc, #312]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002b50:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8002b52:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002b54:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b56:	684d      	ldr	r5, [r1, #4]
 8002b58:	02ad      	lsls	r5, r5, #10
 8002b5a:	d501      	bpl.n	8002b60 <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002b5c:	464a      	mov	r2, r9
 8002b5e:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 8002b60:	4c49      	ldr	r4, [pc, #292]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002b62:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002b64:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b66:	680c      	ldr	r4, [r1, #0]
 8002b68:	0022      	movs	r2, r4
 8002b6a:	40da      	lsrs	r2, r3
 8002b6c:	d100      	bne.n	8002b70 <HAL_GPIO_Init+0x90>
 8002b6e:	e086      	b.n	8002c7e <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b70:	2201      	movs	r2, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0026      	movs	r6, r4
 8002b76:	4016      	ands	r6, r2
 8002b78:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8002b7a:	4214      	tst	r4, r2
 8002b7c:	d0f2      	beq.n	8002b64 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7e:	684c      	ldr	r4, [r1, #4]
 8002b80:	2c02      	cmp	r4, #2
 8002b82:	d001      	beq.n	8002b88 <HAL_GPIO_Init+0xa8>
 8002b84:	2c12      	cmp	r4, #18
 8002b86:	d118      	bne.n	8002bba <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002b88:	08dd      	lsrs	r5, r3, #3
 8002b8a:	3508      	adds	r5, #8
 8002b8c:	00ad      	lsls	r5, r5, #2
 8002b8e:	582c      	ldr	r4, [r5, r0]
 8002b90:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8002b92:	2707      	movs	r7, #7
 8002b94:	401f      	ands	r7, r3
 8002b96:	00bf      	lsls	r7, r7, #2
 8002b98:	240f      	movs	r4, #15
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	0026      	movs	r6, r4
 8002b9e:	40be      	lsls	r6, r7
 8002ba0:	46b0      	mov	r8, r6
 8002ba2:	4666      	mov	r6, ip
 8002ba4:	4644      	mov	r4, r8
 8002ba6:	43a6      	bics	r6, r4
 8002ba8:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002baa:	690c      	ldr	r4, [r1, #16]
 8002bac:	4656      	mov	r6, sl
 8002bae:	4026      	ands	r6, r4
 8002bb0:	0034      	movs	r4, r6
 8002bb2:	40bc      	lsls	r4, r7
 8002bb4:	4666      	mov	r6, ip
 8002bb6:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002bb8:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8002bba:	6804      	ldr	r4, [r0, #0]
 8002bbc:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bbe:	005d      	lsls	r5, r3, #1
 8002bc0:	2403      	movs	r4, #3
 8002bc2:	46a2      	mov	sl, r4
 8002bc4:	0027      	movs	r7, r4
 8002bc6:	40af      	lsls	r7, r5
 8002bc8:	46b8      	mov	r8, r7
 8002bca:	43ff      	mvns	r7, r7
 8002bcc:	4666      	mov	r6, ip
 8002bce:	4644      	mov	r4, r8
 8002bd0:	43a6      	bics	r6, r4
 8002bd2:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	684c      	ldr	r4, [r1, #4]
 8002bd6:	4656      	mov	r6, sl
 8002bd8:	4026      	ands	r6, r4
 8002bda:	0034      	movs	r4, r6
 8002bdc:	40ac      	lsls	r4, r5
 8002bde:	4666      	mov	r6, ip
 8002be0:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8002be2:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be4:	684c      	ldr	r4, [r1, #4]
 8002be6:	1e66      	subs	r6, r4, #1
 8002be8:	2e01      	cmp	r6, #1
 8002bea:	d903      	bls.n	8002bf4 <HAL_GPIO_Init+0x114>
 8002bec:	2c11      	cmp	r4, #17
 8002bee:	d001      	beq.n	8002bf4 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	2c12      	cmp	r4, #18
 8002bf2:	d112      	bne.n	8002c1a <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002bf4:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bf6:	403c      	ands	r4, r7
 8002bf8:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002bfa:	68cc      	ldr	r4, [r1, #12]
 8002bfc:	40ac      	lsls	r4, r5
 8002bfe:	4666      	mov	r6, ip
 8002c00:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002c02:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002c04:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c06:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c08:	684a      	ldr	r2, [r1, #4]
 8002c0a:	0912      	lsrs	r2, r2, #4
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4666      	mov	r6, ip
 8002c12:	4032      	ands	r2, r6
 8002c14:	409a      	lsls	r2, r3
 8002c16:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002c18:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002c1a:	684a      	ldr	r2, [r1, #4]
 8002c1c:	2a03      	cmp	r2, #3
 8002c1e:	d005      	beq.n	8002c2c <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002c20:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c22:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002c24:	688f      	ldr	r7, [r1, #8]
 8002c26:	40af      	lsls	r7, r5
 8002c28:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 8002c2a:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c2c:	684a      	ldr	r2, [r1, #4]
 8002c2e:	00d2      	lsls	r2, r2, #3
 8002c30:	d598      	bpl.n	8002b64 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002c32:	089a      	lsrs	r2, r3, #2
 8002c34:	0014      	movs	r4, r2
 8002c36:	3418      	adds	r4, #24
 8002c38:	00a4      	lsls	r4, r4, #2
 8002c3a:	4d13      	ldr	r5, [pc, #76]	; (8002c88 <HAL_GPIO_Init+0x1a8>)
 8002c3c:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002c3e:	2503      	movs	r5, #3
 8002c40:	401d      	ands	r5, r3
 8002c42:	00ec      	lsls	r4, r5, #3
 8002c44:	250f      	movs	r5, #15
 8002c46:	40a5      	lsls	r5, r4
 8002c48:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002c4a:	25a0      	movs	r5, #160	; 0xa0
 8002c4c:	05ed      	lsls	r5, r5, #23
 8002c4e:	42a8      	cmp	r0, r5
 8002c50:	d100      	bne.n	8002c54 <HAL_GPIO_Init+0x174>
 8002c52:	e74e      	b.n	8002af2 <HAL_GPIO_Init+0x12>
 8002c54:	4d0d      	ldr	r5, [pc, #52]	; (8002c8c <HAL_GPIO_Init+0x1ac>)
 8002c56:	42a8      	cmp	r0, r5
 8002c58:	d00b      	beq.n	8002c72 <HAL_GPIO_Init+0x192>
 8002c5a:	4d0d      	ldr	r5, [pc, #52]	; (8002c90 <HAL_GPIO_Init+0x1b0>)
 8002c5c:	42a8      	cmp	r0, r5
 8002c5e:	d00a      	beq.n	8002c76 <HAL_GPIO_Init+0x196>
 8002c60:	4d0c      	ldr	r5, [pc, #48]	; (8002c94 <HAL_GPIO_Init+0x1b4>)
 8002c62:	42a8      	cmp	r0, r5
 8002c64:	d009      	beq.n	8002c7a <HAL_GPIO_Init+0x19a>
 8002c66:	4d0c      	ldr	r5, [pc, #48]	; (8002c98 <HAL_GPIO_Init+0x1b8>)
 8002c68:	42a8      	cmp	r0, r5
 8002c6a:	d100      	bne.n	8002c6e <HAL_GPIO_Init+0x18e>
 8002c6c:	e73f      	b.n	8002aee <HAL_GPIO_Init+0xe>
 8002c6e:	2505      	movs	r5, #5
 8002c70:	e740      	b.n	8002af4 <HAL_GPIO_Init+0x14>
 8002c72:	2501      	movs	r5, #1
 8002c74:	e73e      	b.n	8002af4 <HAL_GPIO_Init+0x14>
 8002c76:	2502      	movs	r5, #2
 8002c78:	e73c      	b.n	8002af4 <HAL_GPIO_Init+0x14>
 8002c7a:	2503      	movs	r5, #3
 8002c7c:	e73a      	b.n	8002af4 <HAL_GPIO_Init+0x14>
  }
}
 8002c7e:	bce0      	pop	{r5, r6, r7}
 8002c80:	46ba      	mov	sl, r7
 8002c82:	46b1      	mov	r9, r6
 8002c84:	46a8      	mov	r8, r5
 8002c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	50000400 	.word	0x50000400
 8002c90:	50000800 	.word	0x50000800
 8002c94:	50000c00 	.word	0x50000c00
 8002c98:	50001400 	.word	0x50001400

08002c9c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002c9c:	b570      	push	{r4, r5, r6, lr}
 8002c9e:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002ca0:	d028      	beq.n	8002cf4 <HAL_IWDG_Init+0x58>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002ca2:	6803      	ldr	r3, [r0, #0]
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <HAL_IWDG_Init+0x5c>)
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <HAL_IWDG_Init+0x60>)
 8002cac:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002cae:	6803      	ldr	r3, [r0, #0]
 8002cb0:	6842      	ldr	r2, [r0, #4]
 8002cb2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002cb4:	6803      	ldr	r3, [r0, #0]
 8002cb6:	6882      	ldr	r2, [r0, #8]
 8002cb8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002cba:	f7ff f93b 	bl	8001f34 <HAL_GetTick>
 8002cbe:	0005      	movs	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	0752      	lsls	r2, r2, #29
 8002cc6:	d00a      	beq.n	8002cde <HAL_IWDG_Init+0x42>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002cc8:	f7ff f934 	bl	8001f34 <HAL_GetTick>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	2831      	cmp	r0, #49	; 0x31
 8002cd0:	d9f6      	bls.n	8002cc0 <HAL_IWDG_Init+0x24>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	075b      	lsls	r3, r3, #29
 8002cd8:	d0f2      	beq.n	8002cc0 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
 8002cdc:	e00b      	b.n	8002cf6 <HAL_IWDG_Init+0x5a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002cde:	6919      	ldr	r1, [r3, #16]
 8002ce0:	68e2      	ldr	r2, [r4, #12]
 8002ce2:	4291      	cmp	r1, r2
 8002ce4:	d002      	beq.n	8002cec <HAL_IWDG_Init+0x50>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002ce6:	611a      	str	r2, [r3, #16]
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8002ce8:	2000      	movs	r0, #0
 8002cea:	e004      	b.n	8002cf6 <HAL_IWDG_Init+0x5a>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002cec:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_IWDG_Init+0x64>)
 8002cee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_IWDG_Init+0x5a>
    return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
}
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	0000cccc 	.word	0x0000cccc
 8002cfc:	00005555 	.word	0x00005555
 8002d00:	0000aaaa 	.word	0x0000aaaa

08002d04 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002d04:	6803      	ldr	r3, [r0, #0]
 8002d06:	4a02      	ldr	r2, [pc, #8]	; (8002d10 <HAL_IWDG_Refresh+0xc>)
 8002d08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	4770      	bx	lr
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	0000aaaa 	.word	0x0000aaaa

08002d14 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d16:	f7ff f90d 	bl	8001f34 <HAL_GetTick>
 8002d1a:	0004      	movs	r4, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d1e:	6811      	ldr	r1, [r2, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	055b      	lsls	r3, r3, #21
 8002d2e:	d406      	bmi.n	8002d3e <HAL_RCC_DeInit+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d30:	f7ff f900 	bl	8001f34 <HAL_GetTick>
 8002d34:	1b00      	subs	r0, r0, r4
 8002d36:	2802      	cmp	r0, #2
 8002d38:	d9f6      	bls.n	8002d28 <HAL_RCC_DeInit+0x14>
    {
      return HAL_TIMEOUT;
 8002d3a:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8002d3e:	4d1e      	ldr	r5, [pc, #120]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	01db      	lsls	r3, r3, #7
 8002d44:	606b      	str	r3, [r5, #4]
  tickstart = HAL_GetTick();
 8002d46:	f7ff f8f5 	bl	8001f34 <HAL_GetTick>
 8002d4a:	0004      	movs	r4, r0
  RCC->CFGR = 0x00000000u;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60ab      	str	r3, [r5, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	421a      	tst	r2, r3
 8002d58:	d007      	beq.n	8002d6a <HAL_RCC_DeInit+0x56>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7ff f8eb 	bl	8001f34 <HAL_GetTick>
 8002d5e:	1b00      	subs	r0, r0, r4
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_RCC_DeInit+0xa8>)
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d9f4      	bls.n	8002d50 <HAL_RCC_DeInit+0x3c>
      return HAL_TIMEOUT;
 8002d66:	2003      	movs	r0, #3
 8002d68:	e7e8      	b.n	8002d3c <HAL_RCC_DeInit+0x28>
  tickstart = HAL_GetTick();
 8002d6a:	f7ff f8e3 	bl	8001f34 <HAL_GetTick>
 8002d6e:	0004      	movs	r4, r0
  RCC->CR &= ~RCC_CR_HSEON;
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	4912      	ldr	r1, [pc, #72]	; (8002dc0 <HAL_RCC_DeInit+0xac>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6013      	str	r3, [r2, #0]
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	039b      	lsls	r3, r3, #14
 8002d80:	d506      	bpl.n	8002d90 <HAL_RCC_DeInit+0x7c>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d82:	f7ff f8d7 	bl	8001f34 <HAL_GetTick>
 8002d86:	1b00      	subs	r0, r0, r4
 8002d88:	2864      	cmp	r0, #100	; 0x64
 8002d8a:	d9f6      	bls.n	8002d7a <HAL_RCC_DeInit+0x66>
      return HAL_TIMEOUT;
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	e7d5      	b.n	8002d3c <HAL_RCC_DeInit+0x28>
  RCC->CR &= ~RCC_CR_HSEBYP;
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_DeInit+0xa4>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <HAL_RCC_DeInit+0xb0>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000u;
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
  RCC->CICR = 0xFFFFFFFFu;
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	621a      	str	r2, [r3, #32]
  SystemCoreClock = HSI_VALUE;
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_DeInit+0xb4>)
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_DeInit+0xb8>)
 8002da6:	601a      	str	r2, [r3, #0]
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_DeInit+0xbc>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f7ff f876 	bl	8001e9c <HAL_InitTick>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d0c3      	beq.n	8002d3c <HAL_RCC_DeInit+0x28>
    return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7c1      	b.n	8002d3c <HAL_RCC_DeInit+0x28>
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	00001388 	.word	0x00001388
 8002dc0:	fffeffff 	.word	0xfffeffff
 8002dc4:	fffbffff 	.word	0xfffbffff
 8002dc8:	20000004 	.word	0x20000004
 8002dcc:	02dc6c00 	.word	0x02dc6c00
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x54>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2238      	movs	r2, #56	; 0x38
 8002dda:	421a      	tst	r2, r3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x54>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	0ad2      	lsrs	r2, r2, #11
 8002de4:	2307      	movs	r3, #7
 8002de6:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002de8:	4810      	ldr	r0, [pc, #64]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x58>)
 8002dea:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002dec:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x54>)
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	2338      	movs	r3, #56	; 0x38
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d010      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x54>)
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	2338      	movs	r3, #56	; 0x38
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d00c      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x54>)
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	2338      	movs	r3, #56	; 0x38
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b18      	cmp	r3, #24
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8002e12:	2000      	movs	r0, #0
  return sysclockfreq;
 8002e14:	e7ea      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8002e16:	20fa      	movs	r0, #250	; 0xfa
 8002e18:	01c0      	lsls	r0, r0, #7
 8002e1a:	e7e7      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002e1e:	e7e5      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002e20:	2080      	movs	r0, #128	; 0x80
 8002e22:	0200      	lsls	r0, r0, #8
 8002e24:	e7e2      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x18>
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	02dc6c00 	.word	0x02dc6c00
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
}
 8002e38:	4770      	bx	lr
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000004 	.word	0x20000004

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002e42:	f7ff fff7 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	0b12      	lsrs	r2, r2, #12
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	4013      	ands	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e54:	589a      	ldr	r2, [r3, r2]
 8002e56:	231f      	movs	r3, #31
 8002e58:	4013      	ands	r3, r2
 8002e5a:	40d8      	lsrs	r0, r3
}
 8002e5c:	bd10      	pop	{r4, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	40021000 	.word	0x40021000
 8002e64:	080053dc 	.word	0x080053dc

08002e68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002e6c:	6802      	ldr	r2, [r0, #0]
 8002e6e:	68d3      	ldr	r3, [r2, #12]
 8002e70:	21a0      	movs	r1, #160	; 0xa0
 8002e72:	438b      	bics	r3, r1
 8002e74:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002e76:	f7ff f85d 	bl	8001f34 <HAL_GetTick>
 8002e7a:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	d408      	bmi.n	8002e96 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e84:	f7ff f856 	bl	8001f34 <HAL_GetTick>
 8002e88:	1b40      	subs	r0, r0, r5
 8002e8a:	23fa      	movs	r3, #250	; 0xfa
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d9f4      	bls.n	8002e7c <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002e92:	2003      	movs	r0, #3
 8002e94:	e000      	b.n	8002e98 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8002e96:	2000      	movs	r0, #0
}
 8002e98:	bd70      	pop	{r4, r5, r6, pc}

08002e9a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e9a:	b570      	push	{r4, r5, r6, lr}
 8002e9c:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002e9e:	6803      	ldr	r3, [r0, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	0652      	lsls	r2, r2, #25
 8002ea4:	d502      	bpl.n	8002eac <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 8002ea8:	0028      	movs	r0, r5
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	2180      	movs	r1, #128	; 0x80
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002eb4:	f7ff f83e 	bl	8001f34 <HAL_GetTick>
 8002eb8:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2500      	movs	r5, #0
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	065b      	lsls	r3, r3, #25
 8002ec2:	d4f1      	bmi.n	8002ea8 <RTC_EnterInitMode+0xe>
 8002ec4:	2d03      	cmp	r5, #3
 8002ec6:	d0ef      	beq.n	8002ea8 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ec8:	f7ff f834 	bl	8001f34 <HAL_GetTick>
 8002ecc:	1b80      	subs	r0, r0, r6
 8002ece:	22fa      	movs	r2, #250	; 0xfa
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	4290      	cmp	r0, r2
 8002ed4:	d9f2      	bls.n	8002ebc <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ed6:	2325      	movs	r3, #37	; 0x25
 8002ed8:	2203      	movs	r2, #3
 8002eda:	54e2      	strb	r2, [r4, r3]
        status = HAL_TIMEOUT;
 8002edc:	2503      	movs	r5, #3
 8002ede:	e7ed      	b.n	8002ebc <RTC_EnterInitMode+0x22>

08002ee0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002ee4:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <RTC_ExitInitMode+0x4c>)
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	438a      	bics	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	069b      	lsls	r3, r3, #26
 8002ef2:	d408      	bmi.n	8002f06 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ef4:	f7ff ffb8 	bl	8002e68 <HAL_RTC_WaitForSynchro>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d016      	beq.n	8002f2a <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002efc:	2325      	movs	r3, #37	; 0x25
 8002efe:	2203      	movs	r2, #3
 8002f00:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
 8002f04:	e011      	b.n	8002f2a <RTC_ExitInitMode+0x4a>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <RTC_ExitInitMode+0x4c>)
 8002f08:	6993      	ldr	r3, [r2, #24]
 8002f0a:	2120      	movs	r1, #32
 8002f0c:	438b      	bics	r3, r1
 8002f0e:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f10:	f7ff ffaa 	bl	8002e68 <HAL_RTC_WaitForSynchro>
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d003      	beq.n	8002f20 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f18:	2325      	movs	r3, #37	; 0x25
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8002f1e:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f20:	4a02      	ldr	r2, [pc, #8]	; (8002f2c <RTC_ExitInitMode+0x4c>)
 8002f22:	6993      	ldr	r3, [r2, #24]
 8002f24:	2120      	movs	r1, #32
 8002f26:	430b      	orrs	r3, r1
 8002f28:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8002f2a:	bd10      	pop	{r4, pc}
 8002f2c:	40002800 	.word	0x40002800

08002f30 <HAL_RTC_Init>:
{
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	1e04      	subs	r4, r0, #0
  if (hrtc != NULL)
 8002f34:	d04b      	beq.n	8002fce <HAL_RTC_Init+0x9e>
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f36:	2325      	movs	r3, #37	; 0x25
 8002f38:	5cc3      	ldrb	r3, [r0, r3]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_RTC_Init+0x3c>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f3e:	2325      	movs	r3, #37	; 0x25
 8002f40:	2202      	movs	r2, #2
 8002f42:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	32c8      	adds	r2, #200	; 0xc8
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	3a77      	subs	r2, #119	; 0x77
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8002f50:	0020      	movs	r0, r4
 8002f52:	f7ff ffa2 	bl	8002e9a <RTC_EnterInitMode>
    if (status == HAL_OK)
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d00e      	beq.n	8002f78 <HAL_RTC_Init+0x48>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d102      	bne.n	8002f6a <HAL_RTC_Init+0x3a>
      hrtc->State = HAL_RTC_STATE_READY;
 8002f64:	2325      	movs	r3, #37	; 0x25
 8002f66:	3afe      	subs	r2, #254	; 0xfe
 8002f68:	54e2      	strb	r2, [r4, r3]
}
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8002f6c:	3324      	adds	r3, #36	; 0x24
 8002f6e:	2200      	movs	r2, #0
 8002f70:	54c2      	strb	r2, [r0, r3]
      HAL_RTC_MspInit(hrtc);
 8002f72:	f7fe fe11 	bl	8001b98 <HAL_RTC_MspInit>
 8002f76:	e7e2      	b.n	8002f3e <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	6993      	ldr	r3, [r2, #24]
 8002f7c:	4915      	ldr	r1, [pc, #84]	; (8002fd4 <HAL_RTC_Init+0xa4>)
 8002f7e:	400b      	ands	r3, r1
 8002f80:	6193      	str	r3, [r2, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f82:	6821      	ldr	r1, [r4, #0]
 8002f84:	698a      	ldr	r2, [r1, #24]
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	6920      	ldr	r0, [r4, #16]
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	69a0      	ldr	r0, [r4, #24]
 8002f8e:	4303      	orrs	r3, r0
 8002f90:	4313      	orrs	r3, r2
 8002f92:	618b      	str	r3, [r1, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	68e2      	ldr	r2, [r4, #12]
 8002f98:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f9a:	6821      	ldr	r1, [r4, #0]
 8002f9c:	690b      	ldr	r3, [r1, #16]
 8002f9e:	68a2      	ldr	r2, [r4, #8]
 8002fa0:	0412      	lsls	r2, r2, #16
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 8002fa6:	0020      	movs	r0, r4
 8002fa8:	f7ff ff9a 	bl	8002ee0 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002fac:	2800      	cmp	r0, #0
 8002fae:	d1d4      	bne.n	8002f5a <HAL_RTC_Init+0x2a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002fb0:	6822      	ldr	r2, [r4, #0]
 8002fb2:	6993      	ldr	r3, [r2, #24]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002fba:	6821      	ldr	r1, [r4, #0]
 8002fbc:	698a      	ldr	r2, [r1, #24]
 8002fbe:	6a23      	ldr	r3, [r4, #32]
 8002fc0:	69e5      	ldr	r5, [r4, #28]
 8002fc2:	432b      	orrs	r3, r5
 8002fc4:	6965      	ldr	r5, [r4, #20]
 8002fc6:	432b      	orrs	r3, r5
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	618b      	str	r3, [r1, #24]
 8002fcc:	e7c5      	b.n	8002f5a <HAL_RTC_Init+0x2a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
 8002fd0:	e7cb      	b.n	8002f6a <HAL_RTC_Init+0x3a>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	ff8fffbf 	.word	0xff8fffbf

08002fd8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002fd8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002fda:	e002      	b.n	8002fe2 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002fdc:	3301      	adds	r3, #1
    Param -= 10U;
 8002fde:	380a      	subs	r0, #10
 8002fe0:	b2c0      	uxtb	r0, r0
  while (Param >= 10U)
 8002fe2:	2809      	cmp	r0, #9
 8002fe4:	d8fa      	bhi.n	8002fdc <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4318      	orrs	r0, r3
}
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_RTC_SetTime>:
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	0004      	movs	r4, r0
 8002ff4:	000e      	movs	r6, r1
 8002ff6:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 8002ff8:	2324      	movs	r3, #36	; 0x24
 8002ffa:	5cc3      	ldrb	r3, [r0, r3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d057      	beq.n	80030b0 <HAL_RTC_SetTime+0xc0>
 8003000:	2324      	movs	r3, #36	; 0x24
 8003002:	2201      	movs	r2, #1
 8003004:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003006:	3301      	adds	r3, #1
 8003008:	3201      	adds	r2, #1
 800300a:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300c:	6803      	ldr	r3, [r0, #0]
 800300e:	32c8      	adds	r2, #200	; 0xc8
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
 8003012:	6803      	ldr	r3, [r0, #0]
 8003014:	3a77      	subs	r2, #119	; 0x77
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003018:	f7ff ff3f 	bl	8002e9a <RTC_EnterInitMode>
  if (status == HAL_OK)
 800301c:	2800      	cmp	r0, #0
 800301e:	d12a      	bne.n	8003076 <HAL_RTC_SetTime+0x86>
    if (Format == RTC_FORMAT_BIN)
 8003020:	2d00      	cmp	r5, #0
 8003022:	d134      	bne.n	800308e <HAL_RTC_SetTime+0x9e>
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	065b      	lsls	r3, r3, #25
 800302a:	d401      	bmi.n	8003030 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003030:	7830      	ldrb	r0, [r6, #0]
 8003032:	f7ff ffd1 	bl	8002fd8 <RTC_ByteToBcd2>
 8003036:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003038:	7870      	ldrb	r0, [r6, #1]
 800303a:	f7ff ffcd 	bl	8002fd8 <RTC_ByteToBcd2>
 800303e:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003040:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003042:	78b0      	ldrb	r0, [r6, #2]
 8003044:	f7ff ffc8 	bl	8002fd8 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003048:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800304a:	78f3      	ldrb	r3, [r6, #3]
 800304c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800304e:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_RTC_SetTime+0xc4>)
 8003054:	4010      	ands	r0, r2
 8003056:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	6993      	ldr	r3, [r2, #24]
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <HAL_RTC_SetTime+0xc8>)
 800305e:	400b      	ands	r3, r1
 8003060:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003062:	6821      	ldr	r1, [r4, #0]
 8003064:	698b      	ldr	r3, [r1, #24]
 8003066:	68f2      	ldr	r2, [r6, #12]
 8003068:	6930      	ldr	r0, [r6, #16]
 800306a:	4302      	orrs	r2, r0
 800306c:	4313      	orrs	r3, r2
 800306e:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 8003070:	0020      	movs	r0, r4
 8003072:	f7ff ff35 	bl	8002ee0 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	22ff      	movs	r2, #255	; 0xff
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800307c:	2800      	cmp	r0, #0
 800307e:	d102      	bne.n	8003086 <HAL_RTC_SetTime+0x96>
    hrtc->State = HAL_RTC_STATE_READY;
 8003080:	2325      	movs	r3, #37	; 0x25
 8003082:	3afe      	subs	r2, #254	; 0xfe
 8003084:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8003086:	2324      	movs	r3, #36	; 0x24
 8003088:	2200      	movs	r2, #0
 800308a:	54e2      	strb	r2, [r4, r3]
}
 800308c:	bd70      	pop	{r4, r5, r6, pc}
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	065b      	lsls	r3, r3, #25
 8003094:	d401      	bmi.n	800309a <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800309a:	7830      	ldrb	r0, [r6, #0]
 800309c:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800309e:	7873      	ldrb	r3, [r6, #1]
 80030a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030a2:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030a4:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030a6:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030a8:	78f3      	ldrb	r3, [r6, #3]
 80030aa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ac:	4318      	orrs	r0, r3
 80030ae:	e7cf      	b.n	8003050 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 80030b0:	2002      	movs	r0, #2
 80030b2:	e7eb      	b.n	800308c <HAL_RTC_SetTime+0x9c>
 80030b4:	007f7f7f 	.word	0x007f7f7f
 80030b8:	fffbffff 	.word	0xfffbffff

080030bc <HAL_RTC_SetDate>:
{
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	0004      	movs	r4, r0
 80030c0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80030c2:	2324      	movs	r3, #36	; 0x24
 80030c4:	5cc3      	ldrb	r3, [r0, r3]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d04a      	beq.n	8003160 <HAL_RTC_SetDate+0xa4>
 80030ca:	2324      	movs	r3, #36	; 0x24
 80030cc:	2101      	movs	r1, #1
 80030ce:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d0:	3301      	adds	r3, #1
 80030d2:	3101      	adds	r1, #1
 80030d4:	54c1      	strb	r1, [r0, r3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_RTC_SetDate+0x2c>
 80030da:	7873      	ldrb	r3, [r6, #1]
 80030dc:	06d9      	lsls	r1, r3, #27
 80030de:	d503      	bpl.n	80030e8 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030e0:	2110      	movs	r1, #16
 80030e2:	438b      	bics	r3, r1
 80030e4:	330a      	adds	r3, #10
 80030e6:	7073      	strb	r3, [r6, #1]
  if (Format == RTC_FORMAT_BIN)
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d126      	bne.n	800313a <HAL_RTC_SetDate+0x7e>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030ec:	78f0      	ldrb	r0, [r6, #3]
 80030ee:	f7ff ff73 	bl	8002fd8 <RTC_ByteToBcd2>
 80030f2:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030f4:	7870      	ldrb	r0, [r6, #1]
 80030f6:	f7ff ff6f 	bl	8002fd8 <RTC_ByteToBcd2>
 80030fa:	0200      	lsls	r0, r0, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030fc:	4305      	orrs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80030fe:	78b0      	ldrb	r0, [r6, #2]
 8003100:	f7ff ff6a 	bl	8002fd8 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003104:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003106:	7830      	ldrb	r0, [r6, #0]
 8003108:	0340      	lsls	r0, r0, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800310a:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	22ca      	movs	r2, #202	; 0xca
 8003110:	625a      	str	r2, [r3, #36]	; 0x24
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	3a77      	subs	r2, #119	; 0x77
 8003116:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003118:	0020      	movs	r0, r4
 800311a:	f7ff febe 	bl	8002e9a <RTC_EnterInitMode>
  if (status == HAL_OK)
 800311e:	2800      	cmp	r0, #0
 8003120:	d016      	beq.n	8003150 <HAL_RTC_SetDate+0x94>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	22ff      	movs	r2, #255	; 0xff
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8003128:	2800      	cmp	r0, #0
 800312a:	d102      	bne.n	8003132 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 800312c:	2325      	movs	r3, #37	; 0x25
 800312e:	3afe      	subs	r2, #254	; 0xfe
 8003130:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 8003132:	2324      	movs	r3, #36	; 0x24
 8003134:	2200      	movs	r2, #0
 8003136:	54e2      	strb	r2, [r4, r3]
}
 8003138:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800313a:	78f5      	ldrb	r5, [r6, #3]
 800313c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800313e:	7870      	ldrb	r0, [r6, #1]
 8003140:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003142:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003144:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003146:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003148:	7830      	ldrb	r0, [r6, #0]
 800314a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800314c:	4305      	orrs	r5, r0
 800314e:	e7dd      	b.n	800310c <HAL_RTC_SetDate+0x50>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <HAL_RTC_SetDate+0xa8>)
 8003154:	4005      	ands	r5, r0
 8003156:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8003158:	0020      	movs	r0, r4
 800315a:	f7ff fec1 	bl	8002ee0 <RTC_ExitInitMode>
 800315e:	e7e0      	b.n	8003122 <HAL_RTC_SetDate+0x66>
  __HAL_LOCK(hrtc);
 8003160:	2002      	movs	r0, #2
 8003162:	e7e9      	b.n	8003138 <HAL_RTC_SetDate+0x7c>
 8003164:	00ffff3f 	.word	0x00ffff3f

08003168 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003168:	0002      	movs	r2, r0
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800316a:	0900      	lsrs	r0, r0, #4
 800316c:	0083      	lsls	r3, r0, #2
 800316e:	181b      	adds	r3, r3, r0
 8003170:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003172:	200f      	movs	r0, #15
 8003174:	4010      	ands	r0, r2
 8003176:	18c0      	adds	r0, r0, r3
 8003178:	b2c0      	uxtb	r0, r0
}
 800317a:	4770      	bx	lr

0800317c <HAL_RTC_GetTime>:
{
 800317c:	b570      	push	{r4, r5, r6, lr}
 800317e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003180:	6803      	ldr	r3, [r0, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	045b      	lsls	r3, r3, #17
 800318c:	0c5b      	lsrs	r3, r3, #17
 800318e:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	490e      	ldr	r1, [pc, #56]	; (80031d0 <HAL_RTC_GetTime+0x54>)
 8003196:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003198:	0c19      	lsrs	r1, r3, #16
 800319a:	203f      	movs	r0, #63	; 0x3f
 800319c:	4008      	ands	r0, r1
 800319e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80031a0:	0a1e      	lsrs	r6, r3, #8
 80031a2:	257f      	movs	r5, #127	; 0x7f
 80031a4:	402e      	ands	r6, r5
 80031a6:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80031a8:	401d      	ands	r5, r3
 80031aa:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80031ac:	0d9b      	lsrs	r3, r3, #22
 80031ae:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80031b0:	2a00      	cmp	r2, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031b4:	f7ff ffd8 	bl	8003168 <RTC_Bcd2ToByte>
 80031b8:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031ba:	0030      	movs	r0, r6
 80031bc:	f7ff ffd4 	bl	8003168 <RTC_Bcd2ToByte>
 80031c0:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031c2:	0028      	movs	r0, r5
 80031c4:	f7ff ffd0 	bl	8003168 <RTC_Bcd2ToByte>
 80031c8:	70a0      	strb	r0, [r4, #2]
}
 80031ca:	2000      	movs	r0, #0
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	007f7f7f 	.word	0x007f7f7f

080031d4 <HAL_RTC_GetDate>:
{
 80031d4:	b570      	push	{r4, r5, r6, lr}
 80031d6:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80031d8:	6803      	ldr	r3, [r0, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RTC_GetDate+0x44>)
 80031de:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80031e0:	0c18      	lsrs	r0, r3, #16
 80031e2:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80031e4:	0a19      	lsrs	r1, r3, #8
 80031e6:	261f      	movs	r6, #31
 80031e8:	400e      	ands	r6, r1
 80031ea:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80031ec:	253f      	movs	r5, #63	; 0x3f
 80031ee:	401d      	ands	r5, r3
 80031f0:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80031f2:	0b5b      	lsrs	r3, r3, #13
 80031f4:	2107      	movs	r1, #7
 80031f6:	400b      	ands	r3, r1
 80031f8:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d10a      	bne.n	8003214 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80031fe:	f7ff ffb3 	bl	8003168 <RTC_Bcd2ToByte>
 8003202:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003204:	0030      	movs	r0, r6
 8003206:	f7ff ffaf 	bl	8003168 <RTC_Bcd2ToByte>
 800320a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800320c:	0028      	movs	r0, r5
 800320e:	f7ff ffab 	bl	8003168 <RTC_Bcd2ToByte>
 8003212:	70a0      	strb	r0, [r4, #2]
}
 8003214:	2000      	movs	r0, #0
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	00ffff3f 	.word	0x00ffff3f

0800321c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	6a03      	ldr	r3, [r0, #32]
 8003220:	2201      	movs	r2, #1
 8003222:	4393      	bics	r3, r2
 8003224:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003228:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800322a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800322c:	4d15      	ldr	r5, [pc, #84]	; (8003284 <TIM_OC1_SetConfig+0x68>)
 800322e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	680d      	ldr	r5, [r1, #0]
 8003232:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003234:	2502      	movs	r5, #2
 8003236:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003238:	688d      	ldr	r5, [r1, #8]
 800323a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800323c:	4d12      	ldr	r5, [pc, #72]	; (8003288 <TIM_OC1_SetConfig+0x6c>)
 800323e:	42a8      	cmp	r0, r5
 8003240:	d005      	beq.n	800324e <TIM_OC1_SetConfig+0x32>
 8003242:	4d12      	ldr	r5, [pc, #72]	; (800328c <TIM_OC1_SetConfig+0x70>)
 8003244:	42a8      	cmp	r0, r5
 8003246:	d002      	beq.n	800324e <TIM_OC1_SetConfig+0x32>
 8003248:	4d11      	ldr	r5, [pc, #68]	; (8003290 <TIM_OC1_SetConfig+0x74>)
 800324a:	42a8      	cmp	r0, r5
 800324c:	d105      	bne.n	800325a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800324e:	2508      	movs	r5, #8
 8003250:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003252:	68cd      	ldr	r5, [r1, #12]
 8003254:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003256:	2504      	movs	r5, #4
 8003258:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	4d0b      	ldr	r5, [pc, #44]	; (8003288 <TIM_OC1_SetConfig+0x6c>)
 800325c:	42a8      	cmp	r0, r5
 800325e:	d005      	beq.n	800326c <TIM_OC1_SetConfig+0x50>
 8003260:	4d0a      	ldr	r5, [pc, #40]	; (800328c <TIM_OC1_SetConfig+0x70>)
 8003262:	42a8      	cmp	r0, r5
 8003264:	d002      	beq.n	800326c <TIM_OC1_SetConfig+0x50>
 8003266:	4d0a      	ldr	r5, [pc, #40]	; (8003290 <TIM_OC1_SetConfig+0x74>)
 8003268:	42a8      	cmp	r0, r5
 800326a:	d105      	bne.n	8003278 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800326c:	4d09      	ldr	r5, [pc, #36]	; (8003294 <TIM_OC1_SetConfig+0x78>)
 800326e:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003270:	694d      	ldr	r5, [r1, #20]
 8003272:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003274:	698d      	ldr	r5, [r1, #24]
 8003276:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800327c:	684a      	ldr	r2, [r1, #4]
 800327e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003280:	6203      	str	r3, [r0, #32]
}
 8003282:	bd30      	pop	{r4, r5, pc}
 8003284:	fffeff8c 	.word	0xfffeff8c
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40014400 	.word	0x40014400
 8003290:	40014800 	.word	0x40014800
 8003294:	fffffcff 	.word	0xfffffcff

08003298 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003298:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329a:	6a03      	ldr	r3, [r0, #32]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <TIM_OC3_SetConfig+0x68>)
 800329e:	4013      	ands	r3, r2
 80032a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a8:	4d16      	ldr	r5, [pc, #88]	; (8003304 <TIM_OC3_SetConfig+0x6c>)
 80032aa:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	680e      	ldr	r6, [r1, #0]
 80032ae:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b0:	4a15      	ldr	r2, [pc, #84]	; (8003308 <TIM_OC3_SetConfig+0x70>)
 80032b2:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032b4:	688a      	ldr	r2, [r1, #8]
 80032b6:	0212      	lsls	r2, r2, #8
 80032b8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <TIM_OC3_SetConfig+0x74>)
 80032bc:	4290      	cmp	r0, r2
 80032be:	d016      	beq.n	80032ee <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <TIM_OC3_SetConfig+0x74>)
 80032c2:	4290      	cmp	r0, r2
 80032c4:	d005      	beq.n	80032d2 <TIM_OC3_SetConfig+0x3a>
 80032c6:	4a12      	ldr	r2, [pc, #72]	; (8003310 <TIM_OC3_SetConfig+0x78>)
 80032c8:	4290      	cmp	r0, r2
 80032ca:	d002      	beq.n	80032d2 <TIM_OC3_SetConfig+0x3a>
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <TIM_OC3_SetConfig+0x7c>)
 80032ce:	4290      	cmp	r0, r2
 80032d0:	d107      	bne.n	80032e2 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032d2:	4a11      	ldr	r2, [pc, #68]	; (8003318 <TIM_OC3_SetConfig+0x80>)
 80032d4:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d6:	694c      	ldr	r4, [r1, #20]
 80032d8:	0124      	lsls	r4, r4, #4
 80032da:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032dc:	698a      	ldr	r2, [r1, #24]
 80032de:	0115      	lsls	r5, r2, #4
 80032e0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e4:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e6:	684a      	ldr	r2, [r1, #4]
 80032e8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	6203      	str	r3, [r0, #32]
}
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <TIM_OC3_SetConfig+0x84>)
 80032f0:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f2:	68cb      	ldr	r3, [r1, #12]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <TIM_OC3_SetConfig+0x88>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	e7e0      	b.n	80032c0 <TIM_OC3_SetConfig+0x28>
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	fffffeff 	.word	0xfffffeff
 8003304:	fffeff8c 	.word	0xfffeff8c
 8003308:	fffffdff 	.word	0xfffffdff
 800330c:	40012c00 	.word	0x40012c00
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	ffffcfff 	.word	0xffffcfff
 800331c:	fffff7ff 	.word	0xfffff7ff
 8003320:	fffffbff 	.word	0xfffffbff

08003324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003326:	6a03      	ldr	r3, [r0, #32]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <TIM_OC4_SetConfig+0x4c>)
 800332a:	4013      	ands	r3, r2
 800332c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003332:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003334:	4c0f      	ldr	r4, [pc, #60]	; (8003374 <TIM_OC4_SetConfig+0x50>)
 8003336:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	680c      	ldr	r4, [r1, #0]
 800333a:	0224      	lsls	r4, r4, #8
 800333c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800333e:	4c0e      	ldr	r4, [pc, #56]	; (8003378 <TIM_OC4_SetConfig+0x54>)
 8003340:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003342:	688b      	ldr	r3, [r1, #8]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	4c0c      	ldr	r4, [pc, #48]	; (800337c <TIM_OC4_SetConfig+0x58>)
 800334a:	42a0      	cmp	r0, r4
 800334c:	d005      	beq.n	800335a <TIM_OC4_SetConfig+0x36>
 800334e:	4c0c      	ldr	r4, [pc, #48]	; (8003380 <TIM_OC4_SetConfig+0x5c>)
 8003350:	42a0      	cmp	r0, r4
 8003352:	d002      	beq.n	800335a <TIM_OC4_SetConfig+0x36>
 8003354:	4c0b      	ldr	r4, [pc, #44]	; (8003384 <TIM_OC4_SetConfig+0x60>)
 8003356:	42a0      	cmp	r0, r4
 8003358:	d104      	bne.n	8003364 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800335a:	4c0b      	ldr	r4, [pc, #44]	; (8003388 <TIM_OC4_SetConfig+0x64>)
 800335c:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800335e:	694c      	ldr	r4, [r1, #20]
 8003360:	01a4      	lsls	r4, r4, #6
 8003362:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003364:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003366:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003368:	684a      	ldr	r2, [r1, #4]
 800336a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336c:	6203      	str	r3, [r0, #32]
}
 800336e:	bd30      	pop	{r4, r5, pc}
 8003370:	ffffefff 	.word	0xffffefff
 8003374:	feff8cff 	.word	0xfeff8cff
 8003378:	ffffdfff 	.word	0xffffdfff
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40014400 	.word	0x40014400
 8003384:	40014800 	.word	0x40014800
 8003388:	ffffbfff 	.word	0xffffbfff

0800338c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800338e:	6a03      	ldr	r3, [r0, #32]
 8003390:	4a11      	ldr	r2, [pc, #68]	; (80033d8 <TIM_OC5_SetConfig+0x4c>)
 8003392:	4013      	ands	r3, r2
 8003394:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800339a:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800339c:	4d0f      	ldr	r5, [pc, #60]	; (80033dc <TIM_OC5_SetConfig+0x50>)
 800339e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	680d      	ldr	r5, [r1, #0]
 80033a2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033a4:	4d0e      	ldr	r5, [pc, #56]	; (80033e0 <TIM_OC5_SetConfig+0x54>)
 80033a6:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033a8:	688b      	ldr	r3, [r1, #8]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ae:	4d0d      	ldr	r5, [pc, #52]	; (80033e4 <TIM_OC5_SetConfig+0x58>)
 80033b0:	42a8      	cmp	r0, r5
 80033b2:	d005      	beq.n	80033c0 <TIM_OC5_SetConfig+0x34>
 80033b4:	4d0c      	ldr	r5, [pc, #48]	; (80033e8 <TIM_OC5_SetConfig+0x5c>)
 80033b6:	42a8      	cmp	r0, r5
 80033b8:	d002      	beq.n	80033c0 <TIM_OC5_SetConfig+0x34>
 80033ba:	4d0c      	ldr	r5, [pc, #48]	; (80033ec <TIM_OC5_SetConfig+0x60>)
 80033bc:	42a8      	cmp	r0, r5
 80033be:	d104      	bne.n	80033ca <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033c0:	4d05      	ldr	r5, [pc, #20]	; (80033d8 <TIM_OC5_SetConfig+0x4c>)
 80033c2:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033c4:	694d      	ldr	r5, [r1, #20]
 80033c6:	022d      	lsls	r5, r5, #8
 80033c8:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033cc:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033ce:	684a      	ldr	r2, [r1, #4]
 80033d0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d2:	6203      	str	r3, [r0, #32]
}
 80033d4:	bd30      	pop	{r4, r5, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	fffeffff 	.word	0xfffeffff
 80033dc:	fffeff8f 	.word	0xfffeff8f
 80033e0:	fffdffff 	.word	0xfffdffff
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800

080033f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80033f2:	6a03      	ldr	r3, [r0, #32]
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <TIM_OC6_SetConfig+0x4c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033fe:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003400:	4c0f      	ldr	r4, [pc, #60]	; (8003440 <TIM_OC6_SetConfig+0x50>)
 8003402:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003404:	680c      	ldr	r4, [r1, #0]
 8003406:	0224      	lsls	r4, r4, #8
 8003408:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800340a:	4c0e      	ldr	r4, [pc, #56]	; (8003444 <TIM_OC6_SetConfig+0x54>)
 800340c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800340e:	688b      	ldr	r3, [r1, #8]
 8003410:	051b      	lsls	r3, r3, #20
 8003412:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	4c0c      	ldr	r4, [pc, #48]	; (8003448 <TIM_OC6_SetConfig+0x58>)
 8003416:	42a0      	cmp	r0, r4
 8003418:	d005      	beq.n	8003426 <TIM_OC6_SetConfig+0x36>
 800341a:	4c0c      	ldr	r4, [pc, #48]	; (800344c <TIM_OC6_SetConfig+0x5c>)
 800341c:	42a0      	cmp	r0, r4
 800341e:	d002      	beq.n	8003426 <TIM_OC6_SetConfig+0x36>
 8003420:	4c0b      	ldr	r4, [pc, #44]	; (8003450 <TIM_OC6_SetConfig+0x60>)
 8003422:	42a0      	cmp	r0, r4
 8003424:	d104      	bne.n	8003430 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003426:	4c0b      	ldr	r4, [pc, #44]	; (8003454 <TIM_OC6_SetConfig+0x64>)
 8003428:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800342a:	694c      	ldr	r4, [r1, #20]
 800342c:	02a4      	lsls	r4, r4, #10
 800342e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003430:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003432:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003434:	684a      	ldr	r2, [r1, #4]
 8003436:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	6203      	str	r3, [r0, #32]
}
 800343a:	bd30      	pop	{r4, r5, pc}
 800343c:	ffefffff 	.word	0xffefffff
 8003440:	feff8fff 	.word	0xfeff8fff
 8003444:	ffdfffff 	.word	0xffdfffff
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	fffbffff 	.word	0xfffbffff

08003458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800345a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345c:	6a04      	ldr	r4, [r0, #32]
 800345e:	2501      	movs	r5, #1
 8003460:	43ac      	bics	r4, r5
 8003462:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003464:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003466:	35ef      	adds	r5, #239	; 0xef
 8003468:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346e:	240a      	movs	r4, #10
 8003470:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003472:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003474:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003476:	6203      	str	r3, [r0, #32]
}
 8003478:	bd30      	pop	{r4, r5, pc}
	...

0800347c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347e:	6a03      	ldr	r3, [r0, #32]
 8003480:	2410      	movs	r4, #16
 8003482:	43a3      	bics	r3, r4
 8003484:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003488:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348a:	4d05      	ldr	r5, [pc, #20]	; (80034a0 <TIM_TI2_ConfigInputStage+0x24>)
 800348c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348e:	0312      	lsls	r2, r2, #12
 8003490:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003492:	24a0      	movs	r4, #160	; 0xa0
 8003494:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	0109      	lsls	r1, r1, #4
 8003498:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800349c:	6201      	str	r1, [r0, #32]
}
 800349e:	bd30      	pop	{r4, r5, pc}
 80034a0:	ffff0fff 	.word	0xffff0fff

080034a4 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034a4:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a6:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <TIM_ITRx_SetConfig+0x10>)
 80034a8:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034aa:	430b      	orrs	r3, r1
 80034ac:	2107      	movs	r1, #7
 80034ae:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b0:	6083      	str	r3, [r0, #8]
}
 80034b2:	4770      	bx	lr
 80034b4:	ffcfff8f 	.word	0xffcfff8f

080034b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80034b8:	233d      	movs	r3, #61	; 0x3d
 80034ba:	5cc3      	ldrb	r3, [r0, r3]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d122      	bne.n	8003506 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	333c      	adds	r3, #60	; 0x3c
 80034c2:	2202      	movs	r2, #2
 80034c4:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c6:	6802      	ldr	r2, [r0, #0]
 80034c8:	68d3      	ldr	r3, [r2, #12]
 80034ca:	2101      	movs	r1, #1
 80034cc:	430b      	orrs	r3, r1
 80034ce:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d0:	6803      	ldr	r3, [r0, #0]
 80034d2:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_TIM_Base_Start_IT+0x5c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d008      	beq.n	80034ea <HAL_TIM_Base_Start_IT+0x32>
 80034d8:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_TIM_Base_Start_IT+0x60>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d005      	beq.n	80034ea <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80034e6:	2000      	movs	r0, #0
 80034e8:	e00e      	b.n	8003508 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	490b      	ldr	r1, [pc, #44]	; (800351c <HAL_TIM_Base_Start_IT+0x64>)
 80034ee:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	2a06      	cmp	r2, #6
 80034f2:	d00a      	beq.n	800350a <HAL_TIM_Base_Start_IT+0x52>
 80034f4:	3907      	subs	r1, #7
 80034f6:	428a      	cmp	r2, r1
 80034f8:	d009      	beq.n	800350e <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2101      	movs	r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003502:	2000      	movs	r0, #0
 8003504:	e000      	b.n	8003508 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003506:	2001      	movs	r0, #1
}
 8003508:	4770      	bx	lr
  return HAL_OK;
 800350a:	2000      	movs	r0, #0
 800350c:	e7fc      	b.n	8003508 <HAL_TIM_Base_Start_IT+0x50>
 800350e:	2000      	movs	r0, #0
 8003510:	e7fa      	b.n	8003508 <HAL_TIM_Base_Start_IT+0x50>
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40000400 	.word	0x40000400
 800351c:	00010007 	.word	0x00010007

08003520 <HAL_TIM_PWM_MspInit>:
}
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_IC_CaptureCallback>:
}
 8003524:	4770      	bx	lr

08003526 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_TriggerCallback>:
}
 8003528:	4770      	bx	lr
	...

0800352c <HAL_TIM_IRQHandler>:
{
 800352c:	b510      	push	{r4, lr}
 800352e:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003530:	6803      	ldr	r3, [r0, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	0792      	lsls	r2, r2, #30
 8003536:	d50f      	bpl.n	8003558 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	0792      	lsls	r2, r2, #30
 800353c:	d50c      	bpl.n	8003558 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800353e:	2203      	movs	r2, #3
 8003540:	4252      	negs	r2, r2
 8003542:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003544:	2301      	movs	r3, #1
 8003546:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	6803      	ldr	r3, [r0, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	079b      	lsls	r3, r3, #30
 800354e:	d06a      	beq.n	8003626 <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8003550:	f7ff ffe8 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003554:	2300      	movs	r3, #0
 8003556:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	0752      	lsls	r2, r2, #29
 800355e:	d512      	bpl.n	8003586 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	0752      	lsls	r2, r2, #29
 8003564:	d50f      	bpl.n	8003586 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003566:	2205      	movs	r2, #5
 8003568:	4252      	negs	r2, r2
 800356a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356c:	2302      	movs	r3, #2
 800356e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	23c0      	movs	r3, #192	; 0xc0
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	421a      	tst	r2, r3
 800357a:	d05a      	beq.n	8003632 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 800357c:	0020      	movs	r0, r4
 800357e:	f7ff ffd1 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	2300      	movs	r3, #0
 8003584:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	0712      	lsls	r2, r2, #28
 800358c:	d510      	bpl.n	80035b0 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	0712      	lsls	r2, r2, #28
 8003592:	d50d      	bpl.n	80035b0 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003594:	2209      	movs	r2, #9
 8003596:	4252      	negs	r2, r2
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800359a:	2304      	movs	r3, #4
 800359c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	079b      	lsls	r3, r3, #30
 80035a4:	d04c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80035a6:	0020      	movs	r0, r4
 80035a8:	f7ff ffbc 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	2300      	movs	r3, #0
 80035ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	06d2      	lsls	r2, r2, #27
 80035b6:	d512      	bpl.n	80035de <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	06d2      	lsls	r2, r2, #27
 80035bc:	d50f      	bpl.n	80035de <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035be:	2211      	movs	r2, #17
 80035c0:	4252      	negs	r2, r2
 80035c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c4:	2308      	movs	r3, #8
 80035c6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	23c0      	movs	r3, #192	; 0xc0
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	421a      	tst	r2, r3
 80035d2:	d03c      	beq.n	800364e <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 80035d4:	0020      	movs	r0, r4
 80035d6:	f7ff ffa5 	bl	8003524 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	2300      	movs	r3, #0
 80035dc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	07d2      	lsls	r2, r2, #31
 80035e4:	d502      	bpl.n	80035ec <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	07d2      	lsls	r2, r2, #31
 80035ea:	d437      	bmi.n	800365c <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	0612      	lsls	r2, r2, #24
 80035f2:	d502      	bpl.n	80035fa <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	0612      	lsls	r2, r2, #24
 80035f8:	d437      	bmi.n	800366a <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	05d2      	lsls	r2, r2, #23
 8003600:	d502      	bpl.n	8003608 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	0612      	lsls	r2, r2, #24
 8003606:	d437      	bmi.n	8003678 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	0652      	lsls	r2, r2, #25
 800360e:	d502      	bpl.n	8003616 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	0652      	lsls	r2, r2, #25
 8003614:	d436      	bmi.n	8003684 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	0692      	lsls	r2, r2, #26
 800361c:	d502      	bpl.n	8003624 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	0692      	lsls	r2, r2, #26
 8003622:	d436      	bmi.n	8003692 <HAL_TIM_IRQHandler+0x166>
}
 8003624:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	f7ff ff7c 	bl	8003522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362a:	0020      	movs	r0, r4
 800362c:	f7ff ff7b 	bl	8003526 <HAL_TIM_PWM_PulseFinishedCallback>
 8003630:	e790      	b.n	8003554 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	0020      	movs	r0, r4
 8003634:	f7ff ff75 	bl	8003522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	0020      	movs	r0, r4
 800363a:	f7ff ff74 	bl	8003526 <HAL_TIM_PWM_PulseFinishedCallback>
 800363e:	e7a0      	b.n	8003582 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003640:	0020      	movs	r0, r4
 8003642:	f7ff ff6e 	bl	8003522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003646:	0020      	movs	r0, r4
 8003648:	f7ff ff6d 	bl	8003526 <HAL_TIM_PWM_PulseFinishedCallback>
 800364c:	e7ae      	b.n	80035ac <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	0020      	movs	r0, r4
 8003650:	f7ff ff67 	bl	8003522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	0020      	movs	r0, r4
 8003656:	f7ff ff66 	bl	8003526 <HAL_TIM_PWM_PulseFinishedCallback>
 800365a:	e7be      	b.n	80035da <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800365c:	2202      	movs	r2, #2
 800365e:	4252      	negs	r2, r2
 8003660:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	0020      	movs	r0, r4
 8003664:	f7fd ff56 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
 8003668:	e7c0      	b.n	80035ec <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800366a:	2281      	movs	r2, #129	; 0x81
 800366c:	4252      	negs	r2, r2
 800366e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003670:	0020      	movs	r0, r4
 8003672:	f000 fb6e 	bl	8003d52 <HAL_TIMEx_BreakCallback>
 8003676:	e7c0      	b.n	80035fa <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_TIM_IRQHandler+0x174>)
 800367a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800367c:	0020      	movs	r0, r4
 800367e:	f000 fb69 	bl	8003d54 <HAL_TIMEx_Break2Callback>
 8003682:	e7c1      	b.n	8003608 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003684:	2241      	movs	r2, #65	; 0x41
 8003686:	4252      	negs	r2, r2
 8003688:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800368a:	0020      	movs	r0, r4
 800368c:	f7ff ff4c 	bl	8003528 <HAL_TIM_TriggerCallback>
 8003690:	e7c1      	b.n	8003616 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	4252      	negs	r2, r2
 8003696:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003698:	0020      	movs	r0, r4
 800369a:	f000 fb59 	bl	8003d50 <HAL_TIMEx_CommutCallback>
}
 800369e:	e7c1      	b.n	8003624 <HAL_TIM_IRQHandler+0xf8>
 80036a0:	fffffeff 	.word	0xfffffeff

080036a4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80036a4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <TIM_Base_SetConfig+0x6c>)
 80036a8:	4290      	cmp	r0, r2
 80036aa:	d002      	beq.n	80036b2 <TIM_Base_SetConfig+0xe>
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_Base_SetConfig+0x70>)
 80036ae:	4290      	cmp	r0, r2
 80036b0:	d103      	bne.n	80036ba <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b2:	2270      	movs	r2, #112	; 0x70
 80036b4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80036b6:	684a      	ldr	r2, [r1, #4]
 80036b8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	4a15      	ldr	r2, [pc, #84]	; (8003710 <TIM_Base_SetConfig+0x6c>)
 80036bc:	4290      	cmp	r0, r2
 80036be:	d00b      	beq.n	80036d8 <TIM_Base_SetConfig+0x34>
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <TIM_Base_SetConfig+0x70>)
 80036c2:	4290      	cmp	r0, r2
 80036c4:	d008      	beq.n	80036d8 <TIM_Base_SetConfig+0x34>
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <TIM_Base_SetConfig+0x74>)
 80036c8:	4290      	cmp	r0, r2
 80036ca:	d005      	beq.n	80036d8 <TIM_Base_SetConfig+0x34>
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <TIM_Base_SetConfig+0x78>)
 80036ce:	4290      	cmp	r0, r2
 80036d0:	d002      	beq.n	80036d8 <TIM_Base_SetConfig+0x34>
 80036d2:	4a13      	ldr	r2, [pc, #76]	; (8003720 <TIM_Base_SetConfig+0x7c>)
 80036d4:	4290      	cmp	r0, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d8:	4a12      	ldr	r2, [pc, #72]	; (8003724 <TIM_Base_SetConfig+0x80>)
 80036da:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036dc:	68ca      	ldr	r2, [r1, #12]
 80036de:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	4393      	bics	r3, r2
 80036e4:	694a      	ldr	r2, [r1, #20]
 80036e6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80036e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ea:	688b      	ldr	r3, [r1, #8]
 80036ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ee:	680b      	ldr	r3, [r1, #0]
 80036f0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <TIM_Base_SetConfig+0x6c>)
 80036f4:	4298      	cmp	r0, r3
 80036f6:	d005      	beq.n	8003704 <TIM_Base_SetConfig+0x60>
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <TIM_Base_SetConfig+0x78>)
 80036fa:	4298      	cmp	r0, r3
 80036fc:	d002      	beq.n	8003704 <TIM_Base_SetConfig+0x60>
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <TIM_Base_SetConfig+0x7c>)
 8003700:	4298      	cmp	r0, r3
 8003702:	d101      	bne.n	8003708 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	690b      	ldr	r3, [r1, #16]
 8003706:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003708:	2301      	movs	r3, #1
 800370a:	6143      	str	r3, [r0, #20]
}
 800370c:	4770      	bx	lr
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40000400 	.word	0x40000400
 8003718:	40002000 	.word	0x40002000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800
 8003724:	fffffcff 	.word	0xfffffcff

08003728 <HAL_TIM_Base_Init>:
{
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800372c:	d02a      	beq.n	8003784 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800372e:	233d      	movs	r3, #61	; 0x3d
 8003730:	5cc3      	ldrb	r3, [r0, r3]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d020      	beq.n	8003778 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	253d      	movs	r5, #61	; 0x3d
 8003738:	2302      	movs	r3, #2
 800373a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	0021      	movs	r1, r4
 800373e:	c901      	ldmia	r1!, {r0}
 8003740:	f7ff ffb0 	bl	80036a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	2301      	movs	r3, #1
 8003746:	2248      	movs	r2, #72	; 0x48
 8003748:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374a:	3a0a      	subs	r2, #10
 800374c:	54a3      	strb	r3, [r4, r2]
 800374e:	3201      	adds	r2, #1
 8003750:	54a3      	strb	r3, [r4, r2]
 8003752:	3201      	adds	r2, #1
 8003754:	54a3      	strb	r3, [r4, r2]
 8003756:	3201      	adds	r2, #1
 8003758:	54a3      	strb	r3, [r4, r2]
 800375a:	3201      	adds	r2, #1
 800375c:	54a3      	strb	r3, [r4, r2]
 800375e:	3201      	adds	r2, #1
 8003760:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	3201      	adds	r2, #1
 8003764:	54a3      	strb	r3, [r4, r2]
 8003766:	3201      	adds	r2, #1
 8003768:	54a3      	strb	r3, [r4, r2]
 800376a:	3201      	adds	r2, #1
 800376c:	54a3      	strb	r3, [r4, r2]
 800376e:	3201      	adds	r2, #1
 8003770:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003772:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003774:	2000      	movs	r0, #0
}
 8003776:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003778:	333c      	adds	r3, #60	; 0x3c
 800377a:	2200      	movs	r2, #0
 800377c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800377e:	f7fe fa6b 	bl	8001c58 <HAL_TIM_Base_MspInit>
 8003782:	e7d8      	b.n	8003736 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8003784:	2001      	movs	r0, #1
 8003786:	e7f6      	b.n	8003776 <HAL_TIM_Base_Init+0x4e>

08003788 <HAL_TIM_PWM_Init>:
{
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800378c:	d02a      	beq.n	80037e4 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	233d      	movs	r3, #61	; 0x3d
 8003790:	5cc3      	ldrb	r3, [r0, r3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d020      	beq.n	80037d8 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8003796:	253d      	movs	r5, #61	; 0x3d
 8003798:	2302      	movs	r3, #2
 800379a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379c:	0021      	movs	r1, r4
 800379e:	c901      	ldmia	r1!, {r0}
 80037a0:	f7ff ff80 	bl	80036a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	2301      	movs	r3, #1
 80037a6:	2248      	movs	r2, #72	; 0x48
 80037a8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	3a0a      	subs	r2, #10
 80037ac:	54a3      	strb	r3, [r4, r2]
 80037ae:	3201      	adds	r2, #1
 80037b0:	54a3      	strb	r3, [r4, r2]
 80037b2:	3201      	adds	r2, #1
 80037b4:	54a3      	strb	r3, [r4, r2]
 80037b6:	3201      	adds	r2, #1
 80037b8:	54a3      	strb	r3, [r4, r2]
 80037ba:	3201      	adds	r2, #1
 80037bc:	54a3      	strb	r3, [r4, r2]
 80037be:	3201      	adds	r2, #1
 80037c0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	3201      	adds	r2, #1
 80037c4:	54a3      	strb	r3, [r4, r2]
 80037c6:	3201      	adds	r2, #1
 80037c8:	54a3      	strb	r3, [r4, r2]
 80037ca:	3201      	adds	r2, #1
 80037cc:	54a3      	strb	r3, [r4, r2]
 80037ce:	3201      	adds	r2, #1
 80037d0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80037d2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80037d4:	2000      	movs	r0, #0
}
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80037d8:	333c      	adds	r3, #60	; 0x3c
 80037da:	2200      	movs	r2, #0
 80037dc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80037de:	f7ff fe9f 	bl	8003520 <HAL_TIM_PWM_MspInit>
 80037e2:	e7d8      	b.n	8003796 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80037e4:	2001      	movs	r0, #1
 80037e6:	e7f6      	b.n	80037d6 <HAL_TIM_PWM_Init+0x4e>

080037e8 <TIM_OC2_SetConfig>:
{
 80037e8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ea:	6a03      	ldr	r3, [r0, #32]
 80037ec:	2210      	movs	r2, #16
 80037ee:	4393      	bics	r3, r2
 80037f0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80037f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80037f4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80037f6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <TIM_OC2_SetConfig+0x6c>)
 80037fa:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037fc:	680a      	ldr	r2, [r1, #0]
 80037fe:	0212      	lsls	r2, r2, #8
 8003800:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8003802:	2220      	movs	r2, #32
 8003804:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003806:	688a      	ldr	r2, [r1, #8]
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <TIM_OC2_SetConfig+0x70>)
 800380e:	4290      	cmp	r0, r2
 8003810:	d016      	beq.n	8003840 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <TIM_OC2_SetConfig+0x70>)
 8003814:	4290      	cmp	r0, r2
 8003816:	d005      	beq.n	8003824 <TIM_OC2_SetConfig+0x3c>
 8003818:	4a10      	ldr	r2, [pc, #64]	; (800385c <TIM_OC2_SetConfig+0x74>)
 800381a:	4290      	cmp	r0, r2
 800381c:	d002      	beq.n	8003824 <TIM_OC2_SetConfig+0x3c>
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <TIM_OC2_SetConfig+0x78>)
 8003820:	4290      	cmp	r0, r2
 8003822:	d107      	bne.n	8003834 <TIM_OC2_SetConfig+0x4c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <TIM_OC2_SetConfig+0x7c>)
 8003826:	402a      	ands	r2, r5
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003828:	694d      	ldr	r5, [r1, #20]
 800382a:	00ad      	lsls	r5, r5, #2
 800382c:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800382e:	698a      	ldr	r2, [r1, #24]
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8003834:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003836:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003838:	684a      	ldr	r2, [r1, #4]
 800383a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800383c:	6203      	str	r3, [r0, #32]
}
 800383e:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	4393      	bics	r3, r2
 8003844:	001a      	movs	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003846:	68cb      	ldr	r3, [r1, #12]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	4393      	bics	r3, r2
 8003850:	e7df      	b.n	8003812 <TIM_OC2_SetConfig+0x2a>
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	feff8cff 	.word	0xfeff8cff
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	fffff3ff 	.word	0xfffff3ff

08003868 <HAL_TIM_PWM_ConfigChannel>:
{
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	0004      	movs	r4, r0
 800386c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800386e:	233c      	movs	r3, #60	; 0x3c
 8003870:	5cc3      	ldrb	r3, [r0, r3]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d100      	bne.n	8003878 <HAL_TIM_PWM_ConfigChannel+0x10>
 8003876:	e092      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x136>
 8003878:	233c      	movs	r3, #60	; 0x3c
 800387a:	2101      	movs	r1, #1
 800387c:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800387e:	2a14      	cmp	r2, #20
 8003880:	d900      	bls.n	8003884 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8003882:	e087      	b.n	8003994 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8003884:	0092      	lsls	r2, r2, #2
 8003886:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8003888:	589b      	ldr	r3, [r3, r2]
 800388a:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800388c:	0029      	movs	r1, r5
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	f7ff fcc4 	bl	800321c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003894:	6822      	ldr	r2, [r4, #0]
 8003896:	6993      	ldr	r3, [r2, #24]
 8003898:	2108      	movs	r1, #8
 800389a:	430b      	orrs	r3, r1
 800389c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800389e:	6822      	ldr	r2, [r4, #0]
 80038a0:	6993      	ldr	r3, [r2, #24]
 80038a2:	3904      	subs	r1, #4
 80038a4:	438b      	bics	r3, r1
 80038a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6993      	ldr	r3, [r2, #24]
 80038ac:	6929      	ldr	r1, [r5, #16]
 80038ae:	430b      	orrs	r3, r1
 80038b0:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2000      	movs	r0, #0
      break;
 80038b4:	e06f      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038b6:	0029      	movs	r1, r5
 80038b8:	6800      	ldr	r0, [r0, #0]
 80038ba:	f7ff ff95 	bl	80037e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	6991      	ldr	r1, [r2, #24]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	6993      	ldr	r3, [r2, #24]
 80038ce:	4936      	ldr	r1, [pc, #216]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x140>)
 80038d0:	400b      	ands	r3, r1
 80038d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d4:	6821      	ldr	r1, [r4, #0]
 80038d6:	698b      	ldr	r3, [r1, #24]
 80038d8:	692a      	ldr	r2, [r5, #16]
 80038da:	0212      	lsls	r2, r2, #8
 80038dc:	4313      	orrs	r3, r2
 80038de:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	2000      	movs	r0, #0
      break;
 80038e2:	e058      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e4:	0029      	movs	r1, r5
 80038e6:	6800      	ldr	r0, [r0, #0]
 80038e8:	f7ff fcd6 	bl	8003298 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	69d3      	ldr	r3, [r2, #28]
 80038f0:	2108      	movs	r1, #8
 80038f2:	430b      	orrs	r3, r1
 80038f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	69d3      	ldr	r3, [r2, #28]
 80038fa:	3904      	subs	r1, #4
 80038fc:	438b      	bics	r3, r1
 80038fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	69d3      	ldr	r3, [r2, #28]
 8003904:	6929      	ldr	r1, [r5, #16]
 8003906:	430b      	orrs	r3, r1
 8003908:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2000      	movs	r0, #0
      break;
 800390c:	e043      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800390e:	0029      	movs	r1, r5
 8003910:	6800      	ldr	r0, [r0, #0]
 8003912:	f7ff fd07 	bl	8003324 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003916:	6822      	ldr	r2, [r4, #0]
 8003918:	69d1      	ldr	r1, [r2, #28]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	430b      	orrs	r3, r1
 8003920:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	69d3      	ldr	r3, [r2, #28]
 8003926:	4920      	ldr	r1, [pc, #128]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8003928:	400b      	ands	r3, r1
 800392a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	69cb      	ldr	r3, [r1, #28]
 8003930:	692a      	ldr	r2, [r5, #16]
 8003932:	0212      	lsls	r2, r2, #8
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2000      	movs	r0, #0
      break;
 800393a:	e02c      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800393c:	0029      	movs	r1, r5
 800393e:	6800      	ldr	r0, [r0, #0]
 8003940:	f7ff fd24 	bl	800338c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003948:	2108      	movs	r1, #8
 800394a:	430b      	orrs	r3, r1
 800394c:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003952:	3904      	subs	r1, #4
 8003954:	438b      	bics	r3, r1
 8003956:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800395c:	6929      	ldr	r1, [r5, #16]
 800395e:	430b      	orrs	r3, r1
 8003960:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2000      	movs	r0, #0
      break;
 8003964:	e017      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003966:	0029      	movs	r1, r5
 8003968:	6800      	ldr	r0, [r0, #0]
 800396a:	f7ff fd41 	bl	80033f0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	430b      	orrs	r3, r1
 8003978:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8003980:	400b      	ands	r3, r1
 8003982:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003984:	6821      	ldr	r1, [r4, #0]
 8003986:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003988:	692a      	ldr	r2, [r5, #16]
 800398a:	0212      	lsls	r2, r2, #8
 800398c:	4313      	orrs	r3, r2
 800398e:	654b      	str	r3, [r1, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003990:	2000      	movs	r0, #0
      break;
 8003992:	e000      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8003994:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003996:	233c      	movs	r3, #60	; 0x3c
 8003998:	2200      	movs	r2, #0
 800399a:	54e2      	strb	r2, [r4, r3]
}
 800399c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800399e:	2002      	movs	r0, #2
 80039a0:	e7fc      	b.n	800399c <HAL_TIM_PWM_ConfigChannel+0x134>
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	080053fc 	.word	0x080053fc
 80039a8:	fffffbff 	.word	0xfffffbff

080039ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ac:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ae:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039b0:	4d03      	ldr	r5, [pc, #12]	; (80039c0 <TIM_ETR_SetConfig+0x14>)
 80039b2:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	4313      	orrs	r3, r2
 80039b8:	430b      	orrs	r3, r1
 80039ba:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039bc:	6083      	str	r3, [r0, #8]
}
 80039be:	bd30      	pop	{r4, r5, pc}
 80039c0:	ffff00ff 	.word	0xffff00ff

080039c4 <HAL_TIM_ConfigClockSource>:
{
 80039c4:	b510      	push	{r4, lr}
 80039c6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80039c8:	233c      	movs	r3, #60	; 0x3c
 80039ca:	5cc3      	ldrb	r3, [r0, r3]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d100      	bne.n	80039d2 <HAL_TIM_ConfigClockSource+0xe>
 80039d0:	e078      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x100>
 80039d2:	233c      	movs	r3, #60	; 0x3c
 80039d4:	2201      	movs	r2, #1
 80039d6:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	3301      	adds	r3, #1
 80039da:	3201      	adds	r2, #1
 80039dc:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80039de:	6802      	ldr	r2, [r0, #0]
 80039e0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e2:	4839      	ldr	r0, [pc, #228]	; (8003ac8 <HAL_TIM_ConfigClockSource+0x104>)
 80039e4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80039e6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80039e8:	680b      	ldr	r3, [r1, #0]
 80039ea:	2b60      	cmp	r3, #96	; 0x60
 80039ec:	d050      	beq.n	8003a90 <HAL_TIM_ConfigClockSource+0xcc>
 80039ee:	d82a      	bhi.n	8003a46 <HAL_TIM_ConfigClockSource+0x82>
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d058      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xe2>
 80039f4:	d90c      	bls.n	8003a10 <HAL_TIM_ConfigClockSource+0x4c>
 80039f6:	2b50      	cmp	r3, #80	; 0x50
 80039f8:	d123      	bne.n	8003a42 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	68ca      	ldr	r2, [r1, #12]
 80039fc:	6849      	ldr	r1, [r1, #4]
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	f7ff fd2a 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a04:	2150      	movs	r1, #80	; 0x50
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	f7ff fd4c 	bl	80034a4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2000      	movs	r0, #0
      break;
 8003a0e:	e005      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8003a10:	2b20      	cmp	r3, #32
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x6e>
 8003a14:	d909      	bls.n	8003a2a <HAL_TIM_ConfigClockSource+0x66>
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d00b      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8003a1a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	233d      	movs	r3, #61	; 0x3d
 8003a1e:	2201      	movs	r2, #1
 8003a20:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8003a22:	3b01      	subs	r3, #1
 8003a24:	2200      	movs	r2, #0
 8003a26:	54e2      	strb	r2, [r4, r3]
}
 8003a28:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0x6e>
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d105      	bne.n	8003a3e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a32:	0019      	movs	r1, r3
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	f7ff fd35 	bl	80034a4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2000      	movs	r0, #0
      break;
 8003a3c:	e7ee      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7ec      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
 8003a42:	2001      	movs	r0, #1
 8003a44:	e7ea      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0152      	lsls	r2, r2, #5
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d036      	beq.n	8003abc <HAL_TIM_ConfigClockSource+0xf8>
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	0192      	lsls	r2, r2, #6
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10d      	bne.n	8003a72 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	68cb      	ldr	r3, [r1, #12]
 8003a58:	684a      	ldr	r2, [r1, #4]
 8003a5a:	6889      	ldr	r1, [r1, #8]
 8003a5c:	6820      	ldr	r0, [r4, #0]
 8003a5e:	f7ff ffa5 	bl	80039ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a62:	6822      	ldr	r2, [r4, #0]
 8003a64:	6891      	ldr	r1, [r2, #8]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	01db      	lsls	r3, r3, #7
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2000      	movs	r0, #0
      break;
 8003a70:	e7d4      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8003a72:	2b70      	cmp	r3, #112	; 0x70
 8003a74:	d124      	bne.n	8003ac0 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	68cb      	ldr	r3, [r1, #12]
 8003a78:	684a      	ldr	r2, [r1, #4]
 8003a7a:	6889      	ldr	r1, [r1, #8]
 8003a7c:	6820      	ldr	r0, [r4, #0]
 8003a7e:	f7ff ff95 	bl	80039ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a86:	2177      	movs	r1, #119	; 0x77
 8003a88:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003a8a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8c:	2000      	movs	r0, #0
      break;
 8003a8e:	e7c5      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a90:	68ca      	ldr	r2, [r1, #12]
 8003a92:	6849      	ldr	r1, [r1, #4]
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	f7ff fcf1 	bl	800347c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a9a:	2160      	movs	r1, #96	; 0x60
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	f7ff fd01 	bl	80034a4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2000      	movs	r0, #0
      break;
 8003aa4:	e7ba      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa6:	68ca      	ldr	r2, [r1, #12]
 8003aa8:	6849      	ldr	r1, [r1, #4]
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	f7ff fcd4 	bl	8003458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab0:	2140      	movs	r1, #64	; 0x40
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	f7ff fcf6 	bl	80034a4 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003ab8:	2000      	movs	r0, #0
      break;
 8003aba:	e7af      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8003abc:	2000      	movs	r0, #0
 8003abe:	e7ad      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	e7ab      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	e7af      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x64>
 8003ac8:	ffce0088 	.word	0xffce0088

08003acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003acc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ace:	231f      	movs	r3, #31
 8003ad0:	4019      	ands	r1, r3
 8003ad2:	2401      	movs	r4, #1
 8003ad4:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ad6:	6a03      	ldr	r3, [r0, #32]
 8003ad8:	43a3      	bics	r3, r4
 8003ada:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003adc:	6a03      	ldr	r3, [r0, #32]
 8003ade:	408a      	lsls	r2, r1
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	6203      	str	r3, [r0, #32]
}
 8003ae4:	bd10      	pop	{r4, pc}
	...

08003ae8 <HAL_TIM_PWM_Start>:
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aec:	2900      	cmp	r1, #0
 8003aee:	d12c      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x62>
 8003af0:	233e      	movs	r3, #62	; 0x3e
 8003af2:	5cc3      	ldrb	r3, [r0, r3]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	4193      	sbcs	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d179      	bne.n	8003bf4 <HAL_TIM_PWM_Start+0x10c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b00:	2900      	cmp	r1, #0
 8003b02:	d14d      	bne.n	8003ba0 <HAL_TIM_PWM_Start+0xb8>
 8003b04:	333e      	adds	r3, #62	; 0x3e
 8003b06:	2202      	movs	r2, #2
 8003b08:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	6820      	ldr	r0, [r4, #0]
 8003b0e:	f7ff ffdd 	bl	8003acc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	4a3a      	ldr	r2, [pc, #232]	; (8003c00 <HAL_TIM_PWM_Start+0x118>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d005      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x3e>
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_TIM_PWM_Start+0x11c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d002      	beq.n	8003b26 <HAL_TIM_PWM_Start+0x3e>
 8003b20:	4a39      	ldr	r2, [pc, #228]	; (8003c08 <HAL_TIM_PWM_Start+0x120>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d104      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	0212      	lsls	r2, r2, #8
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	4a33      	ldr	r2, [pc, #204]	; (8003c00 <HAL_TIM_PWM_Start+0x118>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04f      	beq.n	8003bd8 <HAL_TIM_PWM_Start+0xf0>
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_TIM_PWM_Start+0x124>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d04c      	beq.n	8003bd8 <HAL_TIM_PWM_Start+0xf0>
    __HAL_TIM_ENABLE(htim);
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b46:	2000      	movs	r0, #0
 8003b48:	e055      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x10e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b4a:	2904      	cmp	r1, #4
 8003b4c:	d00c      	beq.n	8003b68 <HAL_TIM_PWM_Start+0x80>
 8003b4e:	2908      	cmp	r1, #8
 8003b50:	d011      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x8e>
 8003b52:	290c      	cmp	r1, #12
 8003b54:	d016      	beq.n	8003b84 <HAL_TIM_PWM_Start+0x9c>
 8003b56:	2910      	cmp	r1, #16
 8003b58:	d01b      	beq.n	8003b92 <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	2343      	movs	r3, #67	; 0x43
 8003b5c:	5cc3      	ldrb	r3, [r0, r3]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	4193      	sbcs	r3, r2
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e7c9      	b.n	8003afc <HAL_TIM_PWM_Start+0x14>
 8003b68:	233f      	movs	r3, #63	; 0x3f
 8003b6a:	5cc3      	ldrb	r3, [r0, r3]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	1e5a      	subs	r2, r3, #1
 8003b70:	4193      	sbcs	r3, r2
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e7c2      	b.n	8003afc <HAL_TIM_PWM_Start+0x14>
 8003b76:	2340      	movs	r3, #64	; 0x40
 8003b78:	5cc3      	ldrb	r3, [r0, r3]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	1e5a      	subs	r2, r3, #1
 8003b7e:	4193      	sbcs	r3, r2
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e7bb      	b.n	8003afc <HAL_TIM_PWM_Start+0x14>
 8003b84:	2341      	movs	r3, #65	; 0x41
 8003b86:	5cc3      	ldrb	r3, [r0, r3]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	1e5a      	subs	r2, r3, #1
 8003b8c:	4193      	sbcs	r3, r2
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e7b4      	b.n	8003afc <HAL_TIM_PWM_Start+0x14>
 8003b92:	2342      	movs	r3, #66	; 0x42
 8003b94:	5cc3      	ldrb	r3, [r0, r3]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	4193      	sbcs	r3, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	e7ad      	b.n	8003afc <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba0:	2904      	cmp	r1, #4
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_PWM_Start+0xd0>
 8003ba4:	2908      	cmp	r1, #8
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0xd8>
 8003ba8:	290c      	cmp	r1, #12
 8003baa:	d00d      	beq.n	8003bc8 <HAL_TIM_PWM_Start+0xe0>
 8003bac:	2910      	cmp	r1, #16
 8003bae:	d00f      	beq.n	8003bd0 <HAL_TIM_PWM_Start+0xe8>
 8003bb0:	2343      	movs	r3, #67	; 0x43
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	54e2      	strb	r2, [r4, r3]
 8003bb6:	e7a8      	b.n	8003b0a <HAL_TIM_PWM_Start+0x22>
 8003bb8:	233f      	movs	r3, #63	; 0x3f
 8003bba:	2202      	movs	r2, #2
 8003bbc:	54e2      	strb	r2, [r4, r3]
 8003bbe:	e7a4      	b.n	8003b0a <HAL_TIM_PWM_Start+0x22>
 8003bc0:	2340      	movs	r3, #64	; 0x40
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	54e2      	strb	r2, [r4, r3]
 8003bc6:	e7a0      	b.n	8003b0a <HAL_TIM_PWM_Start+0x22>
 8003bc8:	2341      	movs	r3, #65	; 0x41
 8003bca:	2202      	movs	r2, #2
 8003bcc:	54e2      	strb	r2, [r4, r3]
 8003bce:	e79c      	b.n	8003b0a <HAL_TIM_PWM_Start+0x22>
 8003bd0:	2342      	movs	r3, #66	; 0x42
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	54e2      	strb	r2, [r4, r3]
 8003bd6:	e798      	b.n	8003b0a <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	490d      	ldr	r1, [pc, #52]	; (8003c10 <HAL_TIM_PWM_Start+0x128>)
 8003bdc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	2a06      	cmp	r2, #6
 8003be0:	d00a      	beq.n	8003bf8 <HAL_TIM_PWM_Start+0x110>
 8003be2:	3907      	subs	r1, #7
 8003be4:	428a      	cmp	r2, r1
 8003be6:	d009      	beq.n	8003bfc <HAL_TIM_PWM_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	2101      	movs	r1, #1
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x10e>
    return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
}
 8003bf6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e7fc      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x10e>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e7fa      	b.n	8003bf6 <HAL_TIM_PWM_Start+0x10e>
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	00010007 	.word	0x00010007

08003c14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c14:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	233c      	movs	r3, #60	; 0x3c
 8003c18:	5cc3      	ldrb	r3, [r0, r3]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d029      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003c1e:	233c      	movs	r3, #60	; 0x3c
 8003c20:	2201      	movs	r2, #1
 8003c22:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	3301      	adds	r3, #1
 8003c26:	3201      	adds	r2, #1
 8003c28:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2a:	6802      	ldr	r2, [r0, #0]
 8003c2c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c30:	4d11      	ldr	r5, [pc, #68]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003c32:	42aa      	cmp	r2, r5
 8003c34:	d018      	beq.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c36:	2570      	movs	r5, #112	; 0x70
 8003c38:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3a:	680d      	ldr	r5, [r1, #0]
 8003c3c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	6803      	ldr	r3, [r0, #0]
 8003c42:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d002      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003c48:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d104      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	688a      	ldr	r2, [r1, #8]
 8003c54:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c56:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	233d      	movs	r3, #61	; 0x3d
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	2200      	movs	r2, #0
 8003c62:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003c64:	2000      	movs	r0, #0
}
 8003c66:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c68:	4d05      	ldr	r5, [pc, #20]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003c6a:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c6c:	684d      	ldr	r5, [r1, #4]
 8003c6e:	432b      	orrs	r3, r5
 8003c70:	e7e1      	b.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003c72:	2002      	movs	r0, #2
 8003c74:	e7f7      	b.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	ff0fffff 	.word	0xff0fffff

08003c84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c84:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	233c      	movs	r3, #60	; 0x3c
 8003c88:	5cc3      	ldrb	r3, [r0, r3]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d044      	beq.n	8003d18 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8003c8e:	233c      	movs	r3, #60	; 0x3c
 8003c90:	2201      	movs	r2, #1
 8003c92:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8003c96:	68ca      	ldr	r2, [r1, #12]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	688a      	ldr	r2, [r1, #8]
 8003c9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c9e:	4a20      	ldr	r2, [pc, #128]	; (8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	684a      	ldr	r2, [r1, #4]
 8003ca4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ca6:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	680a      	ldr	r2, [r1, #0]
 8003cac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cae:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	690a      	ldr	r2, [r1, #16]
 8003cb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	; (8003d2c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	694a      	ldr	r2, [r1, #20]
 8003cbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cbe:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003cc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	698a      	ldr	r2, [r1, #24]
 8003ccc:	0412      	lsls	r2, r2, #16
 8003cce:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003cd0:	6802      	ldr	r2, [r0, #0]
 8003cd2:	4c19      	ldr	r4, [pc, #100]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003cd4:	42a2      	cmp	r2, r4
 8003cd6:	d008      	beq.n	8003cea <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cd8:	4c17      	ldr	r4, [pc, #92]	; (8003d38 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003cda:	42a2      	cmp	r2, r4
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cde:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ce0:	233c      	movs	r3, #60	; 0x3c
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
}
 8003ce8:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003cea:	4c14      	ldr	r4, [pc, #80]	; (8003d3c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003cec:	4023      	ands	r3, r4
 8003cee:	69cc      	ldr	r4, [r1, #28]
 8003cf0:	4323      	orrs	r3, r4
 8003cf2:	e7f1      	b.n	8003cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cf4:	4c12      	ldr	r4, [pc, #72]	; (8003d40 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8003cf6:	4023      	ands	r3, r4
 8003cf8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003cfa:	0524      	lsls	r4, r4, #20
 8003cfc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cfe:	4c11      	ldr	r4, [pc, #68]	; (8003d44 <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8003d00:	4023      	ands	r3, r4
 8003d02:	6a0c      	ldr	r4, [r1, #32]
 8003d04:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003d06:	4c10      	ldr	r4, [pc, #64]	; (8003d48 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8003d08:	4023      	ands	r3, r4
 8003d0a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8003d0c:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003d0e:	4c0f      	ldr	r4, [pc, #60]	; (8003d4c <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8003d10:	4023      	ands	r3, r4
 8003d12:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003d14:	430b      	orrs	r3, r1
 8003d16:	e7e2      	b.n	8003cde <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8003d18:	2002      	movs	r0, #2
 8003d1a:	e7e5      	b.n	8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8003d1c:	fffffcff 	.word	0xfffffcff
 8003d20:	fffffbff 	.word	0xfffffbff
 8003d24:	fffff7ff 	.word	0xfffff7ff
 8003d28:	ffffefff 	.word	0xffffefff
 8003d2c:	ffffdfff 	.word	0xffffdfff
 8003d30:	ffffbfff 	.word	0xffffbfff
 8003d34:	fff0ffff 	.word	0xfff0ffff
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	efffffff 	.word	0xefffffff
 8003d40:	ff0fffff 	.word	0xff0fffff
 8003d44:	feffffff 	.word	0xfeffffff
 8003d48:	fdffffff 	.word	0xfdffffff
 8003d4c:	dfffffff 	.word	0xdfffffff

08003d50 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d54:	4770      	bx	lr
	...

08003d58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d58:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003d64:	6801      	ldr	r1, [r0, #0]
 8003d66:	680b      	ldr	r3, [r1, #0]
 8003d68:	25c0      	movs	r5, #192	; 0xc0
 8003d6a:	43ab      	bics	r3, r5
 8003d6c:	600b      	str	r3, [r1, #0]
 8003d6e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d72:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d76:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003d7a:	6802      	ldr	r2, [r0, #0]
 8003d7c:	6893      	ldr	r3, [r2, #8]
 8003d7e:	4c04      	ldr	r4, [pc, #16]	; (8003d90 <UART_EndTxTransfer+0x38>)
 8003d80:	4023      	ands	r3, r4
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	2384      	movs	r3, #132	; 0x84
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	50c2      	str	r2, [r0, r3]
}
 8003d8e:	bd30      	pop	{r4, r5, pc}
 8003d90:	ff7fffff 	.word	0xff7fffff

08003d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d94:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003da0:	6801      	ldr	r1, [r0, #0]
 8003da2:	680b      	ldr	r3, [r1, #0]
 8003da4:	4d12      	ldr	r5, [pc, #72]	; (8003df0 <UART_EndRxTransfer+0x5c>)
 8003da6:	402b      	ands	r3, r5
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003db6:	6802      	ldr	r2, [r0, #0]
 8003db8:	6893      	ldr	r3, [r2, #8]
 8003dba:	4c0e      	ldr	r4, [pc, #56]	; (8003df4 <UART_EndRxTransfer+0x60>)
 8003dbc:	4023      	ands	r3, r4
 8003dbe:	6093      	str	r3, [r2, #8]
 8003dc0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d006      	beq.n	8003dd8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	2388      	movs	r3, #136	; 0x88
 8003dcc:	2220      	movs	r2, #32
 8003dce:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dd4:	6703      	str	r3, [r0, #112]	; 0x70
}
 8003dd6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	6802      	ldr	r2, [r0, #0]
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	2410      	movs	r4, #16
 8003de6:	43a3      	bics	r3, r4
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	f381 8810 	msr	PRIMASK, r1
}
 8003dee:	e7ec      	b.n	8003dca <UART_EndRxTransfer+0x36>
 8003df0:	fffffedf 	.word	0xfffffedf
 8003df4:	effffffe 	.word	0xeffffffe

08003df8 <HAL_UART_RxCpltCallback>:
}
 8003df8:	4770      	bx	lr

08003dfa <HAL_UART_RxHalfCpltCallback>:
}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_UART_ErrorCallback>:
}
 8003dfc:	4770      	bx	lr

08003dfe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e00:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003e02:	2384      	movs	r3, #132	; 0x84
 8003e04:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003e06:	3304      	adds	r3, #4
 8003e08:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	061b      	lsls	r3, r3, #24
 8003e10:	d501      	bpl.n	8003e16 <UART_DMAError+0x18>
 8003e12:	2a21      	cmp	r2, #33	; 0x21
 8003e14:	d00e      	beq.n	8003e34 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	065b      	lsls	r3, r3, #25
 8003e1c:	d501      	bpl.n	8003e22 <UART_DMAError+0x24>
 8003e1e:	2d22      	cmp	r5, #34	; 0x22
 8003e20:	d00f      	beq.n	8003e42 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e22:	228c      	movs	r2, #140	; 0x8c
 8003e24:	58a3      	ldr	r3, [r4, r2]
 8003e26:	2110      	movs	r1, #16
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2c:	0020      	movs	r0, r4
 8003e2e:	f7ff ffe5 	bl	8003dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e32:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8003e34:	2356      	movs	r3, #86	; 0x56
 8003e36:	2200      	movs	r2, #0
 8003e38:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f7ff ff8c 	bl	8003d58 <UART_EndTxTransfer>
 8003e40:	e7e9      	b.n	8003e16 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8003e42:	235e      	movs	r3, #94	; 0x5e
 8003e44:	2200      	movs	r2, #0
 8003e46:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7ff ffa3 	bl	8003d94 <UART_EndRxTransfer>
 8003e4e:	e7e8      	b.n	8003e22 <UART_DMAError+0x24>

08003e50 <HAL_UARTEx_RxEventCallback>:
}
 8003e50:	4770      	bx	lr

08003e52 <UART_DMARxHalfCplt>:
{
 8003e52:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e54:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d002      	beq.n	8003e62 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e5c:	f7ff ffcd 	bl	8003dfa <HAL_UART_RxHalfCpltCallback>
}
 8003e60:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e62:	335b      	adds	r3, #91	; 0x5b
 8003e64:	5ac1      	ldrh	r1, [r0, r3]
 8003e66:	0849      	lsrs	r1, r1, #1
 8003e68:	f7ff fff2 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
 8003e6c:	e7f8      	b.n	8003e60 <UART_DMARxHalfCplt+0xe>
	...

08003e70 <UART_DMAReceiveCplt>:
{
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e74:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	069b      	lsls	r3, r3, #26
 8003e7c:	d429      	bmi.n	8003ed2 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8003e7e:	235e      	movs	r3, #94	; 0x5e
 8003e80:	2200      	movs	r2, #0
 8003e82:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e84:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e88:	3b5d      	subs	r3, #93	; 0x5d
 8003e8a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8e:	6801      	ldr	r1, [r0, #0]
 8003e90:	680a      	ldr	r2, [r1, #0]
 8003e92:	4d1b      	ldr	r5, [pc, #108]	; (8003f00 <UART_DMAReceiveCplt+0x90>)
 8003e94:	402a      	ands	r2, r5
 8003e96:	600a      	str	r2, [r1, #0]
 8003e98:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	6801      	ldr	r1, [r0, #0]
 8003ea6:	688a      	ldr	r2, [r1, #8]
 8003ea8:	439a      	bics	r2, r3
 8003eaa:	608a      	str	r2, [r1, #8]
 8003eac:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb8:	6802      	ldr	r2, [r0, #0]
 8003eba:	6893      	ldr	r3, [r2, #8]
 8003ebc:	2440      	movs	r4, #64	; 0x40
 8003ebe:	43a3      	bics	r3, r4
 8003ec0:	6093      	str	r3, [r2, #8]
 8003ec2:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	2388      	movs	r3, #136	; 0x88
 8003ec8:	2220      	movs	r2, #32
 8003eca:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d00e      	beq.n	8003ef6 <UART_DMAReceiveCplt+0x86>
    HAL_UART_RxCpltCallback(huart);
 8003ed8:	f7ff ff8e 	bl	8003df8 <HAL_UART_RxCpltCallback>
}
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	6802      	ldr	r2, [r0, #0]
 8003ee8:	6813      	ldr	r3, [r2, #0]
 8003eea:	3c30      	subs	r4, #48	; 0x30
 8003eec:	43a3      	bics	r3, r4
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	f381 8810 	msr	PRIMASK, r1
}
 8003ef4:	e7ed      	b.n	8003ed2 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ef6:	335b      	adds	r3, #91	; 0x5b
 8003ef8:	5ac1      	ldrh	r1, [r0, r3]
 8003efa:	f7ff ffa9 	bl	8003e50 <HAL_UARTEx_RxEventCallback>
 8003efe:	e7ed      	b.n	8003edc <UART_DMAReceiveCplt+0x6c>
 8003f00:	fffffeff 	.word	0xfffffeff

08003f04 <UART_SetConfig>:
{
 8003f04:	b510      	push	{r4, lr}
 8003f06:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f08:	6883      	ldr	r3, [r0, #8]
 8003f0a:	6902      	ldr	r2, [r0, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	6942      	ldr	r2, [r0, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	69c2      	ldr	r2, [r0, #28]
 8003f14:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f16:	6801      	ldr	r1, [r0, #0]
 8003f18:	680a      	ldr	r2, [r1, #0]
 8003f1a:	4863      	ldr	r0, [pc, #396]	; (80040a8 <UART_SetConfig+0x1a4>)
 8003f1c:	4002      	ands	r2, r0
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	6853      	ldr	r3, [r2, #4]
 8003f26:	4961      	ldr	r1, [pc, #388]	; (80040ac <UART_SetConfig+0x1a8>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	68e1      	ldr	r1, [r4, #12]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8003f30:	6a22      	ldr	r2, [r4, #32]
 8003f32:	69a3      	ldr	r3, [r4, #24]
 8003f34:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f36:	6821      	ldr	r1, [r4, #0]
 8003f38:	688b      	ldr	r3, [r1, #8]
 8003f3a:	485d      	ldr	r0, [pc, #372]	; (80040b0 <UART_SetConfig+0x1ac>)
 8003f3c:	4003      	ands	r3, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003f46:	210f      	movs	r1, #15
 8003f48:	438b      	bics	r3, r1
 8003f4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <UART_SetConfig+0x1b0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01b      	beq.n	8003f90 <UART_SetConfig+0x8c>
 8003f58:	4a57      	ldr	r2, [pc, #348]	; (80040b8 <UART_SetConfig+0x1b4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d029      	beq.n	8003fb2 <UART_SetConfig+0xae>
 8003f5e:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f60:	69e0      	ldr	r0, [r4, #28]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	0212      	lsls	r2, r2, #8
 8003f66:	4290      	cmp	r0, r2
 8003f68:	d02d      	beq.n	8003fc6 <UART_SetConfig+0xc2>
    switch (clocksource)
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d100      	bne.n	8003f70 <UART_SetConfig+0x6c>
 8003f6e:	e094      	b.n	800409a <UART_SetConfig+0x196>
 8003f70:	d868      	bhi.n	8004044 <UART_SetConfig+0x140>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d100      	bne.n	8003f78 <UART_SetConfig+0x74>
 8003f76:	e08a      	b.n	800408e <UART_SetConfig+0x18a>
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d161      	bne.n	8004040 <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	; (80040bc <UART_SetConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2107      	movs	r1, #7
 8003f84:	4019      	ands	r1, r3
 8003f86:	3101      	adds	r1, #1
 8003f88:	484d      	ldr	r0, [pc, #308]	; (80040c0 <UART_SetConfig+0x1bc>)
 8003f8a:	f7fc fcd1 	bl	8000930 <__udivsi3>
        break;
 8003f8e:	e080      	b.n	8004092 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f90:	4b4a      	ldr	r3, [pc, #296]	; (80040bc <UART_SetConfig+0x1b8>)
 8003f92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f94:	2303      	movs	r3, #3
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d00c      	beq.n	8003fb6 <UART_SetConfig+0xb2>
 8003f9c:	d805      	bhi.n	8003faa <UART_SetConfig+0xa6>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <UART_SetConfig+0xb6>
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10b      	bne.n	8003fbe <UART_SetConfig+0xba>
 8003fa6:	3303      	adds	r3, #3
 8003fa8:	e7da      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d109      	bne.n	8003fc2 <UART_SetConfig+0xbe>
 8003fae:	3305      	adds	r3, #5
 8003fb0:	e7d6      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e7d4      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e7d2      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e7d0      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	e7ce      	b.n	8003f60 <UART_SetConfig+0x5c>
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	e7cc      	b.n	8003f60 <UART_SetConfig+0x5c>
    switch (clocksource)
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d037      	beq.n	800403a <UART_SetConfig+0x136>
 8003fca:	d80f      	bhi.n	8003fec <UART_SetConfig+0xe8>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d02e      	beq.n	800402e <UART_SetConfig+0x12a>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d109      	bne.n	8003fe8 <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003fd4:	4b39      	ldr	r3, [pc, #228]	; (80040bc <UART_SetConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2107      	movs	r1, #7
 8003fdc:	4019      	ands	r1, r3
 8003fde:	3101      	adds	r1, #1
 8003fe0:	4837      	ldr	r0, [pc, #220]	; (80040c0 <UART_SetConfig+0x1bc>)
 8003fe2:	f7fc fca5 	bl	8000930 <__udivsi3>
        break;
 8003fe6:	e024      	b.n	8004032 <UART_SetConfig+0x12e>
    switch (clocksource)
 8003fe8:	2001      	movs	r0, #1
 8003fea:	e047      	b.n	800407c <UART_SetConfig+0x178>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d11c      	bne.n	800402a <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <UART_SetConfig+0x1c0>)
 8003ff6:	5a99      	ldrh	r1, [r3, r2]
 8003ff8:	f7fc fc9a 	bl	8000930 <__udivsi3>
 8003ffc:	0040      	lsls	r0, r0, #1
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	18c0      	adds	r0, r0, r3
 8004004:	6861      	ldr	r1, [r4, #4]
 8004006:	f7fc fc93 	bl	8000930 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400a:	0002      	movs	r2, r0
 800400c:	3a10      	subs	r2, #16
 800400e:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <UART_SetConfig+0x1c4>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d845      	bhi.n	80040a0 <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004014:	b282      	uxth	r2, r0
 8004016:	230f      	movs	r3, #15
 8004018:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800401a:	0840      	lsrs	r0, r0, #1
 800401c:	3b08      	subs	r3, #8
 800401e:	4018      	ands	r0, r3
 8004020:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	60d8      	str	r0, [r3, #12]
 8004026:	2000      	movs	r0, #0
 8004028:	e028      	b.n	800407c <UART_SetConfig+0x178>
    switch (clocksource)
 800402a:	2001      	movs	r0, #1
 800402c:	e026      	b.n	800407c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 800402e:	f7fe ff07 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004032:	2800      	cmp	r0, #0
 8004034:	d1dc      	bne.n	8003ff0 <UART_SetConfig+0xec>
 8004036:	2000      	movs	r0, #0
 8004038:	e020      	b.n	800407c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe fecb 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
        break;
 800403e:	e7f8      	b.n	8004032 <UART_SetConfig+0x12e>
    switch (clocksource)
 8004040:	2001      	movs	r0, #1
 8004042:	e01b      	b.n	800407c <UART_SetConfig+0x178>
 8004044:	2b08      	cmp	r3, #8
 8004046:	d118      	bne.n	800407a <UART_SetConfig+0x176>
 8004048:	2080      	movs	r0, #128	; 0x80
 800404a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800404c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <UART_SetConfig+0x1c0>)
 8004052:	5a99      	ldrh	r1, [r3, r2]
 8004054:	f7fc fc6c 	bl	8000930 <__udivsi3>
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	18c0      	adds	r0, r0, r3
 800405e:	6861      	ldr	r1, [r4, #4]
 8004060:	f7fc fc66 	bl	8000930 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004064:	0002      	movs	r2, r0
 8004066:	3a10      	subs	r2, #16
 8004068:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <UART_SetConfig+0x1c4>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d81a      	bhi.n	80040a4 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	0400      	lsls	r0, r0, #16
 8004072:	0c00      	lsrs	r0, r0, #16
 8004074:	60d8      	str	r0, [r3, #12]
 8004076:	2000      	movs	r0, #0
 8004078:	e000      	b.n	800407c <UART_SetConfig+0x178>
    switch (clocksource)
 800407a:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 800407c:	2301      	movs	r3, #1
 800407e:	226a      	movs	r2, #106	; 0x6a
 8004080:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8004082:	3a02      	subs	r2, #2
 8004084:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 800408a:	6763      	str	r3, [r4, #116]	; 0x74
}
 800408c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800408e:	f7fe fed7 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004092:	2800      	cmp	r0, #0
 8004094:	d1da      	bne.n	800404c <UART_SetConfig+0x148>
 8004096:	2000      	movs	r0, #0
 8004098:	e7f0      	b.n	800407c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe fe9b 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
        break;
 800409e:	e7f8      	b.n	8004092 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80040a0:	2001      	movs	r0, #1
 80040a2:	e7eb      	b.n	800407c <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 80040a4:	2001      	movs	r0, #1
 80040a6:	e7e9      	b.n	800407c <UART_SetConfig+0x178>
 80040a8:	cfff69f3 	.word	0xcfff69f3
 80040ac:	ffffcfff 	.word	0xffffcfff
 80040b0:	11fff4ff 	.word	0x11fff4ff
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40004400 	.word	0x40004400
 80040bc:	40021000 	.word	0x40021000
 80040c0:	02dc6c00 	.word	0x02dc6c00
 80040c4:	08005450 	.word	0x08005450
 80040c8:	0000ffef 	.word	0x0000ffef

080040cc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040ce:	07db      	lsls	r3, r3, #31
 80040d0:	d506      	bpl.n	80040e0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040d2:	6802      	ldr	r2, [r0, #0]
 80040d4:	6853      	ldr	r3, [r2, #4]
 80040d6:	492c      	ldr	r1, [pc, #176]	; (8004188 <UART_AdvFeatureConfig+0xbc>)
 80040d8:	400b      	ands	r3, r1
 80040da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80040dc:	430b      	orrs	r3, r1
 80040de:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040e2:	079b      	lsls	r3, r3, #30
 80040e4:	d506      	bpl.n	80040f4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e6:	6802      	ldr	r2, [r0, #0]
 80040e8:	6853      	ldr	r3, [r2, #4]
 80040ea:	4928      	ldr	r1, [pc, #160]	; (800418c <UART_AdvFeatureConfig+0xc0>)
 80040ec:	400b      	ands	r3, r1
 80040ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040f6:	075b      	lsls	r3, r3, #29
 80040f8:	d506      	bpl.n	8004108 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fa:	6802      	ldr	r2, [r0, #0]
 80040fc:	6853      	ldr	r3, [r2, #4]
 80040fe:	4924      	ldr	r1, [pc, #144]	; (8004190 <UART_AdvFeatureConfig+0xc4>)
 8004100:	400b      	ands	r3, r1
 8004102:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004104:	430b      	orrs	r3, r1
 8004106:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004108:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800410a:	071b      	lsls	r3, r3, #28
 800410c:	d506      	bpl.n	800411c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410e:	6802      	ldr	r2, [r0, #0]
 8004110:	6853      	ldr	r3, [r2, #4]
 8004112:	4920      	ldr	r1, [pc, #128]	; (8004194 <UART_AdvFeatureConfig+0xc8>)
 8004114:	400b      	ands	r3, r1
 8004116:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004118:	430b      	orrs	r3, r1
 800411a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800411c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800411e:	06db      	lsls	r3, r3, #27
 8004120:	d506      	bpl.n	8004130 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004122:	6802      	ldr	r2, [r0, #0]
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	491c      	ldr	r1, [pc, #112]	; (8004198 <UART_AdvFeatureConfig+0xcc>)
 8004128:	400b      	ands	r3, r1
 800412a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800412c:	430b      	orrs	r3, r1
 800412e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004130:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004132:	069b      	lsls	r3, r3, #26
 8004134:	d506      	bpl.n	8004144 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004136:	6802      	ldr	r2, [r0, #0]
 8004138:	6893      	ldr	r3, [r2, #8]
 800413a:	4918      	ldr	r1, [pc, #96]	; (800419c <UART_AdvFeatureConfig+0xd0>)
 800413c:	400b      	ands	r3, r1
 800413e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004140:	430b      	orrs	r3, r1
 8004142:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004144:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004146:	065b      	lsls	r3, r3, #25
 8004148:	d50b      	bpl.n	8004162 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800414a:	6802      	ldr	r2, [r0, #0]
 800414c:	6853      	ldr	r3, [r2, #4]
 800414e:	4914      	ldr	r1, [pc, #80]	; (80041a0 <UART_AdvFeatureConfig+0xd4>)
 8004150:	400b      	ands	r3, r1
 8004152:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004154:	430b      	orrs	r3, r1
 8004156:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	035b      	lsls	r3, r3, #13
 800415c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800415e:	429a      	cmp	r2, r3
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004162:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004164:	061b      	lsls	r3, r3, #24
 8004166:	d506      	bpl.n	8004176 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004168:	6802      	ldr	r2, [r0, #0]
 800416a:	6853      	ldr	r3, [r2, #4]
 800416c:	490d      	ldr	r1, [pc, #52]	; (80041a4 <UART_AdvFeatureConfig+0xd8>)
 800416e:	400b      	ands	r3, r1
 8004170:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004172:	430b      	orrs	r3, r1
 8004174:	6053      	str	r3, [r2, #4]
}
 8004176:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004178:	6802      	ldr	r2, [r0, #0]
 800417a:	6853      	ldr	r3, [r2, #4]
 800417c:	490a      	ldr	r1, [pc, #40]	; (80041a8 <UART_AdvFeatureConfig+0xdc>)
 800417e:	400b      	ands	r3, r1
 8004180:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004182:	430b      	orrs	r3, r1
 8004184:	6053      	str	r3, [r2, #4]
 8004186:	e7ec      	b.n	8004162 <UART_AdvFeatureConfig+0x96>
 8004188:	fffdffff 	.word	0xfffdffff
 800418c:	fffeffff 	.word	0xfffeffff
 8004190:	fffbffff 	.word	0xfffbffff
 8004194:	ffff7fff 	.word	0xffff7fff
 8004198:	ffffefff 	.word	0xffffefff
 800419c:	ffffdfff 	.word	0xffffdfff
 80041a0:	ffefffff 	.word	0xffefffff
 80041a4:	fff7ffff 	.word	0xfff7ffff
 80041a8:	ff9fffff 	.word	0xff9fffff

080041ac <UART_WaitOnFlagUntilTimeout>:
{
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	46ce      	mov	lr, r9
 80041b0:	4647      	mov	r7, r8
 80041b2:	b580      	push	{r7, lr}
 80041b4:	0006      	movs	r6, r0
 80041b6:	000d      	movs	r5, r1
 80041b8:	0017      	movs	r7, r2
 80041ba:	4699      	mov	r9, r3
 80041bc:	9b08      	ldr	r3, [sp, #32]
 80041be:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c0:	6833      	ldr	r3, [r6, #0]
 80041c2:	69dc      	ldr	r4, [r3, #28]
 80041c4:	402c      	ands	r4, r5
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	4263      	negs	r3, r4
 80041ca:	415c      	adcs	r4, r3
 80041cc:	42bc      	cmp	r4, r7
 80041ce:	d157      	bne.n	8004280 <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 80041d0:	4643      	mov	r3, r8
 80041d2:	3301      	adds	r3, #1
 80041d4:	d0f4      	beq.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fd fead 	bl	8001f34 <HAL_GetTick>
 80041da:	464b      	mov	r3, r9
 80041dc:	1ac0      	subs	r0, r0, r3
 80041de:	4540      	cmp	r0, r8
 80041e0:	d82e      	bhi.n	8004240 <UART_WaitOnFlagUntilTimeout+0x94>
 80041e2:	4643      	mov	r3, r8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02b      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041e8:	6833      	ldr	r3, [r6, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	0752      	lsls	r2, r2, #29
 80041ee:	d5e7      	bpl.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	0512      	lsls	r2, r2, #20
 80041f4:	d5e4      	bpl.n	80041c0 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	0112      	lsls	r2, r2, #4
 80041fa:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004200:	2201      	movs	r2, #1
 8004202:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004206:	6831      	ldr	r1, [r6, #0]
 8004208:	680b      	ldr	r3, [r1, #0]
 800420a:	4c20      	ldr	r4, [pc, #128]	; (800428c <UART_WaitOnFlagUntilTimeout+0xe0>)
 800420c:	4023      	ands	r3, r4
 800420e:	600b      	str	r3, [r1, #0]
 8004210:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004214:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	6831      	ldr	r1, [r6, #0]
 800421e:	688b      	ldr	r3, [r1, #8]
 8004220:	4393      	bics	r3, r2
 8004222:	608b      	str	r3, [r1, #8]
 8004224:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8004228:	2320      	movs	r3, #32
 800422a:	3283      	adds	r2, #131	; 0x83
 800422c:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800422e:	3204      	adds	r2, #4
 8004230:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	3204      	adds	r2, #4
 8004234:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 8004236:	3360      	adds	r3, #96	; 0x60
 8004238:	2200      	movs	r2, #0
 800423a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 800423c:	2003      	movs	r0, #3
 800423e:	e020      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004240:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	2201      	movs	r2, #1
 8004246:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800424a:	6831      	ldr	r1, [r6, #0]
 800424c:	680b      	ldr	r3, [r1, #0]
 800424e:	4c0f      	ldr	r4, [pc, #60]	; (800428c <UART_WaitOnFlagUntilTimeout+0xe0>)
 8004250:	4023      	ands	r3, r4
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004258:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	6831      	ldr	r1, [r6, #0]
 8004262:	688b      	ldr	r3, [r1, #8]
 8004264:	4393      	bics	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
 8004268:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800426c:	2320      	movs	r3, #32
 800426e:	3283      	adds	r2, #131	; 0x83
 8004270:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004272:	3204      	adds	r2, #4
 8004274:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8004276:	3360      	adds	r3, #96	; 0x60
 8004278:	2200      	movs	r2, #0
 800427a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800427c:	2003      	movs	r0, #3
 800427e:	e000      	b.n	8004282 <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8004280:	2000      	movs	r0, #0
}
 8004282:	bcc0      	pop	{r6, r7}
 8004284:	46b9      	mov	r9, r7
 8004286:	46b0      	mov	r8, r6
 8004288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	fffffe5f 	.word	0xfffffe5f

08004290 <HAL_UART_Transmit>:
{
 8004290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004292:	46c6      	mov	lr, r8
 8004294:	b500      	push	{lr}
 8004296:	b082      	sub	sp, #8
 8004298:	0004      	movs	r4, r0
 800429a:	000d      	movs	r5, r1
 800429c:	4690      	mov	r8, r2
 800429e:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80042a0:	2384      	movs	r3, #132	; 0x84
 80042a2:	58c3      	ldr	r3, [r0, r3]
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d16a      	bne.n	800437e <HAL_UART_Transmit+0xee>
    if ((pData == NULL) || (Size == 0U))
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d100      	bne.n	80042ae <HAL_UART_Transmit+0x1e>
 80042ac:	e06c      	b.n	8004388 <HAL_UART_Transmit+0xf8>
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	d100      	bne.n	80042b4 <HAL_UART_Transmit+0x24>
 80042b2:	e06b      	b.n	800438c <HAL_UART_Transmit+0xfc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	015b      	lsls	r3, r3, #5
 80042b8:	6882      	ldr	r2, [r0, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d01f      	beq.n	80042fe <HAL_UART_Transmit+0x6e>
    __HAL_LOCK(huart);
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	5ce3      	ldrb	r3, [r4, r3]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d064      	beq.n	8004390 <HAL_UART_Transmit+0x100>
 80042c6:	2380      	movs	r3, #128	; 0x80
 80042c8:	2201      	movs	r2, #1
 80042ca:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	330c      	adds	r3, #12
 80042ce:	2200      	movs	r2, #0
 80042d0:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d2:	3b08      	subs	r3, #8
 80042d4:	3221      	adds	r2, #33	; 0x21
 80042d6:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80042d8:	f7fd fe2c 	bl	8001f34 <HAL_GetTick>
 80042dc:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 80042de:	2354      	movs	r3, #84	; 0x54
 80042e0:	4642      	mov	r2, r8
 80042e2:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80042e4:	3302      	adds	r3, #2
 80042e6:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	015b      	lsls	r3, r3, #5
 80042ec:	68a2      	ldr	r2, [r4, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d00c      	beq.n	800430c <HAL_UART_Transmit+0x7c>
      pdata16bits = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	4698      	mov	r8, r3
    __HAL_UNLOCK(huart);
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	2200      	movs	r2, #0
 80042fa:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80042fc:	e01d      	b.n	800433a <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042fe:	6903      	ldr	r3, [r0, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1dc      	bne.n	80042be <HAL_UART_Transmit+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004304:	07cb      	lsls	r3, r1, #31
 8004306:	d5da      	bpl.n	80042be <HAL_UART_Transmit+0x2e>
        return  HAL_ERROR;
 8004308:	2001      	movs	r0, #1
 800430a:	e039      	b.n	8004380 <HAL_UART_Transmit+0xf0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_UART_Transmit+0x88>
      pdata16bits = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	4698      	mov	r8, r3
 8004316:	e7ee      	b.n	80042f6 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8004318:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800431a:	2500      	movs	r5, #0
 800431c:	e7eb      	b.n	80042f6 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431e:	4643      	mov	r3, r8
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	0ddb      	lsrs	r3, r3, #23
 8004328:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800432a:	2302      	movs	r3, #2
 800432c:	469c      	mov	ip, r3
 800432e:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8004330:	2356      	movs	r3, #86	; 0x56
 8004332:	5ae2      	ldrh	r2, [r4, r3]
 8004334:	3a01      	subs	r2, #1
 8004336:	b292      	uxth	r2, r2
 8004338:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 800433a:	2356      	movs	r3, #86	; 0x56
 800433c:	5ae3      	ldrh	r3, [r4, r3]
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00f      	beq.n	8004364 <HAL_UART_Transmit+0xd4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004344:	9600      	str	r6, [sp, #0]
 8004346:	003b      	movs	r3, r7
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	0020      	movs	r0, r4
 800434e:	f7ff ff2d 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004352:	2800      	cmp	r0, #0
 8004354:	d11e      	bne.n	8004394 <HAL_UART_Transmit+0x104>
      if (pdata8bits == NULL)
 8004356:	2d00      	cmp	r5, #0
 8004358:	d0e1      	beq.n	800431e <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800435a:	782a      	ldrb	r2, [r5, #0]
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004360:	3501      	adds	r5, #1
 8004362:	e7e5      	b.n	8004330 <HAL_UART_Transmit+0xa0>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004364:	9600      	str	r6, [sp, #0]
 8004366:	003b      	movs	r3, r7
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	0020      	movs	r0, r4
 800436e:	f7ff ff1d 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004372:	2800      	cmp	r0, #0
 8004374:	d110      	bne.n	8004398 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_READY;
 8004376:	2384      	movs	r3, #132	; 0x84
 8004378:	2220      	movs	r2, #32
 800437a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800437c:	e000      	b.n	8004380 <HAL_UART_Transmit+0xf0>
    return HAL_BUSY;
 800437e:	2002      	movs	r0, #2
}
 8004380:	b002      	add	sp, #8
 8004382:	bc80      	pop	{r7}
 8004384:	46b8      	mov	r8, r7
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8004388:	2001      	movs	r0, #1
 800438a:	e7f9      	b.n	8004380 <HAL_UART_Transmit+0xf0>
 800438c:	2001      	movs	r0, #1
 800438e:	e7f7      	b.n	8004380 <HAL_UART_Transmit+0xf0>
    __HAL_LOCK(huart);
 8004390:	2002      	movs	r0, #2
 8004392:	e7f5      	b.n	8004380 <HAL_UART_Transmit+0xf0>
        return HAL_TIMEOUT;
 8004394:	2003      	movs	r0, #3
 8004396:	e7f3      	b.n	8004380 <HAL_UART_Transmit+0xf0>
      return HAL_TIMEOUT;
 8004398:	2003      	movs	r0, #3
 800439a:	e7f1      	b.n	8004380 <HAL_UART_Transmit+0xf0>

0800439c <UART_CheckIdleState>:
{
 800439c:	b530      	push	{r4, r5, lr}
 800439e:	b083      	sub	sp, #12
 80043a0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a2:	238c      	movs	r3, #140	; 0x8c
 80043a4:	2200      	movs	r2, #0
 80043a6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80043a8:	f7fd fdc4 	bl	8001f34 <HAL_GetTick>
 80043ac:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	0713      	lsls	r3, r2, #28
 80043b4:	d40f      	bmi.n	80043d6 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	075b      	lsls	r3, r3, #29
 80043bc:	d418      	bmi.n	80043f0 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80043be:	2320      	movs	r3, #32
 80043c0:	2284      	movs	r2, #132	; 0x84
 80043c2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	3204      	adds	r2, #4
 80043c6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	2300      	movs	r3, #0
 80043ca:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80043cc:	3a08      	subs	r2, #8
 80043ce:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80043d0:	2000      	movs	r0, #0
}
 80043d2:	b003      	add	sp, #12
 80043d4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043d6:	2180      	movs	r1, #128	; 0x80
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <UART_CheckIdleState+0x70>)
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	0003      	movs	r3, r0
 80043de:	2200      	movs	r2, #0
 80043e0:	0389      	lsls	r1, r1, #14
 80043e2:	0020      	movs	r0, r4
 80043e4:	f7ff fee2 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	d0e4      	beq.n	80043b6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80043ec:	2003      	movs	r0, #3
 80043ee:	e7f0      	b.n	80043d2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <UART_CheckIdleState+0x70>)
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	002b      	movs	r3, r5
 80043f8:	2200      	movs	r2, #0
 80043fa:	03c9      	lsls	r1, r1, #15
 80043fc:	0020      	movs	r0, r4
 80043fe:	f7ff fed5 	bl	80041ac <UART_WaitOnFlagUntilTimeout>
 8004402:	2800      	cmp	r0, #0
 8004404:	d0db      	beq.n	80043be <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8004406:	2003      	movs	r0, #3
 8004408:	e7e3      	b.n	80043d2 <UART_CheckIdleState+0x36>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	01ffffff 	.word	0x01ffffff

08004410 <HAL_UART_Init>:
{
 8004410:	b510      	push	{r4, lr}
 8004412:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004414:	d030      	beq.n	8004478 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004416:	2384      	movs	r3, #132	; 0x84
 8004418:	58c3      	ldr	r3, [r0, r3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d022      	beq.n	8004464 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800441e:	2384      	movs	r3, #132	; 0x84
 8004420:	2224      	movs	r2, #36	; 0x24
 8004422:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	2101      	movs	r1, #1
 800442a:	438b      	bics	r3, r1
 800442c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800442e:	0020      	movs	r0, r4
 8004430:	f7ff fd68 	bl	8003f04 <UART_SetConfig>
 8004434:	2801      	cmp	r0, #1
 8004436:	d014      	beq.n	8004462 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	6853      	ldr	r3, [r2, #4]
 8004442:	490e      	ldr	r1, [pc, #56]	; (800447c <HAL_UART_Init+0x6c>)
 8004444:	400b      	ands	r3, r1
 8004446:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6893      	ldr	r3, [r2, #8]
 800444c:	212a      	movs	r1, #42	; 0x2a
 800444e:	438b      	bics	r3, r1
 8004450:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	6813      	ldr	r3, [r2, #0]
 8004456:	3929      	subs	r1, #41	; 0x29
 8004458:	430b      	orrs	r3, r1
 800445a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800445c:	0020      	movs	r0, r4
 800445e:	f7ff ff9d 	bl	800439c <UART_CheckIdleState>
}
 8004462:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004464:	3380      	adds	r3, #128	; 0x80
 8004466:	2200      	movs	r2, #0
 8004468:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800446a:	f7fd fc4d 	bl	8001d08 <HAL_UART_MspInit>
 800446e:	e7d6      	b.n	800441e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8004470:	0020      	movs	r0, r4
 8004472:	f7ff fe2b 	bl	80040cc <UART_AdvFeatureConfig>
 8004476:	e7e2      	b.n	800443e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8004478:	2001      	movs	r0, #1
 800447a:	e7f2      	b.n	8004462 <HAL_UART_Init+0x52>
 800447c:	ffffb7ff 	.word	0xffffb7ff

08004480 <UART_Start_Receive_DMA>:
{
 8004480:	b510      	push	{r4, lr}
 8004482:	0004      	movs	r4, r0
 8004484:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8004486:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8004488:	225c      	movs	r2, #92	; 0x5c
 800448a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	3230      	adds	r2, #48	; 0x30
 800448e:	2100      	movs	r1, #0
 8004490:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	3a04      	subs	r2, #4
 8004494:	3122      	adds	r1, #34	; 0x22
 8004496:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8004498:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800449a:	2a00      	cmp	r2, #0
 800449c:	d012      	beq.n	80044c4 <UART_Start_Receive_DMA+0x44>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800449e:	4924      	ldr	r1, [pc, #144]	; (8004530 <UART_Start_Receive_DMA+0xb0>)
 80044a0:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044a2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80044a4:	4923      	ldr	r1, [pc, #140]	; (8004534 <UART_Start_Receive_DMA+0xb4>)
 80044a6:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044a8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80044aa:	4923      	ldr	r1, [pc, #140]	; (8004538 <UART_Start_Receive_DMA+0xb8>)
 80044ac:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 80044ae:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80044b0:	2100      	movs	r1, #0
 80044b2:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80044b4:	6801      	ldr	r1, [r0, #0]
 80044b6:	3124      	adds	r1, #36	; 0x24
 80044b8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80044ba:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80044bc:	f7fe fac0 	bl	8002a40 <HAL_DMA_Start_IT>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d129      	bne.n	8004518 <UART_Start_Receive_DMA+0x98>
  __HAL_UNLOCK(huart);
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	2200      	movs	r2, #0
 80044c8:	54e2      	strb	r2, [r4, r3]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <UART_Start_Receive_DMA+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d4:	2301      	movs	r3, #1
 80044d6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	6810      	ldr	r0, [r2, #0]
 80044de:	33ff      	adds	r3, #255	; 0xff
 80044e0:	4303      	orrs	r3, r0
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	2301      	movs	r3, #1
 80044ee:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	6821      	ldr	r1, [r4, #0]
 80044f4:	688a      	ldr	r2, [r1, #8]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	608a      	str	r2, [r1, #8]
 80044fa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	6893      	ldr	r3, [r2, #8]
 800450a:	2040      	movs	r0, #64	; 0x40
 800450c:	4303      	orrs	r3, r0
 800450e:	6093      	str	r3, [r2, #8]
 8004510:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8004514:	2000      	movs	r0, #0
}
 8004516:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004518:	238c      	movs	r3, #140	; 0x8c
 800451a:	2210      	movs	r2, #16
 800451c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800451e:	3b0c      	subs	r3, #12
 8004520:	2200      	movs	r2, #0
 8004522:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8004524:	3308      	adds	r3, #8
 8004526:	3220      	adds	r2, #32
 8004528:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 800452a:	2001      	movs	r0, #1
 800452c:	e7f3      	b.n	8004516 <UART_Start_Receive_DMA+0x96>
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	08003e71 	.word	0x08003e71
 8004534:	08003e53 	.word	0x08003e53
 8004538:	08003dff 	.word	0x08003dff

0800453c <HAL_UART_Receive_DMA>:
{
 800453c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800453e:	2388      	movs	r3, #136	; 0x88
 8004540:	58c3      	ldr	r3, [r0, r3]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d12c      	bne.n	80045a0 <HAL_UART_Receive_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8004546:	2900      	cmp	r1, #0
 8004548:	d02c      	beq.n	80045a4 <HAL_UART_Receive_DMA+0x68>
 800454a:	2a00      	cmp	r2, #0
 800454c:	d02c      	beq.n	80045a8 <HAL_UART_Receive_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	015b      	lsls	r3, r3, #5
 8004552:	6884      	ldr	r4, [r0, #8]
 8004554:	429c      	cmp	r4, r3
 8004556:	d01c      	beq.n	8004592 <HAL_UART_Receive_DMA+0x56>
    __HAL_LOCK(huart);
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	5cc3      	ldrb	r3, [r0, r3]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d025      	beq.n	80045ac <HAL_UART_Receive_DMA+0x70>
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	2401      	movs	r4, #1
 8004564:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	2300      	movs	r3, #0
 8004568:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800456a:	6803      	ldr	r3, [r0, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	d50c      	bpl.n	800458c <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004572:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	2301      	movs	r3, #1
 8004578:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800457c:	6804      	ldr	r4, [r0, #0]
 800457e:	6825      	ldr	r5, [r4, #0]
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	04db      	lsls	r3, r3, #19
 8004584:	432b      	orrs	r3, r5
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800458c:	f7ff ff78 	bl	8004480 <UART_Start_Receive_DMA>
 8004590:	e007      	b.n	80045a2 <HAL_UART_Receive_DMA+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	6903      	ldr	r3, [r0, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1df      	bne.n	8004558 <HAL_UART_Receive_DMA+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004598:	07cb      	lsls	r3, r1, #31
 800459a:	d5dd      	bpl.n	8004558 <HAL_UART_Receive_DMA+0x1c>
        return  HAL_ERROR;
 800459c:	2001      	movs	r0, #1
 800459e:	e000      	b.n	80045a2 <HAL_UART_Receive_DMA+0x66>
    return HAL_BUSY;
 80045a0:	2002      	movs	r0, #2
}
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80045a4:	2001      	movs	r0, #1
 80045a6:	e7fc      	b.n	80045a2 <HAL_UART_Receive_DMA+0x66>
 80045a8:	2001      	movs	r0, #1
 80045aa:	e7fa      	b.n	80045a2 <HAL_UART_Receive_DMA+0x66>
    __HAL_LOCK(huart);
 80045ac:	2002      	movs	r0, #2
 80045ae:	e7f8      	b.n	80045a2 <HAL_UART_Receive_DMA+0x66>

080045b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d105      	bne.n	80045c6 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80045ba:	3301      	adds	r3, #1
 80045bc:	226a      	movs	r2, #106	; 0x6a
 80045be:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80045c0:	3a02      	subs	r2, #2
 80045c2:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045c6:	6802      	ldr	r2, [r0, #0]
 80045c8:	6895      	ldr	r5, [r2, #8]
 80045ca:	0e6d      	lsrs	r5, r5, #25
 80045cc:	2307      	movs	r3, #7
 80045ce:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	0f52      	lsrs	r2, r2, #29
 80045d4:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045d6:	4f08      	ldr	r7, [pc, #32]	; (80045f8 <UARTEx_SetNbDataToProcess+0x48>)
 80045d8:	5cf8      	ldrb	r0, [r7, r3]
 80045da:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045dc:	4e07      	ldr	r6, [pc, #28]	; (80045fc <UARTEx_SetNbDataToProcess+0x4c>)
 80045de:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045e0:	f7fc fa30 	bl	8000a44 <__divsi3>
 80045e4:	236a      	movs	r3, #106	; 0x6a
 80045e6:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045e8:	5d78      	ldrb	r0, [r7, r5]
 80045ea:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045ec:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ee:	f7fc fa29 	bl	8000a44 <__divsi3>
 80045f2:	2368      	movs	r3, #104	; 0x68
 80045f4:	52e0      	strh	r0, [r4, r3]
}
 80045f6:	e7e5      	b.n	80045c4 <UARTEx_SetNbDataToProcess+0x14>
 80045f8:	08005470 	.word	0x08005470
 80045fc:	08005468 	.word	0x08005468

08004600 <HAL_UARTEx_DisableFifoMode>:
{
 8004600:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	5cc3      	ldrb	r3, [r0, r3]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d015      	beq.n	8004636 <HAL_UARTEx_DisableFifoMode+0x36>
 800460a:	2480      	movs	r4, #128	; 0x80
 800460c:	2601      	movs	r6, #1
 800460e:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	2584      	movs	r5, #132	; 0x84
 8004612:	2324      	movs	r3, #36	; 0x24
 8004614:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004616:	6802      	ldr	r2, [r0, #0]
 8004618:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	43b1      	bics	r1, r6
 800461e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004620:	4a06      	ldr	r2, [pc, #24]	; (800463c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8004622:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004624:	2200      	movs	r2, #0
 8004626:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004628:	6801      	ldr	r1, [r0, #0]
 800462a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800462c:	2320      	movs	r3, #32
 800462e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8004630:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8004632:	2000      	movs	r0, #0
}
 8004634:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004636:	2002      	movs	r0, #2
 8004638:	e7fc      	b.n	8004634 <HAL_UARTEx_DisableFifoMode+0x34>
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	dfffffff 	.word	0xdfffffff

08004640 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	0004      	movs	r4, r0
 8004644:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	5cc3      	ldrb	r3, [r0, r3]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d01b      	beq.n	8004686 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800464e:	2580      	movs	r5, #128	; 0x80
 8004650:	2001      	movs	r0, #1
 8004652:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	2684      	movs	r6, #132	; 0x84
 8004656:	2324      	movs	r3, #36	; 0x24
 8004658:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800465e:	6819      	ldr	r1, [r3, #0]
 8004660:	4381      	bics	r1, r0
 8004662:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	6883      	ldr	r3, [r0, #8]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	08d9      	lsrs	r1, r3, #3
 800466c:	4311      	orrs	r1, r2
 800466e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004670:	0020      	movs	r0, r4
 8004672:	f7ff ff9d 	bl	80045b0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800467a:	2320      	movs	r3, #32
 800467c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800467e:	2300      	movs	r3, #0
 8004680:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004682:	2000      	movs	r0, #0
}
 8004684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8004686:	2002      	movs	r0, #2
 8004688:	e7fc      	b.n	8004684 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800468c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	0004      	movs	r4, r0
 8004690:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	5c82      	ldrb	r2, [r0, r2]
 8004696:	2a01      	cmp	r2, #1
 8004698:	d01b      	beq.n	80046d2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800469a:	2580      	movs	r5, #128	; 0x80
 800469c:	2001      	movs	r0, #1
 800469e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80046a0:	2684      	movs	r6, #132	; 0x84
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80046aa:	6811      	ldr	r1, [r2, #0]
 80046ac:	4381      	bics	r1, r0
 80046ae:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	6891      	ldr	r1, [r2, #8]
 80046b4:	4808      	ldr	r0, [pc, #32]	; (80046d8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80046b6:	4001      	ands	r1, r0
 80046b8:	4319      	orrs	r1, r3
 80046ba:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80046bc:	0020      	movs	r0, r4
 80046be:	f7ff ff77 	bl	80045b0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	2320      	movs	r3, #32
 80046c8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80046ca:	2300      	movs	r3, #0
 80046cc:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80046ce:	2000      	movs	r0, #0
}
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80046d2:	2002      	movs	r0, #2
 80046d4:	e7fc      	b.n	80046d0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	f1ffffff 	.word	0xf1ffffff

080046dc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80046dc:	4b01      	ldr	r3, [pc, #4]	; (80046e4 <LL_SetSystemCoreClock+0x8>)
 80046de:	6018      	str	r0, [r3, #0]
}
 80046e0:	4770      	bx	lr
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	20000004 	.word	0x20000004

080046e8 <__errno>:
 80046e8:	4b01      	ldr	r3, [pc, #4]	; (80046f0 <__errno+0x8>)
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	4770      	bx	lr
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	20000010 	.word	0x20000010

080046f4 <__libc_init_array>:
 80046f4:	b570      	push	{r4, r5, r6, lr}
 80046f6:	2600      	movs	r6, #0
 80046f8:	4d0c      	ldr	r5, [pc, #48]	; (800472c <__libc_init_array+0x38>)
 80046fa:	4c0d      	ldr	r4, [pc, #52]	; (8004730 <__libc_init_array+0x3c>)
 80046fc:	1b64      	subs	r4, r4, r5
 80046fe:	10a4      	asrs	r4, r4, #2
 8004700:	42a6      	cmp	r6, r4
 8004702:	d109      	bne.n	8004718 <__libc_init_array+0x24>
 8004704:	2600      	movs	r6, #0
 8004706:	f000 fd81 	bl	800520c <_init>
 800470a:	4d0a      	ldr	r5, [pc, #40]	; (8004734 <__libc_init_array+0x40>)
 800470c:	4c0a      	ldr	r4, [pc, #40]	; (8004738 <__libc_init_array+0x44>)
 800470e:	1b64      	subs	r4, r4, r5
 8004710:	10a4      	asrs	r4, r4, #2
 8004712:	42a6      	cmp	r6, r4
 8004714:	d105      	bne.n	8004722 <__libc_init_array+0x2e>
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	00b3      	lsls	r3, r6, #2
 800471a:	58eb      	ldr	r3, [r5, r3]
 800471c:	4798      	blx	r3
 800471e:	3601      	adds	r6, #1
 8004720:	e7ee      	b.n	8004700 <__libc_init_array+0xc>
 8004722:	00b3      	lsls	r3, r6, #2
 8004724:	58eb      	ldr	r3, [r5, r3]
 8004726:	4798      	blx	r3
 8004728:	3601      	adds	r6, #1
 800472a:	e7f2      	b.n	8004712 <__libc_init_array+0x1e>
 800472c:	080055ac 	.word	0x080055ac
 8004730:	080055ac 	.word	0x080055ac
 8004734:	080055ac 	.word	0x080055ac
 8004738:	080055b0 	.word	0x080055b0

0800473c <memset>:
 800473c:	0003      	movs	r3, r0
 800473e:	1882      	adds	r2, r0, r2
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	7019      	strb	r1, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <strncpy>:
 800474c:	0003      	movs	r3, r0
 800474e:	b530      	push	{r4, r5, lr}
 8004750:	001d      	movs	r5, r3
 8004752:	2a00      	cmp	r2, #0
 8004754:	d006      	beq.n	8004764 <strncpy+0x18>
 8004756:	780c      	ldrb	r4, [r1, #0]
 8004758:	3a01      	subs	r2, #1
 800475a:	3301      	adds	r3, #1
 800475c:	702c      	strb	r4, [r5, #0]
 800475e:	3101      	adds	r1, #1
 8004760:	2c00      	cmp	r4, #0
 8004762:	d1f5      	bne.n	8004750 <strncpy+0x4>
 8004764:	2100      	movs	r1, #0
 8004766:	189a      	adds	r2, r3, r2
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <strncpy+0x22>
 800476c:	bd30      	pop	{r4, r5, pc}
 800476e:	7019      	strb	r1, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	e7f9      	b.n	8004768 <strncpy+0x1c>

08004774 <__strtok_r>:
 8004774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004776:	2800      	cmp	r0, #0
 8004778:	d102      	bne.n	8004780 <__strtok_r+0xc>
 800477a:	6810      	ldr	r0, [r2, #0]
 800477c:	2800      	cmp	r0, #0
 800477e:	d013      	beq.n	80047a8 <__strtok_r+0x34>
 8004780:	0004      	movs	r4, r0
 8004782:	0020      	movs	r0, r4
 8004784:	000e      	movs	r6, r1
 8004786:	7805      	ldrb	r5, [r0, #0]
 8004788:	3401      	adds	r4, #1
 800478a:	7837      	ldrb	r7, [r6, #0]
 800478c:	2f00      	cmp	r7, #0
 800478e:	d104      	bne.n	800479a <__strtok_r+0x26>
 8004790:	2d00      	cmp	r5, #0
 8004792:	d10f      	bne.n	80047b4 <__strtok_r+0x40>
 8004794:	0028      	movs	r0, r5
 8004796:	6015      	str	r5, [r2, #0]
 8004798:	e006      	b.n	80047a8 <__strtok_r+0x34>
 800479a:	3601      	adds	r6, #1
 800479c:	42bd      	cmp	r5, r7
 800479e:	d1f4      	bne.n	800478a <__strtok_r+0x16>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ee      	bne.n	8004782 <__strtok_r+0xe>
 80047a4:	6014      	str	r4, [r2, #0]
 80047a6:	7003      	strb	r3, [r0, #0]
 80047a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047aa:	002f      	movs	r7, r5
 80047ac:	e00f      	b.n	80047ce <__strtok_r+0x5a>
 80047ae:	3301      	adds	r3, #1
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d104      	bne.n	80047be <__strtok_r+0x4a>
 80047b4:	0023      	movs	r3, r4
 80047b6:	3401      	adds	r4, #1
 80047b8:	781d      	ldrb	r5, [r3, #0]
 80047ba:	0027      	movs	r7, r4
 80047bc:	000b      	movs	r3, r1
 80047be:	781e      	ldrb	r6, [r3, #0]
 80047c0:	42b5      	cmp	r5, r6
 80047c2:	d1f4      	bne.n	80047ae <__strtok_r+0x3a>
 80047c4:	2d00      	cmp	r5, #0
 80047c6:	d0f0      	beq.n	80047aa <__strtok_r+0x36>
 80047c8:	2300      	movs	r3, #0
 80047ca:	3c01      	subs	r4, #1
 80047cc:	7023      	strb	r3, [r4, #0]
 80047ce:	6017      	str	r7, [r2, #0]
 80047d0:	e7ea      	b.n	80047a8 <__strtok_r+0x34>

080047d2 <strtok_r>:
 80047d2:	b510      	push	{r4, lr}
 80047d4:	2301      	movs	r3, #1
 80047d6:	f7ff ffcd 	bl	8004774 <__strtok_r>
 80047da:	bd10      	pop	{r4, pc}

080047dc <_strtoul_l.constprop.0>:
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047de:	b087      	sub	sp, #28
 80047e0:	9202      	str	r2, [sp, #8]
 80047e2:	4a42      	ldr	r2, [pc, #264]	; (80048ec <_strtoul_l.constprop.0+0x110>)
 80047e4:	001e      	movs	r6, r3
 80047e6:	9101      	str	r1, [sp, #4]
 80047e8:	000b      	movs	r3, r1
 80047ea:	4694      	mov	ip, r2
 80047ec:	2108      	movs	r1, #8
 80047ee:	9005      	str	r0, [sp, #20]
 80047f0:	001a      	movs	r2, r3
 80047f2:	4660      	mov	r0, ip
 80047f4:	7814      	ldrb	r4, [r2, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	5d00      	ldrb	r0, [r0, r4]
 80047fa:	001d      	movs	r5, r3
 80047fc:	0007      	movs	r7, r0
 80047fe:	400f      	ands	r7, r1
 8004800:	4208      	tst	r0, r1
 8004802:	d1f5      	bne.n	80047f0 <_strtoul_l.constprop.0+0x14>
 8004804:	2c2d      	cmp	r4, #45	; 0x2d
 8004806:	d13a      	bne.n	800487e <_strtoul_l.constprop.0+0xa2>
 8004808:	2701      	movs	r7, #1
 800480a:	781c      	ldrb	r4, [r3, #0]
 800480c:	1c95      	adds	r5, r2, #2
 800480e:	2e00      	cmp	r6, #0
 8004810:	d067      	beq.n	80048e2 <_strtoul_l.constprop.0+0x106>
 8004812:	2e10      	cmp	r6, #16
 8004814:	d109      	bne.n	800482a <_strtoul_l.constprop.0+0x4e>
 8004816:	2c30      	cmp	r4, #48	; 0x30
 8004818:	d107      	bne.n	800482a <_strtoul_l.constprop.0+0x4e>
 800481a:	2220      	movs	r2, #32
 800481c:	782b      	ldrb	r3, [r5, #0]
 800481e:	4393      	bics	r3, r2
 8004820:	2b58      	cmp	r3, #88	; 0x58
 8004822:	d159      	bne.n	80048d8 <_strtoul_l.constprop.0+0xfc>
 8004824:	2610      	movs	r6, #16
 8004826:	786c      	ldrb	r4, [r5, #1]
 8004828:	3502      	adds	r5, #2
 800482a:	2001      	movs	r0, #1
 800482c:	0031      	movs	r1, r6
 800482e:	4240      	negs	r0, r0
 8004830:	f7fc f87e 	bl	8000930 <__udivsi3>
 8004834:	9003      	str	r0, [sp, #12]
 8004836:	2001      	movs	r0, #1
 8004838:	0031      	movs	r1, r6
 800483a:	4240      	negs	r0, r0
 800483c:	f7fc f8fe 	bl	8000a3c <__aeabi_uidivmod>
 8004840:	2300      	movs	r3, #0
 8004842:	9104      	str	r1, [sp, #16]
 8004844:	2101      	movs	r1, #1
 8004846:	2201      	movs	r2, #1
 8004848:	0018      	movs	r0, r3
 800484a:	468c      	mov	ip, r1
 800484c:	4252      	negs	r2, r2
 800484e:	0021      	movs	r1, r4
 8004850:	3930      	subs	r1, #48	; 0x30
 8004852:	2909      	cmp	r1, #9
 8004854:	d818      	bhi.n	8004888 <_strtoul_l.constprop.0+0xac>
 8004856:	000c      	movs	r4, r1
 8004858:	42a6      	cmp	r6, r4
 800485a:	dd23      	ble.n	80048a4 <_strtoul_l.constprop.0+0xc8>
 800485c:	2b00      	cmp	r3, #0
 800485e:	db1f      	blt.n	80048a0 <_strtoul_l.constprop.0+0xc4>
 8004860:	9903      	ldr	r1, [sp, #12]
 8004862:	0013      	movs	r3, r2
 8004864:	4281      	cmp	r1, r0
 8004866:	d307      	bcc.n	8004878 <_strtoul_l.constprop.0+0x9c>
 8004868:	d103      	bne.n	8004872 <_strtoul_l.constprop.0+0x96>
 800486a:	9904      	ldr	r1, [sp, #16]
 800486c:	0013      	movs	r3, r2
 800486e:	42a1      	cmp	r1, r4
 8004870:	db02      	blt.n	8004878 <_strtoul_l.constprop.0+0x9c>
 8004872:	4663      	mov	r3, ip
 8004874:	4370      	muls	r0, r6
 8004876:	1820      	adds	r0, r4, r0
 8004878:	782c      	ldrb	r4, [r5, #0]
 800487a:	3501      	adds	r5, #1
 800487c:	e7e7      	b.n	800484e <_strtoul_l.constprop.0+0x72>
 800487e:	2c2b      	cmp	r4, #43	; 0x2b
 8004880:	d1c5      	bne.n	800480e <_strtoul_l.constprop.0+0x32>
 8004882:	781c      	ldrb	r4, [r3, #0]
 8004884:	1c95      	adds	r5, r2, #2
 8004886:	e7c2      	b.n	800480e <_strtoul_l.constprop.0+0x32>
 8004888:	0021      	movs	r1, r4
 800488a:	3941      	subs	r1, #65	; 0x41
 800488c:	2919      	cmp	r1, #25
 800488e:	d801      	bhi.n	8004894 <_strtoul_l.constprop.0+0xb8>
 8004890:	3c37      	subs	r4, #55	; 0x37
 8004892:	e7e1      	b.n	8004858 <_strtoul_l.constprop.0+0x7c>
 8004894:	0021      	movs	r1, r4
 8004896:	3961      	subs	r1, #97	; 0x61
 8004898:	2919      	cmp	r1, #25
 800489a:	d803      	bhi.n	80048a4 <_strtoul_l.constprop.0+0xc8>
 800489c:	3c57      	subs	r4, #87	; 0x57
 800489e:	e7db      	b.n	8004858 <_strtoul_l.constprop.0+0x7c>
 80048a0:	0013      	movs	r3, r2
 80048a2:	e7e9      	b.n	8004878 <_strtoul_l.constprop.0+0x9c>
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da09      	bge.n	80048bc <_strtoul_l.constprop.0+0xe0>
 80048a8:	2322      	movs	r3, #34	; 0x22
 80048aa:	2001      	movs	r0, #1
 80048ac:	9a05      	ldr	r2, [sp, #20]
 80048ae:	4240      	negs	r0, r0
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <_strtoul_l.constprop.0+0xf0>
 80048b8:	b007      	add	sp, #28
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048bc:	2f00      	cmp	r7, #0
 80048be:	d000      	beq.n	80048c2 <_strtoul_l.constprop.0+0xe6>
 80048c0:	4240      	negs	r0, r0
 80048c2:	9a02      	ldr	r2, [sp, #8]
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d0f7      	beq.n	80048b8 <_strtoul_l.constprop.0+0xdc>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <_strtoul_l.constprop.0+0xf4>
 80048cc:	1e6b      	subs	r3, r5, #1
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	9a01      	ldr	r2, [sp, #4]
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e7ef      	b.n	80048b8 <_strtoul_l.constprop.0+0xdc>
 80048d8:	2430      	movs	r4, #48	; 0x30
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d1a5      	bne.n	800482a <_strtoul_l.constprop.0+0x4e>
 80048de:	3608      	adds	r6, #8
 80048e0:	e7a3      	b.n	800482a <_strtoul_l.constprop.0+0x4e>
 80048e2:	2c30      	cmp	r4, #48	; 0x30
 80048e4:	d099      	beq.n	800481a <_strtoul_l.constprop.0+0x3e>
 80048e6:	260a      	movs	r6, #10
 80048e8:	e79f      	b.n	800482a <_strtoul_l.constprop.0+0x4e>
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	08005479 	.word	0x08005479

080048f0 <strtoul>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	0013      	movs	r3, r2
 80048f4:	000a      	movs	r2, r1
 80048f6:	0001      	movs	r1, r0
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <strtoul+0x14>)
 80048fa:	6800      	ldr	r0, [r0, #0]
 80048fc:	f7ff ff6e 	bl	80047dc <_strtoul_l.constprop.0>
 8004900:	bd10      	pop	{r4, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	20000010 	.word	0x20000010

08004908 <_vsniprintf_r>:
 8004908:	b530      	push	{r4, r5, lr}
 800490a:	0014      	movs	r4, r2
 800490c:	0005      	movs	r5, r0
 800490e:	001a      	movs	r2, r3
 8004910:	b09b      	sub	sp, #108	; 0x6c
 8004912:	2c00      	cmp	r4, #0
 8004914:	da05      	bge.n	8004922 <_vsniprintf_r+0x1a>
 8004916:	238b      	movs	r3, #139	; 0x8b
 8004918:	6003      	str	r3, [r0, #0]
 800491a:	2001      	movs	r0, #1
 800491c:	4240      	negs	r0, r0
 800491e:	b01b      	add	sp, #108	; 0x6c
 8004920:	bd30      	pop	{r4, r5, pc}
 8004922:	2382      	movs	r3, #130	; 0x82
 8004924:	4668      	mov	r0, sp
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	8183      	strh	r3, [r0, #12]
 800492a:	2300      	movs	r3, #0
 800492c:	9100      	str	r1, [sp, #0]
 800492e:	9104      	str	r1, [sp, #16]
 8004930:	429c      	cmp	r4, r3
 8004932:	d000      	beq.n	8004936 <_vsniprintf_r+0x2e>
 8004934:	1e63      	subs	r3, r4, #1
 8004936:	9302      	str	r3, [sp, #8]
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	2301      	movs	r3, #1
 800493c:	4669      	mov	r1, sp
 800493e:	425b      	negs	r3, r3
 8004940:	81cb      	strh	r3, [r1, #14]
 8004942:	0028      	movs	r0, r5
 8004944:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004946:	f000 f879 	bl	8004a3c <_svfiprintf_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	da01      	bge.n	8004952 <_vsniprintf_r+0x4a>
 800494e:	238b      	movs	r3, #139	; 0x8b
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	2c00      	cmp	r4, #0
 8004954:	d0e3      	beq.n	800491e <_vsniprintf_r+0x16>
 8004956:	2300      	movs	r3, #0
 8004958:	9a00      	ldr	r2, [sp, #0]
 800495a:	7013      	strb	r3, [r2, #0]
 800495c:	e7df      	b.n	800491e <_vsniprintf_r+0x16>
	...

08004960 <vsniprintf>:
 8004960:	b507      	push	{r0, r1, r2, lr}
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	0013      	movs	r3, r2
 8004966:	000a      	movs	r2, r1
 8004968:	0001      	movs	r1, r0
 800496a:	4802      	ldr	r0, [pc, #8]	; (8004974 <vsniprintf+0x14>)
 800496c:	6800      	ldr	r0, [r0, #0]
 800496e:	f7ff ffcb 	bl	8004908 <_vsniprintf_r>
 8004972:	bd0e      	pop	{r1, r2, r3, pc}
 8004974:	20000010 	.word	0x20000010

08004978 <__ssputs_r>:
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	688e      	ldr	r6, [r1, #8]
 800497c:	b085      	sub	sp, #20
 800497e:	0007      	movs	r7, r0
 8004980:	000c      	movs	r4, r1
 8004982:	9203      	str	r2, [sp, #12]
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	429e      	cmp	r6, r3
 8004988:	d83c      	bhi.n	8004a04 <__ssputs_r+0x8c>
 800498a:	2390      	movs	r3, #144	; 0x90
 800498c:	898a      	ldrh	r2, [r1, #12]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	421a      	tst	r2, r3
 8004992:	d034      	beq.n	80049fe <__ssputs_r+0x86>
 8004994:	6909      	ldr	r1, [r1, #16]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	6960      	ldr	r0, [r4, #20]
 800499a:	1a5b      	subs	r3, r3, r1
 800499c:	9302      	str	r3, [sp, #8]
 800499e:	2303      	movs	r3, #3
 80049a0:	4343      	muls	r3, r0
 80049a2:	0fdd      	lsrs	r5, r3, #31
 80049a4:	18ed      	adds	r5, r5, r3
 80049a6:	9b01      	ldr	r3, [sp, #4]
 80049a8:	9802      	ldr	r0, [sp, #8]
 80049aa:	3301      	adds	r3, #1
 80049ac:	181b      	adds	r3, r3, r0
 80049ae:	106d      	asrs	r5, r5, #1
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	d900      	bls.n	80049b6 <__ssputs_r+0x3e>
 80049b4:	001d      	movs	r5, r3
 80049b6:	0553      	lsls	r3, r2, #21
 80049b8:	d532      	bpl.n	8004a20 <__ssputs_r+0xa8>
 80049ba:	0029      	movs	r1, r5
 80049bc:	0038      	movs	r0, r7
 80049be:	f000 fb53 	bl	8005068 <_malloc_r>
 80049c2:	1e06      	subs	r6, r0, #0
 80049c4:	d109      	bne.n	80049da <__ssputs_r+0x62>
 80049c6:	230c      	movs	r3, #12
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	2001      	movs	r0, #1
 80049ce:	89a2      	ldrh	r2, [r4, #12]
 80049d0:	4240      	negs	r0, r0
 80049d2:	4313      	orrs	r3, r2
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	b005      	add	sp, #20
 80049d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049da:	9a02      	ldr	r2, [sp, #8]
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	f000 faba 	bl	8004f56 <memcpy>
 80049e2:	89a3      	ldrh	r3, [r4, #12]
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <__ssputs_r+0xc0>)
 80049e6:	401a      	ands	r2, r3
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	4313      	orrs	r3, r2
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	9b02      	ldr	r3, [sp, #8]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	18f6      	adds	r6, r6, r3
 80049f4:	6026      	str	r6, [r4, #0]
 80049f6:	6165      	str	r5, [r4, #20]
 80049f8:	9e01      	ldr	r6, [sp, #4]
 80049fa:	1aed      	subs	r5, r5, r3
 80049fc:	60a5      	str	r5, [r4, #8]
 80049fe:	9b01      	ldr	r3, [sp, #4]
 8004a00:	429e      	cmp	r6, r3
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x8e>
 8004a04:	9e01      	ldr	r6, [sp, #4]
 8004a06:	0032      	movs	r2, r6
 8004a08:	9903      	ldr	r1, [sp, #12]
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	f000 faac 	bl	8004f68 <memmove>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	2000      	movs	r0, #0
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	199e      	adds	r6, r3, r6
 8004a1c:	6026      	str	r6, [r4, #0]
 8004a1e:	e7da      	b.n	80049d6 <__ssputs_r+0x5e>
 8004a20:	002a      	movs	r2, r5
 8004a22:	0038      	movs	r0, r7
 8004a24:	f000 fb96 	bl	8005154 <_realloc_r>
 8004a28:	1e06      	subs	r6, r0, #0
 8004a2a:	d1e0      	bne.n	80049ee <__ssputs_r+0x76>
 8004a2c:	0038      	movs	r0, r7
 8004a2e:	6921      	ldr	r1, [r4, #16]
 8004a30:	f000 faae 	bl	8004f90 <_free_r>
 8004a34:	e7c7      	b.n	80049c6 <__ssputs_r+0x4e>
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	fffffb7f 	.word	0xfffffb7f

08004a3c <_svfiprintf_r>:
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	b0a1      	sub	sp, #132	; 0x84
 8004a40:	9003      	str	r0, [sp, #12]
 8004a42:	001d      	movs	r5, r3
 8004a44:	898b      	ldrh	r3, [r1, #12]
 8004a46:	000f      	movs	r7, r1
 8004a48:	0016      	movs	r6, r2
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	d511      	bpl.n	8004a72 <_svfiprintf_r+0x36>
 8004a4e:	690b      	ldr	r3, [r1, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10e      	bne.n	8004a72 <_svfiprintf_r+0x36>
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	f000 fb07 	bl	8005068 <_malloc_r>
 8004a5a:	6038      	str	r0, [r7, #0]
 8004a5c:	6138      	str	r0, [r7, #16]
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d105      	bne.n	8004a6e <_svfiprintf_r+0x32>
 8004a62:	230c      	movs	r3, #12
 8004a64:	9a03      	ldr	r2, [sp, #12]
 8004a66:	3801      	subs	r0, #1
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	b021      	add	sp, #132	; 0x84
 8004a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6e:	2340      	movs	r3, #64	; 0x40
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	2300      	movs	r3, #0
 8004a74:	ac08      	add	r4, sp, #32
 8004a76:	6163      	str	r3, [r4, #20]
 8004a78:	3320      	adds	r3, #32
 8004a7a:	7663      	strb	r3, [r4, #25]
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	76a3      	strb	r3, [r4, #26]
 8004a80:	9507      	str	r5, [sp, #28]
 8004a82:	0035      	movs	r5, r6
 8004a84:	782b      	ldrb	r3, [r5, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <_svfiprintf_r+0x52>
 8004a8a:	2b25      	cmp	r3, #37	; 0x25
 8004a8c:	d147      	bne.n	8004b1e <_svfiprintf_r+0xe2>
 8004a8e:	1bab      	subs	r3, r5, r6
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d00c      	beq.n	8004ab0 <_svfiprintf_r+0x74>
 8004a96:	0032      	movs	r2, r6
 8004a98:	0039      	movs	r1, r7
 8004a9a:	9803      	ldr	r0, [sp, #12]
 8004a9c:	f7ff ff6c 	bl	8004978 <__ssputs_r>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d100      	bne.n	8004aa6 <_svfiprintf_r+0x6a>
 8004aa4:	e0ae      	b.n	8004c04 <_svfiprintf_r+0x1c8>
 8004aa6:	6962      	ldr	r2, [r4, #20]
 8004aa8:	9b05      	ldr	r3, [sp, #20]
 8004aaa:	4694      	mov	ip, r2
 8004aac:	4463      	add	r3, ip
 8004aae:	6163      	str	r3, [r4, #20]
 8004ab0:	782b      	ldrb	r3, [r5, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d100      	bne.n	8004ab8 <_svfiprintf_r+0x7c>
 8004ab6:	e0a5      	b.n	8004c04 <_svfiprintf_r+0x1c8>
 8004ab8:	2201      	movs	r2, #1
 8004aba:	2300      	movs	r3, #0
 8004abc:	4252      	negs	r2, r2
 8004abe:	6062      	str	r2, [r4, #4]
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	3254      	adds	r2, #84	; 0x54
 8004ac4:	1852      	adds	r2, r2, r1
 8004ac6:	1c6e      	adds	r6, r5, #1
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	60e3      	str	r3, [r4, #12]
 8004acc:	60a3      	str	r3, [r4, #8]
 8004ace:	7013      	strb	r3, [r2, #0]
 8004ad0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ad2:	2205      	movs	r2, #5
 8004ad4:	7831      	ldrb	r1, [r6, #0]
 8004ad6:	4854      	ldr	r0, [pc, #336]	; (8004c28 <_svfiprintf_r+0x1ec>)
 8004ad8:	f000 fa32 	bl	8004f40 <memchr>
 8004adc:	1c75      	adds	r5, r6, #1
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d11f      	bne.n	8004b22 <_svfiprintf_r+0xe6>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	06d3      	lsls	r3, r2, #27
 8004ae6:	d504      	bpl.n	8004af2 <_svfiprintf_r+0xb6>
 8004ae8:	2353      	movs	r3, #83	; 0x53
 8004aea:	a904      	add	r1, sp, #16
 8004aec:	185b      	adds	r3, r3, r1
 8004aee:	2120      	movs	r1, #32
 8004af0:	7019      	strb	r1, [r3, #0]
 8004af2:	0713      	lsls	r3, r2, #28
 8004af4:	d504      	bpl.n	8004b00 <_svfiprintf_r+0xc4>
 8004af6:	2353      	movs	r3, #83	; 0x53
 8004af8:	a904      	add	r1, sp, #16
 8004afa:	185b      	adds	r3, r3, r1
 8004afc:	212b      	movs	r1, #43	; 0x2b
 8004afe:	7019      	strb	r1, [r3, #0]
 8004b00:	7833      	ldrb	r3, [r6, #0]
 8004b02:	2b2a      	cmp	r3, #42	; 0x2a
 8004b04:	d016      	beq.n	8004b34 <_svfiprintf_r+0xf8>
 8004b06:	0035      	movs	r5, r6
 8004b08:	2100      	movs	r1, #0
 8004b0a:	200a      	movs	r0, #10
 8004b0c:	68e3      	ldr	r3, [r4, #12]
 8004b0e:	782a      	ldrb	r2, [r5, #0]
 8004b10:	1c6e      	adds	r6, r5, #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d94e      	bls.n	8004bb6 <_svfiprintf_r+0x17a>
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	d111      	bne.n	8004b40 <_svfiprintf_r+0x104>
 8004b1c:	e017      	b.n	8004b4e <_svfiprintf_r+0x112>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	e7b0      	b.n	8004a84 <_svfiprintf_r+0x48>
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <_svfiprintf_r+0x1ec>)
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	1ac0      	subs	r0, r0, r3
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4083      	lsls	r3, r0
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	002e      	movs	r6, r5
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	e7ce      	b.n	8004ad2 <_svfiprintf_r+0x96>
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	1d19      	adds	r1, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	9107      	str	r1, [sp, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	db01      	blt.n	8004b44 <_svfiprintf_r+0x108>
 8004b40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b42:	e004      	b.n	8004b4e <_svfiprintf_r+0x112>
 8004b44:	425b      	negs	r3, r3
 8004b46:	60e3      	str	r3, [r4, #12]
 8004b48:	2302      	movs	r3, #2
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	782b      	ldrb	r3, [r5, #0]
 8004b50:	2b2e      	cmp	r3, #46	; 0x2e
 8004b52:	d10a      	bne.n	8004b6a <_svfiprintf_r+0x12e>
 8004b54:	786b      	ldrb	r3, [r5, #1]
 8004b56:	2b2a      	cmp	r3, #42	; 0x2a
 8004b58:	d135      	bne.n	8004bc6 <_svfiprintf_r+0x18a>
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	3502      	adds	r5, #2
 8004b5e:	1d1a      	adds	r2, r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	9207      	str	r2, [sp, #28]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	db2b      	blt.n	8004bc0 <_svfiprintf_r+0x184>
 8004b68:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6a:	4e30      	ldr	r6, [pc, #192]	; (8004c2c <_svfiprintf_r+0x1f0>)
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	0030      	movs	r0, r6
 8004b70:	7829      	ldrb	r1, [r5, #0]
 8004b72:	f000 f9e5 	bl	8004f40 <memchr>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d006      	beq.n	8004b88 <_svfiprintf_r+0x14c>
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	1b80      	subs	r0, r0, r6
 8004b7e:	4083      	lsls	r3, r0
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	3501      	adds	r5, #1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	7829      	ldrb	r1, [r5, #0]
 8004b8a:	2206      	movs	r2, #6
 8004b8c:	4828      	ldr	r0, [pc, #160]	; (8004c30 <_svfiprintf_r+0x1f4>)
 8004b8e:	1c6e      	adds	r6, r5, #1
 8004b90:	7621      	strb	r1, [r4, #24]
 8004b92:	f000 f9d5 	bl	8004f40 <memchr>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d03c      	beq.n	8004c14 <_svfiprintf_r+0x1d8>
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <_svfiprintf_r+0x1f8>)
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d125      	bne.n	8004bec <_svfiprintf_r+0x1b0>
 8004ba0:	2207      	movs	r2, #7
 8004ba2:	9b07      	ldr	r3, [sp, #28]
 8004ba4:	3307      	adds	r3, #7
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	3308      	adds	r3, #8
 8004baa:	9307      	str	r3, [sp, #28]
 8004bac:	6963      	ldr	r3, [r4, #20]
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	6163      	str	r3, [r4, #20]
 8004bb4:	e765      	b.n	8004a82 <_svfiprintf_r+0x46>
 8004bb6:	4343      	muls	r3, r0
 8004bb8:	0035      	movs	r5, r6
 8004bba:	2101      	movs	r1, #1
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	e7a6      	b.n	8004b0e <_svfiprintf_r+0xd2>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	425b      	negs	r3, r3
 8004bc4:	e7d0      	b.n	8004b68 <_svfiprintf_r+0x12c>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	200a      	movs	r0, #10
 8004bca:	001a      	movs	r2, r3
 8004bcc:	3501      	adds	r5, #1
 8004bce:	6063      	str	r3, [r4, #4]
 8004bd0:	7829      	ldrb	r1, [r5, #0]
 8004bd2:	1c6e      	adds	r6, r5, #1
 8004bd4:	3930      	subs	r1, #48	; 0x30
 8004bd6:	2909      	cmp	r1, #9
 8004bd8:	d903      	bls.n	8004be2 <_svfiprintf_r+0x1a6>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0c5      	beq.n	8004b6a <_svfiprintf_r+0x12e>
 8004bde:	9209      	str	r2, [sp, #36]	; 0x24
 8004be0:	e7c3      	b.n	8004b6a <_svfiprintf_r+0x12e>
 8004be2:	4342      	muls	r2, r0
 8004be4:	0035      	movs	r5, r6
 8004be6:	2301      	movs	r3, #1
 8004be8:	1852      	adds	r2, r2, r1
 8004bea:	e7f1      	b.n	8004bd0 <_svfiprintf_r+0x194>
 8004bec:	ab07      	add	r3, sp, #28
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	003a      	movs	r2, r7
 8004bf2:	0021      	movs	r1, r4
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <_svfiprintf_r+0x1fc>)
 8004bf6:	9803      	ldr	r0, [sp, #12]
 8004bf8:	e000      	b.n	8004bfc <_svfiprintf_r+0x1c0>
 8004bfa:	bf00      	nop
 8004bfc:	9004      	str	r0, [sp, #16]
 8004bfe:	9b04      	ldr	r3, [sp, #16]
 8004c00:	3301      	adds	r3, #1
 8004c02:	d1d3      	bne.n	8004bac <_svfiprintf_r+0x170>
 8004c04:	89bb      	ldrh	r3, [r7, #12]
 8004c06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c08:	065b      	lsls	r3, r3, #25
 8004c0a:	d400      	bmi.n	8004c0e <_svfiprintf_r+0x1d2>
 8004c0c:	e72d      	b.n	8004a6a <_svfiprintf_r+0x2e>
 8004c0e:	2001      	movs	r0, #1
 8004c10:	4240      	negs	r0, r0
 8004c12:	e72a      	b.n	8004a6a <_svfiprintf_r+0x2e>
 8004c14:	ab07      	add	r3, sp, #28
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	003a      	movs	r2, r7
 8004c1a:	0021      	movs	r1, r4
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <_svfiprintf_r+0x1fc>)
 8004c1e:	9803      	ldr	r0, [sp, #12]
 8004c20:	f000 f87c 	bl	8004d1c <_printf_i>
 8004c24:	e7ea      	b.n	8004bfc <_svfiprintf_r+0x1c0>
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	08005579 	.word	0x08005579
 8004c2c:	0800557f 	.word	0x0800557f
 8004c30:	08005583 	.word	0x08005583
 8004c34:	00000000 	.word	0x00000000
 8004c38:	08004979 	.word	0x08004979

08004c3c <_printf_common>:
 8004c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c3e:	0015      	movs	r5, r2
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	688a      	ldr	r2, [r1, #8]
 8004c44:	690b      	ldr	r3, [r1, #16]
 8004c46:	000c      	movs	r4, r1
 8004c48:	9000      	str	r0, [sp, #0]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	da00      	bge.n	8004c50 <_printf_common+0x14>
 8004c4e:	0013      	movs	r3, r2
 8004c50:	0022      	movs	r2, r4
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	3243      	adds	r2, #67	; 0x43
 8004c56:	7812      	ldrb	r2, [r2, #0]
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	d001      	beq.n	8004c60 <_printf_common+0x24>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	069b      	lsls	r3, r3, #26
 8004c64:	d502      	bpl.n	8004c6c <_printf_common+0x30>
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	3302      	adds	r3, #2
 8004c6a:	602b      	str	r3, [r5, #0]
 8004c6c:	6822      	ldr	r2, [r4, #0]
 8004c6e:	2306      	movs	r3, #6
 8004c70:	0017      	movs	r7, r2
 8004c72:	401f      	ands	r7, r3
 8004c74:	421a      	tst	r2, r3
 8004c76:	d027      	beq.n	8004cc8 <_printf_common+0x8c>
 8004c78:	0023      	movs	r3, r4
 8004c7a:	3343      	adds	r3, #67	; 0x43
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	1e5a      	subs	r2, r3, #1
 8004c80:	4193      	sbcs	r3, r2
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	0692      	lsls	r2, r2, #26
 8004c86:	d430      	bmi.n	8004cea <_printf_common+0xae>
 8004c88:	0022      	movs	r2, r4
 8004c8a:	9901      	ldr	r1, [sp, #4]
 8004c8c:	9800      	ldr	r0, [sp, #0]
 8004c8e:	9e08      	ldr	r6, [sp, #32]
 8004c90:	3243      	adds	r2, #67	; 0x43
 8004c92:	47b0      	blx	r6
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d025      	beq.n	8004ce4 <_printf_common+0xa8>
 8004c98:	2306      	movs	r3, #6
 8004c9a:	6820      	ldr	r0, [r4, #0]
 8004c9c:	682a      	ldr	r2, [r5, #0]
 8004c9e:	68e1      	ldr	r1, [r4, #12]
 8004ca0:	2500      	movs	r5, #0
 8004ca2:	4003      	ands	r3, r0
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d103      	bne.n	8004cb0 <_printf_common+0x74>
 8004ca8:	1a8d      	subs	r5, r1, r2
 8004caa:	43eb      	mvns	r3, r5
 8004cac:	17db      	asrs	r3, r3, #31
 8004cae:	401d      	ands	r5, r3
 8004cb0:	68a3      	ldr	r3, [r4, #8]
 8004cb2:	6922      	ldr	r2, [r4, #16]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	dd01      	ble.n	8004cbc <_printf_common+0x80>
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	18ed      	adds	r5, r5, r3
 8004cbc:	2700      	movs	r7, #0
 8004cbe:	42bd      	cmp	r5, r7
 8004cc0:	d120      	bne.n	8004d04 <_printf_common+0xc8>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e010      	b.n	8004ce8 <_printf_common+0xac>
 8004cc6:	3701      	adds	r7, #1
 8004cc8:	68e3      	ldr	r3, [r4, #12]
 8004cca:	682a      	ldr	r2, [r5, #0]
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	42bb      	cmp	r3, r7
 8004cd0:	ddd2      	ble.n	8004c78 <_printf_common+0x3c>
 8004cd2:	0022      	movs	r2, r4
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9901      	ldr	r1, [sp, #4]
 8004cd8:	9800      	ldr	r0, [sp, #0]
 8004cda:	9e08      	ldr	r6, [sp, #32]
 8004cdc:	3219      	adds	r2, #25
 8004cde:	47b0      	blx	r6
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d1f0      	bne.n	8004cc6 <_printf_common+0x8a>
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	4240      	negs	r0, r0
 8004ce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cea:	2030      	movs	r0, #48	; 0x30
 8004cec:	18e1      	adds	r1, r4, r3
 8004cee:	3143      	adds	r1, #67	; 0x43
 8004cf0:	7008      	strb	r0, [r1, #0]
 8004cf2:	0021      	movs	r1, r4
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	3145      	adds	r1, #69	; 0x45
 8004cf8:	7809      	ldrb	r1, [r1, #0]
 8004cfa:	18a2      	adds	r2, r4, r2
 8004cfc:	3243      	adds	r2, #67	; 0x43
 8004cfe:	3302      	adds	r3, #2
 8004d00:	7011      	strb	r1, [r2, #0]
 8004d02:	e7c1      	b.n	8004c88 <_printf_common+0x4c>
 8004d04:	0022      	movs	r2, r4
 8004d06:	2301      	movs	r3, #1
 8004d08:	9901      	ldr	r1, [sp, #4]
 8004d0a:	9800      	ldr	r0, [sp, #0]
 8004d0c:	9e08      	ldr	r6, [sp, #32]
 8004d0e:	321a      	adds	r2, #26
 8004d10:	47b0      	blx	r6
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d0e6      	beq.n	8004ce4 <_printf_common+0xa8>
 8004d16:	3701      	adds	r7, #1
 8004d18:	e7d1      	b.n	8004cbe <_printf_common+0x82>
	...

08004d1c <_printf_i>:
 8004d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d1e:	b08b      	sub	sp, #44	; 0x2c
 8004d20:	9206      	str	r2, [sp, #24]
 8004d22:	000a      	movs	r2, r1
 8004d24:	3243      	adds	r2, #67	; 0x43
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	9005      	str	r0, [sp, #20]
 8004d2a:	9204      	str	r2, [sp, #16]
 8004d2c:	7e0a      	ldrb	r2, [r1, #24]
 8004d2e:	000c      	movs	r4, r1
 8004d30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d32:	2a78      	cmp	r2, #120	; 0x78
 8004d34:	d807      	bhi.n	8004d46 <_printf_i+0x2a>
 8004d36:	2a62      	cmp	r2, #98	; 0x62
 8004d38:	d809      	bhi.n	8004d4e <_printf_i+0x32>
 8004d3a:	2a00      	cmp	r2, #0
 8004d3c:	d100      	bne.n	8004d40 <_printf_i+0x24>
 8004d3e:	e0c1      	b.n	8004ec4 <_printf_i+0x1a8>
 8004d40:	2a58      	cmp	r2, #88	; 0x58
 8004d42:	d100      	bne.n	8004d46 <_printf_i+0x2a>
 8004d44:	e08c      	b.n	8004e60 <_printf_i+0x144>
 8004d46:	0026      	movs	r6, r4
 8004d48:	3642      	adds	r6, #66	; 0x42
 8004d4a:	7032      	strb	r2, [r6, #0]
 8004d4c:	e022      	b.n	8004d94 <_printf_i+0x78>
 8004d4e:	0010      	movs	r0, r2
 8004d50:	3863      	subs	r0, #99	; 0x63
 8004d52:	2815      	cmp	r0, #21
 8004d54:	d8f7      	bhi.n	8004d46 <_printf_i+0x2a>
 8004d56:	f7fb fde1 	bl	800091c <__gnu_thumb1_case_shi>
 8004d5a:	0016      	.short	0x0016
 8004d5c:	fff6001f 	.word	0xfff6001f
 8004d60:	fff6fff6 	.word	0xfff6fff6
 8004d64:	001ffff6 	.word	0x001ffff6
 8004d68:	fff6fff6 	.word	0xfff6fff6
 8004d6c:	fff6fff6 	.word	0xfff6fff6
 8004d70:	003600a8 	.word	0x003600a8
 8004d74:	fff6009a 	.word	0xfff6009a
 8004d78:	00b9fff6 	.word	0x00b9fff6
 8004d7c:	0036fff6 	.word	0x0036fff6
 8004d80:	fff6fff6 	.word	0xfff6fff6
 8004d84:	009e      	.short	0x009e
 8004d86:	0026      	movs	r6, r4
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	3642      	adds	r6, #66	; 0x42
 8004d8c:	1d11      	adds	r1, r2, #4
 8004d8e:	6019      	str	r1, [r3, #0]
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	7033      	strb	r3, [r6, #0]
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0a7      	b.n	8004ee8 <_printf_i+0x1cc>
 8004d98:	6808      	ldr	r0, [r1, #0]
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	1d0a      	adds	r2, r1, #4
 8004d9e:	0605      	lsls	r5, r0, #24
 8004da0:	d50b      	bpl.n	8004dba <_printf_i+0x9e>
 8004da2:	680d      	ldr	r5, [r1, #0]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	da03      	bge.n	8004db2 <_printf_i+0x96>
 8004daa:	232d      	movs	r3, #45	; 0x2d
 8004dac:	9a04      	ldr	r2, [sp, #16]
 8004dae:	426d      	negs	r5, r5
 8004db0:	7013      	strb	r3, [r2, #0]
 8004db2:	4b61      	ldr	r3, [pc, #388]	; (8004f38 <_printf_i+0x21c>)
 8004db4:	270a      	movs	r7, #10
 8004db6:	9303      	str	r3, [sp, #12]
 8004db8:	e01b      	b.n	8004df2 <_printf_i+0xd6>
 8004dba:	680d      	ldr	r5, [r1, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	0641      	lsls	r1, r0, #25
 8004dc0:	d5f1      	bpl.n	8004da6 <_printf_i+0x8a>
 8004dc2:	b22d      	sxth	r5, r5
 8004dc4:	e7ef      	b.n	8004da6 <_printf_i+0x8a>
 8004dc6:	680d      	ldr	r5, [r1, #0]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	1d08      	adds	r0, r1, #4
 8004dcc:	6018      	str	r0, [r3, #0]
 8004dce:	062e      	lsls	r6, r5, #24
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0xba>
 8004dd2:	680d      	ldr	r5, [r1, #0]
 8004dd4:	e003      	b.n	8004dde <_printf_i+0xc2>
 8004dd6:	066d      	lsls	r5, r5, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0xb6>
 8004dda:	680d      	ldr	r5, [r1, #0]
 8004ddc:	b2ad      	uxth	r5, r5
 8004dde:	4b56      	ldr	r3, [pc, #344]	; (8004f38 <_printf_i+0x21c>)
 8004de0:	2708      	movs	r7, #8
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	2a6f      	cmp	r2, #111	; 0x6f
 8004de6:	d000      	beq.n	8004dea <_printf_i+0xce>
 8004de8:	3702      	adds	r7, #2
 8004dea:	0023      	movs	r3, r4
 8004dec:	2200      	movs	r2, #0
 8004dee:	3343      	adds	r3, #67	; 0x43
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db03      	blt.n	8004e02 <_printf_i+0xe6>
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	6821      	ldr	r1, [r4, #0]
 8004dfe:	4391      	bics	r1, r2
 8004e00:	6021      	str	r1, [r4, #0]
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	d102      	bne.n	8004e0c <_printf_i+0xf0>
 8004e06:	9e04      	ldr	r6, [sp, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <_printf_i+0x10a>
 8004e0c:	9e04      	ldr	r6, [sp, #16]
 8004e0e:	0028      	movs	r0, r5
 8004e10:	0039      	movs	r1, r7
 8004e12:	f7fb fe13 	bl	8000a3c <__aeabi_uidivmod>
 8004e16:	9b03      	ldr	r3, [sp, #12]
 8004e18:	3e01      	subs	r6, #1
 8004e1a:	5c5b      	ldrb	r3, [r3, r1]
 8004e1c:	7033      	strb	r3, [r6, #0]
 8004e1e:	002b      	movs	r3, r5
 8004e20:	0005      	movs	r5, r0
 8004e22:	429f      	cmp	r7, r3
 8004e24:	d9f3      	bls.n	8004e0e <_printf_i+0xf2>
 8004e26:	2f08      	cmp	r7, #8
 8004e28:	d109      	bne.n	8004e3e <_printf_i+0x122>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	07db      	lsls	r3, r3, #31
 8004e2e:	d506      	bpl.n	8004e3e <_printf_i+0x122>
 8004e30:	6863      	ldr	r3, [r4, #4]
 8004e32:	6922      	ldr	r2, [r4, #16]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	dc02      	bgt.n	8004e3e <_printf_i+0x122>
 8004e38:	2330      	movs	r3, #48	; 0x30
 8004e3a:	3e01      	subs	r6, #1
 8004e3c:	7033      	strb	r3, [r6, #0]
 8004e3e:	9b04      	ldr	r3, [sp, #16]
 8004e40:	1b9b      	subs	r3, r3, r6
 8004e42:	6123      	str	r3, [r4, #16]
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	0021      	movs	r1, r4
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	9805      	ldr	r0, [sp, #20]
 8004e4c:	9b06      	ldr	r3, [sp, #24]
 8004e4e:	aa09      	add	r2, sp, #36	; 0x24
 8004e50:	f7ff fef4 	bl	8004c3c <_printf_common>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d14c      	bne.n	8004ef2 <_printf_i+0x1d6>
 8004e58:	2001      	movs	r0, #1
 8004e5a:	4240      	negs	r0, r0
 8004e5c:	b00b      	add	sp, #44	; 0x2c
 8004e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e60:	3145      	adds	r1, #69	; 0x45
 8004e62:	700a      	strb	r2, [r1, #0]
 8004e64:	4a34      	ldr	r2, [pc, #208]	; (8004f38 <_printf_i+0x21c>)
 8004e66:	9203      	str	r2, [sp, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	6821      	ldr	r1, [r4, #0]
 8004e6c:	ca20      	ldmia	r2!, {r5}
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	0608      	lsls	r0, r1, #24
 8004e72:	d516      	bpl.n	8004ea2 <_printf_i+0x186>
 8004e74:	07cb      	lsls	r3, r1, #31
 8004e76:	d502      	bpl.n	8004e7e <_printf_i+0x162>
 8004e78:	2320      	movs	r3, #32
 8004e7a:	4319      	orrs	r1, r3
 8004e7c:	6021      	str	r1, [r4, #0]
 8004e7e:	2710      	movs	r7, #16
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	d1b2      	bne.n	8004dea <_printf_i+0xce>
 8004e84:	2320      	movs	r3, #32
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	439a      	bics	r2, r3
 8004e8a:	6022      	str	r2, [r4, #0]
 8004e8c:	e7ad      	b.n	8004dea <_printf_i+0xce>
 8004e8e:	2220      	movs	r2, #32
 8004e90:	6809      	ldr	r1, [r1, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	6022      	str	r2, [r4, #0]
 8004e96:	0022      	movs	r2, r4
 8004e98:	2178      	movs	r1, #120	; 0x78
 8004e9a:	3245      	adds	r2, #69	; 0x45
 8004e9c:	7011      	strb	r1, [r2, #0]
 8004e9e:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <_printf_i+0x220>)
 8004ea0:	e7e1      	b.n	8004e66 <_printf_i+0x14a>
 8004ea2:	0648      	lsls	r0, r1, #25
 8004ea4:	d5e6      	bpl.n	8004e74 <_printf_i+0x158>
 8004ea6:	b2ad      	uxth	r5, r5
 8004ea8:	e7e4      	b.n	8004e74 <_printf_i+0x158>
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	680d      	ldr	r5, [r1, #0]
 8004eae:	1d10      	adds	r0, r2, #4
 8004eb0:	6949      	ldr	r1, [r1, #20]
 8004eb2:	6018      	str	r0, [r3, #0]
 8004eb4:	6813      	ldr	r3, [r2, #0]
 8004eb6:	062e      	lsls	r6, r5, #24
 8004eb8:	d501      	bpl.n	8004ebe <_printf_i+0x1a2>
 8004eba:	6019      	str	r1, [r3, #0]
 8004ebc:	e002      	b.n	8004ec4 <_printf_i+0x1a8>
 8004ebe:	066d      	lsls	r5, r5, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0x19e>
 8004ec2:	8019      	strh	r1, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9e04      	ldr	r6, [sp, #16]
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	e7bb      	b.n	8004e44 <_printf_i+0x128>
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	1d11      	adds	r1, r2, #4
 8004ed0:	6019      	str	r1, [r3, #0]
 8004ed2:	6816      	ldr	r6, [r2, #0]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	0030      	movs	r0, r6
 8004ed8:	6862      	ldr	r2, [r4, #4]
 8004eda:	f000 f831 	bl	8004f40 <memchr>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d001      	beq.n	8004ee6 <_printf_i+0x1ca>
 8004ee2:	1b80      	subs	r0, r0, r6
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	2300      	movs	r3, #0
 8004eec:	9a04      	ldr	r2, [sp, #16]
 8004eee:	7013      	strb	r3, [r2, #0]
 8004ef0:	e7a8      	b.n	8004e44 <_printf_i+0x128>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	0032      	movs	r2, r6
 8004ef6:	9906      	ldr	r1, [sp, #24]
 8004ef8:	9805      	ldr	r0, [sp, #20]
 8004efa:	9d07      	ldr	r5, [sp, #28]
 8004efc:	47a8      	blx	r5
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d0aa      	beq.n	8004e58 <_printf_i+0x13c>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	079b      	lsls	r3, r3, #30
 8004f06:	d415      	bmi.n	8004f34 <_printf_i+0x218>
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	68e0      	ldr	r0, [r4, #12]
 8004f0c:	4298      	cmp	r0, r3
 8004f0e:	daa5      	bge.n	8004e5c <_printf_i+0x140>
 8004f10:	0018      	movs	r0, r3
 8004f12:	e7a3      	b.n	8004e5c <_printf_i+0x140>
 8004f14:	0022      	movs	r2, r4
 8004f16:	2301      	movs	r3, #1
 8004f18:	9906      	ldr	r1, [sp, #24]
 8004f1a:	9805      	ldr	r0, [sp, #20]
 8004f1c:	9e07      	ldr	r6, [sp, #28]
 8004f1e:	3219      	adds	r2, #25
 8004f20:	47b0      	blx	r6
 8004f22:	1c43      	adds	r3, r0, #1
 8004f24:	d098      	beq.n	8004e58 <_printf_i+0x13c>
 8004f26:	3501      	adds	r5, #1
 8004f28:	68e3      	ldr	r3, [r4, #12]
 8004f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	42ab      	cmp	r3, r5
 8004f30:	dcf0      	bgt.n	8004f14 <_printf_i+0x1f8>
 8004f32:	e7e9      	b.n	8004f08 <_printf_i+0x1ec>
 8004f34:	2500      	movs	r5, #0
 8004f36:	e7f7      	b.n	8004f28 <_printf_i+0x20c>
 8004f38:	0800558a 	.word	0x0800558a
 8004f3c:	0800559b 	.word	0x0800559b

08004f40 <memchr>:
 8004f40:	b2c9      	uxtb	r1, r1
 8004f42:	1882      	adds	r2, r0, r2
 8004f44:	4290      	cmp	r0, r2
 8004f46:	d101      	bne.n	8004f4c <memchr+0xc>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4770      	bx	lr
 8004f4c:	7803      	ldrb	r3, [r0, #0]
 8004f4e:	428b      	cmp	r3, r1
 8004f50:	d0fb      	beq.n	8004f4a <memchr+0xa>
 8004f52:	3001      	adds	r0, #1
 8004f54:	e7f6      	b.n	8004f44 <memchr+0x4>

08004f56 <memcpy>:
 8004f56:	2300      	movs	r3, #0
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d100      	bne.n	8004f60 <memcpy+0xa>
 8004f5e:	bd10      	pop	{r4, pc}
 8004f60:	5ccc      	ldrb	r4, [r1, r3]
 8004f62:	54c4      	strb	r4, [r0, r3]
 8004f64:	3301      	adds	r3, #1
 8004f66:	e7f8      	b.n	8004f5a <memcpy+0x4>

08004f68 <memmove>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4288      	cmp	r0, r1
 8004f6c:	d902      	bls.n	8004f74 <memmove+0xc>
 8004f6e:	188b      	adds	r3, r1, r2
 8004f70:	4298      	cmp	r0, r3
 8004f72:	d303      	bcc.n	8004f7c <memmove+0x14>
 8004f74:	2300      	movs	r3, #0
 8004f76:	e007      	b.n	8004f88 <memmove+0x20>
 8004f78:	5c8b      	ldrb	r3, [r1, r2]
 8004f7a:	5483      	strb	r3, [r0, r2]
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	d2fb      	bcs.n	8004f78 <memmove+0x10>
 8004f80:	bd10      	pop	{r4, pc}
 8004f82:	5ccc      	ldrb	r4, [r1, r3]
 8004f84:	54c4      	strb	r4, [r0, r3]
 8004f86:	3301      	adds	r3, #1
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d1fa      	bne.n	8004f82 <memmove+0x1a>
 8004f8c:	e7f8      	b.n	8004f80 <memmove+0x18>
	...

08004f90 <_free_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	0005      	movs	r5, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d010      	beq.n	8004fba <_free_r+0x2a>
 8004f98:	1f0c      	subs	r4, r1, #4
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	da00      	bge.n	8004fa2 <_free_r+0x12>
 8004fa0:	18e4      	adds	r4, r4, r3
 8004fa2:	0028      	movs	r0, r5
 8004fa4:	f000 f918 	bl	80051d8 <__malloc_lock>
 8004fa8:	4a1d      	ldr	r2, [pc, #116]	; (8005020 <_free_r+0x90>)
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <_free_r+0x2c>
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	6014      	str	r4, [r2, #0]
 8004fb4:	0028      	movs	r0, r5
 8004fb6:	f000 f917 	bl	80051e8 <__malloc_unlock>
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	d908      	bls.n	8004fd2 <_free_r+0x42>
 8004fc0:	6821      	ldr	r1, [r4, #0]
 8004fc2:	1860      	adds	r0, r4, r1
 8004fc4:	4283      	cmp	r3, r0
 8004fc6:	d1f3      	bne.n	8004fb0 <_free_r+0x20>
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	1841      	adds	r1, r0, r1
 8004fce:	6021      	str	r1, [r4, #0]
 8004fd0:	e7ee      	b.n	8004fb0 <_free_r+0x20>
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <_free_r+0x4e>
 8004fda:	42a3      	cmp	r3, r4
 8004fdc:	d9f9      	bls.n	8004fd2 <_free_r+0x42>
 8004fde:	6811      	ldr	r1, [r2, #0]
 8004fe0:	1850      	adds	r0, r2, r1
 8004fe2:	42a0      	cmp	r0, r4
 8004fe4:	d10b      	bne.n	8004ffe <_free_r+0x6e>
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	1809      	adds	r1, r1, r0
 8004fea:	1850      	adds	r0, r2, r1
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	4283      	cmp	r3, r0
 8004ff0:	d1e0      	bne.n	8004fb4 <_free_r+0x24>
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	1841      	adds	r1, r0, r1
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	6053      	str	r3, [r2, #4]
 8004ffc:	e7da      	b.n	8004fb4 <_free_r+0x24>
 8004ffe:	42a0      	cmp	r0, r4
 8005000:	d902      	bls.n	8005008 <_free_r+0x78>
 8005002:	230c      	movs	r3, #12
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	e7d5      	b.n	8004fb4 <_free_r+0x24>
 8005008:	6821      	ldr	r1, [r4, #0]
 800500a:	1860      	adds	r0, r4, r1
 800500c:	4283      	cmp	r3, r0
 800500e:	d103      	bne.n	8005018 <_free_r+0x88>
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	1841      	adds	r1, r0, r1
 8005016:	6021      	str	r1, [r4, #0]
 8005018:	6063      	str	r3, [r4, #4]
 800501a:	6054      	str	r4, [r2, #4]
 800501c:	e7ca      	b.n	8004fb4 <_free_r+0x24>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	200005c8 	.word	0x200005c8

08005024 <sbrk_aligned>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	4e0f      	ldr	r6, [pc, #60]	; (8005064 <sbrk_aligned+0x40>)
 8005028:	000d      	movs	r5, r1
 800502a:	6831      	ldr	r1, [r6, #0]
 800502c:	0004      	movs	r4, r0
 800502e:	2900      	cmp	r1, #0
 8005030:	d102      	bne.n	8005038 <sbrk_aligned+0x14>
 8005032:	f000 f8bf 	bl	80051b4 <_sbrk_r>
 8005036:	6030      	str	r0, [r6, #0]
 8005038:	0029      	movs	r1, r5
 800503a:	0020      	movs	r0, r4
 800503c:	f000 f8ba 	bl	80051b4 <_sbrk_r>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d00a      	beq.n	800505a <sbrk_aligned+0x36>
 8005044:	2303      	movs	r3, #3
 8005046:	1cc5      	adds	r5, r0, #3
 8005048:	439d      	bics	r5, r3
 800504a:	42a8      	cmp	r0, r5
 800504c:	d007      	beq.n	800505e <sbrk_aligned+0x3a>
 800504e:	1a29      	subs	r1, r5, r0
 8005050:	0020      	movs	r0, r4
 8005052:	f000 f8af 	bl	80051b4 <_sbrk_r>
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	d101      	bne.n	800505e <sbrk_aligned+0x3a>
 800505a:	2501      	movs	r5, #1
 800505c:	426d      	negs	r5, r5
 800505e:	0028      	movs	r0, r5
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	200005cc 	.word	0x200005cc

08005068 <_malloc_r>:
 8005068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800506a:	2203      	movs	r2, #3
 800506c:	1ccb      	adds	r3, r1, #3
 800506e:	4393      	bics	r3, r2
 8005070:	3308      	adds	r3, #8
 8005072:	0006      	movs	r6, r0
 8005074:	001f      	movs	r7, r3
 8005076:	2b0c      	cmp	r3, #12
 8005078:	d232      	bcs.n	80050e0 <_malloc_r+0x78>
 800507a:	270c      	movs	r7, #12
 800507c:	42b9      	cmp	r1, r7
 800507e:	d831      	bhi.n	80050e4 <_malloc_r+0x7c>
 8005080:	0030      	movs	r0, r6
 8005082:	f000 f8a9 	bl	80051d8 <__malloc_lock>
 8005086:	4d32      	ldr	r5, [pc, #200]	; (8005150 <_malloc_r+0xe8>)
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	001c      	movs	r4, r3
 800508c:	2c00      	cmp	r4, #0
 800508e:	d12e      	bne.n	80050ee <_malloc_r+0x86>
 8005090:	0039      	movs	r1, r7
 8005092:	0030      	movs	r0, r6
 8005094:	f7ff ffc6 	bl	8005024 <sbrk_aligned>
 8005098:	0004      	movs	r4, r0
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d11e      	bne.n	80050dc <_malloc_r+0x74>
 800509e:	682c      	ldr	r4, [r5, #0]
 80050a0:	0025      	movs	r5, r4
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	d14a      	bne.n	800513c <_malloc_r+0xd4>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	0029      	movs	r1, r5
 80050aa:	18e3      	adds	r3, r4, r3
 80050ac:	0030      	movs	r0, r6
 80050ae:	9301      	str	r3, [sp, #4]
 80050b0:	f000 f880 	bl	80051b4 <_sbrk_r>
 80050b4:	9b01      	ldr	r3, [sp, #4]
 80050b6:	4283      	cmp	r3, r0
 80050b8:	d143      	bne.n	8005142 <_malloc_r+0xda>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	3703      	adds	r7, #3
 80050be:	1aff      	subs	r7, r7, r3
 80050c0:	2303      	movs	r3, #3
 80050c2:	439f      	bics	r7, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	2f0c      	cmp	r7, #12
 80050c8:	d200      	bcs.n	80050cc <_malloc_r+0x64>
 80050ca:	270c      	movs	r7, #12
 80050cc:	0039      	movs	r1, r7
 80050ce:	0030      	movs	r0, r6
 80050d0:	f7ff ffa8 	bl	8005024 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d034      	beq.n	8005142 <_malloc_r+0xda>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	19df      	adds	r7, r3, r7
 80050dc:	6027      	str	r7, [r4, #0]
 80050de:	e013      	b.n	8005108 <_malloc_r+0xa0>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dacb      	bge.n	800507c <_malloc_r+0x14>
 80050e4:	230c      	movs	r3, #12
 80050e6:	2500      	movs	r5, #0
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	0028      	movs	r0, r5
 80050ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1bd1      	subs	r1, r2, r7
 80050f2:	d420      	bmi.n	8005136 <_malloc_r+0xce>
 80050f4:	290b      	cmp	r1, #11
 80050f6:	d917      	bls.n	8005128 <_malloc_r+0xc0>
 80050f8:	19e2      	adds	r2, r4, r7
 80050fa:	6027      	str	r7, [r4, #0]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d111      	bne.n	8005124 <_malloc_r+0xbc>
 8005100:	602a      	str	r2, [r5, #0]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	6053      	str	r3, [r2, #4]
 8005108:	0030      	movs	r0, r6
 800510a:	0025      	movs	r5, r4
 800510c:	f000 f86c 	bl	80051e8 <__malloc_unlock>
 8005110:	2207      	movs	r2, #7
 8005112:	350b      	adds	r5, #11
 8005114:	1d23      	adds	r3, r4, #4
 8005116:	4395      	bics	r5, r2
 8005118:	1aea      	subs	r2, r5, r3
 800511a:	429d      	cmp	r5, r3
 800511c:	d0e5      	beq.n	80050ea <_malloc_r+0x82>
 800511e:	1b5b      	subs	r3, r3, r5
 8005120:	50a3      	str	r3, [r4, r2]
 8005122:	e7e2      	b.n	80050ea <_malloc_r+0x82>
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	e7ec      	b.n	8005102 <_malloc_r+0x9a>
 8005128:	6862      	ldr	r2, [r4, #4]
 800512a:	42a3      	cmp	r3, r4
 800512c:	d101      	bne.n	8005132 <_malloc_r+0xca>
 800512e:	602a      	str	r2, [r5, #0]
 8005130:	e7ea      	b.n	8005108 <_malloc_r+0xa0>
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	e7e8      	b.n	8005108 <_malloc_r+0xa0>
 8005136:	0023      	movs	r3, r4
 8005138:	6864      	ldr	r4, [r4, #4]
 800513a:	e7a7      	b.n	800508c <_malloc_r+0x24>
 800513c:	002c      	movs	r4, r5
 800513e:	686d      	ldr	r5, [r5, #4]
 8005140:	e7af      	b.n	80050a2 <_malloc_r+0x3a>
 8005142:	230c      	movs	r3, #12
 8005144:	0030      	movs	r0, r6
 8005146:	6033      	str	r3, [r6, #0]
 8005148:	f000 f84e 	bl	80051e8 <__malloc_unlock>
 800514c:	e7cd      	b.n	80050ea <_malloc_r+0x82>
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	200005c8 	.word	0x200005c8

08005154 <_realloc_r>:
 8005154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005156:	0007      	movs	r7, r0
 8005158:	000e      	movs	r6, r1
 800515a:	0014      	movs	r4, r2
 800515c:	2900      	cmp	r1, #0
 800515e:	d105      	bne.n	800516c <_realloc_r+0x18>
 8005160:	0011      	movs	r1, r2
 8005162:	f7ff ff81 	bl	8005068 <_malloc_r>
 8005166:	0005      	movs	r5, r0
 8005168:	0028      	movs	r0, r5
 800516a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800516c:	2a00      	cmp	r2, #0
 800516e:	d103      	bne.n	8005178 <_realloc_r+0x24>
 8005170:	f7ff ff0e 	bl	8004f90 <_free_r>
 8005174:	0025      	movs	r5, r4
 8005176:	e7f7      	b.n	8005168 <_realloc_r+0x14>
 8005178:	f000 f83e 	bl	80051f8 <_malloc_usable_size_r>
 800517c:	9001      	str	r0, [sp, #4]
 800517e:	4284      	cmp	r4, r0
 8005180:	d803      	bhi.n	800518a <_realloc_r+0x36>
 8005182:	0035      	movs	r5, r6
 8005184:	0843      	lsrs	r3, r0, #1
 8005186:	42a3      	cmp	r3, r4
 8005188:	d3ee      	bcc.n	8005168 <_realloc_r+0x14>
 800518a:	0021      	movs	r1, r4
 800518c:	0038      	movs	r0, r7
 800518e:	f7ff ff6b 	bl	8005068 <_malloc_r>
 8005192:	1e05      	subs	r5, r0, #0
 8005194:	d0e8      	beq.n	8005168 <_realloc_r+0x14>
 8005196:	9b01      	ldr	r3, [sp, #4]
 8005198:	0022      	movs	r2, r4
 800519a:	429c      	cmp	r4, r3
 800519c:	d900      	bls.n	80051a0 <_realloc_r+0x4c>
 800519e:	001a      	movs	r2, r3
 80051a0:	0031      	movs	r1, r6
 80051a2:	0028      	movs	r0, r5
 80051a4:	f7ff fed7 	bl	8004f56 <memcpy>
 80051a8:	0031      	movs	r1, r6
 80051aa:	0038      	movs	r0, r7
 80051ac:	f7ff fef0 	bl	8004f90 <_free_r>
 80051b0:	e7da      	b.n	8005168 <_realloc_r+0x14>
	...

080051b4 <_sbrk_r>:
 80051b4:	2300      	movs	r3, #0
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	4d06      	ldr	r5, [pc, #24]	; (80051d4 <_sbrk_r+0x20>)
 80051ba:	0004      	movs	r4, r0
 80051bc:	0008      	movs	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fc fe02 	bl	8001dc8 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d103      	bne.n	80051d0 <_sbrk_r+0x1c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <_sbrk_r+0x1c>
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	200005d0 	.word	0x200005d0

080051d8 <__malloc_lock>:
 80051d8:	b510      	push	{r4, lr}
 80051da:	4802      	ldr	r0, [pc, #8]	; (80051e4 <__malloc_lock+0xc>)
 80051dc:	f000 f814 	bl	8005208 <__retarget_lock_acquire_recursive>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	200005d4 	.word	0x200005d4

080051e8 <__malloc_unlock>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	4802      	ldr	r0, [pc, #8]	; (80051f4 <__malloc_unlock+0xc>)
 80051ec:	f000 f80d 	bl	800520a <__retarget_lock_release_recursive>
 80051f0:	bd10      	pop	{r4, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	200005d4 	.word	0x200005d4

080051f8 <_malloc_usable_size_r>:
 80051f8:	1f0b      	subs	r3, r1, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	1f18      	subs	r0, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da01      	bge.n	8005206 <_malloc_usable_size_r+0xe>
 8005202:	580b      	ldr	r3, [r1, r0]
 8005204:	18c0      	adds	r0, r0, r3
 8005206:	4770      	bx	lr

08005208 <__retarget_lock_acquire_recursive>:
 8005208:	4770      	bx	lr

0800520a <__retarget_lock_release_recursive>:
 800520a:	4770      	bx	lr

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
