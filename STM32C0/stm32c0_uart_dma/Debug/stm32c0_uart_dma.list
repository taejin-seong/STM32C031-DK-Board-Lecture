
stm32c0_uart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd4  08003bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003bd4  08003bd4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bd4  08003bd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000074  08003c50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08003c50  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001936e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d7  00000000  00000000  0003940a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011622  00000000  00000000  0003c7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  0004de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0004edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018450  00000000  00000000  0004fd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca91  00000000  00000000  000681b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f2b5  00000000  00000000  00084c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113ef6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c90  00000000  00000000  00113f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a40 	.word	0x08003a40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08003a40 	.word	0x08003a40

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fdiv>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	464f      	mov	r7, r9
 800040c:	4646      	mov	r6, r8
 800040e:	46d6      	mov	lr, sl
 8000410:	0245      	lsls	r5, r0, #9
 8000412:	b5c0      	push	{r6, r7, lr}
 8000414:	0047      	lsls	r7, r0, #1
 8000416:	1c0c      	adds	r4, r1, #0
 8000418:	0a6d      	lsrs	r5, r5, #9
 800041a:	0e3f      	lsrs	r7, r7, #24
 800041c:	0fc6      	lsrs	r6, r0, #31
 800041e:	2f00      	cmp	r7, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_fdiv+0x1c>
 8000422:	e070      	b.n	8000506 <__aeabi_fdiv+0xfe>
 8000424:	2fff      	cmp	r7, #255	; 0xff
 8000426:	d100      	bne.n	800042a <__aeabi_fdiv+0x22>
 8000428:	e075      	b.n	8000516 <__aeabi_fdiv+0x10e>
 800042a:	00eb      	lsls	r3, r5, #3
 800042c:	2580      	movs	r5, #128	; 0x80
 800042e:	04ed      	lsls	r5, r5, #19
 8000430:	431d      	orrs	r5, r3
 8000432:	2300      	movs	r3, #0
 8000434:	4699      	mov	r9, r3
 8000436:	469a      	mov	sl, r3
 8000438:	3f7f      	subs	r7, #127	; 0x7f
 800043a:	0260      	lsls	r0, r4, #9
 800043c:	0a43      	lsrs	r3, r0, #9
 800043e:	4698      	mov	r8, r3
 8000440:	0063      	lsls	r3, r4, #1
 8000442:	0e1b      	lsrs	r3, r3, #24
 8000444:	0fe4      	lsrs	r4, r4, #31
 8000446:	2b00      	cmp	r3, #0
 8000448:	d04e      	beq.n	80004e8 <__aeabi_fdiv+0xe0>
 800044a:	2bff      	cmp	r3, #255	; 0xff
 800044c:	d046      	beq.n	80004dc <__aeabi_fdiv+0xd4>
 800044e:	4642      	mov	r2, r8
 8000450:	00d0      	lsls	r0, r2, #3
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	04d2      	lsls	r2, r2, #19
 8000456:	4302      	orrs	r2, r0
 8000458:	4690      	mov	r8, r2
 800045a:	2200      	movs	r2, #0
 800045c:	3b7f      	subs	r3, #127	; 0x7f
 800045e:	0031      	movs	r1, r6
 8000460:	1aff      	subs	r7, r7, r3
 8000462:	464b      	mov	r3, r9
 8000464:	4061      	eors	r1, r4
 8000466:	b2c9      	uxtb	r1, r1
 8000468:	4313      	orrs	r3, r2
 800046a:	2b0f      	cmp	r3, #15
 800046c:	d900      	bls.n	8000470 <__aeabi_fdiv+0x68>
 800046e:	e0b5      	b.n	80005dc <__aeabi_fdiv+0x1d4>
 8000470:	486e      	ldr	r0, [pc, #440]	; (800062c <__aeabi_fdiv+0x224>)
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	58c3      	ldr	r3, [r0, r3]
 8000476:	469f      	mov	pc, r3
 8000478:	2300      	movs	r3, #0
 800047a:	4698      	mov	r8, r3
 800047c:	0026      	movs	r6, r4
 800047e:	4645      	mov	r5, r8
 8000480:	4692      	mov	sl, r2
 8000482:	4653      	mov	r3, sl
 8000484:	2b02      	cmp	r3, #2
 8000486:	d100      	bne.n	800048a <__aeabi_fdiv+0x82>
 8000488:	e089      	b.n	800059e <__aeabi_fdiv+0x196>
 800048a:	2b03      	cmp	r3, #3
 800048c:	d100      	bne.n	8000490 <__aeabi_fdiv+0x88>
 800048e:	e09e      	b.n	80005ce <__aeabi_fdiv+0x1c6>
 8000490:	2b01      	cmp	r3, #1
 8000492:	d018      	beq.n	80004c6 <__aeabi_fdiv+0xbe>
 8000494:	003b      	movs	r3, r7
 8000496:	337f      	adds	r3, #127	; 0x7f
 8000498:	2b00      	cmp	r3, #0
 800049a:	dd69      	ble.n	8000570 <__aeabi_fdiv+0x168>
 800049c:	076a      	lsls	r2, r5, #29
 800049e:	d004      	beq.n	80004aa <__aeabi_fdiv+0xa2>
 80004a0:	220f      	movs	r2, #15
 80004a2:	402a      	ands	r2, r5
 80004a4:	2a04      	cmp	r2, #4
 80004a6:	d000      	beq.n	80004aa <__aeabi_fdiv+0xa2>
 80004a8:	3504      	adds	r5, #4
 80004aa:	012a      	lsls	r2, r5, #4
 80004ac:	d503      	bpl.n	80004b6 <__aeabi_fdiv+0xae>
 80004ae:	4b60      	ldr	r3, [pc, #384]	; (8000630 <__aeabi_fdiv+0x228>)
 80004b0:	401d      	ands	r5, r3
 80004b2:	003b      	movs	r3, r7
 80004b4:	3380      	adds	r3, #128	; 0x80
 80004b6:	2bfe      	cmp	r3, #254	; 0xfe
 80004b8:	dd00      	ble.n	80004bc <__aeabi_fdiv+0xb4>
 80004ba:	e070      	b.n	800059e <__aeabi_fdiv+0x196>
 80004bc:	01ad      	lsls	r5, r5, #6
 80004be:	0a6d      	lsrs	r5, r5, #9
 80004c0:	b2d8      	uxtb	r0, r3
 80004c2:	e002      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80004c4:	000e      	movs	r6, r1
 80004c6:	2000      	movs	r0, #0
 80004c8:	2500      	movs	r5, #0
 80004ca:	05c0      	lsls	r0, r0, #23
 80004cc:	4328      	orrs	r0, r5
 80004ce:	07f6      	lsls	r6, r6, #31
 80004d0:	4330      	orrs	r0, r6
 80004d2:	bce0      	pop	{r5, r6, r7}
 80004d4:	46ba      	mov	sl, r7
 80004d6:	46b1      	mov	r9, r6
 80004d8:	46a8      	mov	r8, r5
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	4643      	mov	r3, r8
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d13f      	bne.n	8000562 <__aeabi_fdiv+0x15a>
 80004e2:	2202      	movs	r2, #2
 80004e4:	3fff      	subs	r7, #255	; 0xff
 80004e6:	e003      	b.n	80004f0 <__aeabi_fdiv+0xe8>
 80004e8:	4643      	mov	r3, r8
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d12d      	bne.n	800054a <__aeabi_fdiv+0x142>
 80004ee:	2201      	movs	r2, #1
 80004f0:	0031      	movs	r1, r6
 80004f2:	464b      	mov	r3, r9
 80004f4:	4061      	eors	r1, r4
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	4313      	orrs	r3, r2
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d834      	bhi.n	8000568 <__aeabi_fdiv+0x160>
 80004fe:	484d      	ldr	r0, [pc, #308]	; (8000634 <__aeabi_fdiv+0x22c>)
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	58c3      	ldr	r3, [r0, r3]
 8000504:	469f      	mov	pc, r3
 8000506:	2d00      	cmp	r5, #0
 8000508:	d113      	bne.n	8000532 <__aeabi_fdiv+0x12a>
 800050a:	2304      	movs	r3, #4
 800050c:	4699      	mov	r9, r3
 800050e:	3b03      	subs	r3, #3
 8000510:	2700      	movs	r7, #0
 8000512:	469a      	mov	sl, r3
 8000514:	e791      	b.n	800043a <__aeabi_fdiv+0x32>
 8000516:	2d00      	cmp	r5, #0
 8000518:	d105      	bne.n	8000526 <__aeabi_fdiv+0x11e>
 800051a:	2308      	movs	r3, #8
 800051c:	4699      	mov	r9, r3
 800051e:	3b06      	subs	r3, #6
 8000520:	27ff      	movs	r7, #255	; 0xff
 8000522:	469a      	mov	sl, r3
 8000524:	e789      	b.n	800043a <__aeabi_fdiv+0x32>
 8000526:	230c      	movs	r3, #12
 8000528:	4699      	mov	r9, r3
 800052a:	3b09      	subs	r3, #9
 800052c:	27ff      	movs	r7, #255	; 0xff
 800052e:	469a      	mov	sl, r3
 8000530:	e783      	b.n	800043a <__aeabi_fdiv+0x32>
 8000532:	0028      	movs	r0, r5
 8000534:	f000 f8c2 	bl	80006bc <__clzsi2>
 8000538:	2776      	movs	r7, #118	; 0x76
 800053a:	1f43      	subs	r3, r0, #5
 800053c:	409d      	lsls	r5, r3
 800053e:	2300      	movs	r3, #0
 8000540:	427f      	negs	r7, r7
 8000542:	4699      	mov	r9, r3
 8000544:	469a      	mov	sl, r3
 8000546:	1a3f      	subs	r7, r7, r0
 8000548:	e777      	b.n	800043a <__aeabi_fdiv+0x32>
 800054a:	4640      	mov	r0, r8
 800054c:	f000 f8b6 	bl	80006bc <__clzsi2>
 8000550:	4642      	mov	r2, r8
 8000552:	1f43      	subs	r3, r0, #5
 8000554:	409a      	lsls	r2, r3
 8000556:	2376      	movs	r3, #118	; 0x76
 8000558:	425b      	negs	r3, r3
 800055a:	4690      	mov	r8, r2
 800055c:	1a1b      	subs	r3, r3, r0
 800055e:	2200      	movs	r2, #0
 8000560:	e77d      	b.n	800045e <__aeabi_fdiv+0x56>
 8000562:	23ff      	movs	r3, #255	; 0xff
 8000564:	2203      	movs	r2, #3
 8000566:	e77a      	b.n	800045e <__aeabi_fdiv+0x56>
 8000568:	000e      	movs	r6, r1
 800056a:	20ff      	movs	r0, #255	; 0xff
 800056c:	2500      	movs	r5, #0
 800056e:	e7ac      	b.n	80004ca <__aeabi_fdiv+0xc2>
 8000570:	2001      	movs	r0, #1
 8000572:	1ac0      	subs	r0, r0, r3
 8000574:	281b      	cmp	r0, #27
 8000576:	dca6      	bgt.n	80004c6 <__aeabi_fdiv+0xbe>
 8000578:	379e      	adds	r7, #158	; 0x9e
 800057a:	002a      	movs	r2, r5
 800057c:	40bd      	lsls	r5, r7
 800057e:	40c2      	lsrs	r2, r0
 8000580:	1e6b      	subs	r3, r5, #1
 8000582:	419d      	sbcs	r5, r3
 8000584:	4315      	orrs	r5, r2
 8000586:	076b      	lsls	r3, r5, #29
 8000588:	d004      	beq.n	8000594 <__aeabi_fdiv+0x18c>
 800058a:	230f      	movs	r3, #15
 800058c:	402b      	ands	r3, r5
 800058e:	2b04      	cmp	r3, #4
 8000590:	d000      	beq.n	8000594 <__aeabi_fdiv+0x18c>
 8000592:	3504      	adds	r5, #4
 8000594:	016b      	lsls	r3, r5, #5
 8000596:	d544      	bpl.n	8000622 <__aeabi_fdiv+0x21a>
 8000598:	2001      	movs	r0, #1
 800059a:	2500      	movs	r5, #0
 800059c:	e795      	b.n	80004ca <__aeabi_fdiv+0xc2>
 800059e:	20ff      	movs	r0, #255	; 0xff
 80005a0:	2500      	movs	r5, #0
 80005a2:	e792      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005a4:	2580      	movs	r5, #128	; 0x80
 80005a6:	2600      	movs	r6, #0
 80005a8:	20ff      	movs	r0, #255	; 0xff
 80005aa:	03ed      	lsls	r5, r5, #15
 80005ac:	e78d      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005ae:	2300      	movs	r3, #0
 80005b0:	4698      	mov	r8, r3
 80005b2:	2080      	movs	r0, #128	; 0x80
 80005b4:	03c0      	lsls	r0, r0, #15
 80005b6:	4205      	tst	r5, r0
 80005b8:	d009      	beq.n	80005ce <__aeabi_fdiv+0x1c6>
 80005ba:	4643      	mov	r3, r8
 80005bc:	4203      	tst	r3, r0
 80005be:	d106      	bne.n	80005ce <__aeabi_fdiv+0x1c6>
 80005c0:	4645      	mov	r5, r8
 80005c2:	4305      	orrs	r5, r0
 80005c4:	026d      	lsls	r5, r5, #9
 80005c6:	0026      	movs	r6, r4
 80005c8:	20ff      	movs	r0, #255	; 0xff
 80005ca:	0a6d      	lsrs	r5, r5, #9
 80005cc:	e77d      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005ce:	2080      	movs	r0, #128	; 0x80
 80005d0:	03c0      	lsls	r0, r0, #15
 80005d2:	4305      	orrs	r5, r0
 80005d4:	026d      	lsls	r5, r5, #9
 80005d6:	20ff      	movs	r0, #255	; 0xff
 80005d8:	0a6d      	lsrs	r5, r5, #9
 80005da:	e776      	b.n	80004ca <__aeabi_fdiv+0xc2>
 80005dc:	4642      	mov	r2, r8
 80005de:	016b      	lsls	r3, r5, #5
 80005e0:	0150      	lsls	r0, r2, #5
 80005e2:	4283      	cmp	r3, r0
 80005e4:	d219      	bcs.n	800061a <__aeabi_fdiv+0x212>
 80005e6:	221b      	movs	r2, #27
 80005e8:	2500      	movs	r5, #0
 80005ea:	3f01      	subs	r7, #1
 80005ec:	2601      	movs	r6, #1
 80005ee:	001c      	movs	r4, r3
 80005f0:	006d      	lsls	r5, r5, #1
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2c00      	cmp	r4, #0
 80005f6:	db01      	blt.n	80005fc <__aeabi_fdiv+0x1f4>
 80005f8:	4298      	cmp	r0, r3
 80005fa:	d801      	bhi.n	8000600 <__aeabi_fdiv+0x1f8>
 80005fc:	1a1b      	subs	r3, r3, r0
 80005fe:	4335      	orrs	r5, r6
 8000600:	3a01      	subs	r2, #1
 8000602:	2a00      	cmp	r2, #0
 8000604:	d1f3      	bne.n	80005ee <__aeabi_fdiv+0x1e6>
 8000606:	1e5a      	subs	r2, r3, #1
 8000608:	4193      	sbcs	r3, r2
 800060a:	431d      	orrs	r5, r3
 800060c:	003b      	movs	r3, r7
 800060e:	337f      	adds	r3, #127	; 0x7f
 8000610:	000e      	movs	r6, r1
 8000612:	2b00      	cmp	r3, #0
 8000614:	dd00      	ble.n	8000618 <__aeabi_fdiv+0x210>
 8000616:	e741      	b.n	800049c <__aeabi_fdiv+0x94>
 8000618:	e7aa      	b.n	8000570 <__aeabi_fdiv+0x168>
 800061a:	221a      	movs	r2, #26
 800061c:	2501      	movs	r5, #1
 800061e:	1a1b      	subs	r3, r3, r0
 8000620:	e7e4      	b.n	80005ec <__aeabi_fdiv+0x1e4>
 8000622:	01ad      	lsls	r5, r5, #6
 8000624:	2000      	movs	r0, #0
 8000626:	0a6d      	lsrs	r5, r5, #9
 8000628:	e74f      	b.n	80004ca <__aeabi_fdiv+0xc2>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	08003a58 	.word	0x08003a58
 8000630:	f7ffffff 	.word	0xf7ffffff
 8000634:	08003a98 	.word	0x08003a98

08000638 <__aeabi_ui2f>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	1e05      	subs	r5, r0, #0
 800063c:	d00e      	beq.n	800065c <__aeabi_ui2f+0x24>
 800063e:	f000 f83d 	bl	80006bc <__clzsi2>
 8000642:	239e      	movs	r3, #158	; 0x9e
 8000644:	0004      	movs	r4, r0
 8000646:	1a1b      	subs	r3, r3, r0
 8000648:	2b96      	cmp	r3, #150	; 0x96
 800064a:	dc0c      	bgt.n	8000666 <__aeabi_ui2f+0x2e>
 800064c:	2808      	cmp	r0, #8
 800064e:	dd01      	ble.n	8000654 <__aeabi_ui2f+0x1c>
 8000650:	3c08      	subs	r4, #8
 8000652:	40a5      	lsls	r5, r4
 8000654:	026d      	lsls	r5, r5, #9
 8000656:	0a6d      	lsrs	r5, r5, #9
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	e001      	b.n	8000660 <__aeabi_ui2f+0x28>
 800065c:	2000      	movs	r0, #0
 800065e:	2500      	movs	r5, #0
 8000660:	05c0      	lsls	r0, r0, #23
 8000662:	4328      	orrs	r0, r5
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2b99      	cmp	r3, #153	; 0x99
 8000668:	dd09      	ble.n	800067e <__aeabi_ui2f+0x46>
 800066a:	0002      	movs	r2, r0
 800066c:	0029      	movs	r1, r5
 800066e:	321b      	adds	r2, #27
 8000670:	4091      	lsls	r1, r2
 8000672:	1e4a      	subs	r2, r1, #1
 8000674:	4191      	sbcs	r1, r2
 8000676:	2205      	movs	r2, #5
 8000678:	1a12      	subs	r2, r2, r0
 800067a:	40d5      	lsrs	r5, r2
 800067c:	430d      	orrs	r5, r1
 800067e:	2c05      	cmp	r4, #5
 8000680:	dc12      	bgt.n	80006a8 <__aeabi_ui2f+0x70>
 8000682:	0029      	movs	r1, r5
 8000684:	4e0c      	ldr	r6, [pc, #48]	; (80006b8 <__aeabi_ui2f+0x80>)
 8000686:	4031      	ands	r1, r6
 8000688:	076a      	lsls	r2, r5, #29
 800068a:	d009      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 800068c:	200f      	movs	r0, #15
 800068e:	4028      	ands	r0, r5
 8000690:	2804      	cmp	r0, #4
 8000692:	d005      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 8000694:	3104      	adds	r1, #4
 8000696:	014a      	lsls	r2, r1, #5
 8000698:	d502      	bpl.n	80006a0 <__aeabi_ui2f+0x68>
 800069a:	239f      	movs	r3, #159	; 0x9f
 800069c:	4031      	ands	r1, r6
 800069e:	1b1b      	subs	r3, r3, r4
 80006a0:	0189      	lsls	r1, r1, #6
 80006a2:	0a4d      	lsrs	r5, r1, #9
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	e7db      	b.n	8000660 <__aeabi_ui2f+0x28>
 80006a8:	1f62      	subs	r2, r4, #5
 80006aa:	4095      	lsls	r5, r2
 80006ac:	0029      	movs	r1, r5
 80006ae:	4e02      	ldr	r6, [pc, #8]	; (80006b8 <__aeabi_ui2f+0x80>)
 80006b0:	4031      	ands	r1, r6
 80006b2:	076a      	lsls	r2, r5, #29
 80006b4:	d0f4      	beq.n	80006a0 <__aeabi_ui2f+0x68>
 80006b6:	e7e9      	b.n	800068c <__aeabi_ui2f+0x54>
 80006b8:	fbffffff 	.word	0xfbffffff

080006bc <__clzsi2>:
 80006bc:	211c      	movs	r1, #28
 80006be:	2301      	movs	r3, #1
 80006c0:	041b      	lsls	r3, r3, #16
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d301      	bcc.n	80006ca <__clzsi2+0xe>
 80006c6:	0c00      	lsrs	r0, r0, #16
 80006c8:	3910      	subs	r1, #16
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	4298      	cmp	r0, r3
 80006ce:	d301      	bcc.n	80006d4 <__clzsi2+0x18>
 80006d0:	0a00      	lsrs	r0, r0, #8
 80006d2:	3908      	subs	r1, #8
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	4298      	cmp	r0, r3
 80006d8:	d301      	bcc.n	80006de <__clzsi2+0x22>
 80006da:	0900      	lsrs	r0, r0, #4
 80006dc:	3904      	subs	r1, #4
 80006de:	a202      	add	r2, pc, #8	; (adr r2, 80006e8 <__clzsi2+0x2c>)
 80006e0:	5c10      	ldrb	r0, [r2, r0]
 80006e2:	1840      	adds	r0, r0, r1
 80006e4:	4770      	bx	lr
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	02020304 	.word	0x02020304
 80006ec:	01010101 	.word	0x01010101
	...

080006f8 <apInit>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apInit(void)
{
 80006f8:	b510      	push	{r4, lr}
  ledInit();
 80006fa:	f000 f8a1 	bl	8000840 <ledInit>
  pwmInit();
 80006fe:	f000 f8cf 	bl	80008a0 <pwmInit>
  adcInit();
 8000702:	f000 f85d 	bl	80007c0 <adcInit>
  buttonInit();
 8000706:	f000 f87c 	bl	8000802 <buttonInit>
  uartInit();
 800070a:	f000 f8e7 	bl	80008dc <uartInit>

}
 800070e:	bd10      	pop	{r4, pc}

08000710 <apMain>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apMain(void)
{
 8000710:	b570      	push	{r4, r5, r6, lr}
  uint32_t pre_time;

  ledSetDuty(_DEF_CH1, 100);
 8000712:	2164      	movs	r1, #100	; 0x64
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8bb 	bl	8000890 <ledSetDuty>

  pre_time = millis();
 800071a:	f000 f952 	bl	80009c2 <millis>
 800071e:	0005      	movs	r5, r0
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    }
    */

    //Non-Blocking & Encapsulation & Modularization
    if (millis() - pre_time >= 500)
 8000720:	f000 f94f 	bl	80009c2 <millis>
 8000724:	1b40      	subs	r0, r0, r5
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4298      	cmp	r0, r3
 800072c:	d237      	bcs.n	800079e <apMain+0x8e>
      //uartPrintf(_DEF_CH1, "adc_vol %d.%d\n", (int)adc_vol, ((int)(adc_vol * 100)) % 100);
      //uartPrintf(_DEF_CH1, "rx cnt %d\n", uartAvailable(_DEF_CH1));

    }

    adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.0f;
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f85c 	bl	80007ec <adcReadVoltage>
 8000734:	f7ff ff80 	bl	8000638 <__aeabi_ui2f>
 8000738:	491c      	ldr	r1, [pc, #112]	; (80007ac <apMain+0x9c>)
 800073a:	f7ff fe65 	bl	8000408 <__aeabi_fdiv>
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <apMain+0xa0>)
 8000740:	6018      	str	r0, [r3, #0]
    adc_vol_vref = (float)adcReadVoltage(_DEF_CH3) / 100.0f;
 8000742:	2002      	movs	r0, #2
 8000744:	f000 f852 	bl	80007ec <adcReadVoltage>
 8000748:	f7ff ff76 	bl	8000638 <__aeabi_ui2f>
 800074c:	4917      	ldr	r1, [pc, #92]	; (80007ac <apMain+0x9c>)
 800074e:	f7ff fe5b 	bl	8000408 <__aeabi_fdiv>
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <apMain+0xa4>)
 8000754:	6018      	str	r0, [r3, #0]

    button_data[_BUTTON_CH_SEL  ]   =  buttonGetPressed(_BUTTON_CH_SEL  );
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f856 	bl	8000808 <buttonGetPressed>
 800075c:	4c16      	ldr	r4, [pc, #88]	; (80007b8 <apMain+0xa8>)
 800075e:	7020      	strb	r0, [r4, #0]
    button_data[_BUTTON_CH_UP   ]   =  buttonGetPressed(_BUTTON_CH_UP   );
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f851 	bl	8000808 <buttonGetPressed>
 8000766:	70e0      	strb	r0, [r4, #3]
    button_data[_BUTTON_CH_DOWN ]   =  buttonGetPressed(_BUTTON_CH_DOWN );
 8000768:	2002      	movs	r0, #2
 800076a:	f000 f84d 	bl	8000808 <buttonGetPressed>
 800076e:	70a0      	strb	r0, [r4, #2]
    button_data[_BUTTON_CH_LEFT ]   =  buttonGetPressed(_BUTTON_CH_LEFT );
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f849 	bl	8000808 <buttonGetPressed>
 8000776:	7060      	strb	r0, [r4, #1]
    button_data[_BUTTON_CH_RIGHT]   =  buttonGetPressed(_BUTTON_CH_RIGHT);
 8000778:	2004      	movs	r0, #4
 800077a:	f000 f845 	bl	8000808 <buttonGetPressed>
 800077e:	7120      	strb	r0, [r4, #4]


    if (uartAvailable(_DEF_CH1) > 0)
 8000780:	2000      	movs	r0, #0
 8000782:	f000 f8cd 	bl	8000920 <uartAvailable>
 8000786:	2800      	cmp	r0, #0
 8000788:	d0ca      	beq.n	8000720 <apMain+0x10>
    {
    	uint8_t rx_data;

    	rx_data = uartRead(_DEF_CH1);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f8e8 	bl	8000960 <uartRead>
 8000790:	0002      	movs	r2, r0
    	uartPrintf(_DEF_CH1, "rx data : 0x%02X (%c)\n", rx_data, rx_data );
 8000792:	0003      	movs	r3, r0
 8000794:	4909      	ldr	r1, [pc, #36]	; (80007bc <apMain+0xac>)
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f8fa 	bl	8000990 <uartPrintf>
 800079c:	e7c0      	b.n	8000720 <apMain+0x10>
      pre_time = millis();
 800079e:	f000 f910 	bl	80009c2 <millis>
 80007a2:	0005      	movs	r5, r0
      ledToggle(_DEF_CH1);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f863 	bl	8000870 <ledToggle>
 80007aa:	e7c0      	b.n	800072e <apMain+0x1e>
 80007ac:	42c80000 	.word	0x42c80000
 80007b0:	20000090 	.word	0x20000090
 80007b4:	20000094 	.word	0x20000094
 80007b8:	20000098 	.word	0x20000098
 80007bc:	08003ad8 	.word	0x08003ad8

080007c0 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 80007c0:	b510      	push	{r4, lr}
  HAL_ADCEx_Calibration_Start(&hadc1);
 80007c2:	4c05      	ldr	r4, [pc, #20]	; (80007d8 <adcInit+0x18>)
 80007c4:	0020      	movs	r0, r4
 80007c6:	f001 f811 	bl	80017ec <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 80007ca:	2203      	movs	r2, #3
 80007cc:	4903      	ldr	r1, [pc, #12]	; (80007dc <adcInit+0x1c>)
 80007ce:	0020      	movs	r0, r4
 80007d0:	f000 ff68 	bl	80016a4 <HAL_ADC_Start_DMA>
  return true;
}
 80007d4:	2001      	movs	r0, #1
 80007d6:	bd10      	pop	{r4, pc}
 80007d8:	200001ac 	.word	0x200001ac
 80007dc:	200000a0 	.word	0x200000a0

080007e0 <adcRead>:
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
  uint16_t ret = 0;

  ret = adc_data[ch];
 80007e0:	0040      	lsls	r0, r0, #1
 80007e2:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <adcRead+0x8>)
 80007e4:	5ac0      	ldrh	r0, [r0, r3]

  return ret;
}
 80007e6:	4770      	bx	lr
 80007e8:	200000a0 	.word	0x200000a0

080007ec <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 80007ec:	b510      	push	{r4, lr}
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 80007ee:	f7ff fff7 	bl	80007e0 <adcRead>
 80007f2:	0003      	movs	r3, r0
  ret = (330 * adc_data) / 4096;
 80007f4:	0080      	lsls	r0, r0, #2
 80007f6:	18c0      	adds	r0, r0, r3
 80007f8:	0143      	lsls	r3, r0, #5
 80007fa:	18c0      	adds	r0, r0, r3
 80007fc:	0040      	lsls	r0, r0, #1
 80007fe:	0b00      	lsrs	r0, r0, #12

  return ret;
}
 8000800:	bd10      	pop	{r4, pc}

08000802 <buttonInit>:
* Return        : bool
*****************************************************************************/
bool buttonInit(void)
{
  return true;
}
 8000802:	2001      	movs	r0, #1
 8000804:	4770      	bx	lr
	...

08000808 <buttonGetPressed>:
* Inputs        : uint8_t
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool buttonGetPressed(uint8_t ch)
{
 8000808:	b510      	push	{r4, lr}
 800080a:	0004      	movs	r4, r0
  bool ret = false;
  uint32_t adc_voltage;

  if (ch >= BUTTON_MAX_CH)
 800080c:	2804      	cmp	r0, #4
 800080e:	d901      	bls.n	8000814 <buttonGetPressed+0xc>
  {
    return false;
 8000810:	2000      	movs	r0, #0
    ret = true;
  }


  return ret;
}
 8000812:	bd10      	pop	{r4, pc}
  adc_voltage = adcReadVoltage(adc_ch);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffe9 	bl	80007ec <adcReadVoltage>
  if (adc_voltage >= button_adc[ch].adc_min  &&  adc_voltage <= button_adc[ch].adc_max)
 800081a:	00a3      	lsls	r3, r4, #2
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <buttonGetPressed+0x34>)
 800081e:	5a9b      	ldrh	r3, [r3, r2]
 8000820:	4283      	cmp	r3, r0
 8000822:	d806      	bhi.n	8000832 <buttonGetPressed+0x2a>
 8000824:	00a4      	lsls	r4, r4, #2
 8000826:	1914      	adds	r4, r2, r4
 8000828:	8863      	ldrh	r3, [r4, #2]
 800082a:	4283      	cmp	r3, r0
 800082c:	d203      	bcs.n	8000836 <buttonGetPressed+0x2e>
  bool ret = false;
 800082e:	2000      	movs	r0, #0
 8000830:	e7ef      	b.n	8000812 <buttonGetPressed+0xa>
 8000832:	2000      	movs	r0, #0
 8000834:	e7ed      	b.n	8000812 <buttonGetPressed+0xa>
    ret = true;
 8000836:	2001      	movs	r0, #1
 8000838:	e7eb      	b.n	8000812 <buttonGetPressed+0xa>
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	08003af0 	.word	0x08003af0

08000840 <ledInit>:
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
  return true;
}
 8000840:	2001      	movs	r0, #1
 8000842:	4770      	bx	lr

08000844 <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 8000844:	b510      	push	{r4, lr}
  switch(ch)
 8000846:	2800      	cmp	r0, #0
 8000848:	d000      	beq.n	800084c <ledOn+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
      break;
  }
}
 800084a:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <ledOn+0x18>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2164      	movs	r1, #100	; 0x64
 8000852:	1ac9      	subs	r1, r1, r3
 8000854:	b289      	uxth	r1, r1
 8000856:	f000 f82d 	bl	80008b4 <pwmWrite>
}
 800085a:	e7f6      	b.n	800084a <ledOn+0x6>
 800085c:	20000000 	.word	0x20000000

08000860 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 8000860:	b510      	push	{r4, lr}
  switch(ch)
 8000862:	2800      	cmp	r0, #0
 8000864:	d000      	beq.n	8000868 <ledOff+0x8>
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
      break;
  }
}
 8000866:	bd10      	pop	{r4, pc}
      pwmWrite(_DEF_CH1, 100);
 8000868:	2164      	movs	r1, #100	; 0x64
 800086a:	f000 f823 	bl	80008b4 <pwmWrite>
}
 800086e:	e7fa      	b.n	8000866 <ledOff+0x6>

08000870 <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 8000870:	b510      	push	{r4, lr}
  switch(ch)
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <ledToggle+0x8>
      {
        ledOff(_DEF_CH1);
      }
      break;
  }
}
 8000876:	bd10      	pop	{r4, pc}
      if (pwmRead(_DEF_CH1) == 100)
 8000878:	f000 f824 	bl	80008c4 <pwmRead>
 800087c:	2864      	cmp	r0, #100	; 0x64
 800087e:	d003      	beq.n	8000888 <ledToggle+0x18>
        ledOff(_DEF_CH1);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ffed 	bl	8000860 <ledOff>
}
 8000886:	e7f6      	b.n	8000876 <ledToggle+0x6>
        ledOn(_DEF_CH1);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff ffdb 	bl	8000844 <ledOn>
 800088e:	e7f2      	b.n	8000876 <ledToggle+0x6>

08000890 <ledSetDuty>:
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
  switch(ch)
 8000890:	2800      	cmp	r0, #0
 8000892:	d102      	bne.n	800089a <ledSetDuty+0xa>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	4b01      	ldr	r3, [pc, #4]	; (800089c <ledSetDuty+0xc>)
 8000898:	52c1      	strh	r1, [r0, r3]
      break;
  }

}
 800089a:	4770      	bx	lr
 800089c:	20000000 	.word	0x20000000

080008a0 <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 80008a0:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008a2:	2100      	movs	r1, #0
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <pwmInit+0x10>)
 80008a6:	f001 fe1b 	bl	80024e0 <HAL_TIM_PWM_Start>

  return true;
}
 80008aa:	2001      	movs	r0, #1
 80008ac:	bd10      	pop	{r4, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	200002c8 	.word	0x200002c8

080008b4 <pwmWrite>:
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
  switch(ch)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	d102      	bne.n	80008be <pwmWrite+0xa>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <pwmWrite+0xc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6359      	str	r1, [r3, #52]	; 0x34
      break;
  }
}
 80008be:	4770      	bx	lr
 80008c0:	200002c8 	.word	0x200002c8

080008c4 <pwmRead>:
uint16_t pwmRead(uint8_t ch)
{
  uint16_t pwm_data = 0;


  switch(ch)
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d104      	bne.n	80008d2 <pwmRead+0xe>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <pwmRead+0x14>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ce:	b280      	uxth	r0, r0
      break;
  }

  return pwm_data;

}
 80008d0:	4770      	bx	lr
  uint16_t pwm_data = 0;
 80008d2:	2000      	movs	r0, #0
 80008d4:	e7fc      	b.n	80008d0 <pwmRead+0xc>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	200002c8 	.word	0x200002c8

080008dc <uartInit>:
* Inputs        : bool
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool uartInit(void)
{
 80008dc:	b510      	push	{r4, lr}
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	4903      	ldr	r1, [pc, #12]	; (80008f0 <uartInit+0x14>)
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <uartInit+0x18>)
 80008e6:	f002 fb21 	bl	8002f2c <HAL_UART_Receive_DMA>
	return true;
}
 80008ea:	2001      	movs	r0, #1
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	20000314 	.word	0x20000314

080008f8 <uartWrite>:
* Inputs        : void
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	0014      	movs	r4, r2
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ref;

	switch(ch)
 80008fc:	2800      	cmp	r0, #0
 80008fe:	d001      	beq.n	8000904 <uartWrite+0xc>
	uint32_t ret = 0;
 8000900:	2000      	movs	r0, #0
			break;
	}


	return ret;
}
 8000902:	bd10      	pop	{r4, pc}
			hal_ref = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8000904:	b292      	uxth	r2, r2
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <uartWrite+0x24>)
 800090a:	f002 f9b9 	bl	8002c80 <HAL_UART_Transmit>
			if (hal_ref == HAL_OK)
 800090e:	2800      	cmp	r0, #0
 8000910:	d001      	beq.n	8000916 <uartWrite+0x1e>
	uint32_t ret = 0;
 8000912:	2000      	movs	r0, #0
 8000914:	e7f5      	b.n	8000902 <uartWrite+0xa>
				ret = length;
 8000916:	0020      	movs	r0, r4
	return ret;
 8000918:	e7f3      	b.n	8000902 <uartWrite+0xa>
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	20000314 	.word	0x20000314

08000920 <uartAvailable>:
*****************************************************************************/
uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0;

	switch(ch)
 8000920:	2800      	cmp	r0, #0
 8000922:	d115      	bne.n	8000950 <uartAvailable+0x30>
	{
		case _DEF_CH1:
			q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->CNDTR) % UART_Q_BUF_MAX;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <uartAvailable+0x34>)
 8000926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	b29b      	uxth	r3, r3
 800092e:	425a      	negs	r2, r3
 8000930:	23ff      	movs	r3, #255	; 0xff
 8000932:	4013      	ands	r3, r2
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <uartAvailable+0x38>)
 8000936:	8013      	strh	r3, [r2, #0]
			// Calculating the number of buffers stored.
			ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX;
 8000938:	3301      	adds	r3, #1
 800093a:	33ff      	adds	r3, #255	; 0xff
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <uartAvailable+0x3c>)
 800093e:	8810      	ldrh	r0, [r2, #0]
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	17da      	asrs	r2, r3, #31
 8000944:	0e12      	lsrs	r2, r2, #24
 8000946:	189b      	adds	r3, r3, r2
 8000948:	20ff      	movs	r0, #255	; 0xff
 800094a:	4018      	ands	r0, r3
 800094c:	1a80      	subs	r0, r0, r2
			break;
	}

	return ret;
}
 800094e:	4770      	bx	lr
	uint32_t ret = 0;
 8000950:	2000      	movs	r0, #0
	return ret;
 8000952:	e7fc      	b.n	800094e <uartAvailable+0x2e>
 8000954:	20000314 	.word	0x20000314
 8000958:	200001a8 	.word	0x200001a8
 800095c:	200001aa 	.word	0x200001aa

08000960 <uartRead>:
*****************************************************************************/
uint8_t uartRead(uint8_t ch)
{
	uint8_t ret =0;

	switch(ch)
 8000960:	2800      	cmp	r0, #0
 8000962:	d10d      	bne.n	8000980 <uartRead+0x20>
	{
		case _DEF_CH1:
			if (q_out != q_in)
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <uartRead+0x24>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <uartRead+0x28>)
 800096a:	8812      	ldrh	r2, [r2, #0]
 800096c:	4293      	cmp	r3, r2
 800096e:	d008      	beq.n	8000982 <uartRead+0x22>
			{
				ret = q_buf[q_out];
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <uartRead+0x2c>)
 8000972:	5cd0      	ldrb	r0, [r2, r3]
				q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8000974:	3301      	adds	r3, #1
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	4013      	ands	r3, r2
 800097a:	4a02      	ldr	r2, [pc, #8]	; (8000984 <uartRead+0x24>)
 800097c:	8013      	strh	r3, [r2, #0]
 800097e:	e000      	b.n	8000982 <uartRead+0x22>
	uint8_t ret =0;
 8000980:	2000      	movs	r0, #0
			}
			break;
	}

	return ret;
}
 8000982:	4770      	bx	lr
 8000984:	200001aa 	.word	0x200001aa
 8000988:	200001a8 	.word	0x200001a8
 800098c:	200000a8 	.word	0x200000a8

08000990 <uartPrintf>:
* Inputs        : uint8_t,  const char, ...
* Outputs       : ret
* Return        : uint32_t
*****************************************************************************/
uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8000990:	b40e      	push	{r1, r2, r3}
 8000992:	b510      	push	{r4, lr}
 8000994:	b0c3      	sub	sp, #268	; 0x10c
 8000996:	0004      	movs	r4, r0
 8000998:	ab45      	add	r3, sp, #276	; 0x114
 800099a:	cb04      	ldmia	r3!, {r2}
	uint32_t ret = 0;
	va_list arg;
	char print_buf[256];

	va_start(arg, fmt);
 800099c:	9341      	str	r3, [sp, #260]	; 0x104

	int len;
	len = vsnprintf(print_buf, 256, fmt, arg);
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	a801      	add	r0, sp, #4
 80009a4:	f002 fbf6 	bl	8003194 <vsniprintf>
 80009a8:	1e02      	subs	r2, r0, #0

	va_end(arg);

	if (len > 0)
 80009aa:	dc05      	bgt.n	80009b8 <uartPrintf+0x28>
	uint32_t ret = 0;
 80009ac:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
	}

	return ret;
}
 80009ae:	b043      	add	sp, #268	; 0x10c
 80009b0:	bc10      	pop	{r4}
 80009b2:	bc08      	pop	{r3}
 80009b4:	b003      	add	sp, #12
 80009b6:	4718      	bx	r3
		ret = uartWrite(ch, (uint8_t *)print_buf, len);
 80009b8:	a901      	add	r1, sp, #4
 80009ba:	0020      	movs	r0, r4
 80009bc:	f7ff ff9c 	bl	80008f8 <uartWrite>
 80009c0:	e7f5      	b.n	80009ae <uartPrintf+0x1e>

080009c2 <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 80009c2:	b510      	push	{r4, lr}
  return HAL_GetTick();
 80009c4:	f000 fb3a 	bl	800103c <HAL_GetTick>
}
 80009c8:	bd10      	pop	{r4, pc}
	...

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <MX_DMA_Init+0x18>)
 80009d0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80009d2:	2301      	movs	r3, #1
 80009d4:	4319      	orrs	r1, r3
 80009d6:	6391      	str	r1, [r2, #56]	; 0x38
 80009d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80009da:	4013      	ands	r3, r2
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9b01      	ldr	r3, [sp, #4]

}
 80009e0:	b002      	add	sp, #8
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_GPIO_Init+0x28>)
 80009ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009ee:	2201      	movs	r2, #1
 80009f0:	4311      	orrs	r1, r2
 80009f2:	6359      	str	r1, [r3, #52]	; 0x34
 80009f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009f6:	400a      	ands	r2, r1
 80009f8:	9200      	str	r2, [sp, #0]
 80009fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009fe:	2202      	movs	r2, #2
 8000a00:	4311      	orrs	r1, r2
 8000a02:	6359      	str	r1, [r3, #52]	; 0x34
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	401a      	ands	r2, r3
 8000a08:	9201      	str	r2, [sp, #4]
 8000a0a:	9b01      	ldr	r3, [sp, #4]

}
 8000a0c:	b002      	add	sp, #8
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <Error_Handler+0x2>

08000a18 <MX_TIM1_Init>:
{
 8000a18:	b500      	push	{lr}
 8000a1a:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	2100      	movs	r1, #0
 8000a20:	a818      	add	r0, sp, #96	; 0x60
 8000a22:	f002 fb83 	bl	800312c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	220c      	movs	r2, #12
 8000a28:	2100      	movs	r1, #0
 8000a2a:	a815      	add	r0, sp, #84	; 0x54
 8000a2c:	f002 fb7e 	bl	800312c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	221c      	movs	r2, #28
 8000a32:	2100      	movs	r1, #0
 8000a34:	a80e      	add	r0, sp, #56	; 0x38
 8000a36:	f002 fb79 	bl	800312c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3a:	2234      	movs	r2, #52	; 0x34
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	a801      	add	r0, sp, #4
 8000a40:	f002 fb74 	bl	800312c <memset>
  htim1.Instance = TIM1;
 8000a44:	4830      	ldr	r0, [pc, #192]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_TIM1_Init+0xf4>)
 8000a48:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 47;
 8000a4a:	232f      	movs	r3, #47	; 0x2f
 8000a4c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 99;
 8000a52:	2263      	movs	r2, #99	; 0x63
 8000a54:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a58:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a5c:	f001 fb60 	bl	8002120 <HAL_TIM_Base_Init>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d144      	bne.n	8000aee <MX_TIM1_Init+0xd6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	015b      	lsls	r3, r3, #5
 8000a68:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6a:	a918      	add	r1, sp, #96	; 0x60
 8000a6c:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000a6e:	f001 fca5 	bl	80023bc <HAL_TIM_ConfigClockSource>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d13d      	bne.n	8000af2 <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a76:	4824      	ldr	r0, [pc, #144]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000a78:	f001 fb82 	bl	8002180 <HAL_TIM_PWM_Init>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	d13a      	bne.n	8000af6 <MX_TIM1_Init+0xde>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a84:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a88:	a915      	add	r1, sp, #84	; 0x54
 8000a8a:	481f      	ldr	r0, [pc, #124]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000a8c:	f001 fdbe 	bl	800260c <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d132      	bne.n	8000afa <MX_TIM1_Init+0xe2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa2:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	a90e      	add	r1, sp, #56	; 0x38
 8000aaa:	4817      	ldr	r0, [pc, #92]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000aac:	f001 fbd8 	bl	8002260 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d124      	bne.n	8000afe <MX_TIM1_Init+0xe6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab8:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aba:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000abe:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	0192      	lsls	r2, r2, #6
 8000ac4:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ac6:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac8:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aca:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0492      	lsls	r2, r2, #18
 8000ad0:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ad2:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad4:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad8:	a901      	add	r1, sp, #4
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000adc:	f001 fdce 	bl	800267c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d10e      	bne.n	8000b02 <MX_TIM1_Init+0xea>
  HAL_TIM_MspPostInit(&htim1);
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_TIM1_Init+0xf0>)
 8000ae6:	f000 f987 	bl	8000df8 <HAL_TIM_MspPostInit>
}
 8000aea:	b01d      	add	sp, #116	; 0x74
 8000aec:	bd00      	pop	{pc}
    Error_Handler();
 8000aee:	f7ff ff91 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000af2:	f7ff ff8f 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000af6:	f7ff ff8d 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000afa:	f7ff ff8b 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000afe:	f7ff ff89 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000b02:	f7ff ff87 	bl	8000a14 <Error_Handler>
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	200002c8 	.word	0x200002c8
 8000b0c:	40012c00 	.word	0x40012c00

08000b10 <MX_ADC1_Init>:
{
 8000b10:	b500      	push	{lr}
 8000b12:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b14:	220c      	movs	r2, #12
 8000b16:	2100      	movs	r1, #0
 8000b18:	a801      	add	r0, sp, #4
 8000b1a:	f002 fb07 	bl	800312c <memset>
  hadc1.Instance = ADC1;
 8000b1e:	4828      	ldr	r0, [pc, #160]	; (8000bc0 <MX_ADC1_Init+0xb0>)
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <MX_ADC1_Init+0xb4>)
 8000b22:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	05db      	lsls	r3, r3, #23
 8000b28:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	0392      	lsls	r2, r2, #14
 8000b34:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b36:	2204      	movs	r2, #4
 8000b38:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b3a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b3c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b3e:	3a03      	subs	r2, #3
 8000b40:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000b42:	2103      	movs	r1, #3
 8000b44:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b46:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b4a:	3129      	adds	r1, #41	; 0x29
 8000b4c:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b4e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000b50:	3925      	subs	r1, #37	; 0x25
 8000b52:	6341      	str	r1, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000b54:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8000b56:	3135      	adds	r1, #53	; 0x35
 8000b58:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8000b5a:	3207      	adds	r2, #7
 8000b5c:	6402      	str	r2, [r0, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000b5e:	3278      	adds	r2, #120	; 0x78
 8000b60:	6442      	str	r2, [r0, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b62:	6483      	str	r3, [r0, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000b64:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b66:	f000 fa6f 	bl	8001048 <HAL_ADC_Init>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d120      	bne.n	8000bb0 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_4;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_ADC1_Init+0xb8>)
 8000b70:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000b76:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	a901      	add	r1, sp, #4
 8000b7a:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <MX_ADC1_Init+0xb0>)
 8000b7c:	f000 fbee 	bl	800135c <HAL_ADC_ConfigChannel>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d117      	bne.n	8000bb4 <MX_ADC1_Init+0xa4>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_ADC1_Init+0xbc>)
 8000b86:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8c:	a901      	add	r1, sp, #4
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_ADC1_Init+0xb0>)
 8000b90:	f000 fbe4 	bl	800135c <HAL_ADC_ConfigChannel>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d10f      	bne.n	8000bb8 <MX_ADC1_Init+0xa8>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_ADC1_Init+0xc0>)
 8000b9a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	a901      	add	r1, sp, #4
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <MX_ADC1_Init+0xb0>)
 8000ba4:	f000 fbda 	bl	800135c <HAL_ADC_ConfigChannel>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d107      	bne.n	8000bbc <MX_ADC1_Init+0xac>
}
 8000bac:	b005      	add	sp, #20
 8000bae:	bd00      	pop	{pc}
    Error_Handler();
 8000bb0:	f7ff ff30 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000bb4:	f7ff ff2e 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000bb8:	f7ff ff2c 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000bbc:	f7ff ff2a 	bl	8000a14 <Error_Handler>
 8000bc0:	200001ac 	.word	0x200001ac
 8000bc4:	40012400 	.word	0x40012400
 8000bc8:	10000010 	.word	0x10000010
 8000bcc:	a4000200 	.word	0xa4000200
 8000bd0:	a8000400 	.word	0xa8000400

08000bd4 <MX_USART1_UART_Init>:
{
 8000bd4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_USART1_UART_Init+0x60>)
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_USART1_UART_Init+0x64>)
 8000bda:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000bdc:	23e1      	movs	r3, #225	; 0xe1
 8000bde:	025b      	lsls	r3, r3, #9
 8000be0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	2300      	movs	r3, #0
 8000be4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000be8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bea:	220c      	movs	r2, #12
 8000bec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf4:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf8:	f002 f902 	bl	8002e00 <HAL_UART_Init>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d111      	bne.n	8000c24 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_USART1_UART_Init+0x60>)
 8000c04:	f002 fa14 	bl	8003030 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d10d      	bne.n	8000c28 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_USART1_UART_Init+0x60>)
 8000c10:	f002 fa34 	bl	800307c <HAL_UARTEx_SetRxFifoThreshold>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d109      	bne.n	8000c2c <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <MX_USART1_UART_Init+0x60>)
 8000c1a:	f002 f9e9 	bl	8002ff0 <HAL_UARTEx_DisableFifoMode>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d106      	bne.n	8000c30 <MX_USART1_UART_Init+0x5c>
}
 8000c22:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c24:	f7ff fef6 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000c28:	f7ff fef4 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000c2c:	f7ff fef2 	bl	8000a14 <Error_Handler>
    Error_Handler();
 8000c30:	f7ff fef0 	bl	8000a14 <Error_Handler>
 8000c34:	20000314 	.word	0x20000314
 8000c38:	40013800 	.word	0x40013800

08000c3c <SystemClock_Config>:
{
 8000c3c:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <SystemClock_Config+0x78>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	2107      	movs	r1, #7
 8000c44:	438b      	bics	r3, r1
 8000c46:	3906      	subs	r1, #6
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c4c:	4a1a      	ldr	r2, [pc, #104]	; (8000cb8 <SystemClock_Config+0x7c>)
 8000c4e:	6811      	ldr	r1, [r2, #0]
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <SystemClock_Config+0x7c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	055b      	lsls	r3, r3, #21
 8000c5e:	d5fb      	bpl.n	8000c58 <SystemClock_Config+0x1c>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemClock_Config+0x7c>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4915      	ldr	r1, [pc, #84]	; (8000cbc <SystemClock_Config+0x80>)
 8000c66:	4011      	ands	r1, r2
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	01d2      	lsls	r2, r2, #7
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4913      	ldr	r1, [pc, #76]	; (8000cc0 <SystemClock_Config+0x84>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <SystemClock_Config+0x88>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	2107      	movs	r1, #7
 8000c84:	438a      	bics	r2, r1
 8000c86:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <SystemClock_Config+0x7c>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2238      	movs	r2, #56	; 0x38
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000c8e:	421a      	tst	r2, r3
 8000c90:	d1fa      	bne.n	8000c88 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <SystemClock_Config+0x7c>)
 8000c94:	6893      	ldr	r3, [r2, #8]
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <SystemClock_Config+0x8c>)
 8000c98:	400b      	ands	r3, r1
 8000c9a:	6093      	str	r3, [r2, #8]
  LL_SetSystemCoreClock(48000000);
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <SystemClock_Config+0x90>)
 8000c9e:	f002 fa15 	bl	80030cc <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f97e 	bl	8000fa4 <HAL_InitTick>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d100      	bne.n	8000cae <SystemClock_Config+0x72>
}
 8000cac:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000cae:	f7ff feb1 	bl	8000a14 <Error_Handler>
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40022000 	.word	0x40022000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	ffff80ff 	.word	0xffff80ff
 8000cc0:	ffffc7ff 	.word	0xffffc7ff
 8000cc4:	fffff0ff 	.word	0xfffff0ff
 8000cc8:	ffff8fff 	.word	0xffff8fff
 8000ccc:	02dc6c00 	.word	0x02dc6c00

08000cd0 <main>:
{
 8000cd0:	b510      	push	{r4, lr}
  HAL_Init();
 8000cd2:	f000 f993 	bl	8000ffc <HAL_Init>
  SystemClock_Config();
 8000cd6:	f7ff ffb1 	bl	8000c3c <SystemClock_Config>
  MX_GPIO_Init();
 8000cda:	f7ff fe85 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000cde:	f7ff fe9b 	bl	8000a18 <MX_TIM1_Init>
  MX_DMA_Init();
 8000ce2:	f7ff fe73 	bl	80009cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000ce6:	f7ff ff13 	bl	8000b10 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000cea:	f7ff ff73 	bl	8000bd4 <MX_USART1_UART_Init>
  apInit();
 8000cee:	f7ff fd03 	bl	80006f8 <apInit>
  apMain();
 8000cf2:	f7ff fd0d 	bl	8000710 <apMain>
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <main+0x26>

08000cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_MspInit+0x2c>)
 8000cfc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4311      	orrs	r1, r2
 8000d02:	6419      	str	r1, [r3, #64]	; 0x40
 8000d04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d06:	400a      	ands	r2, r1
 8000d08:	9200      	str	r2, [sp, #0]
 8000d0a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	0549      	lsls	r1, r1, #21
 8000d12:	430a      	orrs	r2, r1
 8000d14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d18:	400b      	ands	r3, r1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	b002      	add	sp, #8
 8000d20:	4770      	bx	lr
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	2214      	movs	r2, #20
 8000d30:	2100      	movs	r1, #0
 8000d32:	a803      	add	r0, sp, #12
 8000d34:	f002 f9fa 	bl	800312c <memset>
  if(hadc->Instance==ADC1)
 8000d38:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_ADC_MspInit+0x94>)
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d001      	beq.n	8000d44 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d40:	b008      	add	sp, #32
 8000d42:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_ADC_MspInit+0x98>)
 8000d46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	0892      	lsrs	r2, r2, #2
 8000d4c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	0340      	lsls	r0, r0, #13
 8000d54:	4301      	orrs	r1, r0
 8000d56:	6419      	str	r1, [r3, #64]	; 0x40
 8000d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5a:	4002      	ands	r2, r0
 8000d5c:	9201      	str	r2, [sp, #4]
 8000d5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d62:	2201      	movs	r2, #1
 8000d64:	4311      	orrs	r1, r2
 8000d66:	6359      	str	r1, [r3, #52]	; 0x34
 8000d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	9202      	str	r2, [sp, #8]
 8000d6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d70:	2310      	movs	r3, #16
 8000d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d74:	3b0d      	subs	r3, #13
 8000d76:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	20a0      	movs	r0, #160	; 0xa0
 8000d7a:	a903      	add	r1, sp, #12
 8000d7c:	05c0      	lsls	r0, r0, #23
 8000d7e:	f000 ff15 	bl	8001bac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000d82:	4810      	ldr	r0, [pc, #64]	; (8000dc4 <HAL_ADC_MspInit+0x9c>)
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_ADC_MspInit+0xa0>)
 8000d86:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d88:	2305      	movs	r3, #5
 8000d8a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d96:	3280      	adds	r2, #128	; 0x80
 8000d98:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d9a:	2280      	movs	r2, #128	; 0x80
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000da0:	2220      	movs	r2, #32
 8000da2:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000da4:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000da6:	f000 fe59 	bl	8001a5c <HAL_DMA_Init>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d103      	bne.n	8000db6 <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_ADC_MspInit+0x9c>)
 8000db0:	6523      	str	r3, [r4, #80]	; 0x50
 8000db2:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000db4:	e7c4      	b.n	8000d40 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000db6:	f7ff fe2d 	bl	8000a14 <Error_Handler>
 8000dba:	e7f8      	b.n	8000dae <HAL_ADC_MspInit+0x86>
 8000dbc:	40012400 	.word	0x40012400
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	20000210 	.word	0x20000210
 8000dc8:	40020008 	.word	0x40020008

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000dce:	6802      	ldr	r2, [r0, #0]
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_TIM_Base_MspInit+0x24>)
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d001      	beq.n	8000dda <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd6:	b002      	add	sp, #8
 8000dd8:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_TIM_Base_MspInit+0x28>)
 8000ddc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000dde:	2080      	movs	r0, #128	; 0x80
 8000de0:	0100      	lsls	r0, r0, #4
 8000de2:	4301      	orrs	r1, r0
 8000de4:	6411      	str	r1, [r2, #64]	; 0x40
 8000de6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000de8:	4003      	ands	r3, r0
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]
}
 8000dee:	e7f2      	b.n	8000dd6 <HAL_TIM_Base_MspInit+0xa>
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	2214      	movs	r2, #20
 8000e00:	2100      	movs	r1, #0
 8000e02:	a801      	add	r0, sp, #4
 8000e04:	f002 f992 	bl	800312c <memset>
  if(htim->Instance==TIM1)
 8000e08:	6822      	ldr	r2, [r4, #0]
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_MspPostInit+0x48>)
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d001      	beq.n	8000e14 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e10:	b006      	add	sp, #24
 8000e12:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_TIM_MspPostInit+0x4c>)
 8000e16:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4319      	orrs	r1, r3
 8000e1c:	6351      	str	r1, [r2, #52]	; 0x34
 8000e1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e20:	4013      	ands	r3, r2
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e26:	2320      	movs	r3, #32
 8000e28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	3b1e      	subs	r3, #30
 8000e2c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000e2e:	3303      	adds	r3, #3
 8000e30:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	20a0      	movs	r0, #160	; 0xa0
 8000e34:	a901      	add	r1, sp, #4
 8000e36:	05c0      	lsls	r0, r0, #23
 8000e38:	f000 feb8 	bl	8001bac <HAL_GPIO_Init>
}
 8000e3c:	e7e8      	b.n	8000e10 <HAL_TIM_MspPostInit+0x18>
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40012c00 	.word	0x40012c00
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b510      	push	{r4, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2214      	movs	r2, #20
 8000e50:	2100      	movs	r1, #0
 8000e52:	a803      	add	r0, sp, #12
 8000e54:	f002 f96a 	bl	800312c <memset>
  if(huart->Instance==USART1)
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000e5a:	6822      	ldr	r2, [r4, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d001      	beq.n	8000e64 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e60:	b008      	add	sp, #32
 8000e62:	bd10      	pop	{r4, pc}
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_UART_MspInit+0x90>)
 8000e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000e68:	2103      	movs	r1, #3
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e70:	2080      	movs	r0, #128	; 0x80
 8000e72:	01c0      	lsls	r0, r0, #7
 8000e74:	4301      	orrs	r1, r0
 8000e76:	6419      	str	r1, [r3, #64]	; 0x40
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	4002      	ands	r2, r0
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e82:	2202      	movs	r2, #2
 8000e84:	4311      	orrs	r1, r2
 8000e86:	6359      	str	r1, [r3, #52]	; 0x34
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e90:	23c0      	movs	r3, #192	; 0xc0
 8000e92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	a903      	add	r1, sp, #12
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <HAL_UART_MspInit+0x94>)
 8000e9a:	f000 fe87 	bl	8001bac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HAL_UART_MspInit+0x98>)
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_UART_MspInit+0x9c>)
 8000ea2:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ea4:	2332      	movs	r3, #50	; 0x32
 8000ea6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eac:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb2:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb4:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000eb6:	3a60      	subs	r2, #96	; 0x60
 8000eb8:	61c2      	str	r2, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ebc:	f000 fdce 	bl	8001a5c <HAL_DMA_Init>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d103      	bne.n	8000ecc <HAL_UART_MspInit+0x84>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_UART_MspInit+0x98>)
 8000ec6:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000ec8:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000eca:	e7c9      	b.n	8000e60 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8000ecc:	f7ff fda2 	bl	8000a14 <Error_Handler>
 8000ed0:	e7f8      	b.n	8000ec4 <HAL_UART_MspInit+0x7c>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	50000400 	.word	0x50000400
 8000ee0:	2000026c 	.word	0x2000026c
 8000ee4:	4002001c 	.word	0x4002001c

08000ee8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler>

08000eea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler>

08000eec <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef2:	f000 f897 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <_sbrk+0x38>)
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <_sbrk+0x3c>)
 8000f00:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f02:	490d      	ldr	r1, [pc, #52]	; (8000f38 <_sbrk+0x40>)
 8000f04:	6809      	ldr	r1, [r1, #0]
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d007      	beq.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	490b      	ldr	r1, [pc, #44]	; (8000f38 <_sbrk+0x40>)
 8000f0c:	6808      	ldr	r0, [r1, #0]
 8000f0e:	18c3      	adds	r3, r0, r3
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d806      	bhi.n	8000f22 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f14:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <_sbrk+0x40>)
 8000f16:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000f18:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f1a:	4907      	ldr	r1, [pc, #28]	; (8000f38 <_sbrk+0x40>)
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <_sbrk+0x44>)
 8000f1e:	6008      	str	r0, [r1, #0]
 8000f20:	e7f3      	b.n	8000f0a <_sbrk+0x12>
    errno = ENOMEM;
 8000f22:	f002 f8d9 	bl	80030d8 <__errno>
 8000f26:	230c      	movs	r3, #12
 8000f28:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4240      	negs	r0, r0
 8000f2e:	e7f3      	b.n	8000f18 <_sbrk+0x20>
 8000f30:	20003000 	.word	0x20003000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	200003a4 	.word	0x200003a4
 8000f3c:	200003c0 	.word	0x200003c0

08000f40 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f40:	4b02      	ldr	r3, [pc, #8]	; (8000f4c <SystemInit+0xc>)
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0512      	lsls	r2, r2, #20
 8000f46:	609a      	str	r2, [r3, #8]
#endif
}
 8000f48:	4770      	bx	lr
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f56:	e003      	b.n	8000f60 <LoopCopyDataInit>

08000f58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f5e:	3104      	adds	r1, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f60:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LoopForever+0xa>)
  ldr r3, =_edata
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f68:	d3f6      	bcc.n	8000f58 <CopyDataInit>
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopForever+0x12>)
  b LoopFillZerobss
 8000f6c:	e002      	b.n	8000f74 <LoopFillZerobss>

08000f6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f70:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f72:	3204      	adds	r2, #4

08000f74 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <LoopForever+0x16>)
  cmp r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f78:	d3f9      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f7a:	f7ff ffe1 	bl	8000f40 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f7e:	f002 f8b1 	bl	80030e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f82:	f7ff fea5 	bl	8000cd0 <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   r0, =_estack
 8000f88:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000f8c:	08003bdc 	.word	0x08003bdc
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f94:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000f98:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000f9c:	200003bc 	.word	0x200003bc

08000fa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b510      	push	{r4, lr}
 8000fa6:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_InitTick+0x4c>)
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	2900      	cmp	r1, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fb2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	20fa      	movs	r0, #250	; 0xfa
 8000fb6:	0080      	lsls	r0, r0, #2
 8000fb8:	f7ff f8b0 	bl	800011c <__udivsi3>
 8000fbc:	0001      	movs	r1, r0
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_InitTick+0x50>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	f7ff f8ab 	bl	800011c <__udivsi3>
 8000fc6:	f000 fcd9 	bl	800197c <HAL_SYSTICK_Config>
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d10d      	bne.n	8000fea <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	2c03      	cmp	r4, #3
 8000fd0:	d901      	bls.n	8000fd6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	e7ed      	b.n	8000fb2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	0021      	movs	r1, r4
 8000fdc:	4240      	negs	r0, r0
 8000fde:	f000 fc9d 	bl	800191c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fe4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	e7e3      	b.n	8000fb2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
 8000fec:	e7e1      	b.n	8000fb2 <HAL_InitTick+0xe>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	2000000c 	.word	0x2000000c

08000ffc <HAL_Init>:
{
 8000ffc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_Init+0x24>)
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	430b      	orrs	r3, r1
 8001008:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ffca 	bl	8000fa4 <HAL_InitTick>
 8001010:	1e04      	subs	r4, r0, #0
 8001012:	d002      	beq.n	800101a <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001014:	2401      	movs	r4, #1
}
 8001016:	0020      	movs	r0, r4
 8001018:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800101a:	f7ff fe6d 	bl	8000cf8 <HAL_MspInit>
 800101e:	e7fa      	b.n	8001016 <HAL_Init+0x1a>
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001024:	4a03      	ldr	r2, [pc, #12]	; (8001034 <HAL_IncTick+0x10>)
 8001026:	6813      	ldr	r3, [r2, #0]
 8001028:	4903      	ldr	r1, [pc, #12]	; (8001038 <HAL_IncTick+0x14>)
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	185b      	adds	r3, r3, r1
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	4770      	bx	lr
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	200003a8 	.word	0x200003a8
 8001038:	20000008 	.word	0x20000008

0800103c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800103c:	4b01      	ldr	r3, [pc, #4]	; (8001044 <HAL_GetTick+0x8>)
 800103e:	6818      	ldr	r0, [r3, #0]
}
 8001040:	4770      	bx	lr
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	200003a8 	.word	0x200003a8

08001048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800104e:	2300      	movs	r3, #0
 8001050:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <HAL_ADC_Init+0x10>
 8001056:	e119      	b.n	800128c <HAL_ADC_Init+0x244>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001058:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800105a:	2b00      	cmp	r3, #0
 800105c:	d012      	beq.n	8001084 <HAL_ADC_Init+0x3c>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800105e:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	d41b      	bmi.n	800109e <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	4989      	ldr	r1, [pc, #548]	; (8001290 <HAL_ADC_Init+0x248>)
 800106a:	4011      	ands	r1, r2
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	0552      	lsls	r2, r2, #21
 8001070:	430a      	orrs	r2, r1
 8001072:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001074:	4b87      	ldr	r3, [pc, #540]	; (8001294 <HAL_ADC_Init+0x24c>)
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	4987      	ldr	r1, [pc, #540]	; (8001298 <HAL_ADC_Init+0x250>)
 800107a:	f7ff f84f 	bl	800011c <__udivsi3>
 800107e:	0040      	lsls	r0, r0, #1
 8001080:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8001082:	e009      	b.n	8001098 <HAL_ADC_Init+0x50>
    HAL_ADC_MspInit(hadc);
 8001084:	f7ff fe50 	bl	8000d28 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	2300      	movs	r3, #0
 800108a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800108c:	2254      	movs	r2, #84	; 0x54
 800108e:	54a3      	strb	r3, [r4, r2]
 8001090:	e7e5      	b.n	800105e <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8001092:	9b01      	ldr	r3, [sp, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001098:	9b01      	ldr	r3, [sp, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_Init+0x4a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800109e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	00d2      	lsls	r2, r2, #3
 80010a4:	d500      	bpl.n	80010a8 <HAL_ADC_Init+0x60>
 80010a6:	e09d      	b.n	80011e4 <HAL_ADC_Init+0x19c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010aa:	2110      	movs	r1, #16
 80010ac:	430a      	orrs	r2, r1
 80010ae:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010b2:	390f      	subs	r1, #15
 80010b4:	430a      	orrs	r2, r1
 80010b6:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	2104      	movs	r1, #4
 80010be:	000d      	movs	r5, r1
 80010c0:	4015      	ands	r5, r2
 80010c2:	4211      	tst	r1, r2
 80010c4:	d000      	beq.n	80010c8 <HAL_ADC_Init+0x80>
 80010c6:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010ca:	06d2      	lsls	r2, r2, #27
 80010cc:	d500      	bpl.n	80010d0 <HAL_ADC_Init+0x88>
 80010ce:	e0d6      	b.n	800127e <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80010d0:	2d00      	cmp	r5, #0
 80010d2:	d000      	beq.n	80010d6 <HAL_ADC_Init+0x8e>
 80010d4:	e0d3      	b.n	800127e <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010d8:	4970      	ldr	r1, [pc, #448]	; (800129c <HAL_ADC_Init+0x254>)
 80010da:	400a      	ands	r2, r1
 80010dc:	3106      	adds	r1, #6
 80010de:	31ff      	adds	r1, #255	; 0xff
 80010e0:	430a      	orrs	r2, r1
 80010e2:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	07d2      	lsls	r2, r2, #31
 80010e8:	d452      	bmi.n	8001190 <HAL_ADC_Init+0x148>
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010ea:	7e22      	ldrb	r2, [r4, #24]
 80010ec:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010ee:	68a1      	ldr	r1, [r4, #8]
 80010f0:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010f2:	7e61      	ldrb	r1, [r4, #25]
 80010f4:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010f6:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010f8:	7ea6      	ldrb	r6, [r4, #26]
 80010fa:	0371      	lsls	r1, r6, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010fc:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001100:	2900      	cmp	r1, #0
 8001102:	d001      	beq.n	8001108 <HAL_ADC_Init+0xc0>
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001108:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800110a:	68e1      	ldr	r1, [r4, #12]
 800110c:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800110e:	6921      	ldr	r1, [r4, #16]
 8001110:	2900      	cmp	r1, #0
 8001112:	db69      	blt.n	80011e8 <HAL_ADC_Init+0x1a0>
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8001118:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	5c61      	ldrb	r1, [r4, r1]
 800111e:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001120:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001122:	2120      	movs	r1, #32
 8001124:	5c61      	ldrb	r1, [r4, r1]
 8001126:	2901      	cmp	r1, #1
 8001128:	d061      	beq.n	80011ee <HAL_ADC_Init+0x1a6>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800112c:	2900      	cmp	r1, #0
 800112e:	d005      	beq.n	800113c <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001130:	26e0      	movs	r6, #224	; 0xe0
 8001132:	0076      	lsls	r6, r6, #1
 8001134:	4031      	ands	r1, r6
 8001136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001138:	4331      	orrs	r1, r6
 800113a:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800113c:	68d9      	ldr	r1, [r3, #12]
 800113e:	4e58      	ldr	r6, [pc, #352]	; (80012a0 <HAL_ADC_Init+0x258>)
 8001140:	4031      	ands	r1, r6
 8001142:	430a      	orrs	r2, r1
 8001144:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	0f9b      	lsrs	r3, r3, #30
 800114a:	079b      	lsls	r3, r3, #30
 800114c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800114e:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001150:	213c      	movs	r1, #60	; 0x3c
 8001152:	5c61      	ldrb	r1, [r4, r1]
 8001154:	2901      	cmp	r1, #1
 8001156:	d059      	beq.n	800120c <HAL_ADC_Init+0x1c4>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001158:	6821      	ldr	r1, [r4, #0]
 800115a:	690b      	ldr	r3, [r1, #16]
 800115c:	4e51      	ldr	r6, [pc, #324]	; (80012a4 <HAL_ADC_Init+0x25c>)
 800115e:	4033      	ands	r3, r6
 8001160:	4313      	orrs	r3, r2
 8001162:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001164:	6863      	ldr	r3, [r4, #4]
 8001166:	22c0      	movs	r2, #192	; 0xc0
 8001168:	0612      	lsls	r2, r2, #24
 800116a:	4293      	cmp	r3, r2
 800116c:	d010      	beq.n	8001190 <HAL_ADC_Init+0x148>
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	05d2      	lsls	r2, r2, #23
 8001172:	4293      	cmp	r3, r2
 8001174:	d00c      	beq.n	8001190 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0612      	lsls	r2, r2, #24
 800117a:	4293      	cmp	r3, r2
 800117c:	d008      	beq.n	8001190 <HAL_ADC_Init+0x148>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800117e:	494a      	ldr	r1, [pc, #296]	; (80012a8 <HAL_ADC_Init+0x260>)
 8001180:	680a      	ldr	r2, [r1, #0]
 8001182:	4e4a      	ldr	r6, [pc, #296]	; (80012ac <HAL_ADC_Init+0x264>)
 8001184:	4032      	ands	r2, r6
 8001186:	26f0      	movs	r6, #240	; 0xf0
 8001188:	03b6      	lsls	r6, r6, #14
 800118a:	4033      	ands	r3, r6
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001190:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001192:	6953      	ldr	r3, [r2, #20]
 8001194:	2107      	movs	r1, #7
 8001196:	438b      	bics	r3, r1
 8001198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800119a:	430b      	orrs	r3, r1
 800119c:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800119e:	6821      	ldr	r1, [r4, #0]
 80011a0:	694b      	ldr	r3, [r1, #20]
 80011a2:	2270      	movs	r2, #112	; 0x70
 80011a4:	4393      	bics	r3, r2
 80011a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011ae:	6923      	ldr	r3, [r4, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d135      	bne.n	8001220 <HAL_ADC_Init+0x1d8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011b4:	6822      	ldr	r2, [r4, #0]
 80011b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80011b8:	3b10      	subs	r3, #16
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011be:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	2307      	movs	r3, #7
 80011c4:	4013      	ands	r3, r2
 80011c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d04f      	beq.n	800126c <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ce:	2212      	movs	r2, #18
 80011d0:	4393      	bics	r3, r2
 80011d2:	3a02      	subs	r2, #2
 80011d4:	4313      	orrs	r3, r2
 80011d6:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011da:	3a0f      	subs	r2, #15
 80011dc:	4313      	orrs	r3, r2
 80011de:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
 80011e2:	e051      	b.n	8001288 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2000      	movs	r0, #0
 80011e6:	e768      	b.n	80010ba <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011e8:	0049      	lsls	r1, r1, #1
 80011ea:	0849      	lsrs	r1, r1, #1
 80011ec:	e794      	b.n	8001118 <HAL_ADC_Init+0xd0>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d103      	bne.n	80011fa <HAL_ADC_Init+0x1b2>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0249      	lsls	r1, r1, #9
 80011f6:	430a      	orrs	r2, r1
 80011f8:	e797      	b.n	800112a <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80011fc:	2620      	movs	r6, #32
 80011fe:	4331      	orrs	r1, r6
 8001200:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001202:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001204:	3e1f      	subs	r6, #31
 8001206:	4331      	orrs	r1, r6
 8001208:	65e1      	str	r1, [r4, #92]	; 0x5c
 800120a:	e78e      	b.n	800112a <HAL_ADC_Init+0xe2>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800120c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800120e:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 8001210:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001212:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8001214:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001216:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001218:	4313      	orrs	r3, r2
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	e79b      	b.n	8001158 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	0392      	lsls	r2, r2, #14
 8001224:	4293      	cmp	r3, r2
 8001226:	d1ca      	bne.n	80011be <HAL_ADC_Init+0x176>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001228:	2d07      	cmp	r5, #7
 800122a:	d808      	bhi.n	800123e <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800122c:	00ab      	lsls	r3, r5, #2
 800122e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001230:	40da      	lsrs	r2, r3
 8001232:	230f      	movs	r3, #15
 8001234:	4013      	ands	r3, r2
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d001      	beq.n	800123e <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800123a:	3501      	adds	r5, #1
 800123c:	e7f4      	b.n	8001228 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800123e:	2d01      	cmp	r5, #1
 8001240:	d00d      	beq.n	800125e <HAL_ADC_Init+0x216>
        MODIFY_REG(hadc->Instance->CHSELR,
 8001242:	6821      	ldr	r1, [r4, #0]
 8001244:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001246:	69e3      	ldr	r3, [r4, #28]
 8001248:	3b01      	subs	r3, #1
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	221c      	movs	r2, #28
 800124e:	401a      	ands	r2, r3
 8001250:	2310      	movs	r3, #16
 8001252:	425b      	negs	r3, r3
 8001254:	4093      	lsls	r3, r2
 8001256:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001258:	4313      	orrs	r3, r2
 800125a:	628b      	str	r3, [r1, #40]	; 0x28
 800125c:	e7af      	b.n	80011be <HAL_ADC_Init+0x176>
        SET_BIT(hadc->Instance->CHSELR,
 800125e:	6822      	ldr	r2, [r4, #0]
 8001260:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001262:	2310      	movs	r3, #16
 8001264:	425b      	negs	r3, r3
 8001266:	430b      	orrs	r3, r1
 8001268:	6293      	str	r3, [r2, #40]	; 0x28
 800126a:	e7a8      	b.n	80011be <HAL_ADC_Init+0x176>
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	2300      	movs	r3, #0
 800126e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001270:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001272:	2203      	movs	r2, #3
 8001274:	4393      	bics	r3, r2
 8001276:	3a02      	subs	r2, #2
 8001278:	4313      	orrs	r3, r2
 800127a:	65a3      	str	r3, [r4, #88]	; 0x58
 800127c:	e004      	b.n	8001288 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001280:	2210      	movs	r2, #16
 8001282:	4313      	orrs	r3, r2
 8001284:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001286:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001288:	b002      	add	sp, #8
 800128a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800128c:	2001      	movs	r0, #1
 800128e:	e7fb      	b.n	8001288 <HAL_ADC_Init+0x240>
 8001290:	6fffffe8 	.word	0x6fffffe8
 8001294:	20000004 	.word	0x20000004
 8001298:	00030d40 	.word	0x00030d40
 800129c:	fffffefd 	.word	0xfffffefd
 80012a0:	fffe0201 	.word	0xfffe0201
 80012a4:	1ffffc02 	.word	0x1ffffc02
 80012a8:	40012708 	.word	0x40012708
 80012ac:	ffc3ffff 	.word	0xffc3ffff

080012b0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012b0:	4770      	bx	lr

080012b2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012b2:	4770      	bx	lr

080012b4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80012b4:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012b6:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012b8:	f7ff fffb 	bl	80012b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012bc:	bd10      	pop	{r4, pc}

080012be <HAL_ADC_ErrorCallback>:
}
 80012be:	4770      	bx	lr

080012c0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80012c0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012c2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012c4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	4313      	orrs	r3, r2
 80012ca:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80012cc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80012ce:	3a3c      	subs	r2, #60	; 0x3c
 80012d0:	4313      	orrs	r3, r2
 80012d2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80012d4:	f7ff fff3 	bl	80012be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012d8:	bd10      	pop	{r4, pc}
	...

080012dc <ADC_DMAConvCplt>:
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80012e0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80012e2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80012e4:	2150      	movs	r1, #80	; 0x50
 80012e6:	4211      	tst	r1, r2
 80012e8:	d12a      	bne.n	8001340 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ea:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4313      	orrs	r3, r2
 80012f2:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012f4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	22c0      	movs	r2, #192	; 0xc0
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4211      	tst	r1, r2
 80012fe:	d113      	bne.n	8001328 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001300:	7e82      	ldrb	r2, [r0, #26]
 8001302:	2a00      	cmp	r2, #0
 8001304:	d110      	bne.n	8001328 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	0712      	lsls	r2, r2, #28
 800130a:	d50d      	bpl.n	8001328 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	0752      	lsls	r2, r2, #29
 8001310:	d40d      	bmi.n	800132e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	210c      	movs	r1, #12
 8001316:	438a      	bics	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800131a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <ADC_DMAConvCplt+0x7c>)
 800131e:	4013      	ands	r3, r2
 8001320:	3204      	adds	r2, #4
 8001322:	32ff      	adds	r2, #255	; 0xff
 8001324:	4313      	orrs	r3, r2
 8001326:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001328:	f7ff ffc2 	bl	80012b0 <HAL_ADC_ConvCpltCallback>
}
 800132c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800132e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001330:	2220      	movs	r2, #32
 8001332:	4313      	orrs	r3, r2
 8001334:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001336:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001338:	3a1f      	subs	r2, #31
 800133a:	4313      	orrs	r3, r2
 800133c:	65c3      	str	r3, [r0, #92]	; 0x5c
 800133e:	e7f3      	b.n	8001328 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001340:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001342:	06d2      	lsls	r2, r2, #27
 8001344:	d404      	bmi.n	8001350 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001346:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800134a:	0018      	movs	r0, r3
 800134c:	4790      	blx	r2
}
 800134e:	e7ed      	b.n	800132c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001350:	f7ff ffb5 	bl	80012be <HAL_ADC_ErrorCallback>
 8001354:	e7ea      	b.n	800132c <ADC_DMAConvCplt+0x50>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	fffffefe 	.word	0xfffffefe

0800135c <HAL_ADC_ConfigChannel>:
{
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001366:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001368:	3354      	adds	r3, #84	; 0x54
 800136a:	5cc3      	ldrb	r3, [r0, r3]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d100      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x16>
 8001370:	e122      	b.n	80015b8 <HAL_ADC_ConfigChannel+0x25c>
 8001372:	2354      	movs	r3, #84	; 0x54
 8001374:	2201      	movs	r2, #1
 8001376:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001378:	6800      	ldr	r0, [r0, #0]
 800137a:	6883      	ldr	r3, [r0, #8]
 800137c:	3203      	adds	r2, #3
 800137e:	0016      	movs	r6, r2
 8001380:	401e      	ands	r6, r3
 8001382:	421a      	tst	r2, r3
 8001384:	d009      	beq.n	800139a <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001386:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001388:	321c      	adds	r2, #28
 800138a:	4313      	orrs	r3, r2
 800138c:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800138e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001390:	2354      	movs	r3, #84	; 0x54
 8001392:	2200      	movs	r2, #0
 8001394:	54e2      	strb	r2, [r4, r3]
}
 8001396:	b003      	add	sp, #12
 8001398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 800139a:	684b      	ldr	r3, [r1, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d100      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0x46>
 80013a0:	e0d6      	b.n	8001550 <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	0612      	lsls	r2, r2, #24
 80013a6:	4295      	cmp	r5, r2
 80013a8:	d026      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x9c>
 80013aa:	4a84      	ldr	r2, [pc, #528]	; (80015bc <HAL_ADC_ConfigChannel+0x260>)
 80013ac:	4295      	cmp	r5, r2
 80013ae:	d023      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80013b0:	221f      	movs	r2, #31
 80013b2:	4013      	ands	r3, r2
 80013b4:	3a10      	subs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80013ba:	4395      	bics	r5, r2
 80013bc:	002a      	movs	r2, r5
 80013be:	680d      	ldr	r5, [r1, #0]
 80013c0:	026f      	lsls	r7, r5, #9
 80013c2:	d12f      	bne.n	8001424 <HAL_ADC_ConfigChannel+0xc8>
 80013c4:	0ead      	lsrs	r5, r5, #26
 80013c6:	261f      	movs	r6, #31
 80013c8:	402e      	ands	r6, r5
 80013ca:	409e      	lsls	r6, r3
 80013cc:	4316      	orrs	r6, r2
 80013ce:	6626      	str	r6, [r4, #96]	; 0x60
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80013d0:	684d      	ldr	r5, [r1, #4]
 80013d2:	08ab      	lsrs	r3, r5, #2
 80013d4:	3301      	adds	r3, #1
 80013d6:	69e2      	ldr	r2, [r4, #28]
 80013d8:	4293      	cmp	r3, r2
 80013da:	d813      	bhi.n	8001404 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 80013dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013de:	231f      	movs	r3, #31
 80013e0:	401d      	ands	r5, r3
 80013e2:	3b10      	subs	r3, #16
 80013e4:	001e      	movs	r6, r3
 80013e6:	40ae      	lsls	r6, r5
 80013e8:	43b2      	bics	r2, r6
 80013ea:	680e      	ldr	r6, [r1, #0]
 80013ec:	0eb6      	lsrs	r6, r6, #26
 80013ee:	4033      	ands	r3, r6
 80013f0:	40ab      	lsls	r3, r5
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6283      	str	r3, [r0, #40]	; 0x28
}
 80013f6:	e005      	b.n	8001404 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80013fa:	680b      	ldr	r3, [r1, #0]
 80013fc:	025b      	lsls	r3, r3, #9
 80013fe:	0a5b      	lsrs	r3, r3, #9
 8001400:	4313      	orrs	r3, r2
 8001402:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001404:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001406:	6942      	ldr	r2, [r0, #20]
 8001408:	680b      	ldr	r3, [r1, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	439a      	bics	r2, r3
 800140e:	688d      	ldr	r5, [r1, #8]
 8001410:	402b      	ands	r3, r5
 8001412:	4d6b      	ldr	r5, [pc, #428]	; (80015c0 <HAL_ADC_ConfigChannel+0x264>)
 8001414:	402b      	ands	r3, r5
 8001416:	4313      	orrs	r3, r2
 8001418:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800141a:	680b      	ldr	r3, [r1, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db5f      	blt.n	80014e0 <HAL_ADC_ConfigChannel+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2000      	movs	r0, #0
 8001422:	e7b5      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001424:	07ef      	lsls	r7, r5, #31
 8001426:	d4d0      	bmi.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 8001428:	07ae      	lsls	r6, r5, #30
 800142a:	d42f      	bmi.n	800148c <HAL_ADC_ConfigChannel+0x130>
 800142c:	076e      	lsls	r6, r5, #29
 800142e:	d42f      	bmi.n	8001490 <HAL_ADC_ConfigChannel+0x134>
 8001430:	072e      	lsls	r6, r5, #28
 8001432:	d42f      	bmi.n	8001494 <HAL_ADC_ConfigChannel+0x138>
 8001434:	06ee      	lsls	r6, r5, #27
 8001436:	d42f      	bmi.n	8001498 <HAL_ADC_ConfigChannel+0x13c>
 8001438:	06ae      	lsls	r6, r5, #26
 800143a:	d42f      	bmi.n	800149c <HAL_ADC_ConfigChannel+0x140>
 800143c:	066e      	lsls	r6, r5, #25
 800143e:	d42f      	bmi.n	80014a0 <HAL_ADC_ConfigChannel+0x144>
 8001440:	062e      	lsls	r6, r5, #24
 8001442:	d42f      	bmi.n	80014a4 <HAL_ADC_ConfigChannel+0x148>
 8001444:	05ee      	lsls	r6, r5, #23
 8001446:	d42f      	bmi.n	80014a8 <HAL_ADC_ConfigChannel+0x14c>
 8001448:	05ae      	lsls	r6, r5, #22
 800144a:	d42f      	bmi.n	80014ac <HAL_ADC_ConfigChannel+0x150>
 800144c:	056e      	lsls	r6, r5, #21
 800144e:	d42f      	bmi.n	80014b0 <HAL_ADC_ConfigChannel+0x154>
 8001450:	052e      	lsls	r6, r5, #20
 8001452:	d42f      	bmi.n	80014b4 <HAL_ADC_ConfigChannel+0x158>
 8001454:	04ee      	lsls	r6, r5, #19
 8001456:	d42f      	bmi.n	80014b8 <HAL_ADC_ConfigChannel+0x15c>
 8001458:	04ae      	lsls	r6, r5, #18
 800145a:	d42f      	bmi.n	80014bc <HAL_ADC_ConfigChannel+0x160>
 800145c:	046e      	lsls	r6, r5, #17
 800145e:	d42f      	bmi.n	80014c0 <HAL_ADC_ConfigChannel+0x164>
 8001460:	042e      	lsls	r6, r5, #16
 8001462:	d42f      	bmi.n	80014c4 <HAL_ADC_ConfigChannel+0x168>
 8001464:	03ee      	lsls	r6, r5, #15
 8001466:	d42f      	bmi.n	80014c8 <HAL_ADC_ConfigChannel+0x16c>
 8001468:	03ae      	lsls	r6, r5, #14
 800146a:	d42f      	bmi.n	80014cc <HAL_ADC_ConfigChannel+0x170>
 800146c:	036e      	lsls	r6, r5, #13
 800146e:	d42f      	bmi.n	80014d0 <HAL_ADC_ConfigChannel+0x174>
 8001470:	032e      	lsls	r6, r5, #12
 8001472:	d42f      	bmi.n	80014d4 <HAL_ADC_ConfigChannel+0x178>
 8001474:	02ee      	lsls	r6, r5, #11
 8001476:	d42f      	bmi.n	80014d8 <HAL_ADC_ConfigChannel+0x17c>
 8001478:	02ae      	lsls	r6, r5, #10
 800147a:	d42f      	bmi.n	80014dc <HAL_ADC_ConfigChannel+0x180>
 800147c:	2780      	movs	r7, #128	; 0x80
 800147e:	03ff      	lsls	r7, r7, #15
 8001480:	002e      	movs	r6, r5
 8001482:	403e      	ands	r6, r7
 8001484:	423d      	tst	r5, r7
 8001486:	d0a0      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 8001488:	2616      	movs	r6, #22
 800148a:	e79e      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 800148c:	2601      	movs	r6, #1
 800148e:	e79c      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 8001490:	2602      	movs	r6, #2
 8001492:	e79a      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 8001494:	2603      	movs	r6, #3
 8001496:	e798      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 8001498:	2604      	movs	r6, #4
 800149a:	e796      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 800149c:	2605      	movs	r6, #5
 800149e:	e794      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014a0:	2606      	movs	r6, #6
 80014a2:	e792      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014a4:	2607      	movs	r6, #7
 80014a6:	e790      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014a8:	2608      	movs	r6, #8
 80014aa:	e78e      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014ac:	2609      	movs	r6, #9
 80014ae:	e78c      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014b0:	260a      	movs	r6, #10
 80014b2:	e78a      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014b4:	260b      	movs	r6, #11
 80014b6:	e788      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014b8:	260c      	movs	r6, #12
 80014ba:	e786      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014bc:	260d      	movs	r6, #13
 80014be:	e784      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014c0:	260e      	movs	r6, #14
 80014c2:	e782      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014c4:	260f      	movs	r6, #15
 80014c6:	e780      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014c8:	2610      	movs	r6, #16
 80014ca:	e77e      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014cc:	2611      	movs	r6, #17
 80014ce:	e77c      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014d0:	2612      	movs	r6, #18
 80014d2:	e77a      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014d4:	2613      	movs	r6, #19
 80014d6:	e778      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014d8:	2614      	movs	r6, #20
 80014da:	e776      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
 80014dc:	2615      	movs	r6, #21
 80014de:	e774      	b.n	80013ca <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80014e0:	4a38      	ldr	r2, [pc, #224]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 80014e2:	6811      	ldr	r1, [r2, #0]
 80014e4:	22c0      	movs	r2, #192	; 0xc0
 80014e6:	0412      	lsls	r2, r2, #16
 80014e8:	400a      	ands	r2, r1
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ea:	4837      	ldr	r0, [pc, #220]	; (80015c8 <HAL_ADC_ConfigChannel+0x26c>)
 80014ec:	4283      	cmp	r3, r0
 80014ee:	d004      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x19e>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014f0:	4836      	ldr	r0, [pc, #216]	; (80015cc <HAL_ADC_ConfigChannel+0x270>)
 80014f2:	4283      	cmp	r3, r0
 80014f4:	d01f      	beq.n	8001536 <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f6:	2000      	movs	r0, #0
 80014f8:	e74a      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014fa:	0208      	lsls	r0, r1, #8
 80014fc:	d4f8      	bmi.n	80014f0 <HAL_ADC_ConfigChannel+0x194>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001504:	492f      	ldr	r1, [pc, #188]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 8001506:	680b      	ldr	r3, [r1, #0]
 8001508:	4831      	ldr	r0, [pc, #196]	; (80015d0 <HAL_ADC_ConfigChannel+0x274>)
 800150a:	4003      	ands	r3, r0
 800150c:	431a      	orrs	r2, r3
 800150e:	600a      	str	r2, [r1, #0]
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_ADC_ConfigChannel+0x278>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	4930      	ldr	r1, [pc, #192]	; (80015d8 <HAL_ADC_ConfigChannel+0x27c>)
 8001516:	f7fe fe01 	bl	800011c <__udivsi3>
 800151a:	0043      	lsls	r3, r0, #1
 800151c:	181b      	adds	r3, r3, r0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3301      	adds	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001524:	e002      	b.n	800152c <HAL_ADC_ConfigChannel+0x1d0>
            wait_loop_index--;
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	3b01      	subs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800152c:	9b01      	ldr	r3, [sp, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x1ca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001532:	2000      	movs	r0, #0
 8001534:	e72c      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001536:	024b      	lsls	r3, r1, #9
 8001538:	d43c      	bmi.n	80015b4 <HAL_ADC_ConfigChannel+0x258>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	03db      	lsls	r3, r3, #15
 800153e:	431a      	orrs	r2, r3
 8001540:	4920      	ldr	r1, [pc, #128]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 8001542:	680b      	ldr	r3, [r1, #0]
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <HAL_ADC_ConfigChannel+0x274>)
 8001546:	4003      	ands	r3, r0
 8001548:	431a      	orrs	r2, r3
 800154a:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154c:	2000      	movs	r0, #0
}
 800154e:	e71f      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	429d      	cmp	r5, r3
 8001556:	d002      	beq.n	800155e <HAL_ADC_ConfigChannel+0x202>
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_ADC_ConfigChannel+0x260>)
 800155a:	429d      	cmp	r5, r3
 800155c:	d105      	bne.n	800156a <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800155e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001560:	680b      	ldr	r3, [r1, #0]
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	0a5b      	lsrs	r3, r3, #9
 8001566:	439a      	bics	r2, r3
 8001568:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800156a:	680b      	ldr	r3, [r1, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	db01      	blt.n	8001574 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	2000      	movs	r0, #0
 8001572:	e70d      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 8001576:	6812      	ldr	r2, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001578:	4913      	ldr	r1, [pc, #76]	; (80015c8 <HAL_ADC_ConfigChannel+0x26c>)
 800157a:	428b      	cmp	r3, r1
 800157c:	d004      	beq.n	8001588 <HAL_ADC_ConfigChannel+0x22c>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800157e:	4913      	ldr	r1, [pc, #76]	; (80015cc <HAL_ADC_ConfigChannel+0x270>)
 8001580:	428b      	cmp	r3, r1
 8001582:	d00c      	beq.n	800159e <HAL_ADC_ConfigChannel+0x242>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2000      	movs	r0, #0
 8001586:	e703      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	03db      	lsls	r3, r3, #15
 800158c:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 8001590:	680b      	ldr	r3, [r1, #0]
 8001592:	480f      	ldr	r0, [pc, #60]	; (80015d0 <HAL_ADC_ConfigChannel+0x274>)
 8001594:	4003      	ands	r3, r0
 8001596:	431a      	orrs	r2, r3
 8001598:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159a:	2000      	movs	r0, #0
}
 800159c:	e6f8      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <HAL_ADC_ConfigChannel+0x268>)
 80015a6:	680b      	ldr	r3, [r1, #0]
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <HAL_ADC_ConfigChannel+0x274>)
 80015aa:	4003      	ands	r3, r0
 80015ac:	431a      	orrs	r2, r3
 80015ae:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2000      	movs	r0, #0
}
 80015b2:	e6ed      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
 80015b4:	2000      	movs	r0, #0
 80015b6:	e6eb      	b.n	8001390 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 80015b8:	2002      	movs	r0, #2
 80015ba:	e6ec      	b.n	8001396 <HAL_ADC_ConfigChannel+0x3a>
 80015bc:	80000004 	.word	0x80000004
 80015c0:	7fffff00 	.word	0x7fffff00
 80015c4:	40012708 	.word	0x40012708
 80015c8:	a4000200 	.word	0xa4000200
 80015cc:	a8000400 	.word	0xa8000400
 80015d0:	ff3fffff 	.word	0xff3fffff
 80015d4:	20000004 	.word	0x20000004
 80015d8:	00030d40 	.word	0x00030d40

080015dc <ADC_Enable>:
{
 80015dc:	b530      	push	{r4, r5, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	07d2      	lsls	r2, r2, #31
 80015ec:	d44d      	bmi.n	800168a <ADC_Enable+0xae>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <ADC_Enable+0xb4>)
 80015f2:	4211      	tst	r1, r2
 80015f4:	d111      	bne.n	800161a <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	4926      	ldr	r1, [pc, #152]	; (8001694 <ADC_Enable+0xb8>)
 80015fa:	400a      	ands	r2, r1
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <ADC_Enable+0xbc>)
 8001604:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	d517      	bpl.n	800163a <ADC_Enable+0x5e>
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <ADC_Enable+0xc0>)
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <ADC_Enable+0xc4>)
 8001610:	f7fe fd84 	bl	800011c <__udivsi3>
 8001614:	3001      	adds	r0, #1
 8001616:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001618:	e00c      	b.n	8001634 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800161c:	2210      	movs	r2, #16
 800161e:	4313      	orrs	r3, r2
 8001620:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001622:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001624:	3a0f      	subs	r2, #15
 8001626:	4313      	orrs	r3, r2
 8001628:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800162a:	2001      	movs	r0, #1
 800162c:	e02e      	b.n	800168c <ADC_Enable+0xb0>
        wait_loop_index--;
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	3b01      	subs	r3, #1
 8001632:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800163a:	7e63      	ldrb	r3, [r4, #25]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <ADC_Enable+0x68>
  return HAL_OK;
 8001640:	2000      	movs	r0, #0
 8001642:	e023      	b.n	800168c <ADC_Enable+0xb0>
      tickstart = HAL_GetTick();
 8001644:	f7ff fcfa 	bl	800103c <HAL_GetTick>
 8001648:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800164a:	e004      	b.n	8001656 <ADC_Enable+0x7a>
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800164c:	f7ff fcf6 	bl	800103c <HAL_GetTick>
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	2802      	cmp	r0, #2
 8001654:	d80d      	bhi.n	8001672 <ADC_Enable+0x96>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	07d2      	lsls	r2, r2, #31
 800165c:	d413      	bmi.n	8001686 <ADC_Enable+0xaa>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	07d2      	lsls	r2, r2, #31
 8001662:	d4f3      	bmi.n	800164c <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	490b      	ldr	r1, [pc, #44]	; (8001694 <ADC_Enable+0xb8>)
 8001668:	400a      	ands	r2, r1
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	e7ec      	b.n	800164c <ADC_Enable+0x70>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001674:	2210      	movs	r2, #16
 8001676:	4313      	orrs	r3, r2
 8001678:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800167c:	3a0f      	subs	r2, #15
 800167e:	4313      	orrs	r3, r2
 8001680:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8001682:	2001      	movs	r0, #1
 8001684:	e002      	b.n	800168c <ADC_Enable+0xb0>
  return HAL_OK;
 8001686:	2000      	movs	r0, #0
 8001688:	e000      	b.n	800168c <ADC_Enable+0xb0>
 800168a:	2000      	movs	r0, #0
}
 800168c:	b003      	add	sp, #12
 800168e:	bd30      	pop	{r4, r5, pc}
 8001690:	80000017 	.word	0x80000017
 8001694:	7fffffe8 	.word	0x7fffffe8
 8001698:	40012708 	.word	0x40012708
 800169c:	20000004 	.word	0x20000004
 80016a0:	00030d40 	.word	0x00030d40

080016a4 <HAL_ADC_Start_DMA>:
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	0004      	movs	r4, r0
 80016a8:	000d      	movs	r5, r1
 80016aa:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016ac:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	0752      	lsls	r2, r2, #29
 80016b2:	d447      	bmi.n	8001744 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 80016b4:	2254      	movs	r2, #84	; 0x54
 80016b6:	5c82      	ldrb	r2, [r0, r2]
 80016b8:	2a01      	cmp	r2, #1
 80016ba:	d045      	beq.n	8001748 <HAL_ADC_Start_DMA+0xa4>
 80016bc:	2201      	movs	r2, #1
 80016be:	2154      	movs	r1, #84	; 0x54
 80016c0:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80016c2:	68d9      	ldr	r1, [r3, #12]
 80016c4:	420a      	tst	r2, r1
 80016c6:	d10d      	bne.n	80016e4 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	07d2      	lsls	r2, r2, #31
 80016cc:	d505      	bpl.n	80016da <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	491e      	ldr	r1, [pc, #120]	; (800174c <HAL_ADC_Start_DMA+0xa8>)
 80016d2:	400a      	ands	r2, r1
 80016d4:	2102      	movs	r1, #2
 80016d6:	430a      	orrs	r2, r1
 80016d8:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80016da:	6822      	ldr	r2, [r4, #0]
 80016dc:	68d3      	ldr	r3, [r2, #12]
 80016de:	2101      	movs	r1, #1
 80016e0:	430b      	orrs	r3, r1
 80016e2:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80016e4:	0020      	movs	r0, r4
 80016e6:	f7ff ff79 	bl	80015dc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d12b      	bne.n	8001746 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 80016ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80016f0:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_ADC_Start_DMA+0xac>)
 80016f2:	401a      	ands	r2, r3
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4313      	orrs	r3, r2
 80016fa:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	2300      	movs	r3, #0
 80016fe:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001700:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <HAL_ADC_Start_DMA+0xb0>)
 8001704:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001706:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001708:	4913      	ldr	r1, [pc, #76]	; (8001758 <HAL_ADC_Start_DMA+0xb4>)
 800170a:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800170c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800170e:	4913      	ldr	r1, [pc, #76]	; (800175c <HAL_ADC_Start_DMA+0xb8>)
 8001710:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001712:	6822      	ldr	r2, [r4, #0]
 8001714:	211c      	movs	r1, #28
 8001716:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001718:	2254      	movs	r2, #84	; 0x54
 800171a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800171c:	6822      	ldr	r2, [r4, #0]
 800171e:	6853      	ldr	r3, [r2, #4]
 8001720:	390c      	subs	r1, #12
 8001722:	430b      	orrs	r3, r1
 8001724:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001726:	6821      	ldr	r1, [r4, #0]
 8001728:	3140      	adds	r1, #64	; 0x40
 800172a:	0033      	movs	r3, r6
 800172c:	002a      	movs	r2, r5
 800172e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001730:	f000 f9ec 	bl	8001b0c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001734:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001736:	6893      	ldr	r3, [r2, #8]
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <HAL_ADC_Start_DMA+0xa8>)
 800173a:	400b      	ands	r3, r1
 800173c:	2104      	movs	r1, #4
 800173e:	430b      	orrs	r3, r1
 8001740:	6093      	str	r3, [r2, #8]
}
 8001742:	e000      	b.n	8001746 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 8001744:	2002      	movs	r0, #2
}
 8001746:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8001748:	2002      	movs	r0, #2
 800174a:	e7fc      	b.n	8001746 <HAL_ADC_Start_DMA+0xa2>
 800174c:	7fffffe8 	.word	0x7fffffe8
 8001750:	fffff0fe 	.word	0xfffff0fe
 8001754:	080012dd 	.word	0x080012dd
 8001758:	080012b5 	.word	0x080012b5
 800175c:	080012c1 	.word	0x080012c1

08001760 <ADC_Disable>:
{
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	0004      	movs	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001764:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	2102      	movs	r1, #2
 800176a:	0008      	movs	r0, r1
 800176c:	4010      	ands	r0, r2
 800176e:	4211      	tst	r1, r2
 8001770:	d000      	beq.n	8001774 <ADC_Disable+0x14>
 8001772:	2001      	movs	r0, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	07d2      	lsls	r2, r2, #31
 8001778:	d531      	bpl.n	80017de <ADC_Disable+0x7e>
      && (tmp_adc_is_disable_on_going == 0UL)
 800177a:	2800      	cmp	r0, #0
 800177c:	d131      	bne.n	80017e2 <ADC_Disable+0x82>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	2205      	movs	r2, #5
 8001782:	400a      	ands	r2, r1
 8001784:	2a01      	cmp	r2, #1
 8001786:	d009      	beq.n	800179c <ADC_Disable+0x3c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001788:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800178a:	2210      	movs	r2, #16
 800178c:	4313      	orrs	r3, r2
 800178e:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001790:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001792:	3a0f      	subs	r2, #15
 8001794:	4313      	orrs	r3, r2
 8001796:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8001798:	2001      	movs	r0, #1
 800179a:	e021      	b.n	80017e0 <ADC_Disable+0x80>
  MODIFY_REG(ADCx->CR,
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	4912      	ldr	r1, [pc, #72]	; (80017e8 <ADC_Disable+0x88>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	2102      	movs	r1, #2
 80017a4:	430a      	orrs	r2, r1
 80017a6:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	2203      	movs	r2, #3
 80017ac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80017ae:	f7ff fc45 	bl	800103c <HAL_GetTick>
 80017b2:	0005      	movs	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	07db      	lsls	r3, r3, #31
 80017ba:	d50e      	bpl.n	80017da <ADC_Disable+0x7a>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017bc:	f7ff fc3e 	bl	800103c <HAL_GetTick>
 80017c0:	1b40      	subs	r0, r0, r5
 80017c2:	2802      	cmp	r0, #2
 80017c4:	d9f6      	bls.n	80017b4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017c8:	2210      	movs	r2, #16
 80017ca:	4313      	orrs	r3, r2
 80017cc:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017d0:	3a0f      	subs	r2, #15
 80017d2:	4313      	orrs	r3, r2
 80017d4:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e002      	b.n	80017e0 <ADC_Disable+0x80>
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e000      	b.n	80017e0 <ADC_Disable+0x80>
 80017de:	2000      	movs	r0, #0
}
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80017e2:	2000      	movs	r0, #0
 80017e4:	e7fc      	b.n	80017e0 <ADC_Disable+0x80>
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	7fffffe8 	.word	0x7fffffe8

080017ec <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017f6:	3354      	adds	r3, #84	; 0x54
 80017f8:	5cc3      	ldrb	r3, [r0, r3]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d100      	bne.n	8001800 <HAL_ADCEx_Calibration_Start+0x14>
 80017fe:	e086      	b.n	800190e <HAL_ADCEx_Calibration_Start+0x122>
 8001800:	2601      	movs	r6, #1
 8001802:	2354      	movs	r3, #84	; 0x54
 8001804:	54c6      	strb	r6, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001806:	f7ff ffab 	bl	8001760 <ADC_Disable>
 800180a:	0005      	movs	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800180c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	0031      	movs	r1, r6
 8001812:	4011      	ands	r1, r2
 8001814:	4216      	tst	r6, r2
 8001816:	d009      	beq.n	800182c <HAL_ADCEx_Calibration_Start+0x40>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800181a:	2210      	movs	r2, #16
 800181c:	4313      	orrs	r3, r2
 800181e:	65a3      	str	r3, [r4, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001820:	2354      	movs	r3, #84	; 0x54
 8001822:	2200      	movs	r2, #0
 8001824:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001826:	0028      	movs	r0, r5
 8001828:	b003      	add	sp, #12
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800182c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800182e:	4839      	ldr	r0, [pc, #228]	; (8001914 <HAL_ADCEx_Calibration_Start+0x128>)
 8001830:	4002      	ands	r2, r0
 8001832:	3006      	adds	r0, #6
 8001834:	30ff      	adds	r0, #255	; 0xff
 8001836:	4302      	orrs	r2, r0
 8001838:	65a2      	str	r2, [r4, #88]	; 0x58
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800183a:	68de      	ldr	r6, [r3, #12]
 800183c:	3001      	adds	r0, #1
 800183e:	4006      	ands	r6, r0
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4382      	bics	r2, r0
 8001844:	60da      	str	r2, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8001846:	0008      	movs	r0, r1
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001848:	e005      	b.n	8001856 <HAL_ADCEx_Calibration_Start+0x6a>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800184a:	22b4      	movs	r2, #180	; 0xb4
 800184c:	589a      	ldr	r2, [r3, r2]
 800184e:	237f      	movs	r3, #127	; 0x7f
 8001850:	4013      	ands	r3, r2
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001852:	18c0      	adds	r0, r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001854:	3101      	adds	r1, #1
 8001856:	2907      	cmp	r1, #7
 8001858:	d81e      	bhi.n	8001898 <HAL_ADCEx_Calibration_Start+0xac>
      LL_ADC_StartCalibration(hadc->Instance);
 800185a:	6827      	ldr	r7, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4a2e      	ldr	r2, [pc, #184]	; (8001918 <HAL_ADCEx_Calibration_Start+0x12c>)
 8001860:	401a      	ands	r2, r3
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800186a:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	2a00      	cmp	r2, #0
 8001870:	daeb      	bge.n	800184a <HAL_ADCEx_Calibration_Start+0x5e>
        wait_loop_index++;
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	3301      	adds	r3, #1
 8001876:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001878:	9a01      	ldr	r2, [sp, #4]
 800187a:	23ae      	movs	r3, #174	; 0xae
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	429a      	cmp	r2, r3
 8001880:	d3f3      	bcc.n	800186a <HAL_ADCEx_Calibration_Start+0x7e>
          ADC_STATE_CLR_SET(hadc->State,
 8001882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001884:	2212      	movs	r2, #18
 8001886:	4393      	bics	r3, r2
 8001888:	3a02      	subs	r2, #2
 800188a:	4313      	orrs	r3, r2
 800188c:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 800188e:	2354      	movs	r3, #84	; 0x54
 8001890:	2200      	movs	r2, #0
 8001892:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001894:	2501      	movs	r5, #1
 8001896:	e7c6      	b.n	8001826 <HAL_ADCEx_Calibration_Start+0x3a>
    calibration_factor_accumulated /= calibration_index;
 8001898:	f7fe fc40 	bl	800011c <__udivsi3>
    LL_ADC_Enable(hadc->Instance);
 800189c:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4f1d      	ldr	r7, [pc, #116]	; (8001918 <HAL_ADCEx_Calibration_Start+0x12c>)
 80018a2:	403a      	ands	r2, r7
 80018a4:	2101      	movs	r1, #1
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CALFACT,
 80018aa:	23b4      	movs	r3, #180	; 0xb4
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	58d2      	ldr	r2, [r2, r3]
 80018b0:	317e      	adds	r1, #126	; 0x7e
 80018b2:	438a      	bics	r2, r1
 80018b4:	4310      	orrs	r0, r2
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	50d0      	str	r0, [r2, r3]
    LL_ADC_Disable(hadc->Instance);
 80018ba:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80018bc:	6893      	ldr	r3, [r2, #8]
 80018be:	403b      	ands	r3, r7
 80018c0:	397d      	subs	r1, #125	; 0x7d
 80018c2:	430b      	orrs	r3, r1
 80018c4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80018c6:	f7ff fbb9 	bl	800103c <HAL_GetTick>
 80018ca:	0007      	movs	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018cc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	07d2      	lsls	r2, r2, #31
 80018d2:	d409      	bmi.n	80018e8 <HAL_ADCEx_Calibration_Start+0xfc>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	4316      	orrs	r6, r2
 80018d8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80018da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018dc:	2203      	movs	r2, #3
 80018de:	4393      	bics	r3, r2
 80018e0:	3a02      	subs	r2, #2
 80018e2:	4313      	orrs	r3, r2
 80018e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80018e6:	e79b      	b.n	8001820 <HAL_ADCEx_Calibration_Start+0x34>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018e8:	f7ff fba8 	bl	800103c <HAL_GetTick>
 80018ec:	1bc0      	subs	r0, r0, r7
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9ec      	bls.n	80018cc <HAL_ADCEx_Calibration_Start+0xe0>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	07db      	lsls	r3, r3, #31
 80018f8:	d5e8      	bpl.n	80018cc <HAL_ADCEx_Calibration_Start+0xe0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018fc:	2210      	movs	r2, #16
 80018fe:	4313      	orrs	r3, r2
 8001900:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001902:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001904:	3a0f      	subs	r2, #15
 8001906:	4313      	orrs	r3, r2
 8001908:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800190a:	2501      	movs	r5, #1
 800190c:	e78b      	b.n	8001826 <HAL_ADCEx_Calibration_Start+0x3a>
  __HAL_LOCK(hadc);
 800190e:	2502      	movs	r5, #2
 8001910:	e789      	b.n	8001826 <HAL_ADCEx_Calibration_Start+0x3a>
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	fffffefd 	.word	0xfffffefd
 8001918:	7fffffe8 	.word	0x7fffffe8

0800191c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800191e:	2800      	cmp	r0, #0
 8001920:	db11      	blt.n	8001946 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001922:	0883      	lsrs	r3, r0, #2
 8001924:	4e13      	ldr	r6, [pc, #76]	; (8001974 <HAL_NVIC_SetPriority+0x58>)
 8001926:	33c0      	adds	r3, #192	; 0xc0
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	599d      	ldr	r5, [r3, r6]
 800192c:	2403      	movs	r4, #3
 800192e:	4020      	ands	r0, r4
 8001930:	00c0      	lsls	r0, r0, #3
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	0014      	movs	r4, r2
 8001936:	4084      	lsls	r4, r0
 8001938:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800193a:	0189      	lsls	r1, r1, #6
 800193c:	400a      	ands	r2, r1
 800193e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001940:	432a      	orrs	r2, r5
 8001942:	519a      	str	r2, [r3, r6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001944:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001946:	230f      	movs	r3, #15
 8001948:	4003      	ands	r3, r0
 800194a:	3b08      	subs	r3, #8
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3306      	adds	r3, #6
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_NVIC_SetPriority+0x5c>)
 8001954:	4694      	mov	ip, r2
 8001956:	4463      	add	r3, ip
 8001958:	685c      	ldr	r4, [r3, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	4010      	ands	r0, r2
 800195e:	00c0      	lsls	r0, r0, #3
 8001960:	32fc      	adds	r2, #252	; 0xfc
 8001962:	0015      	movs	r5, r2
 8001964:	4085      	lsls	r5, r0
 8001966:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001968:	0189      	lsls	r1, r1, #6
 800196a:	400a      	ands	r2, r1
 800196c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800196e:	4322      	orrs	r2, r4
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e7e7      	b.n	8001944 <HAL_NVIC_SetPriority+0x28>
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	3801      	subs	r0, #1
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	045b      	lsls	r3, r3, #17
 8001982:	4298      	cmp	r0, r3
 8001984:	d20f      	bcs.n	80019a6 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_SYSTICK_Config+0x30>)
 8001988:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <HAL_SYSTICK_Config+0x34>)
 800198c:	6a03      	ldr	r3, [r0, #32]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	21c0      	movs	r1, #192	; 0xc0
 8001994:	0609      	lsls	r1, r1, #24
 8001996:	430b      	orrs	r3, r1
 8001998:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199a:	2300      	movs	r3, #0
 800199c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	3307      	adds	r3, #7
 80019a0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80019a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 80019a8:	e7fc      	b.n	80019a4 <HAL_SYSTICK_Config+0x28>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	e000e010 	.word	0xe000e010
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019b6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80019b8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80019ba:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019bc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d002      	beq.n	80019c8 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80019c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80019c6:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80019c8:	4f0b      	ldr	r7, [pc, #44]	; (80019f8 <DMA_SetConfig+0x44>)
 80019ca:	687c      	ldr	r4, [r7, #4]
 80019cc:	261c      	movs	r6, #28
 80019ce:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80019d0:	402e      	ands	r6, r5
 80019d2:	2501      	movs	r5, #1
 80019d4:	40b5      	lsls	r5, r6
 80019d6:	432c      	orrs	r4, r5
 80019d8:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019da:	6804      	ldr	r4, [r0, #0]
 80019dc:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019de:	6883      	ldr	r3, [r0, #8]
 80019e0:	2b10      	cmp	r3, #16
 80019e2:	d004      	beq.n	80019ee <DMA_SetConfig+0x3a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80019e8:	6803      	ldr	r3, [r0, #0]
 80019ea:	60da      	str	r2, [r3, #12]
  }
}
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80019ee:	6803      	ldr	r3, [r0, #0]
 80019f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80019f2:	6803      	ldr	r3, [r0, #0]
 80019f4:	60d9      	str	r1, [r3, #12]
 80019f6:	e7f9      	b.n	80019ec <DMA_SetConfig+0x38>
 80019f8:	40020000 	.word	0x40020000

080019fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019fc:	b510      	push	{r4, lr}
 80019fe:	0004      	movs	r4, r0
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a00:	20ff      	movs	r0, #255	; 0xff
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	4018      	ands	r0, r3
 8001a06:	3808      	subs	r0, #8
 8001a08:	2114      	movs	r1, #20
 8001a0a:	f7fe fb87 	bl	800011c <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a10:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001a14:	4694      	mov	ip, r2
 8001a16:	4463      	add	r3, ip
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	6463      	str	r3, [r4, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8001a1e:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001a20:	231c      	movs	r3, #28
 8001a22:	4018      	ands	r0, r3
 8001a24:	3b1b      	subs	r3, #27
 8001a26:	4083      	lsls	r3, r0
 8001a28:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001a2a:	bd10      	pop	{r4, pc}
 8001a2c:	10008200 	.word	0x10008200
 8001a30:	40020880 	.word	0x40020880

08001a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	6842      	ldr	r2, [r0, #4]
 8001a38:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001a3a:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001a3c:	189a      	adds	r2, r3, r2
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	6502      	str	r2, [r0, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001a44:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a46:	3b01      	subs	r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001a52:	4770      	bx	lr
 8001a54:	1000823f 	.word	0x1000823f
 8001a58:	40020940 	.word	0x40020940

08001a5c <HAL_DMA_Init>:
{
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001a60:	d04d      	beq.n	8001afe <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a62:	6805      	ldr	r5, [r0, #0]
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_DMA_Init+0xa8>)
 8001a66:	18e8      	adds	r0, r5, r3
 8001a68:	2114      	movs	r1, #20
 8001a6a:	f7fe fb57 	bl	800011c <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001a6e:	0080      	lsls	r0, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001a70:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a72:	2325      	movs	r3, #37	; 0x25
 8001a74:	2202      	movs	r2, #2
 8001a76:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_DMA_Init+0xac>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a80:	6821      	ldr	r1, [r4, #0]
 8001a82:	680a      	ldr	r2, [r1, #0]
 8001a84:	68a3      	ldr	r3, [r4, #8]
 8001a86:	68e0      	ldr	r0, [r4, #12]
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	6920      	ldr	r0, [r4, #16]
 8001a8c:	4303      	orrs	r3, r0
 8001a8e:	6960      	ldr	r0, [r4, #20]
 8001a90:	4303      	orrs	r3, r0
 8001a92:	69a0      	ldr	r0, [r4, #24]
 8001a94:	4303      	orrs	r3, r0
 8001a96:	69e0      	ldr	r0, [r4, #28]
 8001a98:	4303      	orrs	r3, r0
 8001a9a:	6a20      	ldr	r0, [r4, #32]
 8001a9c:	4303      	orrs	r3, r0
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aa2:	0020      	movs	r0, r4
 8001aa4:	f7ff ffaa 	bl	80019fc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	01db      	lsls	r3, r3, #7
 8001aac:	68a2      	ldr	r2, [r4, #8]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d018      	beq.n	8001ae4 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ab2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ab4:	23ff      	movs	r3, #255	; 0xff
 8001ab6:	6861      	ldr	r1, [r4, #4]
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001abc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001abe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001ac0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ac2:	6863      	ldr	r3, [r4, #4]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d90f      	bls.n	8001aea <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ace:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ad0:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8001ad6:	2225      	movs	r2, #37	; 0x25
 8001ad8:	2101      	movs	r1, #1
 8001ada:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001adc:	3a01      	subs	r2, #1
 8001ade:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001ae0:	2000      	movs	r0, #0
}
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6063      	str	r3, [r4, #4]
 8001ae8:	e7e3      	b.n	8001ab2 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001aea:	0020      	movs	r0, r4
 8001aec:	f7ff ffa2 	bl	8001a34 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001af0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001af8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	e7e9      	b.n	8001ad2 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001afe:	2001      	movs	r0, #1
 8001b00:	e7ef      	b.n	8001ae2 <HAL_DMA_Init+0x86>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	bffdfff8 	.word	0xbffdfff8
 8001b08:	ffff800f 	.word	0xffff800f

08001b0c <HAL_DMA_Start_IT>:
{
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001b10:	2024      	movs	r0, #36	; 0x24
 8001b12:	5c20      	ldrb	r0, [r4, r0]
 8001b14:	2801      	cmp	r0, #1
 8001b16:	d046      	beq.n	8001ba6 <HAL_DMA_Start_IT+0x9a>
 8001b18:	2024      	movs	r0, #36	; 0x24
 8001b1a:	2501      	movs	r5, #1
 8001b1c:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8001b1e:	3001      	adds	r0, #1
 8001b20:	5c20      	ldrb	r0, [r4, r0]
 8001b22:	2801      	cmp	r0, #1
 8001b24:	d007      	beq.n	8001b36 <HAL_DMA_Start_IT+0x2a>
    __HAL_UNLOCK(hdma);
 8001b26:	2324      	movs	r3, #36	; 0x24
 8001b28:	2200      	movs	r2, #0
 8001b2a:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001b2c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hdma);
 8001b2e:	2324      	movs	r3, #36	; 0x24
 8001b30:	2200      	movs	r2, #0
 8001b32:	54e2      	strb	r2, [r4, r3]
}
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b36:	3024      	adds	r0, #36	; 0x24
 8001b38:	3501      	adds	r5, #1
 8001b3a:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001b40:	6825      	ldr	r5, [r4, #0]
 8001b42:	6828      	ldr	r0, [r5, #0]
 8001b44:	2601      	movs	r6, #1
 8001b46:	43b0      	bics	r0, r6
 8001b48:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff ff32 	bl	80019b4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001b50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01c      	beq.n	8001b90 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b56:	6822      	ldr	r2, [r4, #0]
 8001b58:	6813      	ldr	r3, [r2, #0]
 8001b5a:	210e      	movs	r1, #14
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	03d2      	lsls	r2, r2, #15
 8001b66:	d504      	bpl.n	8001b72 <HAL_DMA_Start_IT+0x66>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001b72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_DMA_Start_IT+0x76>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8001b82:	6822      	ldr	r2, [r4, #0]
 8001b84:	6813      	ldr	r3, [r2, #0]
 8001b86:	2101      	movs	r1, #1
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e7ce      	b.n	8001b2e <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	2104      	movs	r1, #4
 8001b96:	438b      	bics	r3, r1
 8001b98:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b9a:	6822      	ldr	r2, [r4, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	3106      	adds	r1, #6
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e7dc      	b.n	8001b60 <HAL_DMA_Start_IT+0x54>
  __HAL_LOCK(hdma);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	e7c4      	b.n	8001b34 <HAL_DMA_Start_IT+0x28>
	...

08001bac <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	46d6      	mov	lr, sl
 8001bb0:	464f      	mov	r7, r9
 8001bb2:	4646      	mov	r6, r8
 8001bb4:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001bb6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bb8:	e03b      	b.n	8001c32 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001bba:	2504      	movs	r5, #4
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x14>
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	40a5      	lsls	r5, r4
 8001bc2:	002c      	movs	r4, r5
 8001bc4:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8001bc6:	4d63      	ldr	r5, [pc, #396]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001bc8:	3218      	adds	r2, #24
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	58ac      	ldr	r4, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	43d2      	mvns	r2, r2
 8001bd6:	0025      	movs	r5, r4
 8001bd8:	464e      	mov	r6, r9
 8001bda:	43b5      	bics	r5, r6
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bdc:	684e      	ldr	r6, [r1, #4]
 8001bde:	03f6      	lsls	r6, r6, #15
 8001be0:	d502      	bpl.n	8001be8 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8001be2:	464d      	mov	r5, r9
 8001be4:	432c      	orrs	r4, r5
 8001be6:	0025      	movs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8001be8:	4c5a      	ldr	r4, [pc, #360]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001bea:	2780      	movs	r7, #128	; 0x80
 8001bec:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 8001bee:	2584      	movs	r5, #132	; 0x84
 8001bf0:	5964      	ldr	r4, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8001bf2:	0025      	movs	r5, r4
 8001bf4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf6:	684e      	ldr	r6, [r1, #4]
 8001bf8:	03b6      	lsls	r6, r6, #14
 8001bfa:	d502      	bpl.n	8001c02 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 8001bfc:	464d      	mov	r5, r9
 8001bfe:	432c      	orrs	r4, r5
 8001c00:	0025      	movs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8001c02:	4c54      	ldr	r4, [pc, #336]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001c04:	2784      	movs	r7, #132	; 0x84
 8001c06:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c08:	6824      	ldr	r4, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001c0a:	0025      	movs	r5, r4
 8001c0c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0e:	684e      	ldr	r6, [r1, #4]
 8001c10:	02f6      	lsls	r6, r6, #11
 8001c12:	d502      	bpl.n	8001c1a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8001c14:	464d      	mov	r5, r9
 8001c16:	432c      	orrs	r4, r5
 8001c18:	0025      	movs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 8001c1a:	4c4e      	ldr	r4, [pc, #312]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001c1c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 8001c1e:	6864      	ldr	r4, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8001c20:	4022      	ands	r2, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c22:	684d      	ldr	r5, [r1, #4]
 8001c24:	02ad      	lsls	r5, r5, #10
 8001c26:	d501      	bpl.n	8001c2c <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8001c28:	464a      	mov	r2, r9
 8001c2a:	4322      	orrs	r2, r4
        }
        EXTI->FTSR1 = tmp;
 8001c2c:	4c49      	ldr	r4, [pc, #292]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001c2e:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8001c30:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c32:	680c      	ldr	r4, [r1, #0]
 8001c34:	0022      	movs	r2, r4
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	d100      	bne.n	8001c3c <HAL_GPIO_Init+0x90>
 8001c3a:	e086      	b.n	8001d4a <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0026      	movs	r6, r4
 8001c42:	4016      	ands	r6, r2
 8001c44:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8001c46:	4214      	tst	r4, r2
 8001c48:	d0f2      	beq.n	8001c30 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4a:	684c      	ldr	r4, [r1, #4]
 8001c4c:	2c02      	cmp	r4, #2
 8001c4e:	d001      	beq.n	8001c54 <HAL_GPIO_Init+0xa8>
 8001c50:	2c12      	cmp	r4, #18
 8001c52:	d118      	bne.n	8001c86 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8001c54:	08dd      	lsrs	r5, r3, #3
 8001c56:	3508      	adds	r5, #8
 8001c58:	00ad      	lsls	r5, r5, #2
 8001c5a:	582c      	ldr	r4, [r5, r0]
 8001c5c:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001c5e:	2707      	movs	r7, #7
 8001c60:	401f      	ands	r7, r3
 8001c62:	00bf      	lsls	r7, r7, #2
 8001c64:	240f      	movs	r4, #15
 8001c66:	46a2      	mov	sl, r4
 8001c68:	0026      	movs	r6, r4
 8001c6a:	40be      	lsls	r6, r7
 8001c6c:	46b0      	mov	r8, r6
 8001c6e:	4666      	mov	r6, ip
 8001c70:	4644      	mov	r4, r8
 8001c72:	43a6      	bics	r6, r4
 8001c74:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c76:	690c      	ldr	r4, [r1, #16]
 8001c78:	4656      	mov	r6, sl
 8001c7a:	4026      	ands	r6, r4
 8001c7c:	0034      	movs	r4, r6
 8001c7e:	40bc      	lsls	r4, r7
 8001c80:	4666      	mov	r6, ip
 8001c82:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8001c84:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8001c86:	6804      	ldr	r4, [r0, #0]
 8001c88:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c8a:	005d      	lsls	r5, r3, #1
 8001c8c:	2403      	movs	r4, #3
 8001c8e:	46a2      	mov	sl, r4
 8001c90:	0027      	movs	r7, r4
 8001c92:	40af      	lsls	r7, r5
 8001c94:	46b8      	mov	r8, r7
 8001c96:	43ff      	mvns	r7, r7
 8001c98:	4666      	mov	r6, ip
 8001c9a:	4644      	mov	r4, r8
 8001c9c:	43a6      	bics	r6, r4
 8001c9e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	684c      	ldr	r4, [r1, #4]
 8001ca2:	4656      	mov	r6, sl
 8001ca4:	4026      	ands	r6, r4
 8001ca6:	0034      	movs	r4, r6
 8001ca8:	40ac      	lsls	r4, r5
 8001caa:	4666      	mov	r6, ip
 8001cac:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 8001cae:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb0:	684c      	ldr	r4, [r1, #4]
 8001cb2:	1e66      	subs	r6, r4, #1
 8001cb4:	2e01      	cmp	r6, #1
 8001cb6:	d903      	bls.n	8001cc0 <HAL_GPIO_Init+0x114>
 8001cb8:	2c11      	cmp	r4, #17
 8001cba:	d001      	beq.n	8001cc0 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbc:	2c12      	cmp	r4, #18
 8001cbe:	d112      	bne.n	8001ce6 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8001cc0:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cc2:	403c      	ands	r4, r7
 8001cc4:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001cc6:	68cc      	ldr	r4, [r1, #12]
 8001cc8:	40ac      	lsls	r4, r5
 8001cca:	4666      	mov	r6, ip
 8001ccc:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8001cce:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001cd0:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cd2:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd4:	684a      	ldr	r2, [r1, #4]
 8001cd6:	0912      	lsrs	r2, r2, #4
 8001cd8:	4694      	mov	ip, r2
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4666      	mov	r6, ip
 8001cde:	4032      	ands	r2, r6
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8001ce4:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ce6:	684a      	ldr	r2, [r1, #4]
 8001ce8:	2a03      	cmp	r2, #3
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8001cec:	68c2      	ldr	r2, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cee:	403a      	ands	r2, r7
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001cf0:	688f      	ldr	r7, [r1, #8]
 8001cf2:	40af      	lsls	r7, r5
 8001cf4:	4317      	orrs	r7, r2
        GPIOx->PUPDR = tmp;
 8001cf6:	60c7      	str	r7, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf8:	684a      	ldr	r2, [r1, #4]
 8001cfa:	00d2      	lsls	r2, r2, #3
 8001cfc:	d598      	bpl.n	8001c30 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8001cfe:	089a      	lsrs	r2, r3, #2
 8001d00:	0014      	movs	r4, r2
 8001d02:	3418      	adds	r4, #24
 8001d04:	00a4      	lsls	r4, r4, #2
 8001d06:	4d13      	ldr	r5, [pc, #76]	; (8001d54 <HAL_GPIO_Init+0x1a8>)
 8001d08:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001d0a:	2503      	movs	r5, #3
 8001d0c:	401d      	ands	r5, r3
 8001d0e:	00ec      	lsls	r4, r5, #3
 8001d10:	250f      	movs	r5, #15
 8001d12:	40a5      	lsls	r5, r4
 8001d14:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001d16:	25a0      	movs	r5, #160	; 0xa0
 8001d18:	05ed      	lsls	r5, r5, #23
 8001d1a:	42a8      	cmp	r0, r5
 8001d1c:	d100      	bne.n	8001d20 <HAL_GPIO_Init+0x174>
 8001d1e:	e74e      	b.n	8001bbe <HAL_GPIO_Init+0x12>
 8001d20:	4d0d      	ldr	r5, [pc, #52]	; (8001d58 <HAL_GPIO_Init+0x1ac>)
 8001d22:	42a8      	cmp	r0, r5
 8001d24:	d00b      	beq.n	8001d3e <HAL_GPIO_Init+0x192>
 8001d26:	4d0d      	ldr	r5, [pc, #52]	; (8001d5c <HAL_GPIO_Init+0x1b0>)
 8001d28:	42a8      	cmp	r0, r5
 8001d2a:	d00a      	beq.n	8001d42 <HAL_GPIO_Init+0x196>
 8001d2c:	4d0c      	ldr	r5, [pc, #48]	; (8001d60 <HAL_GPIO_Init+0x1b4>)
 8001d2e:	42a8      	cmp	r0, r5
 8001d30:	d009      	beq.n	8001d46 <HAL_GPIO_Init+0x19a>
 8001d32:	4d0c      	ldr	r5, [pc, #48]	; (8001d64 <HAL_GPIO_Init+0x1b8>)
 8001d34:	42a8      	cmp	r0, r5
 8001d36:	d100      	bne.n	8001d3a <HAL_GPIO_Init+0x18e>
 8001d38:	e73f      	b.n	8001bba <HAL_GPIO_Init+0xe>
 8001d3a:	2505      	movs	r5, #5
 8001d3c:	e740      	b.n	8001bc0 <HAL_GPIO_Init+0x14>
 8001d3e:	2501      	movs	r5, #1
 8001d40:	e73e      	b.n	8001bc0 <HAL_GPIO_Init+0x14>
 8001d42:	2502      	movs	r5, #2
 8001d44:	e73c      	b.n	8001bc0 <HAL_GPIO_Init+0x14>
 8001d46:	2503      	movs	r5, #3
 8001d48:	e73a      	b.n	8001bc0 <HAL_GPIO_Init+0x14>
  }
}
 8001d4a:	bce0      	pop	{r5, r6, r7}
 8001d4c:	46ba      	mov	sl, r7
 8001d4e:	46b1      	mov	r9, r6
 8001d50:	46a8      	mov	r8, r5
 8001d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d54:	40021800 	.word	0x40021800
 8001d58:	50000400 	.word	0x50000400
 8001d5c:	50000800 	.word	0x50000800
 8001d60:	50000c00 	.word	0x50000c00
 8001d64:	50001400 	.word	0x50001400

08001d68 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x54>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2238      	movs	r2, #56	; 0x38
 8001d6e:	421a      	tst	r2, r3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x54>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	0ad2      	lsrs	r2, r2, #11
 8001d78:	2307      	movs	r3, #7
 8001d7a:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d7c:	4810      	ldr	r0, [pc, #64]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001d7e:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001d80:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x54>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	2338      	movs	r3, #56	; 0x38
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d010      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x48>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x54>)
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	2338      	movs	r3, #56	; 0x38
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x4c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x54>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	2338      	movs	r3, #56	; 0x38
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b18      	cmp	r3, #24
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x42>
    sysclockfreq = 0U;
 8001da6:	2000      	movs	r0, #0
  return sysclockfreq;
 8001da8:	e7ea      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSI_VALUE;
 8001daa:	20fa      	movs	r0, #250	; 0xfa
 8001dac:	01c0      	lsls	r0, r0, #7
 8001dae:	e7e7      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = HSE_VALUE;
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001db2:	e7e5      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8001db4:	2080      	movs	r0, #128	; 0x80
 8001db6:	0200      	lsls	r0, r0, #8
 8001db8:	e7e2      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0x18>
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	02dc6c00 	.word	0x02dc6c00
 8001dc4:	007a1200 	.word	0x007a1200

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
}
 8001dcc:	4770      	bx	lr
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001dd6:	f7ff fff7 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	0b12      	lsrs	r2, r2, #12
 8001de0:	2307      	movs	r3, #7
 8001de2:	4013      	ands	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de8:	589a      	ldr	r2, [r3, r2]
 8001dea:	231f      	movs	r3, #31
 8001dec:	4013      	ands	r3, r2
 8001dee:	40d8      	lsrs	r0, r3
}
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	40021000 	.word	0x40021000
 8001df8:	08003b04 	.word	0x08003b04

08001dfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001dfc:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfe:	6a03      	ldr	r3, [r0, #32]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4393      	bics	r3, r2
 8001e04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e08:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e0c:	4d15      	ldr	r5, [pc, #84]	; (8001e64 <TIM_OC1_SetConfig+0x68>)
 8001e0e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e10:	680d      	ldr	r5, [r1, #0]
 8001e12:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e14:	2502      	movs	r5, #2
 8001e16:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e18:	688d      	ldr	r5, [r1, #8]
 8001e1a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e1c:	4d12      	ldr	r5, [pc, #72]	; (8001e68 <TIM_OC1_SetConfig+0x6c>)
 8001e1e:	42a8      	cmp	r0, r5
 8001e20:	d005      	beq.n	8001e2e <TIM_OC1_SetConfig+0x32>
 8001e22:	4d12      	ldr	r5, [pc, #72]	; (8001e6c <TIM_OC1_SetConfig+0x70>)
 8001e24:	42a8      	cmp	r0, r5
 8001e26:	d002      	beq.n	8001e2e <TIM_OC1_SetConfig+0x32>
 8001e28:	4d11      	ldr	r5, [pc, #68]	; (8001e70 <TIM_OC1_SetConfig+0x74>)
 8001e2a:	42a8      	cmp	r0, r5
 8001e2c:	d105      	bne.n	8001e3a <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e2e:	2508      	movs	r5, #8
 8001e30:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e32:	68cd      	ldr	r5, [r1, #12]
 8001e34:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e36:	2504      	movs	r5, #4
 8001e38:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e3a:	4d0b      	ldr	r5, [pc, #44]	; (8001e68 <TIM_OC1_SetConfig+0x6c>)
 8001e3c:	42a8      	cmp	r0, r5
 8001e3e:	d005      	beq.n	8001e4c <TIM_OC1_SetConfig+0x50>
 8001e40:	4d0a      	ldr	r5, [pc, #40]	; (8001e6c <TIM_OC1_SetConfig+0x70>)
 8001e42:	42a8      	cmp	r0, r5
 8001e44:	d002      	beq.n	8001e4c <TIM_OC1_SetConfig+0x50>
 8001e46:	4d0a      	ldr	r5, [pc, #40]	; (8001e70 <TIM_OC1_SetConfig+0x74>)
 8001e48:	42a8      	cmp	r0, r5
 8001e4a:	d105      	bne.n	8001e58 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e4c:	4d09      	ldr	r5, [pc, #36]	; (8001e74 <TIM_OC1_SetConfig+0x78>)
 8001e4e:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e50:	694d      	ldr	r5, [r1, #20]
 8001e52:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e54:	698d      	ldr	r5, [r1, #24]
 8001e56:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e58:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e5a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e5c:	684a      	ldr	r2, [r1, #4]
 8001e5e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e60:	6203      	str	r3, [r0, #32]
}
 8001e62:	bd30      	pop	{r4, r5, pc}
 8001e64:	fffeff8c 	.word	0xfffeff8c
 8001e68:	40012c00 	.word	0x40012c00
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	40014800 	.word	0x40014800
 8001e74:	fffffcff 	.word	0xfffffcff

08001e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7a:	6a03      	ldr	r3, [r0, #32]
 8001e7c:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <TIM_OC3_SetConfig+0x68>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e86:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e88:	4d16      	ldr	r5, [pc, #88]	; (8001ee4 <TIM_OC3_SetConfig+0x6c>)
 8001e8a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e8c:	680e      	ldr	r6, [r1, #0]
 8001e8e:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <TIM_OC3_SetConfig+0x70>)
 8001e92:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e94:	688a      	ldr	r2, [r1, #8]
 8001e96:	0212      	lsls	r2, r2, #8
 8001e98:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <TIM_OC3_SetConfig+0x74>)
 8001e9c:	4290      	cmp	r0, r2
 8001e9e:	d016      	beq.n	8001ece <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <TIM_OC3_SetConfig+0x74>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d005      	beq.n	8001eb2 <TIM_OC3_SetConfig+0x3a>
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <TIM_OC3_SetConfig+0x78>)
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d002      	beq.n	8001eb2 <TIM_OC3_SetConfig+0x3a>
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <TIM_OC3_SetConfig+0x7c>)
 8001eae:	4290      	cmp	r0, r2
 8001eb0:	d107      	bne.n	8001ec2 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <TIM_OC3_SetConfig+0x80>)
 8001eb4:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eb6:	694c      	ldr	r4, [r1, #20]
 8001eb8:	0124      	lsls	r4, r4, #4
 8001eba:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ebc:	698a      	ldr	r2, [r1, #24]
 8001ebe:	0115      	lsls	r5, r2, #4
 8001ec0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ec4:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001ec6:	684a      	ldr	r2, [r1, #4]
 8001ec8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eca:	6203      	str	r3, [r0, #32]
}
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <TIM_OC3_SetConfig+0x84>)
 8001ed0:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ed2:	68cb      	ldr	r3, [r1, #12]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <TIM_OC3_SetConfig+0x88>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	e7e0      	b.n	8001ea0 <TIM_OC3_SetConfig+0x28>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	fffffeff 	.word	0xfffffeff
 8001ee4:	fffeff8c 	.word	0xfffeff8c
 8001ee8:	fffffdff 	.word	0xfffffdff
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40014400 	.word	0x40014400
 8001ef4:	40014800 	.word	0x40014800
 8001ef8:	ffffcfff 	.word	0xffffcfff
 8001efc:	fffff7ff 	.word	0xfffff7ff
 8001f00:	fffffbff 	.word	0xfffffbff

08001f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f04:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f06:	6a03      	ldr	r3, [r0, #32]
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <TIM_OC4_SetConfig+0x4c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f10:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f12:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f14:	4c0f      	ldr	r4, [pc, #60]	; (8001f54 <TIM_OC4_SetConfig+0x50>)
 8001f16:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f18:	680c      	ldr	r4, [r1, #0]
 8001f1a:	0224      	lsls	r4, r4, #8
 8001f1c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f1e:	4c0e      	ldr	r4, [pc, #56]	; (8001f58 <TIM_OC4_SetConfig+0x54>)
 8001f20:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f22:	688b      	ldr	r3, [r1, #8]
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f28:	4c0c      	ldr	r4, [pc, #48]	; (8001f5c <TIM_OC4_SetConfig+0x58>)
 8001f2a:	42a0      	cmp	r0, r4
 8001f2c:	d005      	beq.n	8001f3a <TIM_OC4_SetConfig+0x36>
 8001f2e:	4c0c      	ldr	r4, [pc, #48]	; (8001f60 <TIM_OC4_SetConfig+0x5c>)
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d002      	beq.n	8001f3a <TIM_OC4_SetConfig+0x36>
 8001f34:	4c0b      	ldr	r4, [pc, #44]	; (8001f64 <TIM_OC4_SetConfig+0x60>)
 8001f36:	42a0      	cmp	r0, r4
 8001f38:	d104      	bne.n	8001f44 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f3a:	4c0b      	ldr	r4, [pc, #44]	; (8001f68 <TIM_OC4_SetConfig+0x64>)
 8001f3c:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f3e:	694c      	ldr	r4, [r1, #20]
 8001f40:	01a4      	lsls	r4, r4, #6
 8001f42:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f44:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f46:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f48:	684a      	ldr	r2, [r1, #4]
 8001f4a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4c:	6203      	str	r3, [r0, #32]
}
 8001f4e:	bd30      	pop	{r4, r5, pc}
 8001f50:	ffffefff 	.word	0xffffefff
 8001f54:	feff8cff 	.word	0xfeff8cff
 8001f58:	ffffdfff 	.word	0xffffdfff
 8001f5c:	40012c00 	.word	0x40012c00
 8001f60:	40014400 	.word	0x40014400
 8001f64:	40014800 	.word	0x40014800
 8001f68:	ffffbfff 	.word	0xffffbfff

08001f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001f6c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001f6e:	6a03      	ldr	r3, [r0, #32]
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <TIM_OC5_SetConfig+0x4c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f78:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f7a:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001f7c:	4d0f      	ldr	r5, [pc, #60]	; (8001fbc <TIM_OC5_SetConfig+0x50>)
 8001f7e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f80:	680d      	ldr	r5, [r1, #0]
 8001f82:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001f84:	4d0e      	ldr	r5, [pc, #56]	; (8001fc0 <TIM_OC5_SetConfig+0x54>)
 8001f86:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001f88:	688b      	ldr	r3, [r1, #8]
 8001f8a:	041b      	lsls	r3, r3, #16
 8001f8c:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f8e:	4d0d      	ldr	r5, [pc, #52]	; (8001fc4 <TIM_OC5_SetConfig+0x58>)
 8001f90:	42a8      	cmp	r0, r5
 8001f92:	d005      	beq.n	8001fa0 <TIM_OC5_SetConfig+0x34>
 8001f94:	4d0c      	ldr	r5, [pc, #48]	; (8001fc8 <TIM_OC5_SetConfig+0x5c>)
 8001f96:	42a8      	cmp	r0, r5
 8001f98:	d002      	beq.n	8001fa0 <TIM_OC5_SetConfig+0x34>
 8001f9a:	4d0c      	ldr	r5, [pc, #48]	; (8001fcc <TIM_OC5_SetConfig+0x60>)
 8001f9c:	42a8      	cmp	r0, r5
 8001f9e:	d104      	bne.n	8001faa <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001fa0:	4d05      	ldr	r5, [pc, #20]	; (8001fb8 <TIM_OC5_SetConfig+0x4c>)
 8001fa2:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001fa4:	694d      	ldr	r5, [r1, #20]
 8001fa6:	022d      	lsls	r5, r5, #8
 8001fa8:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001faa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001fac:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001fae:	684a      	ldr	r2, [r1, #4]
 8001fb0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fb2:	6203      	str	r3, [r0, #32]
}
 8001fb4:	bd30      	pop	{r4, r5, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	fffeffff 	.word	0xfffeffff
 8001fbc:	fffeff8f 	.word	0xfffeff8f
 8001fc0:	fffdffff 	.word	0xfffdffff
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40014400 	.word	0x40014400
 8001fcc:	40014800 	.word	0x40014800

08001fd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001fd0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001fd2:	6a03      	ldr	r3, [r0, #32]
 8001fd4:	4a11      	ldr	r2, [pc, #68]	; (800201c <TIM_OC6_SetConfig+0x4c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fdc:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001fde:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001fe0:	4c0f      	ldr	r4, [pc, #60]	; (8002020 <TIM_OC6_SetConfig+0x50>)
 8001fe2:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fe4:	680c      	ldr	r4, [r1, #0]
 8001fe6:	0224      	lsls	r4, r4, #8
 8001fe8:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001fea:	4c0e      	ldr	r4, [pc, #56]	; (8002024 <TIM_OC6_SetConfig+0x54>)
 8001fec:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001fee:	688b      	ldr	r3, [r1, #8]
 8001ff0:	051b      	lsls	r3, r3, #20
 8001ff2:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff4:	4c0c      	ldr	r4, [pc, #48]	; (8002028 <TIM_OC6_SetConfig+0x58>)
 8001ff6:	42a0      	cmp	r0, r4
 8001ff8:	d005      	beq.n	8002006 <TIM_OC6_SetConfig+0x36>
 8001ffa:	4c0c      	ldr	r4, [pc, #48]	; (800202c <TIM_OC6_SetConfig+0x5c>)
 8001ffc:	42a0      	cmp	r0, r4
 8001ffe:	d002      	beq.n	8002006 <TIM_OC6_SetConfig+0x36>
 8002000:	4c0b      	ldr	r4, [pc, #44]	; (8002030 <TIM_OC6_SetConfig+0x60>)
 8002002:	42a0      	cmp	r0, r4
 8002004:	d104      	bne.n	8002010 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002006:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <TIM_OC6_SetConfig+0x64>)
 8002008:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800200a:	694c      	ldr	r4, [r1, #20]
 800200c:	02a4      	lsls	r4, r4, #10
 800200e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002010:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002012:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002014:	684a      	ldr	r2, [r1, #4]
 8002016:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	6203      	str	r3, [r0, #32]
}
 800201a:	bd30      	pop	{r4, r5, pc}
 800201c:	ffefffff 	.word	0xffefffff
 8002020:	feff8fff 	.word	0xfeff8fff
 8002024:	ffdfffff 	.word	0xffdfffff
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	fffbffff 	.word	0xfffbffff

08002038 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002038:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800203a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203c:	6a04      	ldr	r4, [r0, #32]
 800203e:	2501      	movs	r5, #1
 8002040:	43ac      	bics	r4, r5
 8002042:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002044:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002046:	35ef      	adds	r5, #239	; 0xef
 8002048:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800204e:	240a      	movs	r4, #10
 8002050:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002052:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002054:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002056:	6203      	str	r3, [r0, #32]
}
 8002058:	bd30      	pop	{r4, r5, pc}
	...

0800205c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800205c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800205e:	6a03      	ldr	r3, [r0, #32]
 8002060:	2410      	movs	r4, #16
 8002062:	43a3      	bics	r3, r4
 8002064:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002066:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002068:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800206a:	4d05      	ldr	r5, [pc, #20]	; (8002080 <TIM_TI2_ConfigInputStage+0x24>)
 800206c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800206e:	0312      	lsls	r2, r2, #12
 8002070:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002072:	24a0      	movs	r4, #160	; 0xa0
 8002074:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002076:	0109      	lsls	r1, r1, #4
 8002078:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800207a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800207c:	6201      	str	r1, [r0, #32]
}
 800207e:	bd30      	pop	{r4, r5, pc}
 8002080:	ffff0fff 	.word	0xffff0fff

08002084 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002084:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002086:	4a03      	ldr	r2, [pc, #12]	; (8002094 <TIM_ITRx_SetConfig+0x10>)
 8002088:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800208a:	430b      	orrs	r3, r1
 800208c:	2107      	movs	r1, #7
 800208e:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002090:	6083      	str	r3, [r0, #8]
}
 8002092:	4770      	bx	lr
 8002094:	ffcfff8f 	.word	0xffcfff8f

08002098 <HAL_TIM_PWM_MspInit>:
}
 8002098:	4770      	bx	lr
	...

0800209c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800209c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209e:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <TIM_Base_SetConfig+0x6c>)
 80020a0:	4290      	cmp	r0, r2
 80020a2:	d002      	beq.n	80020aa <TIM_Base_SetConfig+0xe>
 80020a4:	4a19      	ldr	r2, [pc, #100]	; (800210c <TIM_Base_SetConfig+0x70>)
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d103      	bne.n	80020b2 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020aa:	2270      	movs	r2, #112	; 0x70
 80020ac:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80020ae:	684a      	ldr	r2, [r1, #4]
 80020b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	4a15      	ldr	r2, [pc, #84]	; (8002108 <TIM_Base_SetConfig+0x6c>)
 80020b4:	4290      	cmp	r0, r2
 80020b6:	d00b      	beq.n	80020d0 <TIM_Base_SetConfig+0x34>
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <TIM_Base_SetConfig+0x70>)
 80020ba:	4290      	cmp	r0, r2
 80020bc:	d008      	beq.n	80020d0 <TIM_Base_SetConfig+0x34>
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <TIM_Base_SetConfig+0x74>)
 80020c0:	4290      	cmp	r0, r2
 80020c2:	d005      	beq.n	80020d0 <TIM_Base_SetConfig+0x34>
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <TIM_Base_SetConfig+0x78>)
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d002      	beq.n	80020d0 <TIM_Base_SetConfig+0x34>
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <TIM_Base_SetConfig+0x7c>)
 80020cc:	4290      	cmp	r0, r2
 80020ce:	d103      	bne.n	80020d8 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <TIM_Base_SetConfig+0x80>)
 80020d2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d4:	68ca      	ldr	r2, [r1, #12]
 80020d6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4393      	bics	r3, r2
 80020dc:	694a      	ldr	r2, [r1, #20]
 80020de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e2:	688b      	ldr	r3, [r1, #8]
 80020e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020e6:	680b      	ldr	r3, [r1, #0]
 80020e8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <TIM_Base_SetConfig+0x6c>)
 80020ec:	4298      	cmp	r0, r3
 80020ee:	d005      	beq.n	80020fc <TIM_Base_SetConfig+0x60>
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <TIM_Base_SetConfig+0x78>)
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d002      	beq.n	80020fc <TIM_Base_SetConfig+0x60>
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <TIM_Base_SetConfig+0x7c>)
 80020f8:	4298      	cmp	r0, r3
 80020fa:	d101      	bne.n	8002100 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 80020fc:	690b      	ldr	r3, [r1, #16]
 80020fe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002100:	2301      	movs	r3, #1
 8002102:	6143      	str	r3, [r0, #20]
}
 8002104:	4770      	bx	lr
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40000400 	.word	0x40000400
 8002110:	40002000 	.word	0x40002000
 8002114:	40014400 	.word	0x40014400
 8002118:	40014800 	.word	0x40014800
 800211c:	fffffcff 	.word	0xfffffcff

08002120 <HAL_TIM_Base_Init>:
{
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002124:	d02a      	beq.n	800217c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002126:	233d      	movs	r3, #61	; 0x3d
 8002128:	5cc3      	ldrb	r3, [r0, r3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d020      	beq.n	8002170 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800212e:	253d      	movs	r5, #61	; 0x3d
 8002130:	2302      	movs	r3, #2
 8002132:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	0021      	movs	r1, r4
 8002136:	c901      	ldmia	r1!, {r0}
 8002138:	f7ff ffb0 	bl	800209c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800213c:	2301      	movs	r3, #1
 800213e:	2248      	movs	r2, #72	; 0x48
 8002140:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002142:	3a0a      	subs	r2, #10
 8002144:	54a3      	strb	r3, [r4, r2]
 8002146:	3201      	adds	r2, #1
 8002148:	54a3      	strb	r3, [r4, r2]
 800214a:	3201      	adds	r2, #1
 800214c:	54a3      	strb	r3, [r4, r2]
 800214e:	3201      	adds	r2, #1
 8002150:	54a3      	strb	r3, [r4, r2]
 8002152:	3201      	adds	r2, #1
 8002154:	54a3      	strb	r3, [r4, r2]
 8002156:	3201      	adds	r2, #1
 8002158:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215a:	3201      	adds	r2, #1
 800215c:	54a3      	strb	r3, [r4, r2]
 800215e:	3201      	adds	r2, #1
 8002160:	54a3      	strb	r3, [r4, r2]
 8002162:	3201      	adds	r2, #1
 8002164:	54a3      	strb	r3, [r4, r2]
 8002166:	3201      	adds	r2, #1
 8002168:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800216a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800216c:	2000      	movs	r0, #0
}
 800216e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002170:	333c      	adds	r3, #60	; 0x3c
 8002172:	2200      	movs	r2, #0
 8002174:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002176:	f7fe fe29 	bl	8000dcc <HAL_TIM_Base_MspInit>
 800217a:	e7d8      	b.n	800212e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800217c:	2001      	movs	r0, #1
 800217e:	e7f6      	b.n	800216e <HAL_TIM_Base_Init+0x4e>

08002180 <HAL_TIM_PWM_Init>:
{
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002184:	d02a      	beq.n	80021dc <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002186:	233d      	movs	r3, #61	; 0x3d
 8002188:	5cc3      	ldrb	r3, [r0, r3]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d020      	beq.n	80021d0 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800218e:	253d      	movs	r5, #61	; 0x3d
 8002190:	2302      	movs	r3, #2
 8002192:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	0021      	movs	r1, r4
 8002196:	c901      	ldmia	r1!, {r0}
 8002198:	f7ff ff80 	bl	800209c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800219c:	2301      	movs	r3, #1
 800219e:	2248      	movs	r2, #72	; 0x48
 80021a0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a2:	3a0a      	subs	r2, #10
 80021a4:	54a3      	strb	r3, [r4, r2]
 80021a6:	3201      	adds	r2, #1
 80021a8:	54a3      	strb	r3, [r4, r2]
 80021aa:	3201      	adds	r2, #1
 80021ac:	54a3      	strb	r3, [r4, r2]
 80021ae:	3201      	adds	r2, #1
 80021b0:	54a3      	strb	r3, [r4, r2]
 80021b2:	3201      	adds	r2, #1
 80021b4:	54a3      	strb	r3, [r4, r2]
 80021b6:	3201      	adds	r2, #1
 80021b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ba:	3201      	adds	r2, #1
 80021bc:	54a3      	strb	r3, [r4, r2]
 80021be:	3201      	adds	r2, #1
 80021c0:	54a3      	strb	r3, [r4, r2]
 80021c2:	3201      	adds	r2, #1
 80021c4:	54a3      	strb	r3, [r4, r2]
 80021c6:	3201      	adds	r2, #1
 80021c8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80021cc:	2000      	movs	r0, #0
}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80021d0:	333c      	adds	r3, #60	; 0x3c
 80021d2:	2200      	movs	r2, #0
 80021d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80021d6:	f7ff ff5f 	bl	8002098 <HAL_TIM_PWM_MspInit>
 80021da:	e7d8      	b.n	800218e <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
 80021de:	e7f6      	b.n	80021ce <HAL_TIM_PWM_Init+0x4e>

080021e0 <TIM_OC2_SetConfig>:
{
 80021e0:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e2:	6a03      	ldr	r3, [r0, #32]
 80021e4:	2210      	movs	r2, #16
 80021e6:	4393      	bics	r3, r2
 80021e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80021ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80021ec:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80021ee:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <TIM_OC2_SetConfig+0x6c>)
 80021f2:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021f4:	680a      	ldr	r2, [r1, #0]
 80021f6:	0212      	lsls	r2, r2, #8
 80021f8:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80021fa:	2220      	movs	r2, #32
 80021fc:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021fe:	688a      	ldr	r2, [r1, #8]
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <TIM_OC2_SetConfig+0x70>)
 8002206:	4290      	cmp	r0, r2
 8002208:	d016      	beq.n	8002238 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220a:	4a11      	ldr	r2, [pc, #68]	; (8002250 <TIM_OC2_SetConfig+0x70>)
 800220c:	4290      	cmp	r0, r2
 800220e:	d005      	beq.n	800221c <TIM_OC2_SetConfig+0x3c>
 8002210:	4a10      	ldr	r2, [pc, #64]	; (8002254 <TIM_OC2_SetConfig+0x74>)
 8002212:	4290      	cmp	r0, r2
 8002214:	d002      	beq.n	800221c <TIM_OC2_SetConfig+0x3c>
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <TIM_OC2_SetConfig+0x78>)
 8002218:	4290      	cmp	r0, r2
 800221a:	d107      	bne.n	800222c <TIM_OC2_SetConfig+0x4c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800221c:	4a0f      	ldr	r2, [pc, #60]	; (800225c <TIM_OC2_SetConfig+0x7c>)
 800221e:	402a      	ands	r2, r5
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002220:	694d      	ldr	r5, [r1, #20]
 8002222:	00ad      	lsls	r5, r5, #2
 8002224:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002226:	698a      	ldr	r2, [r1, #24]
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 800222c:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800222e:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002230:	684a      	ldr	r2, [r1, #4]
 8002232:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002234:	6203      	str	r3, [r0, #32]
}
 8002236:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8002238:	2280      	movs	r2, #128	; 0x80
 800223a:	4393      	bics	r3, r2
 800223c:	001a      	movs	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800223e:	68cb      	ldr	r3, [r1, #12]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	4393      	bics	r3, r2
 8002248:	e7df      	b.n	800220a <TIM_OC2_SetConfig+0x2a>
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	feff8cff 	.word	0xfeff8cff
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800
 800225c:	fffff3ff 	.word	0xfffff3ff

08002260 <HAL_TIM_PWM_ConfigChannel>:
{
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	0004      	movs	r4, r0
 8002264:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002266:	233c      	movs	r3, #60	; 0x3c
 8002268:	5cc3      	ldrb	r3, [r0, r3]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d100      	bne.n	8002270 <HAL_TIM_PWM_ConfigChannel+0x10>
 800226e:	e092      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x136>
 8002270:	233c      	movs	r3, #60	; 0x3c
 8002272:	2101      	movs	r1, #1
 8002274:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002276:	2a14      	cmp	r2, #20
 8002278:	d900      	bls.n	800227c <HAL_TIM_PWM_ConfigChannel+0x1c>
 800227a:	e087      	b.n	800238c <HAL_TIM_PWM_ConfigChannel+0x12c>
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8002280:	589b      	ldr	r3, [r3, r2]
 8002282:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002284:	0029      	movs	r1, r5
 8002286:	6800      	ldr	r0, [r0, #0]
 8002288:	f7ff fdb8 	bl	8001dfc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	6993      	ldr	r3, [r2, #24]
 8002290:	2108      	movs	r1, #8
 8002292:	430b      	orrs	r3, r1
 8002294:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	6993      	ldr	r3, [r2, #24]
 800229a:	3904      	subs	r1, #4
 800229c:	438b      	bics	r3, r1
 800229e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	6993      	ldr	r3, [r2, #24]
 80022a4:	6929      	ldr	r1, [r5, #16]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2000      	movs	r0, #0
      break;
 80022ac:	e06f      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ae:	0029      	movs	r1, r5
 80022b0:	6800      	ldr	r0, [r0, #0]
 80022b2:	f7ff ff95 	bl	80021e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6991      	ldr	r1, [r2, #24]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	430b      	orrs	r3, r1
 80022c0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	6993      	ldr	r3, [r2, #24]
 80022c6:	4936      	ldr	r1, [pc, #216]	; (80023a0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 80022c8:	400b      	ands	r3, r1
 80022ca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022cc:	6821      	ldr	r1, [r4, #0]
 80022ce:	698b      	ldr	r3, [r1, #24]
 80022d0:	692a      	ldr	r2, [r5, #16]
 80022d2:	0212      	lsls	r2, r2, #8
 80022d4:	4313      	orrs	r3, r2
 80022d6:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2000      	movs	r0, #0
      break;
 80022da:	e058      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022dc:	0029      	movs	r1, r5
 80022de:	6800      	ldr	r0, [r0, #0]
 80022e0:	f7ff fdca 	bl	8001e78 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	69d3      	ldr	r3, [r2, #28]
 80022e8:	2108      	movs	r1, #8
 80022ea:	430b      	orrs	r3, r1
 80022ec:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	69d3      	ldr	r3, [r2, #28]
 80022f2:	3904      	subs	r1, #4
 80022f4:	438b      	bics	r3, r1
 80022f6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	69d3      	ldr	r3, [r2, #28]
 80022fc:	6929      	ldr	r1, [r5, #16]
 80022fe:	430b      	orrs	r3, r1
 8002300:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2000      	movs	r0, #0
      break;
 8002304:	e043      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002306:	0029      	movs	r1, r5
 8002308:	6800      	ldr	r0, [r0, #0]
 800230a:	f7ff fdfb 	bl	8001f04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	69d1      	ldr	r1, [r2, #28]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	430b      	orrs	r3, r1
 8002318:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	69d3      	ldr	r3, [r2, #28]
 800231e:	4920      	ldr	r1, [pc, #128]	; (80023a0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002320:	400b      	ands	r3, r1
 8002322:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002324:	6821      	ldr	r1, [r4, #0]
 8002326:	69cb      	ldr	r3, [r1, #28]
 8002328:	692a      	ldr	r2, [r5, #16]
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	4313      	orrs	r3, r2
 800232e:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2000      	movs	r0, #0
      break;
 8002332:	e02c      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002334:	0029      	movs	r1, r5
 8002336:	6800      	ldr	r0, [r0, #0]
 8002338:	f7ff fe18 	bl	8001f6c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002340:	2108      	movs	r1, #8
 8002342:	430b      	orrs	r3, r1
 8002344:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002346:	6822      	ldr	r2, [r4, #0]
 8002348:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800234a:	3904      	subs	r1, #4
 800234c:	438b      	bics	r3, r1
 800234e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002354:	6929      	ldr	r1, [r5, #16]
 8002356:	430b      	orrs	r3, r1
 8002358:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2000      	movs	r0, #0
      break;
 800235c:	e017      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800235e:	0029      	movs	r1, r5
 8002360:	6800      	ldr	r0, [r0, #0]
 8002362:	f7ff fe35 	bl	8001fd0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	430b      	orrs	r3, r1
 8002370:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002376:	490a      	ldr	r1, [pc, #40]	; (80023a0 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8002378:	400b      	ands	r3, r1
 800237a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002380:	692a      	ldr	r2, [r5, #16]
 8002382:	0212      	lsls	r2, r2, #8
 8002384:	4313      	orrs	r3, r2
 8002386:	654b      	str	r3, [r1, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2000      	movs	r0, #0
      break;
 800238a:	e000      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800238c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800238e:	233c      	movs	r3, #60	; 0x3c
 8002390:	2200      	movs	r2, #0
 8002392:	54e2      	strb	r2, [r4, r3]
}
 8002394:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8002396:	2002      	movs	r0, #2
 8002398:	e7fc      	b.n	8002394 <HAL_TIM_PWM_ConfigChannel+0x134>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	08003b24 	.word	0x08003b24
 80023a0:	fffffbff 	.word	0xfffffbff

080023a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023a6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a8:	4d03      	ldr	r5, [pc, #12]	; (80023b8 <TIM_ETR_SetConfig+0x14>)
 80023aa:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	4313      	orrs	r3, r2
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023b4:	6083      	str	r3, [r0, #8]
}
 80023b6:	bd30      	pop	{r4, r5, pc}
 80023b8:	ffff00ff 	.word	0xffff00ff

080023bc <HAL_TIM_ConfigClockSource>:
{
 80023bc:	b510      	push	{r4, lr}
 80023be:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80023c0:	233c      	movs	r3, #60	; 0x3c
 80023c2:	5cc3      	ldrb	r3, [r0, r3]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d100      	bne.n	80023ca <HAL_TIM_ConfigClockSource+0xe>
 80023c8:	e078      	b.n	80024bc <HAL_TIM_ConfigClockSource+0x100>
 80023ca:	233c      	movs	r3, #60	; 0x3c
 80023cc:	2201      	movs	r2, #1
 80023ce:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	3301      	adds	r3, #1
 80023d2:	3201      	adds	r2, #1
 80023d4:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80023d6:	6802      	ldr	r2, [r0, #0]
 80023d8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023da:	4839      	ldr	r0, [pc, #228]	; (80024c0 <HAL_TIM_ConfigClockSource+0x104>)
 80023dc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80023de:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80023e0:	680b      	ldr	r3, [r1, #0]
 80023e2:	2b60      	cmp	r3, #96	; 0x60
 80023e4:	d050      	beq.n	8002488 <HAL_TIM_ConfigClockSource+0xcc>
 80023e6:	d82a      	bhi.n	800243e <HAL_TIM_ConfigClockSource+0x82>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d058      	beq.n	800249e <HAL_TIM_ConfigClockSource+0xe2>
 80023ec:	d90c      	bls.n	8002408 <HAL_TIM_ConfigClockSource+0x4c>
 80023ee:	2b50      	cmp	r3, #80	; 0x50
 80023f0:	d123      	bne.n	800243a <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f2:	68ca      	ldr	r2, [r1, #12]
 80023f4:	6849      	ldr	r1, [r1, #4]
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	f7ff fe1e 	bl	8002038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023fc:	2150      	movs	r1, #80	; 0x50
 80023fe:	6820      	ldr	r0, [r4, #0]
 8002400:	f7ff fe40 	bl	8002084 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2000      	movs	r0, #0
      break;
 8002406:	e005      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8002408:	2b20      	cmp	r3, #32
 800240a:	d00e      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x6e>
 800240c:	d909      	bls.n	8002422 <HAL_TIM_ConfigClockSource+0x66>
 800240e:	2b30      	cmp	r3, #48	; 0x30
 8002410:	d00b      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002412:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002414:	233d      	movs	r3, #61	; 0x3d
 8002416:	2201      	movs	r2, #1
 8002418:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 800241a:	3b01      	subs	r3, #1
 800241c:	2200      	movs	r2, #0
 800241e:	54e2      	strb	r2, [r4, r3]
}
 8002420:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x6e>
 8002426:	2b10      	cmp	r3, #16
 8002428:	d105      	bne.n	8002436 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800242a:	0019      	movs	r1, r3
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	f7ff fe29 	bl	8002084 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2000      	movs	r0, #0
      break;
 8002434:	e7ee      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8002436:	2001      	movs	r0, #1
 8002438:	e7ec      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
 800243a:	2001      	movs	r0, #1
 800243c:	e7ea      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0152      	lsls	r2, r2, #5
 8002442:	4293      	cmp	r3, r2
 8002444:	d036      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0xf8>
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0192      	lsls	r2, r2, #6
 800244a:	4293      	cmp	r3, r2
 800244c:	d10d      	bne.n	800246a <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 800244e:	68cb      	ldr	r3, [r1, #12]
 8002450:	684a      	ldr	r2, [r1, #4]
 8002452:	6889      	ldr	r1, [r1, #8]
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	f7ff ffa5 	bl	80023a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	6891      	ldr	r1, [r2, #8]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	01db      	lsls	r3, r3, #7
 8002462:	430b      	orrs	r3, r1
 8002464:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2000      	movs	r0, #0
      break;
 8002468:	e7d4      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800246a:	2b70      	cmp	r3, #112	; 0x70
 800246c:	d124      	bne.n	80024b8 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800246e:	68cb      	ldr	r3, [r1, #12]
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	6889      	ldr	r1, [r1, #8]
 8002474:	6820      	ldr	r0, [r4, #0]
 8002476:	f7ff ff95 	bl	80023a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800247e:	2177      	movs	r1, #119	; 0x77
 8002480:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002482:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2000      	movs	r0, #0
      break;
 8002486:	e7c5      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002488:	68ca      	ldr	r2, [r1, #12]
 800248a:	6849      	ldr	r1, [r1, #4]
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	f7ff fde5 	bl	800205c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002492:	2160      	movs	r1, #96	; 0x60
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	f7ff fdf5 	bl	8002084 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2000      	movs	r0, #0
      break;
 800249c:	e7ba      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	68ca      	ldr	r2, [r1, #12]
 80024a0:	6849      	ldr	r1, [r1, #4]
 80024a2:	6820      	ldr	r0, [r4, #0]
 80024a4:	f7ff fdc8 	bl	8002038 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	f7ff fdea 	bl	8002084 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2000      	movs	r0, #0
      break;
 80024b2:	e7af      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80024b4:	2000      	movs	r0, #0
 80024b6:	e7ad      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
 80024ba:	e7ab      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80024bc:	2002      	movs	r0, #2
 80024be:	e7af      	b.n	8002420 <HAL_TIM_ConfigClockSource+0x64>
 80024c0:	ffce0088 	.word	0xffce0088

080024c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024c6:	231f      	movs	r3, #31
 80024c8:	4019      	ands	r1, r3
 80024ca:	2401      	movs	r4, #1
 80024cc:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ce:	6a03      	ldr	r3, [r0, #32]
 80024d0:	43a3      	bics	r3, r4
 80024d2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d4:	6a03      	ldr	r3, [r0, #32]
 80024d6:	408a      	lsls	r2, r1
 80024d8:	4313      	orrs	r3, r2
 80024da:	6203      	str	r3, [r0, #32]
}
 80024dc:	bd10      	pop	{r4, pc}
	...

080024e0 <HAL_TIM_PWM_Start>:
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d12c      	bne.n	8002542 <HAL_TIM_PWM_Start+0x62>
 80024e8:	233e      	movs	r3, #62	; 0x3e
 80024ea:	5cc3      	ldrb	r3, [r0, r3]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	4193      	sbcs	r3, r2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d179      	bne.n	80025ec <HAL_TIM_PWM_Start+0x10c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f8:	2900      	cmp	r1, #0
 80024fa:	d14d      	bne.n	8002598 <HAL_TIM_PWM_Start+0xb8>
 80024fc:	333e      	adds	r3, #62	; 0x3e
 80024fe:	2202      	movs	r2, #2
 8002500:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002502:	2201      	movs	r2, #1
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	f7ff ffdd 	bl	80024c4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_TIM_PWM_Start+0x118>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d005      	beq.n	800251e <HAL_TIM_PWM_Start+0x3e>
 8002512:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_TIM_PWM_Start+0x11c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d002      	beq.n	800251e <HAL_TIM_PWM_Start+0x3e>
 8002518:	4a39      	ldr	r2, [pc, #228]	; (8002600 <HAL_TIM_PWM_Start+0x120>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d104      	bne.n	8002528 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800251e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0212      	lsls	r2, r2, #8
 8002524:	430a      	orrs	r2, r1
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002528:	6823      	ldr	r3, [r4, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_TIM_PWM_Start+0x118>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d04f      	beq.n	80025d0 <HAL_TIM_PWM_Start+0xf0>
 8002530:	4a34      	ldr	r2, [pc, #208]	; (8002604 <HAL_TIM_PWM_Start+0x124>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d04c      	beq.n	80025d0 <HAL_TIM_PWM_Start+0xf0>
    __HAL_TIM_ENABLE(htim);
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800253e:	2000      	movs	r0, #0
 8002540:	e055      	b.n	80025ee <HAL_TIM_PWM_Start+0x10e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002542:	2904      	cmp	r1, #4
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_PWM_Start+0x80>
 8002546:	2908      	cmp	r1, #8
 8002548:	d011      	beq.n	800256e <HAL_TIM_PWM_Start+0x8e>
 800254a:	290c      	cmp	r1, #12
 800254c:	d016      	beq.n	800257c <HAL_TIM_PWM_Start+0x9c>
 800254e:	2910      	cmp	r1, #16
 8002550:	d01b      	beq.n	800258a <HAL_TIM_PWM_Start+0xaa>
 8002552:	2343      	movs	r3, #67	; 0x43
 8002554:	5cc3      	ldrb	r3, [r0, r3]
 8002556:	3b01      	subs	r3, #1
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	4193      	sbcs	r3, r2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e7c9      	b.n	80024f4 <HAL_TIM_PWM_Start+0x14>
 8002560:	233f      	movs	r3, #63	; 0x3f
 8002562:	5cc3      	ldrb	r3, [r0, r3]
 8002564:	3b01      	subs	r3, #1
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	4193      	sbcs	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e7c2      	b.n	80024f4 <HAL_TIM_PWM_Start+0x14>
 800256e:	2340      	movs	r3, #64	; 0x40
 8002570:	5cc3      	ldrb	r3, [r0, r3]
 8002572:	3b01      	subs	r3, #1
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	4193      	sbcs	r3, r2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e7bb      	b.n	80024f4 <HAL_TIM_PWM_Start+0x14>
 800257c:	2341      	movs	r3, #65	; 0x41
 800257e:	5cc3      	ldrb	r3, [r0, r3]
 8002580:	3b01      	subs	r3, #1
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	4193      	sbcs	r3, r2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e7b4      	b.n	80024f4 <HAL_TIM_PWM_Start+0x14>
 800258a:	2342      	movs	r3, #66	; 0x42
 800258c:	5cc3      	ldrb	r3, [r0, r3]
 800258e:	3b01      	subs	r3, #1
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	4193      	sbcs	r3, r2
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e7ad      	b.n	80024f4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002598:	2904      	cmp	r1, #4
 800259a:	d009      	beq.n	80025b0 <HAL_TIM_PWM_Start+0xd0>
 800259c:	2908      	cmp	r1, #8
 800259e:	d00b      	beq.n	80025b8 <HAL_TIM_PWM_Start+0xd8>
 80025a0:	290c      	cmp	r1, #12
 80025a2:	d00d      	beq.n	80025c0 <HAL_TIM_PWM_Start+0xe0>
 80025a4:	2910      	cmp	r1, #16
 80025a6:	d00f      	beq.n	80025c8 <HAL_TIM_PWM_Start+0xe8>
 80025a8:	2343      	movs	r3, #67	; 0x43
 80025aa:	2202      	movs	r2, #2
 80025ac:	54e2      	strb	r2, [r4, r3]
 80025ae:	e7a8      	b.n	8002502 <HAL_TIM_PWM_Start+0x22>
 80025b0:	233f      	movs	r3, #63	; 0x3f
 80025b2:	2202      	movs	r2, #2
 80025b4:	54e2      	strb	r2, [r4, r3]
 80025b6:	e7a4      	b.n	8002502 <HAL_TIM_PWM_Start+0x22>
 80025b8:	2340      	movs	r3, #64	; 0x40
 80025ba:	2202      	movs	r2, #2
 80025bc:	54e2      	strb	r2, [r4, r3]
 80025be:	e7a0      	b.n	8002502 <HAL_TIM_PWM_Start+0x22>
 80025c0:	2341      	movs	r3, #65	; 0x41
 80025c2:	2202      	movs	r2, #2
 80025c4:	54e2      	strb	r2, [r4, r3]
 80025c6:	e79c      	b.n	8002502 <HAL_TIM_PWM_Start+0x22>
 80025c8:	2342      	movs	r3, #66	; 0x42
 80025ca:	2202      	movs	r2, #2
 80025cc:	54e2      	strb	r2, [r4, r3]
 80025ce:	e798      	b.n	8002502 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	490d      	ldr	r1, [pc, #52]	; (8002608 <HAL_TIM_PWM_Start+0x128>)
 80025d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	2a06      	cmp	r2, #6
 80025d8:	d00a      	beq.n	80025f0 <HAL_TIM_PWM_Start+0x110>
 80025da:	3907      	subs	r1, #7
 80025dc:	428a      	cmp	r2, r1
 80025de:	d009      	beq.n	80025f4 <HAL_TIM_PWM_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025e8:	2000      	movs	r0, #0
 80025ea:	e000      	b.n	80025ee <HAL_TIM_PWM_Start+0x10e>
    return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
}
 80025ee:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7fc      	b.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025f4:	2000      	movs	r0, #0
 80025f6:	e7fa      	b.n	80025ee <HAL_TIM_PWM_Start+0x10e>
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40014400 	.word	0x40014400
 8002600:	40014800 	.word	0x40014800
 8002604:	40000400 	.word	0x40000400
 8002608:	00010007 	.word	0x00010007

0800260c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800260c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800260e:	233c      	movs	r3, #60	; 0x3c
 8002610:	5cc3      	ldrb	r3, [r0, r3]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d029      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002616:	233c      	movs	r3, #60	; 0x3c
 8002618:	2201      	movs	r2, #1
 800261a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	3301      	adds	r3, #1
 800261e:	3201      	adds	r2, #1
 8002620:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002622:	6802      	ldr	r2, [r0, #0]
 8002624:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002626:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002628:	4d11      	ldr	r5, [pc, #68]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800262a:	42aa      	cmp	r2, r5
 800262c:	d018      	beq.n	8002660 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800262e:	2570      	movs	r5, #112	; 0x70
 8002630:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002632:	680d      	ldr	r5, [r1, #0]
 8002634:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002636:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002638:	6803      	ldr	r3, [r0, #0]
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d002      	beq.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d104      	bne.n	8002650 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800264a:	688a      	ldr	r2, [r1, #8]
 800264c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800264e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002650:	233d      	movs	r3, #61	; 0x3d
 8002652:	2201      	movs	r2, #1
 8002654:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002656:	3b01      	subs	r3, #1
 8002658:	2200      	movs	r2, #0
 800265a:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800265c:	2000      	movs	r0, #0
}
 800265e:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002660:	4d05      	ldr	r5, [pc, #20]	; (8002678 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002662:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002664:	684d      	ldr	r5, [r1, #4]
 8002666:	432b      	orrs	r3, r5
 8002668:	e7e1      	b.n	800262e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 800266a:	2002      	movs	r0, #2
 800266c:	e7f7      	b.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	40012c00 	.word	0x40012c00
 8002674:	40000400 	.word	0x40000400
 8002678:	ff0fffff 	.word	0xff0fffff

0800267c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800267c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800267e:	233c      	movs	r3, #60	; 0x3c
 8002680:	5cc3      	ldrb	r3, [r0, r3]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d044      	beq.n	8002710 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8002686:	233c      	movs	r3, #60	; 0x3c
 8002688:	2201      	movs	r2, #1
 800268a:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800268e:	68ca      	ldr	r2, [r1, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	688a      	ldr	r2, [r1, #8]
 8002694:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002696:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002698:	4013      	ands	r3, r2
 800269a:	684a      	ldr	r2, [r1, #4]
 800269c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800269e:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	680a      	ldr	r2, [r1, #0]
 80026a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026a6:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	690a      	ldr	r2, [r1, #16]
 80026ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	694a      	ldr	r2, [r1, #20]
 80026b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80026bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80026be:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	698a      	ldr	r2, [r1, #24]
 80026c4:	0412      	lsls	r2, r2, #16
 80026c6:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80026c8:	6802      	ldr	r2, [r0, #0]
 80026ca:	4c19      	ldr	r4, [pc, #100]	; (8002730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80026cc:	42a2      	cmp	r2, r4
 80026ce:	d008      	beq.n	80026e2 <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80026d0:	4c17      	ldr	r4, [pc, #92]	; (8002730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80026d2:	42a2      	cmp	r2, r4
 80026d4:	d00a      	beq.n	80026ec <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80026d6:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80026d8:	233c      	movs	r3, #60	; 0x3c
 80026da:	2200      	movs	r2, #0
 80026dc:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80026de:	2000      	movs	r0, #0
}
 80026e0:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80026e2:	4c14      	ldr	r4, [pc, #80]	; (8002734 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80026e4:	4023      	ands	r3, r4
 80026e6:	69cc      	ldr	r4, [r1, #28]
 80026e8:	4323      	orrs	r3, r4
 80026ea:	e7f1      	b.n	80026d0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80026ec:	4c12      	ldr	r4, [pc, #72]	; (8002738 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80026ee:	4023      	ands	r3, r4
 80026f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80026f2:	0524      	lsls	r4, r4, #20
 80026f4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80026f6:	4c11      	ldr	r4, [pc, #68]	; (800273c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 80026f8:	4023      	ands	r3, r4
 80026fa:	6a0c      	ldr	r4, [r1, #32]
 80026fc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80026fe:	4c10      	ldr	r4, [pc, #64]	; (8002740 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8002700:	4023      	ands	r3, r4
 8002702:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002704:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8002706:	4c0f      	ldr	r4, [pc, #60]	; (8002744 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8002708:	4023      	ands	r3, r4
 800270a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800270c:	430b      	orrs	r3, r1
 800270e:	e7e2      	b.n	80026d6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8002710:	2002      	movs	r0, #2
 8002712:	e7e5      	b.n	80026e0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8002714:	fffffcff 	.word	0xfffffcff
 8002718:	fffffbff 	.word	0xfffffbff
 800271c:	fffff7ff 	.word	0xfffff7ff
 8002720:	ffffefff 	.word	0xffffefff
 8002724:	ffffdfff 	.word	0xffffdfff
 8002728:	ffffbfff 	.word	0xffffbfff
 800272c:	fff0ffff 	.word	0xfff0ffff
 8002730:	40012c00 	.word	0x40012c00
 8002734:	efffffff 	.word	0xefffffff
 8002738:	ff0fffff 	.word	0xff0fffff
 800273c:	feffffff 	.word	0xfeffffff
 8002740:	fdffffff 	.word	0xfdffffff
 8002744:	dfffffff 	.word	0xdfffffff

08002748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002748:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800274a:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	2201      	movs	r2, #1
 8002750:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002754:	6801      	ldr	r1, [r0, #0]
 8002756:	680b      	ldr	r3, [r1, #0]
 8002758:	25c0      	movs	r5, #192	; 0xc0
 800275a:	43ab      	bics	r3, r5
 800275c:	600b      	str	r3, [r1, #0]
 800275e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002762:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800276a:	6802      	ldr	r2, [r0, #0]
 800276c:	6893      	ldr	r3, [r2, #8]
 800276e:	4c04      	ldr	r4, [pc, #16]	; (8002780 <UART_EndTxTransfer+0x38>)
 8002770:	4023      	ands	r3, r4
 8002772:	6093      	str	r3, [r2, #8]
 8002774:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002778:	2384      	movs	r3, #132	; 0x84
 800277a:	2220      	movs	r2, #32
 800277c:	50c2      	str	r2, [r0, r3]
}
 800277e:	bd30      	pop	{r4, r5, pc}
 8002780:	ff7fffff 	.word	0xff7fffff

08002784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002784:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800278a:	2201      	movs	r2, #1
 800278c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	680b      	ldr	r3, [r1, #0]
 8002794:	4d12      	ldr	r5, [pc, #72]	; (80027e0 <UART_EndRxTransfer+0x5c>)
 8002796:	402b      	ands	r3, r5
 8002798:	600b      	str	r3, [r1, #0]
 800279a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027a6:	6802      	ldr	r2, [r0, #0]
 80027a8:	6893      	ldr	r3, [r2, #8]
 80027aa:	4c0e      	ldr	r4, [pc, #56]	; (80027e4 <UART_EndRxTransfer+0x60>)
 80027ac:	4023      	ands	r3, r4
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d006      	beq.n	80027c8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	2388      	movs	r3, #136	; 0x88
 80027bc:	2220      	movs	r2, #32
 80027be:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c0:	2300      	movs	r3, #0
 80027c2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027c4:	6703      	str	r3, [r0, #112]	; 0x70
}
 80027c6:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d0:	6802      	ldr	r2, [r0, #0]
 80027d2:	6813      	ldr	r3, [r2, #0]
 80027d4:	2410      	movs	r4, #16
 80027d6:	43a3      	bics	r3, r4
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	f381 8810 	msr	PRIMASK, r1
}
 80027de:	e7ec      	b.n	80027ba <UART_EndRxTransfer+0x36>
 80027e0:	fffffedf 	.word	0xfffffedf
 80027e4:	effffffe 	.word	0xeffffffe

080027e8 <HAL_UART_RxCpltCallback>:
}
 80027e8:	4770      	bx	lr

080027ea <HAL_UART_RxHalfCpltCallback>:
}
 80027ea:	4770      	bx	lr

080027ec <HAL_UART_ErrorCallback>:
}
 80027ec:	4770      	bx	lr

080027ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80027ee:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027f0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80027f2:	2384      	movs	r3, #132	; 0x84
 80027f4:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80027f6:	3304      	adds	r3, #4
 80027f8:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	061b      	lsls	r3, r3, #24
 8002800:	d501      	bpl.n	8002806 <UART_DMAError+0x18>
 8002802:	2a21      	cmp	r2, #33	; 0x21
 8002804:	d00e      	beq.n	8002824 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	065b      	lsls	r3, r3, #25
 800280c:	d501      	bpl.n	8002812 <UART_DMAError+0x24>
 800280e:	2d22      	cmp	r5, #34	; 0x22
 8002810:	d00f      	beq.n	8002832 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002812:	228c      	movs	r2, #140	; 0x8c
 8002814:	58a3      	ldr	r3, [r4, r2]
 8002816:	2110      	movs	r1, #16
 8002818:	430b      	orrs	r3, r1
 800281a:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800281c:	0020      	movs	r0, r4
 800281e:	f7ff ffe5 	bl	80027ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002822:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8002824:	2356      	movs	r3, #86	; 0x56
 8002826:	2200      	movs	r2, #0
 8002828:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 800282a:	0020      	movs	r0, r4
 800282c:	f7ff ff8c 	bl	8002748 <UART_EndTxTransfer>
 8002830:	e7e9      	b.n	8002806 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8002832:	235e      	movs	r3, #94	; 0x5e
 8002834:	2200      	movs	r2, #0
 8002836:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8002838:	0020      	movs	r0, r4
 800283a:	f7ff ffa3 	bl	8002784 <UART_EndRxTransfer>
 800283e:	e7e8      	b.n	8002812 <UART_DMAError+0x24>

08002840 <HAL_UARTEx_RxEventCallback>:
}
 8002840:	4770      	bx	lr

08002842 <UART_DMARxHalfCplt>:
{
 8002842:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002844:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002846:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d002      	beq.n	8002852 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800284c:	f7ff ffcd 	bl	80027ea <HAL_UART_RxHalfCpltCallback>
}
 8002850:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002852:	335b      	adds	r3, #91	; 0x5b
 8002854:	5ac1      	ldrh	r1, [r0, r3]
 8002856:	0849      	lsrs	r1, r1, #1
 8002858:	f7ff fff2 	bl	8002840 <HAL_UARTEx_RxEventCallback>
 800285c:	e7f8      	b.n	8002850 <UART_DMARxHalfCplt+0xe>
	...

08002860 <UART_DMAReceiveCplt>:
{
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002864:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	d429      	bmi.n	80028c2 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 800286e:	235e      	movs	r3, #94	; 0x5e
 8002870:	2200      	movs	r2, #0
 8002872:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002874:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002878:	3b5d      	subs	r3, #93	; 0x5d
 800287a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800287e:	6801      	ldr	r1, [r0, #0]
 8002880:	680a      	ldr	r2, [r1, #0]
 8002882:	4d1b      	ldr	r5, [pc, #108]	; (80028f0 <UART_DMAReceiveCplt+0x90>)
 8002884:	402a      	ands	r2, r5
 8002886:	600a      	str	r2, [r1, #0]
 8002888:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002890:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	6801      	ldr	r1, [r0, #0]
 8002896:	688a      	ldr	r2, [r1, #8]
 8002898:	439a      	bics	r2, r3
 800289a:	608a      	str	r2, [r1, #8]
 800289c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a8:	6802      	ldr	r2, [r0, #0]
 80028aa:	6893      	ldr	r3, [r2, #8]
 80028ac:	2440      	movs	r4, #64	; 0x40
 80028ae:	43a3      	bics	r3, r4
 80028b0:	6093      	str	r3, [r2, #8]
 80028b2:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 80028b6:	2388      	movs	r3, #136	; 0x88
 80028b8:	2220      	movs	r2, #32
 80028ba:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d005      	beq.n	80028ce <UART_DMAReceiveCplt+0x6e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d00e      	beq.n	80028e6 <UART_DMAReceiveCplt+0x86>
    HAL_UART_RxCpltCallback(huart);
 80028c8:	f7ff ff8e 	bl	80027e8 <HAL_UART_RxCpltCallback>
}
 80028cc:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d2:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d6:	6802      	ldr	r2, [r0, #0]
 80028d8:	6813      	ldr	r3, [r2, #0]
 80028da:	3c30      	subs	r4, #48	; 0x30
 80028dc:	43a3      	bics	r3, r4
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	f381 8810 	msr	PRIMASK, r1
}
 80028e4:	e7ed      	b.n	80028c2 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e6:	335b      	adds	r3, #91	; 0x5b
 80028e8:	5ac1      	ldrh	r1, [r0, r3]
 80028ea:	f7ff ffa9 	bl	8002840 <HAL_UARTEx_RxEventCallback>
 80028ee:	e7ed      	b.n	80028cc <UART_DMAReceiveCplt+0x6c>
 80028f0:	fffffeff 	.word	0xfffffeff

080028f4 <UART_SetConfig>:
{
 80028f4:	b510      	push	{r4, lr}
 80028f6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f8:	6883      	ldr	r3, [r0, #8]
 80028fa:	6902      	ldr	r2, [r0, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	6942      	ldr	r2, [r0, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	69c2      	ldr	r2, [r0, #28]
 8002904:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002906:	6801      	ldr	r1, [r0, #0]
 8002908:	680a      	ldr	r2, [r1, #0]
 800290a:	4863      	ldr	r0, [pc, #396]	; (8002a98 <UART_SetConfig+0x1a4>)
 800290c:	4002      	ands	r2, r0
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	6853      	ldr	r3, [r2, #4]
 8002916:	4961      	ldr	r1, [pc, #388]	; (8002a9c <UART_SetConfig+0x1a8>)
 8002918:	400b      	ands	r3, r1
 800291a:	68e1      	ldr	r1, [r4, #12]
 800291c:	430b      	orrs	r3, r1
 800291e:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002920:	6a22      	ldr	r2, [r4, #32]
 8002922:	69a3      	ldr	r3, [r4, #24]
 8002924:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	688b      	ldr	r3, [r1, #8]
 800292a:	485d      	ldr	r0, [pc, #372]	; (8002aa0 <UART_SetConfig+0x1ac>)
 800292c:	4003      	ands	r3, r0
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002936:	210f      	movs	r1, #15
 8002938:	438b      	bics	r3, r1
 800293a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800293c:	430b      	orrs	r3, r1
 800293e:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <UART_SetConfig+0x1b0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01b      	beq.n	8002980 <UART_SetConfig+0x8c>
 8002948:	4a57      	ldr	r2, [pc, #348]	; (8002aa8 <UART_SetConfig+0x1b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d029      	beq.n	80029a2 <UART_SetConfig+0xae>
 800294e:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002950:	69e0      	ldr	r0, [r4, #28]
 8002952:	2280      	movs	r2, #128	; 0x80
 8002954:	0212      	lsls	r2, r2, #8
 8002956:	4290      	cmp	r0, r2
 8002958:	d02d      	beq.n	80029b6 <UART_SetConfig+0xc2>
    switch (clocksource)
 800295a:	2b04      	cmp	r3, #4
 800295c:	d100      	bne.n	8002960 <UART_SetConfig+0x6c>
 800295e:	e094      	b.n	8002a8a <UART_SetConfig+0x196>
 8002960:	d868      	bhi.n	8002a34 <UART_SetConfig+0x140>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d100      	bne.n	8002968 <UART_SetConfig+0x74>
 8002966:	e08a      	b.n	8002a7e <UART_SetConfig+0x18a>
 8002968:	2b02      	cmp	r3, #2
 800296a:	d161      	bne.n	8002a30 <UART_SetConfig+0x13c>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800296c:	4b4f      	ldr	r3, [pc, #316]	; (8002aac <UART_SetConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	2107      	movs	r1, #7
 8002974:	4019      	ands	r1, r3
 8002976:	3101      	adds	r1, #1
 8002978:	484d      	ldr	r0, [pc, #308]	; (8002ab0 <UART_SetConfig+0x1bc>)
 800297a:	f7fd fbcf 	bl	800011c <__udivsi3>
        break;
 800297e:	e080      	b.n	8002a82 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002980:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <UART_SetConfig+0x1b8>)
 8002982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002984:	2303      	movs	r3, #3
 8002986:	4013      	ands	r3, r2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d00c      	beq.n	80029a6 <UART_SetConfig+0xb2>
 800298c:	d805      	bhi.n	800299a <UART_SetConfig+0xa6>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <UART_SetConfig+0xb6>
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10b      	bne.n	80029ae <UART_SetConfig+0xba>
 8002996:	3303      	adds	r3, #3
 8002998:	e7da      	b.n	8002950 <UART_SetConfig+0x5c>
 800299a:	2b03      	cmp	r3, #3
 800299c:	d109      	bne.n	80029b2 <UART_SetConfig+0xbe>
 800299e:	3305      	adds	r3, #5
 80029a0:	e7d6      	b.n	8002950 <UART_SetConfig+0x5c>
 80029a2:	2300      	movs	r3, #0
 80029a4:	e7d4      	b.n	8002950 <UART_SetConfig+0x5c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e7d2      	b.n	8002950 <UART_SetConfig+0x5c>
 80029aa:	2300      	movs	r3, #0
 80029ac:	e7d0      	b.n	8002950 <UART_SetConfig+0x5c>
 80029ae:	2310      	movs	r3, #16
 80029b0:	e7ce      	b.n	8002950 <UART_SetConfig+0x5c>
 80029b2:	2310      	movs	r3, #16
 80029b4:	e7cc      	b.n	8002950 <UART_SetConfig+0x5c>
    switch (clocksource)
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d037      	beq.n	8002a2a <UART_SetConfig+0x136>
 80029ba:	d80f      	bhi.n	80029dc <UART_SetConfig+0xe8>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02e      	beq.n	8002a1e <UART_SetConfig+0x12a>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d109      	bne.n	80029d8 <UART_SetConfig+0xe4>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <UART_SetConfig+0x1b8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2107      	movs	r1, #7
 80029cc:	4019      	ands	r1, r3
 80029ce:	3101      	adds	r1, #1
 80029d0:	4837      	ldr	r0, [pc, #220]	; (8002ab0 <UART_SetConfig+0x1bc>)
 80029d2:	f7fd fba3 	bl	800011c <__udivsi3>
        break;
 80029d6:	e024      	b.n	8002a22 <UART_SetConfig+0x12e>
    switch (clocksource)
 80029d8:	2001      	movs	r0, #1
 80029da:	e047      	b.n	8002a6c <UART_SetConfig+0x178>
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d11c      	bne.n	8002a1a <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <UART_SetConfig+0x1c0>)
 80029e6:	5a99      	ldrh	r1, [r3, r2]
 80029e8:	f7fd fb98 	bl	800011c <__udivsi3>
 80029ec:	0040      	lsls	r0, r0, #1
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	18c0      	adds	r0, r0, r3
 80029f4:	6861      	ldr	r1, [r4, #4]
 80029f6:	f7fd fb91 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fa:	0002      	movs	r2, r0
 80029fc:	3a10      	subs	r2, #16
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <UART_SetConfig+0x1c4>)
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d845      	bhi.n	8002a90 <UART_SetConfig+0x19c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a04:	b282      	uxth	r2, r0
 8002a06:	230f      	movs	r3, #15
 8002a08:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a0a:	0840      	lsrs	r0, r0, #1
 8002a0c:	3b08      	subs	r3, #8
 8002a0e:	4018      	ands	r0, r3
 8002a10:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	60d8      	str	r0, [r3, #12]
 8002a16:	2000      	movs	r0, #0
 8002a18:	e028      	b.n	8002a6c <UART_SetConfig+0x178>
    switch (clocksource)
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	e026      	b.n	8002a6c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff f9d9 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d1dc      	bne.n	80029e0 <UART_SetConfig+0xec>
 8002a26:	2000      	movs	r0, #0
 8002a28:	e020      	b.n	8002a6c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a2a:	f7ff f99d 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
        break;
 8002a2e:	e7f8      	b.n	8002a22 <UART_SetConfig+0x12e>
    switch (clocksource)
 8002a30:	2001      	movs	r0, #1
 8002a32:	e01b      	b.n	8002a6c <UART_SetConfig+0x178>
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d118      	bne.n	8002a6a <UART_SetConfig+0x176>
 8002a38:	2080      	movs	r0, #128	; 0x80
 8002a3a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <UART_SetConfig+0x1c0>)
 8002a42:	5a99      	ldrh	r1, [r3, r2]
 8002a44:	f7fd fb6a 	bl	800011c <__udivsi3>
 8002a48:	6863      	ldr	r3, [r4, #4]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	18c0      	adds	r0, r0, r3
 8002a4e:	6861      	ldr	r1, [r4, #4]
 8002a50:	f7fd fb64 	bl	800011c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a54:	0002      	movs	r2, r0
 8002a56:	3a10      	subs	r2, #16
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <UART_SetConfig+0x1c4>)
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d81a      	bhi.n	8002a94 <UART_SetConfig+0x1a0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	0400      	lsls	r0, r0, #16
 8002a62:	0c00      	lsrs	r0, r0, #16
 8002a64:	60d8      	str	r0, [r3, #12]
 8002a66:	2000      	movs	r0, #0
 8002a68:	e000      	b.n	8002a6c <UART_SetConfig+0x178>
    switch (clocksource)
 8002a6a:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	226a      	movs	r2, #106	; 0x6a
 8002a70:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002a72:	3a02      	subs	r2, #2
 8002a74:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8002a7a:	6763      	str	r3, [r4, #116]	; 0x74
}
 8002a7c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a7e:	f7ff f9a9 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d1da      	bne.n	8002a3c <UART_SetConfig+0x148>
 8002a86:	2000      	movs	r0, #0
 8002a88:	e7f0      	b.n	8002a6c <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetSysClockFreq();
 8002a8a:	f7ff f96d 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
        break;
 8002a8e:	e7f8      	b.n	8002a82 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002a90:	2001      	movs	r0, #1
 8002a92:	e7eb      	b.n	8002a6c <UART_SetConfig+0x178>
        ret = HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
 8002a96:	e7e9      	b.n	8002a6c <UART_SetConfig+0x178>
 8002a98:	cfff69f3 	.word	0xcfff69f3
 8002a9c:	ffffcfff 	.word	0xffffcfff
 8002aa0:	11fff4ff 	.word	0x11fff4ff
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40004400 	.word	0x40004400
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	02dc6c00 	.word	0x02dc6c00
 8002ab4:	08003b78 	.word	0x08003b78
 8002ab8:	0000ffef 	.word	0x0000ffef

08002abc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002abc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002abe:	07db      	lsls	r3, r3, #31
 8002ac0:	d506      	bpl.n	8002ad0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ac2:	6802      	ldr	r2, [r0, #0]
 8002ac4:	6853      	ldr	r3, [r2, #4]
 8002ac6:	492c      	ldr	r1, [pc, #176]	; (8002b78 <UART_AdvFeatureConfig+0xbc>)
 8002ac8:	400b      	ands	r3, r1
 8002aca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002acc:	430b      	orrs	r3, r1
 8002ace:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ad0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ad2:	079b      	lsls	r3, r3, #30
 8002ad4:	d506      	bpl.n	8002ae4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ad6:	6802      	ldr	r2, [r0, #0]
 8002ad8:	6853      	ldr	r3, [r2, #4]
 8002ada:	4928      	ldr	r1, [pc, #160]	; (8002b7c <UART_AdvFeatureConfig+0xc0>)
 8002adc:	400b      	ands	r3, r1
 8002ade:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002ae0:	430b      	orrs	r3, r1
 8002ae2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ae6:	075b      	lsls	r3, r3, #29
 8002ae8:	d506      	bpl.n	8002af8 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aea:	6802      	ldr	r2, [r0, #0]
 8002aec:	6853      	ldr	r3, [r2, #4]
 8002aee:	4924      	ldr	r1, [pc, #144]	; (8002b80 <UART_AdvFeatureConfig+0xc4>)
 8002af0:	400b      	ands	r3, r1
 8002af2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002af8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002afa:	071b      	lsls	r3, r3, #28
 8002afc:	d506      	bpl.n	8002b0c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002afe:	6802      	ldr	r2, [r0, #0]
 8002b00:	6853      	ldr	r3, [r2, #4]
 8002b02:	4920      	ldr	r1, [pc, #128]	; (8002b84 <UART_AdvFeatureConfig+0xc8>)
 8002b04:	400b      	ands	r3, r1
 8002b06:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b0e:	06db      	lsls	r3, r3, #27
 8002b10:	d506      	bpl.n	8002b20 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b12:	6802      	ldr	r2, [r0, #0]
 8002b14:	6893      	ldr	r3, [r2, #8]
 8002b16:	491c      	ldr	r1, [pc, #112]	; (8002b88 <UART_AdvFeatureConfig+0xcc>)
 8002b18:	400b      	ands	r3, r1
 8002b1a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	d506      	bpl.n	8002b34 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b26:	6802      	ldr	r2, [r0, #0]
 8002b28:	6893      	ldr	r3, [r2, #8]
 8002b2a:	4918      	ldr	r1, [pc, #96]	; (8002b8c <UART_AdvFeatureConfig+0xd0>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b34:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b36:	065b      	lsls	r3, r3, #25
 8002b38:	d50b      	bpl.n	8002b52 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	6853      	ldr	r3, [r2, #4]
 8002b3e:	4914      	ldr	r1, [pc, #80]	; (8002b90 <UART_AdvFeatureConfig+0xd4>)
 8002b40:	400b      	ands	r3, r1
 8002b42:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	035b      	lsls	r3, r3, #13
 8002b4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	d506      	bpl.n	8002b66 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b58:	6802      	ldr	r2, [r0, #0]
 8002b5a:	6853      	ldr	r3, [r2, #4]
 8002b5c:	490d      	ldr	r1, [pc, #52]	; (8002b94 <UART_AdvFeatureConfig+0xd8>)
 8002b5e:	400b      	ands	r3, r1
 8002b60:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6053      	str	r3, [r2, #4]
}
 8002b66:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b68:	6802      	ldr	r2, [r0, #0]
 8002b6a:	6853      	ldr	r3, [r2, #4]
 8002b6c:	490a      	ldr	r1, [pc, #40]	; (8002b98 <UART_AdvFeatureConfig+0xdc>)
 8002b6e:	400b      	ands	r3, r1
 8002b70:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]
 8002b76:	e7ec      	b.n	8002b52 <UART_AdvFeatureConfig+0x96>
 8002b78:	fffdffff 	.word	0xfffdffff
 8002b7c:	fffeffff 	.word	0xfffeffff
 8002b80:	fffbffff 	.word	0xfffbffff
 8002b84:	ffff7fff 	.word	0xffff7fff
 8002b88:	ffffefff 	.word	0xffffefff
 8002b8c:	ffffdfff 	.word	0xffffdfff
 8002b90:	ffefffff 	.word	0xffefffff
 8002b94:	fff7ffff 	.word	0xfff7ffff
 8002b98:	ff9fffff 	.word	0xff9fffff

08002b9c <UART_WaitOnFlagUntilTimeout>:
{
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	46ce      	mov	lr, r9
 8002ba0:	4647      	mov	r7, r8
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	0006      	movs	r6, r0
 8002ba6:	000d      	movs	r5, r1
 8002ba8:	0017      	movs	r7, r2
 8002baa:	4699      	mov	r9, r3
 8002bac:	9b08      	ldr	r3, [sp, #32]
 8002bae:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb0:	6833      	ldr	r3, [r6, #0]
 8002bb2:	69dc      	ldr	r4, [r3, #28]
 8002bb4:	402c      	ands	r4, r5
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	4263      	negs	r3, r4
 8002bba:	415c      	adcs	r4, r3
 8002bbc:	42bc      	cmp	r4, r7
 8002bbe:	d157      	bne.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	d0f4      	beq.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7fe fa39 	bl	800103c <HAL_GetTick>
 8002bca:	464b      	mov	r3, r9
 8002bcc:	1ac0      	subs	r0, r0, r3
 8002bce:	4540      	cmp	r0, r8
 8002bd0:	d82e      	bhi.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x94>
 8002bd2:	4643      	mov	r3, r8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02b      	beq.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	0752      	lsls	r2, r2, #29
 8002bde:	d5e7      	bpl.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	0512      	lsls	r2, r2, #20
 8002be4:	d5e4      	bpl.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be6:	2280      	movs	r2, #128	; 0x80
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002bf6:	6831      	ldr	r1, [r6, #0]
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	4c20      	ldr	r4, [pc, #128]	; (8002c7c <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002bfc:	4023      	ands	r3, r4
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c08:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	6831      	ldr	r1, [r6, #0]
 8002c0e:	688b      	ldr	r3, [r1, #8]
 8002c10:	4393      	bics	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
 8002c14:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	3283      	adds	r2, #131	; 0x83
 8002c1c:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	3204      	adds	r2, #4
 8002c20:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c22:	3204      	adds	r2, #4
 8002c24:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 8002c26:	3360      	adds	r3, #96	; 0x60
 8002c28:	2200      	movs	r2, #0
 8002c2a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002c2c:	2003      	movs	r0, #3
 8002c2e:	e020      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	2201      	movs	r2, #1
 8002c36:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c3a:	6831      	ldr	r1, [r6, #0]
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	4c0f      	ldr	r4, [pc, #60]	; (8002c7c <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002c40:	4023      	ands	r3, r4
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c48:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	6831      	ldr	r1, [r6, #0]
 8002c52:	688b      	ldr	r3, [r1, #8]
 8002c54:	4393      	bics	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	3283      	adds	r2, #131	; 0x83
 8002c60:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002c62:	3204      	adds	r2, #4
 8002c64:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	2200      	movs	r2, #0
 8002c6a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	e000      	b.n	8002c72 <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8002c70:	2000      	movs	r0, #0
}
 8002c72:	bcc0      	pop	{r6, r7}
 8002c74:	46b9      	mov	r9, r7
 8002c76:	46b0      	mov	r8, r6
 8002c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	fffffe5f 	.word	0xfffffe5f

08002c80 <HAL_UART_Transmit>:
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	46c6      	mov	lr, r8
 8002c84:	b500      	push	{lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	0004      	movs	r4, r0
 8002c8a:	000d      	movs	r5, r1
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002c90:	2384      	movs	r3, #132	; 0x84
 8002c92:	58c3      	ldr	r3, [r0, r3]
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d16a      	bne.n	8002d6e <HAL_UART_Transmit+0xee>
    if ((pData == NULL) || (Size == 0U))
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d100      	bne.n	8002c9e <HAL_UART_Transmit+0x1e>
 8002c9c:	e06c      	b.n	8002d78 <HAL_UART_Transmit+0xf8>
 8002c9e:	2a00      	cmp	r2, #0
 8002ca0:	d100      	bne.n	8002ca4 <HAL_UART_Transmit+0x24>
 8002ca2:	e06b      	b.n	8002d7c <HAL_UART_Transmit+0xfc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	6882      	ldr	r2, [r0, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d01f      	beq.n	8002cee <HAL_UART_Transmit+0x6e>
    __HAL_LOCK(huart);
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	5ce3      	ldrb	r3, [r4, r3]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d064      	beq.n	8002d80 <HAL_UART_Transmit+0x100>
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	2201      	movs	r2, #1
 8002cba:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc2:	3b08      	subs	r3, #8
 8002cc4:	3221      	adds	r2, #33	; 0x21
 8002cc6:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f9b8 	bl	800103c <HAL_GetTick>
 8002ccc:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8002cce:	2354      	movs	r3, #84	; 0x54
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	015b      	lsls	r3, r3, #5
 8002cdc:	68a2      	ldr	r2, [r4, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d00c      	beq.n	8002cfc <HAL_UART_Transmit+0x7c>
      pdata16bits = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4698      	mov	r8, r3
    __HAL_UNLOCK(huart);
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	2200      	movs	r2, #0
 8002cea:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8002cec:	e01d      	b.n	8002d2a <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cee:	6903      	ldr	r3, [r0, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1dc      	bne.n	8002cae <HAL_UART_Transmit+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cf4:	07cb      	lsls	r3, r1, #31
 8002cf6:	d5da      	bpl.n	8002cae <HAL_UART_Transmit+0x2e>
        return  HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	e039      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	6923      	ldr	r3, [r4, #16]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Transmit+0x88>
      pdata16bits = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	4698      	mov	r8, r3
 8002d06:	e7ee      	b.n	8002ce6 <HAL_UART_Transmit+0x66>
      pdata16bits = (const uint16_t *) pData;
 8002d08:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	e7eb      	b.n	8002ce6 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0e:	4643      	mov	r3, r8
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	6822      	ldr	r2, [r4, #0]
 8002d14:	05db      	lsls	r3, r3, #23
 8002d16:	0ddb      	lsrs	r3, r3, #23
 8002d18:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	469c      	mov	ip, r3
 8002d1e:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8002d20:	2356      	movs	r3, #86	; 0x56
 8002d22:	5ae2      	ldrh	r2, [r4, r3]
 8002d24:	3a01      	subs	r2, #1
 8002d26:	b292      	uxth	r2, r2
 8002d28:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8002d2a:	2356      	movs	r3, #86	; 0x56
 8002d2c:	5ae3      	ldrh	r3, [r4, r3]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <HAL_UART_Transmit+0xd4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d34:	9600      	str	r6, [sp, #0]
 8002d36:	003b      	movs	r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0020      	movs	r0, r4
 8002d3e:	f7ff ff2d 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d11e      	bne.n	8002d84 <HAL_UART_Transmit+0x104>
      if (pdata8bits == NULL)
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d0e1      	beq.n	8002d0e <HAL_UART_Transmit+0x8e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4a:	782a      	ldrb	r2, [r5, #0]
 8002d4c:	6823      	ldr	r3, [r4, #0]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d50:	3501      	adds	r5, #1
 8002d52:	e7e5      	b.n	8002d20 <HAL_UART_Transmit+0xa0>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d54:	9600      	str	r6, [sp, #0]
 8002d56:	003b      	movs	r3, r7
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	f7ff ff1d 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d110      	bne.n	8002d88 <HAL_UART_Transmit+0x108>
    huart->gState = HAL_UART_STATE_READY;
 8002d66:	2384      	movs	r3, #132	; 0x84
 8002d68:	2220      	movs	r2, #32
 8002d6a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8002d6c:	e000      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
    return HAL_BUSY;
 8002d6e:	2002      	movs	r0, #2
}
 8002d70:	b002      	add	sp, #8
 8002d72:	bc80      	pop	{r7}
 8002d74:	46b8      	mov	r8, r7
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	e7f9      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	e7f7      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
    __HAL_LOCK(huart);
 8002d80:	2002      	movs	r0, #2
 8002d82:	e7f5      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
        return HAL_TIMEOUT;
 8002d84:	2003      	movs	r0, #3
 8002d86:	e7f3      	b.n	8002d70 <HAL_UART_Transmit+0xf0>
      return HAL_TIMEOUT;
 8002d88:	2003      	movs	r0, #3
 8002d8a:	e7f1      	b.n	8002d70 <HAL_UART_Transmit+0xf0>

08002d8c <UART_CheckIdleState>:
{
 8002d8c:	b530      	push	{r4, r5, lr}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	238c      	movs	r3, #140	; 0x8c
 8002d94:	2200      	movs	r2, #0
 8002d96:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002d98:	f7fe f950 	bl	800103c <HAL_GetTick>
 8002d9c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	0713      	lsls	r3, r2, #28
 8002da4:	d40f      	bmi.n	8002dc6 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	075b      	lsls	r3, r3, #29
 8002dac:	d418      	bmi.n	8002de0 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8002dae:	2320      	movs	r3, #32
 8002db0:	2284      	movs	r2, #132	; 0x84
 8002db2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	3204      	adds	r2, #4
 8002db6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	2300      	movs	r3, #0
 8002dba:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8002dbc:	3a08      	subs	r2, #8
 8002dbe:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002dc0:	2000      	movs	r0, #0
}
 8002dc2:	b003      	add	sp, #12
 8002dc4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <UART_CheckIdleState+0x70>)
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	0003      	movs	r3, r0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	0389      	lsls	r1, r1, #14
 8002dd2:	0020      	movs	r0, r4
 8002dd4:	f7ff fee2 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d0e4      	beq.n	8002da6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	e7f0      	b.n	8002dc2 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <UART_CheckIdleState+0x70>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	002b      	movs	r3, r5
 8002de8:	2200      	movs	r2, #0
 8002dea:	03c9      	lsls	r1, r1, #15
 8002dec:	0020      	movs	r0, r4
 8002dee:	f7ff fed5 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d0db      	beq.n	8002dae <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8002df6:	2003      	movs	r0, #3
 8002df8:	e7e3      	b.n	8002dc2 <UART_CheckIdleState+0x36>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	01ffffff 	.word	0x01ffffff

08002e00 <HAL_UART_Init>:
{
 8002e00:	b510      	push	{r4, lr}
 8002e02:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002e04:	d030      	beq.n	8002e68 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	2384      	movs	r3, #132	; 0x84
 8002e08:	58c3      	ldr	r3, [r0, r3]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d022      	beq.n	8002e54 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8002e0e:	2384      	movs	r3, #132	; 0x84
 8002e10:	2224      	movs	r2, #36	; 0x24
 8002e12:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002e14:	6822      	ldr	r2, [r4, #0]
 8002e16:	6813      	ldr	r3, [r2, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	438b      	bics	r3, r1
 8002e1c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f7ff fd68 	bl	80028f4 <UART_SetConfig>
 8002e24:	2801      	cmp	r0, #1
 8002e26:	d014      	beq.n	8002e52 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2e:	6822      	ldr	r2, [r4, #0]
 8002e30:	6853      	ldr	r3, [r2, #4]
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <HAL_UART_Init+0x6c>)
 8002e34:	400b      	ands	r3, r1
 8002e36:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e38:	6822      	ldr	r2, [r4, #0]
 8002e3a:	6893      	ldr	r3, [r2, #8]
 8002e3c:	212a      	movs	r1, #42	; 0x2a
 8002e3e:	438b      	bics	r3, r1
 8002e40:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	3929      	subs	r1, #41	; 0x29
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002e4c:	0020      	movs	r0, r4
 8002e4e:	f7ff ff9d 	bl	8002d8c <UART_CheckIdleState>
}
 8002e52:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002e54:	3380      	adds	r3, #128	; 0x80
 8002e56:	2200      	movs	r2, #0
 8002e58:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002e5a:	f7fd fff5 	bl	8000e48 <HAL_UART_MspInit>
 8002e5e:	e7d6      	b.n	8002e0e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8002e60:	0020      	movs	r0, r4
 8002e62:	f7ff fe2b 	bl	8002abc <UART_AdvFeatureConfig>
 8002e66:	e7e2      	b.n	8002e2e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
 8002e6a:	e7f2      	b.n	8002e52 <HAL_UART_Init+0x52>
 8002e6c:	ffffb7ff 	.word	0xffffb7ff

08002e70 <UART_Start_Receive_DMA>:
{
 8002e70:	b510      	push	{r4, lr}
 8002e72:	0004      	movs	r4, r0
 8002e74:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8002e76:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8002e78:	225c      	movs	r2, #92	; 0x5c
 8002e7a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e7c:	3230      	adds	r2, #48	; 0x30
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e82:	3a04      	subs	r2, #4
 8002e84:	3122      	adds	r1, #34	; 0x22
 8002e86:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8002e88:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	d012      	beq.n	8002eb4 <UART_Start_Receive_DMA+0x44>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e8e:	4924      	ldr	r1, [pc, #144]	; (8002f20 <UART_Start_Receive_DMA+0xb0>)
 8002e90:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e92:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002e94:	4923      	ldr	r1, [pc, #140]	; (8002f24 <UART_Start_Receive_DMA+0xb4>)
 8002e96:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e98:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002e9a:	4923      	ldr	r1, [pc, #140]	; (8002f28 <UART_Start_Receive_DMA+0xb8>)
 8002e9c:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8002e9e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002ea4:	6801      	ldr	r1, [r0, #0]
 8002ea6:	3124      	adds	r1, #36	; 0x24
 8002ea8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8002eaa:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8002eac:	f7fe fe2e 	bl	8001b0c <HAL_DMA_Start_IT>
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d129      	bne.n	8002f08 <UART_Start_Receive_DMA+0x98>
  __HAL_UNLOCK(huart);
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	54e2      	strb	r2, [r4, r3]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eba:	6923      	ldr	r3, [r4, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00b      	beq.n	8002ed8 <UART_Start_Receive_DMA+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eca:	6822      	ldr	r2, [r4, #0]
 8002ecc:	6810      	ldr	r0, [r2, #0]
 8002ece:	33ff      	adds	r3, #255	; 0xff
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002edc:	2301      	movs	r3, #1
 8002ede:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee2:	6821      	ldr	r1, [r4, #0]
 8002ee4:	688a      	ldr	r2, [r1, #8]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	608a      	str	r2, [r1, #8]
 8002eea:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	6893      	ldr	r3, [r2, #8]
 8002efa:	2040      	movs	r0, #64	; 0x40
 8002efc:	4303      	orrs	r3, r0
 8002efe:	6093      	str	r3, [r2, #8]
 8002f00:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
}
 8002f06:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f08:	238c      	movs	r3, #140	; 0x8c
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8002f0e:	3b0c      	subs	r3, #12
 8002f10:	2200      	movs	r2, #0
 8002f12:	54e2      	strb	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8002f14:	3308      	adds	r3, #8
 8002f16:	3220      	adds	r2, #32
 8002f18:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	e7f3      	b.n	8002f06 <UART_Start_Receive_DMA+0x96>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	08002861 	.word	0x08002861
 8002f24:	08002843 	.word	0x08002843
 8002f28:	080027ef 	.word	0x080027ef

08002f2c <HAL_UART_Receive_DMA>:
{
 8002f2c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f2e:	2388      	movs	r3, #136	; 0x88
 8002f30:	58c3      	ldr	r3, [r0, r3]
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d12c      	bne.n	8002f90 <HAL_UART_Receive_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8002f36:	2900      	cmp	r1, #0
 8002f38:	d02c      	beq.n	8002f94 <HAL_UART_Receive_DMA+0x68>
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d02c      	beq.n	8002f98 <HAL_UART_Receive_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	6884      	ldr	r4, [r0, #8]
 8002f44:	429c      	cmp	r4, r3
 8002f46:	d01c      	beq.n	8002f82 <HAL_UART_Receive_DMA+0x56>
    __HAL_LOCK(huart);
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	5cc3      	ldrb	r3, [r0, r3]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d025      	beq.n	8002f9c <HAL_UART_Receive_DMA+0x70>
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	2401      	movs	r4, #1
 8002f54:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f56:	2300      	movs	r3, #0
 8002f58:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	021b      	lsls	r3, r3, #8
 8002f60:	d50c      	bpl.n	8002f7c <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f62:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f66:	2301      	movs	r3, #1
 8002f68:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f6c:	6804      	ldr	r4, [r0, #0]
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	04db      	lsls	r3, r3, #19
 8002f74:	432b      	orrs	r3, r5
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f7c:	f7ff ff78 	bl	8002e70 <UART_Start_Receive_DMA>
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Receive_DMA+0x66>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f82:	6903      	ldr	r3, [r0, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1df      	bne.n	8002f48 <HAL_UART_Receive_DMA+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f88:	07cb      	lsls	r3, r1, #31
 8002f8a:	d5dd      	bpl.n	8002f48 <HAL_UART_Receive_DMA+0x1c>
        return  HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Receive_DMA+0x66>
    return HAL_BUSY;
 8002f90:	2002      	movs	r0, #2
}
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f94:	2001      	movs	r0, #1
 8002f96:	e7fc      	b.n	8002f92 <HAL_UART_Receive_DMA+0x66>
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e7fa      	b.n	8002f92 <HAL_UART_Receive_DMA+0x66>
    __HAL_LOCK(huart);
 8002f9c:	2002      	movs	r0, #2
 8002f9e:	e7f8      	b.n	8002f92 <HAL_UART_Receive_DMA+0x66>

08002fa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa2:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fa4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8002faa:	3301      	adds	r3, #1
 8002fac:	226a      	movs	r2, #106	; 0x6a
 8002fae:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8002fb0:	3a02      	subs	r2, #2
 8002fb2:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fb6:	6802      	ldr	r2, [r0, #0]
 8002fb8:	6895      	ldr	r5, [r2, #8]
 8002fba:	0e6d      	lsrs	r5, r5, #25
 8002fbc:	2307      	movs	r3, #7
 8002fbe:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	0f52      	lsrs	r2, r2, #29
 8002fc4:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fc6:	4f08      	ldr	r7, [pc, #32]	; (8002fe8 <UARTEx_SetNbDataToProcess+0x48>)
 8002fc8:	5cf8      	ldrb	r0, [r7, r3]
 8002fca:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fcc:	4e07      	ldr	r6, [pc, #28]	; (8002fec <UARTEx_SetNbDataToProcess+0x4c>)
 8002fce:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fd0:	f7fd f92e 	bl	8000230 <__divsi3>
 8002fd4:	236a      	movs	r3, #106	; 0x6a
 8002fd6:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fd8:	5d78      	ldrb	r0, [r7, r5]
 8002fda:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fdc:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fde:	f7fd f927 	bl	8000230 <__divsi3>
 8002fe2:	2368      	movs	r3, #104	; 0x68
 8002fe4:	52e0      	strh	r0, [r4, r3]
}
 8002fe6:	e7e5      	b.n	8002fb4 <UARTEx_SetNbDataToProcess+0x14>
 8002fe8:	08003b98 	.word	0x08003b98
 8002fec:	08003b90 	.word	0x08003b90

08002ff0 <HAL_UARTEx_DisableFifoMode>:
{
 8002ff0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	5cc3      	ldrb	r3, [r0, r3]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d015      	beq.n	8003026 <HAL_UARTEx_DisableFifoMode+0x36>
 8002ffa:	2480      	movs	r4, #128	; 0x80
 8002ffc:	2601      	movs	r6, #1
 8002ffe:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003000:	2584      	movs	r5, #132	; 0x84
 8003002:	2324      	movs	r3, #36	; 0x24
 8003004:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003006:	6802      	ldr	r2, [r0, #0]
 8003008:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800300a:	6811      	ldr	r1, [r2, #0]
 800300c:	43b1      	bics	r1, r6
 800300e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003010:	4a06      	ldr	r2, [pc, #24]	; (800302c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003012:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003014:	2200      	movs	r2, #0
 8003016:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800301c:	2320      	movs	r3, #32
 800301e:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003020:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003022:	2000      	movs	r0, #0
}
 8003024:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003026:	2002      	movs	r0, #2
 8003028:	e7fc      	b.n	8003024 <HAL_UARTEx_DisableFifoMode+0x34>
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	dfffffff 	.word	0xdfffffff

08003030 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003032:	0004      	movs	r4, r0
 8003034:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	5cc3      	ldrb	r3, [r0, r3]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d01b      	beq.n	8003076 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800303e:	2580      	movs	r5, #128	; 0x80
 8003040:	2001      	movs	r0, #1
 8003042:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	2684      	movs	r6, #132	; 0x84
 8003046:	2324      	movs	r3, #36	; 0x24
 8003048:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	4381      	bics	r1, r0
 8003052:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	6883      	ldr	r3, [r0, #8]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	08d9      	lsrs	r1, r3, #3
 800305c:	4311      	orrs	r1, r2
 800305e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003060:	0020      	movs	r0, r4
 8003062:	f7ff ff9d 	bl	8002fa0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800306a:	2320      	movs	r3, #32
 800306c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800306e:	2300      	movs	r3, #0
 8003070:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003072:	2000      	movs	r0, #0
}
 8003074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003076:	2002      	movs	r0, #2
 8003078:	e7fc      	b.n	8003074 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800307c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	0004      	movs	r4, r0
 8003080:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	5c82      	ldrb	r2, [r0, r2]
 8003086:	2a01      	cmp	r2, #1
 8003088:	d01b      	beq.n	80030c2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800308a:	2580      	movs	r5, #128	; 0x80
 800308c:	2001      	movs	r0, #1
 800308e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003090:	2684      	movs	r6, #132	; 0x84
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003096:	6822      	ldr	r2, [r4, #0]
 8003098:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	4381      	bics	r1, r0
 800309e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	6891      	ldr	r1, [r2, #8]
 80030a4:	4808      	ldr	r0, [pc, #32]	; (80030c8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80030a6:	4001      	ands	r1, r0
 80030a8:	4319      	orrs	r1, r3
 80030aa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80030ac:	0020      	movs	r0, r4
 80030ae:	f7ff ff77 	bl	8002fa0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80030b6:	2320      	movs	r3, #32
 80030b8:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80030ba:	2300      	movs	r3, #0
 80030bc:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80030be:	2000      	movs	r0, #0
}
 80030c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80030c2:	2002      	movs	r0, #2
 80030c4:	e7fc      	b.n	80030c0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	f1ffffff 	.word	0xf1ffffff

080030cc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80030cc:	4b01      	ldr	r3, [pc, #4]	; (80030d4 <LL_SetSystemCoreClock+0x8>)
 80030ce:	6018      	str	r0, [r3, #0]
}
 80030d0:	4770      	bx	lr
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	20000004 	.word	0x20000004

080030d8 <__errno>:
 80030d8:	4b01      	ldr	r3, [pc, #4]	; (80030e0 <__errno+0x8>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	4770      	bx	lr
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20000010 	.word	0x20000010

080030e4 <__libc_init_array>:
 80030e4:	b570      	push	{r4, r5, r6, lr}
 80030e6:	2600      	movs	r6, #0
 80030e8:	4d0c      	ldr	r5, [pc, #48]	; (800311c <__libc_init_array+0x38>)
 80030ea:	4c0d      	ldr	r4, [pc, #52]	; (8003120 <__libc_init_array+0x3c>)
 80030ec:	1b64      	subs	r4, r4, r5
 80030ee:	10a4      	asrs	r4, r4, #2
 80030f0:	42a6      	cmp	r6, r4
 80030f2:	d109      	bne.n	8003108 <__libc_init_array+0x24>
 80030f4:	2600      	movs	r6, #0
 80030f6:	f000 fca3 	bl	8003a40 <_init>
 80030fa:	4d0a      	ldr	r5, [pc, #40]	; (8003124 <__libc_init_array+0x40>)
 80030fc:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <__libc_init_array+0x44>)
 80030fe:	1b64      	subs	r4, r4, r5
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	42a6      	cmp	r6, r4
 8003104:	d105      	bne.n	8003112 <__libc_init_array+0x2e>
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	00b3      	lsls	r3, r6, #2
 800310a:	58eb      	ldr	r3, [r5, r3]
 800310c:	4798      	blx	r3
 800310e:	3601      	adds	r6, #1
 8003110:	e7ee      	b.n	80030f0 <__libc_init_array+0xc>
 8003112:	00b3      	lsls	r3, r6, #2
 8003114:	58eb      	ldr	r3, [r5, r3]
 8003116:	4798      	blx	r3
 8003118:	3601      	adds	r6, #1
 800311a:	e7f2      	b.n	8003102 <__libc_init_array+0x1e>
 800311c:	08003bd4 	.word	0x08003bd4
 8003120:	08003bd4 	.word	0x08003bd4
 8003124:	08003bd4 	.word	0x08003bd4
 8003128:	08003bd8 	.word	0x08003bd8

0800312c <memset>:
 800312c:	0003      	movs	r3, r0
 800312e:	1882      	adds	r2, r0, r2
 8003130:	4293      	cmp	r3, r2
 8003132:	d100      	bne.n	8003136 <memset+0xa>
 8003134:	4770      	bx	lr
 8003136:	7019      	strb	r1, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	e7f9      	b.n	8003130 <memset+0x4>

0800313c <_vsniprintf_r>:
 800313c:	b530      	push	{r4, r5, lr}
 800313e:	0014      	movs	r4, r2
 8003140:	0005      	movs	r5, r0
 8003142:	001a      	movs	r2, r3
 8003144:	b09b      	sub	sp, #108	; 0x6c
 8003146:	2c00      	cmp	r4, #0
 8003148:	da05      	bge.n	8003156 <_vsniprintf_r+0x1a>
 800314a:	238b      	movs	r3, #139	; 0x8b
 800314c:	6003      	str	r3, [r0, #0]
 800314e:	2001      	movs	r0, #1
 8003150:	4240      	negs	r0, r0
 8003152:	b01b      	add	sp, #108	; 0x6c
 8003154:	bd30      	pop	{r4, r5, pc}
 8003156:	2382      	movs	r3, #130	; 0x82
 8003158:	4668      	mov	r0, sp
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	8183      	strh	r3, [r0, #12]
 800315e:	2300      	movs	r3, #0
 8003160:	9100      	str	r1, [sp, #0]
 8003162:	9104      	str	r1, [sp, #16]
 8003164:	429c      	cmp	r4, r3
 8003166:	d000      	beq.n	800316a <_vsniprintf_r+0x2e>
 8003168:	1e63      	subs	r3, r4, #1
 800316a:	9302      	str	r3, [sp, #8]
 800316c:	9305      	str	r3, [sp, #20]
 800316e:	2301      	movs	r3, #1
 8003170:	4669      	mov	r1, sp
 8003172:	425b      	negs	r3, r3
 8003174:	81cb      	strh	r3, [r1, #14]
 8003176:	0028      	movs	r0, r5
 8003178:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800317a:	f000 f879 	bl	8003270 <_svfiprintf_r>
 800317e:	1c43      	adds	r3, r0, #1
 8003180:	da01      	bge.n	8003186 <_vsniprintf_r+0x4a>
 8003182:	238b      	movs	r3, #139	; 0x8b
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	2c00      	cmp	r4, #0
 8003188:	d0e3      	beq.n	8003152 <_vsniprintf_r+0x16>
 800318a:	2300      	movs	r3, #0
 800318c:	9a00      	ldr	r2, [sp, #0]
 800318e:	7013      	strb	r3, [r2, #0]
 8003190:	e7df      	b.n	8003152 <_vsniprintf_r+0x16>
	...

08003194 <vsniprintf>:
 8003194:	b507      	push	{r0, r1, r2, lr}
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	0013      	movs	r3, r2
 800319a:	000a      	movs	r2, r1
 800319c:	0001      	movs	r1, r0
 800319e:	4802      	ldr	r0, [pc, #8]	; (80031a8 <vsniprintf+0x14>)
 80031a0:	6800      	ldr	r0, [r0, #0]
 80031a2:	f7ff ffcb 	bl	800313c <_vsniprintf_r>
 80031a6:	bd0e      	pop	{r1, r2, r3, pc}
 80031a8:	20000010 	.word	0x20000010

080031ac <__ssputs_r>:
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	688e      	ldr	r6, [r1, #8]
 80031b0:	b085      	sub	sp, #20
 80031b2:	0007      	movs	r7, r0
 80031b4:	000c      	movs	r4, r1
 80031b6:	9203      	str	r2, [sp, #12]
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	429e      	cmp	r6, r3
 80031bc:	d83c      	bhi.n	8003238 <__ssputs_r+0x8c>
 80031be:	2390      	movs	r3, #144	; 0x90
 80031c0:	898a      	ldrh	r2, [r1, #12]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	421a      	tst	r2, r3
 80031c6:	d034      	beq.n	8003232 <__ssputs_r+0x86>
 80031c8:	6909      	ldr	r1, [r1, #16]
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	6960      	ldr	r0, [r4, #20]
 80031ce:	1a5b      	subs	r3, r3, r1
 80031d0:	9302      	str	r3, [sp, #8]
 80031d2:	2303      	movs	r3, #3
 80031d4:	4343      	muls	r3, r0
 80031d6:	0fdd      	lsrs	r5, r3, #31
 80031d8:	18ed      	adds	r5, r5, r3
 80031da:	9b01      	ldr	r3, [sp, #4]
 80031dc:	9802      	ldr	r0, [sp, #8]
 80031de:	3301      	adds	r3, #1
 80031e0:	181b      	adds	r3, r3, r0
 80031e2:	106d      	asrs	r5, r5, #1
 80031e4:	42ab      	cmp	r3, r5
 80031e6:	d900      	bls.n	80031ea <__ssputs_r+0x3e>
 80031e8:	001d      	movs	r5, r3
 80031ea:	0553      	lsls	r3, r2, #21
 80031ec:	d532      	bpl.n	8003254 <__ssputs_r+0xa8>
 80031ee:	0029      	movs	r1, r5
 80031f0:	0038      	movs	r0, r7
 80031f2:	f000 fb53 	bl	800389c <_malloc_r>
 80031f6:	1e06      	subs	r6, r0, #0
 80031f8:	d109      	bne.n	800320e <__ssputs_r+0x62>
 80031fa:	230c      	movs	r3, #12
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	2340      	movs	r3, #64	; 0x40
 8003200:	2001      	movs	r0, #1
 8003202:	89a2      	ldrh	r2, [r4, #12]
 8003204:	4240      	negs	r0, r0
 8003206:	4313      	orrs	r3, r2
 8003208:	81a3      	strh	r3, [r4, #12]
 800320a:	b005      	add	sp, #20
 800320c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320e:	9a02      	ldr	r2, [sp, #8]
 8003210:	6921      	ldr	r1, [r4, #16]
 8003212:	f000 faba 	bl	800378a <memcpy>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	4a14      	ldr	r2, [pc, #80]	; (800326c <__ssputs_r+0xc0>)
 800321a:	401a      	ands	r2, r3
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	4313      	orrs	r3, r2
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	9b02      	ldr	r3, [sp, #8]
 8003224:	6126      	str	r6, [r4, #16]
 8003226:	18f6      	adds	r6, r6, r3
 8003228:	6026      	str	r6, [r4, #0]
 800322a:	6165      	str	r5, [r4, #20]
 800322c:	9e01      	ldr	r6, [sp, #4]
 800322e:	1aed      	subs	r5, r5, r3
 8003230:	60a5      	str	r5, [r4, #8]
 8003232:	9b01      	ldr	r3, [sp, #4]
 8003234:	429e      	cmp	r6, r3
 8003236:	d900      	bls.n	800323a <__ssputs_r+0x8e>
 8003238:	9e01      	ldr	r6, [sp, #4]
 800323a:	0032      	movs	r2, r6
 800323c:	9903      	ldr	r1, [sp, #12]
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	f000 faac 	bl	800379c <memmove>
 8003244:	68a3      	ldr	r3, [r4, #8]
 8003246:	2000      	movs	r0, #0
 8003248:	1b9b      	subs	r3, r3, r6
 800324a:	60a3      	str	r3, [r4, #8]
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	199e      	adds	r6, r3, r6
 8003250:	6026      	str	r6, [r4, #0]
 8003252:	e7da      	b.n	800320a <__ssputs_r+0x5e>
 8003254:	002a      	movs	r2, r5
 8003256:	0038      	movs	r0, r7
 8003258:	f000 fb96 	bl	8003988 <_realloc_r>
 800325c:	1e06      	subs	r6, r0, #0
 800325e:	d1e0      	bne.n	8003222 <__ssputs_r+0x76>
 8003260:	0038      	movs	r0, r7
 8003262:	6921      	ldr	r1, [r4, #16]
 8003264:	f000 faae 	bl	80037c4 <_free_r>
 8003268:	e7c7      	b.n	80031fa <__ssputs_r+0x4e>
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	fffffb7f 	.word	0xfffffb7f

08003270 <_svfiprintf_r>:
 8003270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003272:	b0a1      	sub	sp, #132	; 0x84
 8003274:	9003      	str	r0, [sp, #12]
 8003276:	001d      	movs	r5, r3
 8003278:	898b      	ldrh	r3, [r1, #12]
 800327a:	000f      	movs	r7, r1
 800327c:	0016      	movs	r6, r2
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	d511      	bpl.n	80032a6 <_svfiprintf_r+0x36>
 8003282:	690b      	ldr	r3, [r1, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10e      	bne.n	80032a6 <_svfiprintf_r+0x36>
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	f000 fb07 	bl	800389c <_malloc_r>
 800328e:	6038      	str	r0, [r7, #0]
 8003290:	6138      	str	r0, [r7, #16]
 8003292:	2800      	cmp	r0, #0
 8003294:	d105      	bne.n	80032a2 <_svfiprintf_r+0x32>
 8003296:	230c      	movs	r3, #12
 8003298:	9a03      	ldr	r2, [sp, #12]
 800329a:	3801      	subs	r0, #1
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	b021      	add	sp, #132	; 0x84
 80032a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a2:	2340      	movs	r3, #64	; 0x40
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	2300      	movs	r3, #0
 80032a8:	ac08      	add	r4, sp, #32
 80032aa:	6163      	str	r3, [r4, #20]
 80032ac:	3320      	adds	r3, #32
 80032ae:	7663      	strb	r3, [r4, #25]
 80032b0:	3310      	adds	r3, #16
 80032b2:	76a3      	strb	r3, [r4, #26]
 80032b4:	9507      	str	r5, [sp, #28]
 80032b6:	0035      	movs	r5, r6
 80032b8:	782b      	ldrb	r3, [r5, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <_svfiprintf_r+0x52>
 80032be:	2b25      	cmp	r3, #37	; 0x25
 80032c0:	d147      	bne.n	8003352 <_svfiprintf_r+0xe2>
 80032c2:	1bab      	subs	r3, r5, r6
 80032c4:	9305      	str	r3, [sp, #20]
 80032c6:	42b5      	cmp	r5, r6
 80032c8:	d00c      	beq.n	80032e4 <_svfiprintf_r+0x74>
 80032ca:	0032      	movs	r2, r6
 80032cc:	0039      	movs	r1, r7
 80032ce:	9803      	ldr	r0, [sp, #12]
 80032d0:	f7ff ff6c 	bl	80031ac <__ssputs_r>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d100      	bne.n	80032da <_svfiprintf_r+0x6a>
 80032d8:	e0ae      	b.n	8003438 <_svfiprintf_r+0x1c8>
 80032da:	6962      	ldr	r2, [r4, #20]
 80032dc:	9b05      	ldr	r3, [sp, #20]
 80032de:	4694      	mov	ip, r2
 80032e0:	4463      	add	r3, ip
 80032e2:	6163      	str	r3, [r4, #20]
 80032e4:	782b      	ldrb	r3, [r5, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d100      	bne.n	80032ec <_svfiprintf_r+0x7c>
 80032ea:	e0a5      	b.n	8003438 <_svfiprintf_r+0x1c8>
 80032ec:	2201      	movs	r2, #1
 80032ee:	2300      	movs	r3, #0
 80032f0:	4252      	negs	r2, r2
 80032f2:	6062      	str	r2, [r4, #4]
 80032f4:	a904      	add	r1, sp, #16
 80032f6:	3254      	adds	r2, #84	; 0x54
 80032f8:	1852      	adds	r2, r2, r1
 80032fa:	1c6e      	adds	r6, r5, #1
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	60e3      	str	r3, [r4, #12]
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	7013      	strb	r3, [r2, #0]
 8003304:	65a3      	str	r3, [r4, #88]	; 0x58
 8003306:	2205      	movs	r2, #5
 8003308:	7831      	ldrb	r1, [r6, #0]
 800330a:	4854      	ldr	r0, [pc, #336]	; (800345c <_svfiprintf_r+0x1ec>)
 800330c:	f000 fa32 	bl	8003774 <memchr>
 8003310:	1c75      	adds	r5, r6, #1
 8003312:	2800      	cmp	r0, #0
 8003314:	d11f      	bne.n	8003356 <_svfiprintf_r+0xe6>
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	06d3      	lsls	r3, r2, #27
 800331a:	d504      	bpl.n	8003326 <_svfiprintf_r+0xb6>
 800331c:	2353      	movs	r3, #83	; 0x53
 800331e:	a904      	add	r1, sp, #16
 8003320:	185b      	adds	r3, r3, r1
 8003322:	2120      	movs	r1, #32
 8003324:	7019      	strb	r1, [r3, #0]
 8003326:	0713      	lsls	r3, r2, #28
 8003328:	d504      	bpl.n	8003334 <_svfiprintf_r+0xc4>
 800332a:	2353      	movs	r3, #83	; 0x53
 800332c:	a904      	add	r1, sp, #16
 800332e:	185b      	adds	r3, r3, r1
 8003330:	212b      	movs	r1, #43	; 0x2b
 8003332:	7019      	strb	r1, [r3, #0]
 8003334:	7833      	ldrb	r3, [r6, #0]
 8003336:	2b2a      	cmp	r3, #42	; 0x2a
 8003338:	d016      	beq.n	8003368 <_svfiprintf_r+0xf8>
 800333a:	0035      	movs	r5, r6
 800333c:	2100      	movs	r1, #0
 800333e:	200a      	movs	r0, #10
 8003340:	68e3      	ldr	r3, [r4, #12]
 8003342:	782a      	ldrb	r2, [r5, #0]
 8003344:	1c6e      	adds	r6, r5, #1
 8003346:	3a30      	subs	r2, #48	; 0x30
 8003348:	2a09      	cmp	r2, #9
 800334a:	d94e      	bls.n	80033ea <_svfiprintf_r+0x17a>
 800334c:	2900      	cmp	r1, #0
 800334e:	d111      	bne.n	8003374 <_svfiprintf_r+0x104>
 8003350:	e017      	b.n	8003382 <_svfiprintf_r+0x112>
 8003352:	3501      	adds	r5, #1
 8003354:	e7b0      	b.n	80032b8 <_svfiprintf_r+0x48>
 8003356:	4b41      	ldr	r3, [pc, #260]	; (800345c <_svfiprintf_r+0x1ec>)
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	1ac0      	subs	r0, r0, r3
 800335c:	2301      	movs	r3, #1
 800335e:	4083      	lsls	r3, r0
 8003360:	4313      	orrs	r3, r2
 8003362:	002e      	movs	r6, r5
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	e7ce      	b.n	8003306 <_svfiprintf_r+0x96>
 8003368:	9b07      	ldr	r3, [sp, #28]
 800336a:	1d19      	adds	r1, r3, #4
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	9107      	str	r1, [sp, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db01      	blt.n	8003378 <_svfiprintf_r+0x108>
 8003374:	930b      	str	r3, [sp, #44]	; 0x2c
 8003376:	e004      	b.n	8003382 <_svfiprintf_r+0x112>
 8003378:	425b      	negs	r3, r3
 800337a:	60e3      	str	r3, [r4, #12]
 800337c:	2302      	movs	r3, #2
 800337e:	4313      	orrs	r3, r2
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	782b      	ldrb	r3, [r5, #0]
 8003384:	2b2e      	cmp	r3, #46	; 0x2e
 8003386:	d10a      	bne.n	800339e <_svfiprintf_r+0x12e>
 8003388:	786b      	ldrb	r3, [r5, #1]
 800338a:	2b2a      	cmp	r3, #42	; 0x2a
 800338c:	d135      	bne.n	80033fa <_svfiprintf_r+0x18a>
 800338e:	9b07      	ldr	r3, [sp, #28]
 8003390:	3502      	adds	r5, #2
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9207      	str	r2, [sp, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db2b      	blt.n	80033f4 <_svfiprintf_r+0x184>
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	4e30      	ldr	r6, [pc, #192]	; (8003460 <_svfiprintf_r+0x1f0>)
 80033a0:	2203      	movs	r2, #3
 80033a2:	0030      	movs	r0, r6
 80033a4:	7829      	ldrb	r1, [r5, #0]
 80033a6:	f000 f9e5 	bl	8003774 <memchr>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d006      	beq.n	80033bc <_svfiprintf_r+0x14c>
 80033ae:	2340      	movs	r3, #64	; 0x40
 80033b0:	1b80      	subs	r0, r0, r6
 80033b2:	4083      	lsls	r3, r0
 80033b4:	6822      	ldr	r2, [r4, #0]
 80033b6:	3501      	adds	r5, #1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	7829      	ldrb	r1, [r5, #0]
 80033be:	2206      	movs	r2, #6
 80033c0:	4828      	ldr	r0, [pc, #160]	; (8003464 <_svfiprintf_r+0x1f4>)
 80033c2:	1c6e      	adds	r6, r5, #1
 80033c4:	7621      	strb	r1, [r4, #24]
 80033c6:	f000 f9d5 	bl	8003774 <memchr>
 80033ca:	2800      	cmp	r0, #0
 80033cc:	d03c      	beq.n	8003448 <_svfiprintf_r+0x1d8>
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <_svfiprintf_r+0x1f8>)
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d125      	bne.n	8003420 <_svfiprintf_r+0x1b0>
 80033d4:	2207      	movs	r2, #7
 80033d6:	9b07      	ldr	r3, [sp, #28]
 80033d8:	3307      	adds	r3, #7
 80033da:	4393      	bics	r3, r2
 80033dc:	3308      	adds	r3, #8
 80033de:	9307      	str	r3, [sp, #28]
 80033e0:	6963      	ldr	r3, [r4, #20]
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	189b      	adds	r3, r3, r2
 80033e6:	6163      	str	r3, [r4, #20]
 80033e8:	e765      	b.n	80032b6 <_svfiprintf_r+0x46>
 80033ea:	4343      	muls	r3, r0
 80033ec:	0035      	movs	r5, r6
 80033ee:	2101      	movs	r1, #1
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	e7a6      	b.n	8003342 <_svfiprintf_r+0xd2>
 80033f4:	2301      	movs	r3, #1
 80033f6:	425b      	negs	r3, r3
 80033f8:	e7d0      	b.n	800339c <_svfiprintf_r+0x12c>
 80033fa:	2300      	movs	r3, #0
 80033fc:	200a      	movs	r0, #10
 80033fe:	001a      	movs	r2, r3
 8003400:	3501      	adds	r5, #1
 8003402:	6063      	str	r3, [r4, #4]
 8003404:	7829      	ldrb	r1, [r5, #0]
 8003406:	1c6e      	adds	r6, r5, #1
 8003408:	3930      	subs	r1, #48	; 0x30
 800340a:	2909      	cmp	r1, #9
 800340c:	d903      	bls.n	8003416 <_svfiprintf_r+0x1a6>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0c5      	beq.n	800339e <_svfiprintf_r+0x12e>
 8003412:	9209      	str	r2, [sp, #36]	; 0x24
 8003414:	e7c3      	b.n	800339e <_svfiprintf_r+0x12e>
 8003416:	4342      	muls	r2, r0
 8003418:	0035      	movs	r5, r6
 800341a:	2301      	movs	r3, #1
 800341c:	1852      	adds	r2, r2, r1
 800341e:	e7f1      	b.n	8003404 <_svfiprintf_r+0x194>
 8003420:	ab07      	add	r3, sp, #28
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	003a      	movs	r2, r7
 8003426:	0021      	movs	r1, r4
 8003428:	4b10      	ldr	r3, [pc, #64]	; (800346c <_svfiprintf_r+0x1fc>)
 800342a:	9803      	ldr	r0, [sp, #12]
 800342c:	e000      	b.n	8003430 <_svfiprintf_r+0x1c0>
 800342e:	bf00      	nop
 8003430:	9004      	str	r0, [sp, #16]
 8003432:	9b04      	ldr	r3, [sp, #16]
 8003434:	3301      	adds	r3, #1
 8003436:	d1d3      	bne.n	80033e0 <_svfiprintf_r+0x170>
 8003438:	89bb      	ldrh	r3, [r7, #12]
 800343a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800343c:	065b      	lsls	r3, r3, #25
 800343e:	d400      	bmi.n	8003442 <_svfiprintf_r+0x1d2>
 8003440:	e72d      	b.n	800329e <_svfiprintf_r+0x2e>
 8003442:	2001      	movs	r0, #1
 8003444:	4240      	negs	r0, r0
 8003446:	e72a      	b.n	800329e <_svfiprintf_r+0x2e>
 8003448:	ab07      	add	r3, sp, #28
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	003a      	movs	r2, r7
 800344e:	0021      	movs	r1, r4
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <_svfiprintf_r+0x1fc>)
 8003452:	9803      	ldr	r0, [sp, #12]
 8003454:	f000 f87c 	bl	8003550 <_printf_i>
 8003458:	e7ea      	b.n	8003430 <_svfiprintf_r+0x1c0>
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	08003ba0 	.word	0x08003ba0
 8003460:	08003ba6 	.word	0x08003ba6
 8003464:	08003baa 	.word	0x08003baa
 8003468:	00000000 	.word	0x00000000
 800346c:	080031ad 	.word	0x080031ad

08003470 <_printf_common>:
 8003470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003472:	0015      	movs	r5, r2
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	688a      	ldr	r2, [r1, #8]
 8003478:	690b      	ldr	r3, [r1, #16]
 800347a:	000c      	movs	r4, r1
 800347c:	9000      	str	r0, [sp, #0]
 800347e:	4293      	cmp	r3, r2
 8003480:	da00      	bge.n	8003484 <_printf_common+0x14>
 8003482:	0013      	movs	r3, r2
 8003484:	0022      	movs	r2, r4
 8003486:	602b      	str	r3, [r5, #0]
 8003488:	3243      	adds	r2, #67	; 0x43
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	2a00      	cmp	r2, #0
 800348e:	d001      	beq.n	8003494 <_printf_common+0x24>
 8003490:	3301      	adds	r3, #1
 8003492:	602b      	str	r3, [r5, #0]
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	d502      	bpl.n	80034a0 <_printf_common+0x30>
 800349a:	682b      	ldr	r3, [r5, #0]
 800349c:	3302      	adds	r3, #2
 800349e:	602b      	str	r3, [r5, #0]
 80034a0:	6822      	ldr	r2, [r4, #0]
 80034a2:	2306      	movs	r3, #6
 80034a4:	0017      	movs	r7, r2
 80034a6:	401f      	ands	r7, r3
 80034a8:	421a      	tst	r2, r3
 80034aa:	d027      	beq.n	80034fc <_printf_common+0x8c>
 80034ac:	0023      	movs	r3, r4
 80034ae:	3343      	adds	r3, #67	; 0x43
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	4193      	sbcs	r3, r2
 80034b6:	6822      	ldr	r2, [r4, #0]
 80034b8:	0692      	lsls	r2, r2, #26
 80034ba:	d430      	bmi.n	800351e <_printf_common+0xae>
 80034bc:	0022      	movs	r2, r4
 80034be:	9901      	ldr	r1, [sp, #4]
 80034c0:	9800      	ldr	r0, [sp, #0]
 80034c2:	9e08      	ldr	r6, [sp, #32]
 80034c4:	3243      	adds	r2, #67	; 0x43
 80034c6:	47b0      	blx	r6
 80034c8:	1c43      	adds	r3, r0, #1
 80034ca:	d025      	beq.n	8003518 <_printf_common+0xa8>
 80034cc:	2306      	movs	r3, #6
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	682a      	ldr	r2, [r5, #0]
 80034d2:	68e1      	ldr	r1, [r4, #12]
 80034d4:	2500      	movs	r5, #0
 80034d6:	4003      	ands	r3, r0
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d103      	bne.n	80034e4 <_printf_common+0x74>
 80034dc:	1a8d      	subs	r5, r1, r2
 80034de:	43eb      	mvns	r3, r5
 80034e0:	17db      	asrs	r3, r3, #31
 80034e2:	401d      	ands	r5, r3
 80034e4:	68a3      	ldr	r3, [r4, #8]
 80034e6:	6922      	ldr	r2, [r4, #16]
 80034e8:	4293      	cmp	r3, r2
 80034ea:	dd01      	ble.n	80034f0 <_printf_common+0x80>
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	18ed      	adds	r5, r5, r3
 80034f0:	2700      	movs	r7, #0
 80034f2:	42bd      	cmp	r5, r7
 80034f4:	d120      	bne.n	8003538 <_printf_common+0xc8>
 80034f6:	2000      	movs	r0, #0
 80034f8:	e010      	b.n	800351c <_printf_common+0xac>
 80034fa:	3701      	adds	r7, #1
 80034fc:	68e3      	ldr	r3, [r4, #12]
 80034fe:	682a      	ldr	r2, [r5, #0]
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	42bb      	cmp	r3, r7
 8003504:	ddd2      	ble.n	80034ac <_printf_common+0x3c>
 8003506:	0022      	movs	r2, r4
 8003508:	2301      	movs	r3, #1
 800350a:	9901      	ldr	r1, [sp, #4]
 800350c:	9800      	ldr	r0, [sp, #0]
 800350e:	9e08      	ldr	r6, [sp, #32]
 8003510:	3219      	adds	r2, #25
 8003512:	47b0      	blx	r6
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d1f0      	bne.n	80034fa <_printf_common+0x8a>
 8003518:	2001      	movs	r0, #1
 800351a:	4240      	negs	r0, r0
 800351c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	18e1      	adds	r1, r4, r3
 8003522:	3143      	adds	r1, #67	; 0x43
 8003524:	7008      	strb	r0, [r1, #0]
 8003526:	0021      	movs	r1, r4
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	3145      	adds	r1, #69	; 0x45
 800352c:	7809      	ldrb	r1, [r1, #0]
 800352e:	18a2      	adds	r2, r4, r2
 8003530:	3243      	adds	r2, #67	; 0x43
 8003532:	3302      	adds	r3, #2
 8003534:	7011      	strb	r1, [r2, #0]
 8003536:	e7c1      	b.n	80034bc <_printf_common+0x4c>
 8003538:	0022      	movs	r2, r4
 800353a:	2301      	movs	r3, #1
 800353c:	9901      	ldr	r1, [sp, #4]
 800353e:	9800      	ldr	r0, [sp, #0]
 8003540:	9e08      	ldr	r6, [sp, #32]
 8003542:	321a      	adds	r2, #26
 8003544:	47b0      	blx	r6
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d0e6      	beq.n	8003518 <_printf_common+0xa8>
 800354a:	3701      	adds	r7, #1
 800354c:	e7d1      	b.n	80034f2 <_printf_common+0x82>
	...

08003550 <_printf_i>:
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	9206      	str	r2, [sp, #24]
 8003556:	000a      	movs	r2, r1
 8003558:	3243      	adds	r2, #67	; 0x43
 800355a:	9307      	str	r3, [sp, #28]
 800355c:	9005      	str	r0, [sp, #20]
 800355e:	9204      	str	r2, [sp, #16]
 8003560:	7e0a      	ldrb	r2, [r1, #24]
 8003562:	000c      	movs	r4, r1
 8003564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003566:	2a78      	cmp	r2, #120	; 0x78
 8003568:	d807      	bhi.n	800357a <_printf_i+0x2a>
 800356a:	2a62      	cmp	r2, #98	; 0x62
 800356c:	d809      	bhi.n	8003582 <_printf_i+0x32>
 800356e:	2a00      	cmp	r2, #0
 8003570:	d100      	bne.n	8003574 <_printf_i+0x24>
 8003572:	e0c1      	b.n	80036f8 <_printf_i+0x1a8>
 8003574:	2a58      	cmp	r2, #88	; 0x58
 8003576:	d100      	bne.n	800357a <_printf_i+0x2a>
 8003578:	e08c      	b.n	8003694 <_printf_i+0x144>
 800357a:	0026      	movs	r6, r4
 800357c:	3642      	adds	r6, #66	; 0x42
 800357e:	7032      	strb	r2, [r6, #0]
 8003580:	e022      	b.n	80035c8 <_printf_i+0x78>
 8003582:	0010      	movs	r0, r2
 8003584:	3863      	subs	r0, #99	; 0x63
 8003586:	2815      	cmp	r0, #21
 8003588:	d8f7      	bhi.n	800357a <_printf_i+0x2a>
 800358a:	f7fc fdbd 	bl	8000108 <__gnu_thumb1_case_shi>
 800358e:	0016      	.short	0x0016
 8003590:	fff6001f 	.word	0xfff6001f
 8003594:	fff6fff6 	.word	0xfff6fff6
 8003598:	001ffff6 	.word	0x001ffff6
 800359c:	fff6fff6 	.word	0xfff6fff6
 80035a0:	fff6fff6 	.word	0xfff6fff6
 80035a4:	003600a8 	.word	0x003600a8
 80035a8:	fff6009a 	.word	0xfff6009a
 80035ac:	00b9fff6 	.word	0x00b9fff6
 80035b0:	0036fff6 	.word	0x0036fff6
 80035b4:	fff6fff6 	.word	0xfff6fff6
 80035b8:	009e      	.short	0x009e
 80035ba:	0026      	movs	r6, r4
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	3642      	adds	r6, #66	; 0x42
 80035c0:	1d11      	adds	r1, r2, #4
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	7033      	strb	r3, [r6, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a7      	b.n	800371c <_printf_i+0x1cc>
 80035cc:	6808      	ldr	r0, [r1, #0]
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	1d0a      	adds	r2, r1, #4
 80035d2:	0605      	lsls	r5, r0, #24
 80035d4:	d50b      	bpl.n	80035ee <_printf_i+0x9e>
 80035d6:	680d      	ldr	r5, [r1, #0]
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	2d00      	cmp	r5, #0
 80035dc:	da03      	bge.n	80035e6 <_printf_i+0x96>
 80035de:	232d      	movs	r3, #45	; 0x2d
 80035e0:	9a04      	ldr	r2, [sp, #16]
 80035e2:	426d      	negs	r5, r5
 80035e4:	7013      	strb	r3, [r2, #0]
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <_printf_i+0x21c>)
 80035e8:	270a      	movs	r7, #10
 80035ea:	9303      	str	r3, [sp, #12]
 80035ec:	e01b      	b.n	8003626 <_printf_i+0xd6>
 80035ee:	680d      	ldr	r5, [r1, #0]
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	0641      	lsls	r1, r0, #25
 80035f4:	d5f1      	bpl.n	80035da <_printf_i+0x8a>
 80035f6:	b22d      	sxth	r5, r5
 80035f8:	e7ef      	b.n	80035da <_printf_i+0x8a>
 80035fa:	680d      	ldr	r5, [r1, #0]
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	1d08      	adds	r0, r1, #4
 8003600:	6018      	str	r0, [r3, #0]
 8003602:	062e      	lsls	r6, r5, #24
 8003604:	d501      	bpl.n	800360a <_printf_i+0xba>
 8003606:	680d      	ldr	r5, [r1, #0]
 8003608:	e003      	b.n	8003612 <_printf_i+0xc2>
 800360a:	066d      	lsls	r5, r5, #25
 800360c:	d5fb      	bpl.n	8003606 <_printf_i+0xb6>
 800360e:	680d      	ldr	r5, [r1, #0]
 8003610:	b2ad      	uxth	r5, r5
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <_printf_i+0x21c>)
 8003614:	2708      	movs	r7, #8
 8003616:	9303      	str	r3, [sp, #12]
 8003618:	2a6f      	cmp	r2, #111	; 0x6f
 800361a:	d000      	beq.n	800361e <_printf_i+0xce>
 800361c:	3702      	adds	r7, #2
 800361e:	0023      	movs	r3, r4
 8003620:	2200      	movs	r2, #0
 8003622:	3343      	adds	r3, #67	; 0x43
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	60a3      	str	r3, [r4, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db03      	blt.n	8003636 <_printf_i+0xe6>
 800362e:	2204      	movs	r2, #4
 8003630:	6821      	ldr	r1, [r4, #0]
 8003632:	4391      	bics	r1, r2
 8003634:	6021      	str	r1, [r4, #0]
 8003636:	2d00      	cmp	r5, #0
 8003638:	d102      	bne.n	8003640 <_printf_i+0xf0>
 800363a:	9e04      	ldr	r6, [sp, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <_printf_i+0x10a>
 8003640:	9e04      	ldr	r6, [sp, #16]
 8003642:	0028      	movs	r0, r5
 8003644:	0039      	movs	r1, r7
 8003646:	f7fc fdef 	bl	8000228 <__aeabi_uidivmod>
 800364a:	9b03      	ldr	r3, [sp, #12]
 800364c:	3e01      	subs	r6, #1
 800364e:	5c5b      	ldrb	r3, [r3, r1]
 8003650:	7033      	strb	r3, [r6, #0]
 8003652:	002b      	movs	r3, r5
 8003654:	0005      	movs	r5, r0
 8003656:	429f      	cmp	r7, r3
 8003658:	d9f3      	bls.n	8003642 <_printf_i+0xf2>
 800365a:	2f08      	cmp	r7, #8
 800365c:	d109      	bne.n	8003672 <_printf_i+0x122>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	07db      	lsls	r3, r3, #31
 8003662:	d506      	bpl.n	8003672 <_printf_i+0x122>
 8003664:	6863      	ldr	r3, [r4, #4]
 8003666:	6922      	ldr	r2, [r4, #16]
 8003668:	4293      	cmp	r3, r2
 800366a:	dc02      	bgt.n	8003672 <_printf_i+0x122>
 800366c:	2330      	movs	r3, #48	; 0x30
 800366e:	3e01      	subs	r6, #1
 8003670:	7033      	strb	r3, [r6, #0]
 8003672:	9b04      	ldr	r3, [sp, #16]
 8003674:	1b9b      	subs	r3, r3, r6
 8003676:	6123      	str	r3, [r4, #16]
 8003678:	9b07      	ldr	r3, [sp, #28]
 800367a:	0021      	movs	r1, r4
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	9805      	ldr	r0, [sp, #20]
 8003680:	9b06      	ldr	r3, [sp, #24]
 8003682:	aa09      	add	r2, sp, #36	; 0x24
 8003684:	f7ff fef4 	bl	8003470 <_printf_common>
 8003688:	1c43      	adds	r3, r0, #1
 800368a:	d14c      	bne.n	8003726 <_printf_i+0x1d6>
 800368c:	2001      	movs	r0, #1
 800368e:	4240      	negs	r0, r0
 8003690:	b00b      	add	sp, #44	; 0x2c
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003694:	3145      	adds	r1, #69	; 0x45
 8003696:	700a      	strb	r2, [r1, #0]
 8003698:	4a34      	ldr	r2, [pc, #208]	; (800376c <_printf_i+0x21c>)
 800369a:	9203      	str	r2, [sp, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	6821      	ldr	r1, [r4, #0]
 80036a0:	ca20      	ldmia	r2!, {r5}
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	0608      	lsls	r0, r1, #24
 80036a6:	d516      	bpl.n	80036d6 <_printf_i+0x186>
 80036a8:	07cb      	lsls	r3, r1, #31
 80036aa:	d502      	bpl.n	80036b2 <_printf_i+0x162>
 80036ac:	2320      	movs	r3, #32
 80036ae:	4319      	orrs	r1, r3
 80036b0:	6021      	str	r1, [r4, #0]
 80036b2:	2710      	movs	r7, #16
 80036b4:	2d00      	cmp	r5, #0
 80036b6:	d1b2      	bne.n	800361e <_printf_i+0xce>
 80036b8:	2320      	movs	r3, #32
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	439a      	bics	r2, r3
 80036be:	6022      	str	r2, [r4, #0]
 80036c0:	e7ad      	b.n	800361e <_printf_i+0xce>
 80036c2:	2220      	movs	r2, #32
 80036c4:	6809      	ldr	r1, [r1, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	6022      	str	r2, [r4, #0]
 80036ca:	0022      	movs	r2, r4
 80036cc:	2178      	movs	r1, #120	; 0x78
 80036ce:	3245      	adds	r2, #69	; 0x45
 80036d0:	7011      	strb	r1, [r2, #0]
 80036d2:	4a27      	ldr	r2, [pc, #156]	; (8003770 <_printf_i+0x220>)
 80036d4:	e7e1      	b.n	800369a <_printf_i+0x14a>
 80036d6:	0648      	lsls	r0, r1, #25
 80036d8:	d5e6      	bpl.n	80036a8 <_printf_i+0x158>
 80036da:	b2ad      	uxth	r5, r5
 80036dc:	e7e4      	b.n	80036a8 <_printf_i+0x158>
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	680d      	ldr	r5, [r1, #0]
 80036e2:	1d10      	adds	r0, r2, #4
 80036e4:	6949      	ldr	r1, [r1, #20]
 80036e6:	6018      	str	r0, [r3, #0]
 80036e8:	6813      	ldr	r3, [r2, #0]
 80036ea:	062e      	lsls	r6, r5, #24
 80036ec:	d501      	bpl.n	80036f2 <_printf_i+0x1a2>
 80036ee:	6019      	str	r1, [r3, #0]
 80036f0:	e002      	b.n	80036f8 <_printf_i+0x1a8>
 80036f2:	066d      	lsls	r5, r5, #25
 80036f4:	d5fb      	bpl.n	80036ee <_printf_i+0x19e>
 80036f6:	8019      	strh	r1, [r3, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	9e04      	ldr	r6, [sp, #16]
 80036fc:	6123      	str	r3, [r4, #16]
 80036fe:	e7bb      	b.n	8003678 <_printf_i+0x128>
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	1d11      	adds	r1, r2, #4
 8003704:	6019      	str	r1, [r3, #0]
 8003706:	6816      	ldr	r6, [r2, #0]
 8003708:	2100      	movs	r1, #0
 800370a:	0030      	movs	r0, r6
 800370c:	6862      	ldr	r2, [r4, #4]
 800370e:	f000 f831 	bl	8003774 <memchr>
 8003712:	2800      	cmp	r0, #0
 8003714:	d001      	beq.n	800371a <_printf_i+0x1ca>
 8003716:	1b80      	subs	r0, r0, r6
 8003718:	6060      	str	r0, [r4, #4]
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	6123      	str	r3, [r4, #16]
 800371e:	2300      	movs	r3, #0
 8003720:	9a04      	ldr	r2, [sp, #16]
 8003722:	7013      	strb	r3, [r2, #0]
 8003724:	e7a8      	b.n	8003678 <_printf_i+0x128>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	0032      	movs	r2, r6
 800372a:	9906      	ldr	r1, [sp, #24]
 800372c:	9805      	ldr	r0, [sp, #20]
 800372e:	9d07      	ldr	r5, [sp, #28]
 8003730:	47a8      	blx	r5
 8003732:	1c43      	adds	r3, r0, #1
 8003734:	d0aa      	beq.n	800368c <_printf_i+0x13c>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	079b      	lsls	r3, r3, #30
 800373a:	d415      	bmi.n	8003768 <_printf_i+0x218>
 800373c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373e:	68e0      	ldr	r0, [r4, #12]
 8003740:	4298      	cmp	r0, r3
 8003742:	daa5      	bge.n	8003690 <_printf_i+0x140>
 8003744:	0018      	movs	r0, r3
 8003746:	e7a3      	b.n	8003690 <_printf_i+0x140>
 8003748:	0022      	movs	r2, r4
 800374a:	2301      	movs	r3, #1
 800374c:	9906      	ldr	r1, [sp, #24]
 800374e:	9805      	ldr	r0, [sp, #20]
 8003750:	9e07      	ldr	r6, [sp, #28]
 8003752:	3219      	adds	r2, #25
 8003754:	47b0      	blx	r6
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d098      	beq.n	800368c <_printf_i+0x13c>
 800375a:	3501      	adds	r5, #1
 800375c:	68e3      	ldr	r3, [r4, #12]
 800375e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	42ab      	cmp	r3, r5
 8003764:	dcf0      	bgt.n	8003748 <_printf_i+0x1f8>
 8003766:	e7e9      	b.n	800373c <_printf_i+0x1ec>
 8003768:	2500      	movs	r5, #0
 800376a:	e7f7      	b.n	800375c <_printf_i+0x20c>
 800376c:	08003bb1 	.word	0x08003bb1
 8003770:	08003bc2 	.word	0x08003bc2

08003774 <memchr>:
 8003774:	b2c9      	uxtb	r1, r1
 8003776:	1882      	adds	r2, r0, r2
 8003778:	4290      	cmp	r0, r2
 800377a:	d101      	bne.n	8003780 <memchr+0xc>
 800377c:	2000      	movs	r0, #0
 800377e:	4770      	bx	lr
 8003780:	7803      	ldrb	r3, [r0, #0]
 8003782:	428b      	cmp	r3, r1
 8003784:	d0fb      	beq.n	800377e <memchr+0xa>
 8003786:	3001      	adds	r0, #1
 8003788:	e7f6      	b.n	8003778 <memchr+0x4>

0800378a <memcpy>:
 800378a:	2300      	movs	r3, #0
 800378c:	b510      	push	{r4, lr}
 800378e:	429a      	cmp	r2, r3
 8003790:	d100      	bne.n	8003794 <memcpy+0xa>
 8003792:	bd10      	pop	{r4, pc}
 8003794:	5ccc      	ldrb	r4, [r1, r3]
 8003796:	54c4      	strb	r4, [r0, r3]
 8003798:	3301      	adds	r3, #1
 800379a:	e7f8      	b.n	800378e <memcpy+0x4>

0800379c <memmove>:
 800379c:	b510      	push	{r4, lr}
 800379e:	4288      	cmp	r0, r1
 80037a0:	d902      	bls.n	80037a8 <memmove+0xc>
 80037a2:	188b      	adds	r3, r1, r2
 80037a4:	4298      	cmp	r0, r3
 80037a6:	d303      	bcc.n	80037b0 <memmove+0x14>
 80037a8:	2300      	movs	r3, #0
 80037aa:	e007      	b.n	80037bc <memmove+0x20>
 80037ac:	5c8b      	ldrb	r3, [r1, r2]
 80037ae:	5483      	strb	r3, [r0, r2]
 80037b0:	3a01      	subs	r2, #1
 80037b2:	d2fb      	bcs.n	80037ac <memmove+0x10>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	5ccc      	ldrb	r4, [r1, r3]
 80037b8:	54c4      	strb	r4, [r0, r3]
 80037ba:	3301      	adds	r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1fa      	bne.n	80037b6 <memmove+0x1a>
 80037c0:	e7f8      	b.n	80037b4 <memmove+0x18>
	...

080037c4 <_free_r>:
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	0005      	movs	r5, r0
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d010      	beq.n	80037ee <_free_r+0x2a>
 80037cc:	1f0c      	subs	r4, r1, #4
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da00      	bge.n	80037d6 <_free_r+0x12>
 80037d4:	18e4      	adds	r4, r4, r3
 80037d6:	0028      	movs	r0, r5
 80037d8:	f000 f918 	bl	8003a0c <__malloc_lock>
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <_free_r+0x90>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d105      	bne.n	80037f0 <_free_r+0x2c>
 80037e4:	6063      	str	r3, [r4, #4]
 80037e6:	6014      	str	r4, [r2, #0]
 80037e8:	0028      	movs	r0, r5
 80037ea:	f000 f917 	bl	8003a1c <__malloc_unlock>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d908      	bls.n	8003806 <_free_r+0x42>
 80037f4:	6821      	ldr	r1, [r4, #0]
 80037f6:	1860      	adds	r0, r4, r1
 80037f8:	4283      	cmp	r3, r0
 80037fa:	d1f3      	bne.n	80037e4 <_free_r+0x20>
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	1841      	adds	r1, r0, r1
 8003802:	6021      	str	r1, [r4, #0]
 8003804:	e7ee      	b.n	80037e4 <_free_r+0x20>
 8003806:	001a      	movs	r2, r3
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <_free_r+0x4e>
 800380e:	42a3      	cmp	r3, r4
 8003810:	d9f9      	bls.n	8003806 <_free_r+0x42>
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	1850      	adds	r0, r2, r1
 8003816:	42a0      	cmp	r0, r4
 8003818:	d10b      	bne.n	8003832 <_free_r+0x6e>
 800381a:	6820      	ldr	r0, [r4, #0]
 800381c:	1809      	adds	r1, r1, r0
 800381e:	1850      	adds	r0, r2, r1
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	4283      	cmp	r3, r0
 8003824:	d1e0      	bne.n	80037e8 <_free_r+0x24>
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	1841      	adds	r1, r0, r1
 800382c:	6011      	str	r1, [r2, #0]
 800382e:	6053      	str	r3, [r2, #4]
 8003830:	e7da      	b.n	80037e8 <_free_r+0x24>
 8003832:	42a0      	cmp	r0, r4
 8003834:	d902      	bls.n	800383c <_free_r+0x78>
 8003836:	230c      	movs	r3, #12
 8003838:	602b      	str	r3, [r5, #0]
 800383a:	e7d5      	b.n	80037e8 <_free_r+0x24>
 800383c:	6821      	ldr	r1, [r4, #0]
 800383e:	1860      	adds	r0, r4, r1
 8003840:	4283      	cmp	r3, r0
 8003842:	d103      	bne.n	800384c <_free_r+0x88>
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	1841      	adds	r1, r0, r1
 800384a:	6021      	str	r1, [r4, #0]
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	6054      	str	r4, [r2, #4]
 8003850:	e7ca      	b.n	80037e8 <_free_r+0x24>
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	200003ac 	.word	0x200003ac

08003858 <sbrk_aligned>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0f      	ldr	r6, [pc, #60]	; (8003898 <sbrk_aligned+0x40>)
 800385c:	000d      	movs	r5, r1
 800385e:	6831      	ldr	r1, [r6, #0]
 8003860:	0004      	movs	r4, r0
 8003862:	2900      	cmp	r1, #0
 8003864:	d102      	bne.n	800386c <sbrk_aligned+0x14>
 8003866:	f000 f8bf 	bl	80039e8 <_sbrk_r>
 800386a:	6030      	str	r0, [r6, #0]
 800386c:	0029      	movs	r1, r5
 800386e:	0020      	movs	r0, r4
 8003870:	f000 f8ba 	bl	80039e8 <_sbrk_r>
 8003874:	1c43      	adds	r3, r0, #1
 8003876:	d00a      	beq.n	800388e <sbrk_aligned+0x36>
 8003878:	2303      	movs	r3, #3
 800387a:	1cc5      	adds	r5, r0, #3
 800387c:	439d      	bics	r5, r3
 800387e:	42a8      	cmp	r0, r5
 8003880:	d007      	beq.n	8003892 <sbrk_aligned+0x3a>
 8003882:	1a29      	subs	r1, r5, r0
 8003884:	0020      	movs	r0, r4
 8003886:	f000 f8af 	bl	80039e8 <_sbrk_r>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	d101      	bne.n	8003892 <sbrk_aligned+0x3a>
 800388e:	2501      	movs	r5, #1
 8003890:	426d      	negs	r5, r5
 8003892:	0028      	movs	r0, r5
 8003894:	bd70      	pop	{r4, r5, r6, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	200003b0 	.word	0x200003b0

0800389c <_malloc_r>:
 800389c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800389e:	2203      	movs	r2, #3
 80038a0:	1ccb      	adds	r3, r1, #3
 80038a2:	4393      	bics	r3, r2
 80038a4:	3308      	adds	r3, #8
 80038a6:	0006      	movs	r6, r0
 80038a8:	001f      	movs	r7, r3
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d232      	bcs.n	8003914 <_malloc_r+0x78>
 80038ae:	270c      	movs	r7, #12
 80038b0:	42b9      	cmp	r1, r7
 80038b2:	d831      	bhi.n	8003918 <_malloc_r+0x7c>
 80038b4:	0030      	movs	r0, r6
 80038b6:	f000 f8a9 	bl	8003a0c <__malloc_lock>
 80038ba:	4d32      	ldr	r5, [pc, #200]	; (8003984 <_malloc_r+0xe8>)
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	001c      	movs	r4, r3
 80038c0:	2c00      	cmp	r4, #0
 80038c2:	d12e      	bne.n	8003922 <_malloc_r+0x86>
 80038c4:	0039      	movs	r1, r7
 80038c6:	0030      	movs	r0, r6
 80038c8:	f7ff ffc6 	bl	8003858 <sbrk_aligned>
 80038cc:	0004      	movs	r4, r0
 80038ce:	1c43      	adds	r3, r0, #1
 80038d0:	d11e      	bne.n	8003910 <_malloc_r+0x74>
 80038d2:	682c      	ldr	r4, [r5, #0]
 80038d4:	0025      	movs	r5, r4
 80038d6:	2d00      	cmp	r5, #0
 80038d8:	d14a      	bne.n	8003970 <_malloc_r+0xd4>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	0029      	movs	r1, r5
 80038de:	18e3      	adds	r3, r4, r3
 80038e0:	0030      	movs	r0, r6
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	f000 f880 	bl	80039e8 <_sbrk_r>
 80038e8:	9b01      	ldr	r3, [sp, #4]
 80038ea:	4283      	cmp	r3, r0
 80038ec:	d143      	bne.n	8003976 <_malloc_r+0xda>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	3703      	adds	r7, #3
 80038f2:	1aff      	subs	r7, r7, r3
 80038f4:	2303      	movs	r3, #3
 80038f6:	439f      	bics	r7, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	2f0c      	cmp	r7, #12
 80038fc:	d200      	bcs.n	8003900 <_malloc_r+0x64>
 80038fe:	270c      	movs	r7, #12
 8003900:	0039      	movs	r1, r7
 8003902:	0030      	movs	r0, r6
 8003904:	f7ff ffa8 	bl	8003858 <sbrk_aligned>
 8003908:	1c43      	adds	r3, r0, #1
 800390a:	d034      	beq.n	8003976 <_malloc_r+0xda>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	19df      	adds	r7, r3, r7
 8003910:	6027      	str	r7, [r4, #0]
 8003912:	e013      	b.n	800393c <_malloc_r+0xa0>
 8003914:	2b00      	cmp	r3, #0
 8003916:	dacb      	bge.n	80038b0 <_malloc_r+0x14>
 8003918:	230c      	movs	r3, #12
 800391a:	2500      	movs	r5, #0
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	0028      	movs	r0, r5
 8003920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	1bd1      	subs	r1, r2, r7
 8003926:	d420      	bmi.n	800396a <_malloc_r+0xce>
 8003928:	290b      	cmp	r1, #11
 800392a:	d917      	bls.n	800395c <_malloc_r+0xc0>
 800392c:	19e2      	adds	r2, r4, r7
 800392e:	6027      	str	r7, [r4, #0]
 8003930:	42a3      	cmp	r3, r4
 8003932:	d111      	bne.n	8003958 <_malloc_r+0xbc>
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	6863      	ldr	r3, [r4, #4]
 8003938:	6011      	str	r1, [r2, #0]
 800393a:	6053      	str	r3, [r2, #4]
 800393c:	0030      	movs	r0, r6
 800393e:	0025      	movs	r5, r4
 8003940:	f000 f86c 	bl	8003a1c <__malloc_unlock>
 8003944:	2207      	movs	r2, #7
 8003946:	350b      	adds	r5, #11
 8003948:	1d23      	adds	r3, r4, #4
 800394a:	4395      	bics	r5, r2
 800394c:	1aea      	subs	r2, r5, r3
 800394e:	429d      	cmp	r5, r3
 8003950:	d0e5      	beq.n	800391e <_malloc_r+0x82>
 8003952:	1b5b      	subs	r3, r3, r5
 8003954:	50a3      	str	r3, [r4, r2]
 8003956:	e7e2      	b.n	800391e <_malloc_r+0x82>
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	e7ec      	b.n	8003936 <_malloc_r+0x9a>
 800395c:	6862      	ldr	r2, [r4, #4]
 800395e:	42a3      	cmp	r3, r4
 8003960:	d101      	bne.n	8003966 <_malloc_r+0xca>
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	e7ea      	b.n	800393c <_malloc_r+0xa0>
 8003966:	605a      	str	r2, [r3, #4]
 8003968:	e7e8      	b.n	800393c <_malloc_r+0xa0>
 800396a:	0023      	movs	r3, r4
 800396c:	6864      	ldr	r4, [r4, #4]
 800396e:	e7a7      	b.n	80038c0 <_malloc_r+0x24>
 8003970:	002c      	movs	r4, r5
 8003972:	686d      	ldr	r5, [r5, #4]
 8003974:	e7af      	b.n	80038d6 <_malloc_r+0x3a>
 8003976:	230c      	movs	r3, #12
 8003978:	0030      	movs	r0, r6
 800397a:	6033      	str	r3, [r6, #0]
 800397c:	f000 f84e 	bl	8003a1c <__malloc_unlock>
 8003980:	e7cd      	b.n	800391e <_malloc_r+0x82>
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	200003ac 	.word	0x200003ac

08003988 <_realloc_r>:
 8003988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800398a:	0007      	movs	r7, r0
 800398c:	000e      	movs	r6, r1
 800398e:	0014      	movs	r4, r2
 8003990:	2900      	cmp	r1, #0
 8003992:	d105      	bne.n	80039a0 <_realloc_r+0x18>
 8003994:	0011      	movs	r1, r2
 8003996:	f7ff ff81 	bl	800389c <_malloc_r>
 800399a:	0005      	movs	r5, r0
 800399c:	0028      	movs	r0, r5
 800399e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039a0:	2a00      	cmp	r2, #0
 80039a2:	d103      	bne.n	80039ac <_realloc_r+0x24>
 80039a4:	f7ff ff0e 	bl	80037c4 <_free_r>
 80039a8:	0025      	movs	r5, r4
 80039aa:	e7f7      	b.n	800399c <_realloc_r+0x14>
 80039ac:	f000 f83e 	bl	8003a2c <_malloc_usable_size_r>
 80039b0:	9001      	str	r0, [sp, #4]
 80039b2:	4284      	cmp	r4, r0
 80039b4:	d803      	bhi.n	80039be <_realloc_r+0x36>
 80039b6:	0035      	movs	r5, r6
 80039b8:	0843      	lsrs	r3, r0, #1
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	d3ee      	bcc.n	800399c <_realloc_r+0x14>
 80039be:	0021      	movs	r1, r4
 80039c0:	0038      	movs	r0, r7
 80039c2:	f7ff ff6b 	bl	800389c <_malloc_r>
 80039c6:	1e05      	subs	r5, r0, #0
 80039c8:	d0e8      	beq.n	800399c <_realloc_r+0x14>
 80039ca:	9b01      	ldr	r3, [sp, #4]
 80039cc:	0022      	movs	r2, r4
 80039ce:	429c      	cmp	r4, r3
 80039d0:	d900      	bls.n	80039d4 <_realloc_r+0x4c>
 80039d2:	001a      	movs	r2, r3
 80039d4:	0031      	movs	r1, r6
 80039d6:	0028      	movs	r0, r5
 80039d8:	f7ff fed7 	bl	800378a <memcpy>
 80039dc:	0031      	movs	r1, r6
 80039de:	0038      	movs	r0, r7
 80039e0:	f7ff fef0 	bl	80037c4 <_free_r>
 80039e4:	e7da      	b.n	800399c <_realloc_r+0x14>
	...

080039e8 <_sbrk_r>:
 80039e8:	2300      	movs	r3, #0
 80039ea:	b570      	push	{r4, r5, r6, lr}
 80039ec:	4d06      	ldr	r5, [pc, #24]	; (8003a08 <_sbrk_r+0x20>)
 80039ee:	0004      	movs	r4, r0
 80039f0:	0008      	movs	r0, r1
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	f7fd fa80 	bl	8000ef8 <_sbrk>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d103      	bne.n	8003a04 <_sbrk_r+0x1c>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d000      	beq.n	8003a04 <_sbrk_r+0x1c>
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	200003b4 	.word	0x200003b4

08003a0c <__malloc_lock>:
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4802      	ldr	r0, [pc, #8]	; (8003a18 <__malloc_lock+0xc>)
 8003a10:	f000 f814 	bl	8003a3c <__retarget_lock_acquire_recursive>
 8003a14:	bd10      	pop	{r4, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	200003b8 	.word	0x200003b8

08003a1c <__malloc_unlock>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4802      	ldr	r0, [pc, #8]	; (8003a28 <__malloc_unlock+0xc>)
 8003a20:	f000 f80d 	bl	8003a3e <__retarget_lock_release_recursive>
 8003a24:	bd10      	pop	{r4, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	200003b8 	.word	0x200003b8

08003a2c <_malloc_usable_size_r>:
 8003a2c:	1f0b      	subs	r3, r1, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1f18      	subs	r0, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da01      	bge.n	8003a3a <_malloc_usable_size_r+0xe>
 8003a36:	580b      	ldr	r3, [r1, r0]
 8003a38:	18c0      	adds	r0, r0, r3
 8003a3a:	4770      	bx	lr

08003a3c <__retarget_lock_acquire_recursive>:
 8003a3c:	4770      	bx	lr

08003a3e <__retarget_lock_release_recursive>:
 8003a3e:	4770      	bx	lr

08003a40 <_init>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr

08003a4c <_fini>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr
