
stm32c0_adc_scan_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ffc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d0  080041d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080041d0  080041d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041d0  080041d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080041d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000010  080041e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080041e8  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2ed  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002496  00000000  00000000  0002d325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000305c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b50  00000000  00000000  00031288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dfe  00000000  00000000  00045dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080728  00000000  00000000  00056bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d72fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  000d7350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040a4 	.word	0x080040a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080040a4 	.word	0x080040a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0047      	lsls	r7, r0, #1
 800022e:	1c0c      	adds	r4, r1, #0
 8000230:	0a6d      	lsrs	r5, r5, #9
 8000232:	0e3f      	lsrs	r7, r7, #24
 8000234:	0fc6      	lsrs	r6, r0, #31
 8000236:	2f00      	cmp	r7, #0
 8000238:	d100      	bne.n	800023c <__aeabi_fdiv+0x1c>
 800023a:	e070      	b.n	800031e <__aeabi_fdiv+0xfe>
 800023c:	2fff      	cmp	r7, #255	; 0xff
 800023e:	d100      	bne.n	8000242 <__aeabi_fdiv+0x22>
 8000240:	e075      	b.n	800032e <__aeabi_fdiv+0x10e>
 8000242:	00eb      	lsls	r3, r5, #3
 8000244:	2580      	movs	r5, #128	; 0x80
 8000246:	04ed      	lsls	r5, r5, #19
 8000248:	431d      	orrs	r5, r3
 800024a:	2300      	movs	r3, #0
 800024c:	4699      	mov	r9, r3
 800024e:	469a      	mov	sl, r3
 8000250:	3f7f      	subs	r7, #127	; 0x7f
 8000252:	0260      	lsls	r0, r4, #9
 8000254:	0a43      	lsrs	r3, r0, #9
 8000256:	4698      	mov	r8, r3
 8000258:	0063      	lsls	r3, r4, #1
 800025a:	0e1b      	lsrs	r3, r3, #24
 800025c:	0fe4      	lsrs	r4, r4, #31
 800025e:	2b00      	cmp	r3, #0
 8000260:	d04e      	beq.n	8000300 <__aeabi_fdiv+0xe0>
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d046      	beq.n	80002f4 <__aeabi_fdiv+0xd4>
 8000266:	4642      	mov	r2, r8
 8000268:	00d0      	lsls	r0, r2, #3
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	04d2      	lsls	r2, r2, #19
 800026e:	4302      	orrs	r2, r0
 8000270:	4690      	mov	r8, r2
 8000272:	2200      	movs	r2, #0
 8000274:	3b7f      	subs	r3, #127	; 0x7f
 8000276:	0031      	movs	r1, r6
 8000278:	1aff      	subs	r7, r7, r3
 800027a:	464b      	mov	r3, r9
 800027c:	4061      	eors	r1, r4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4313      	orrs	r3, r2
 8000282:	2b0f      	cmp	r3, #15
 8000284:	d900      	bls.n	8000288 <__aeabi_fdiv+0x68>
 8000286:	e0b5      	b.n	80003f4 <__aeabi_fdiv+0x1d4>
 8000288:	486e      	ldr	r0, [pc, #440]	; (8000444 <__aeabi_fdiv+0x224>)
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	58c3      	ldr	r3, [r0, r3]
 800028e:	469f      	mov	pc, r3
 8000290:	2300      	movs	r3, #0
 8000292:	4698      	mov	r8, r3
 8000294:	0026      	movs	r6, r4
 8000296:	4645      	mov	r5, r8
 8000298:	4692      	mov	sl, r2
 800029a:	4653      	mov	r3, sl
 800029c:	2b02      	cmp	r3, #2
 800029e:	d100      	bne.n	80002a2 <__aeabi_fdiv+0x82>
 80002a0:	e089      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x88>
 80002a6:	e09e      	b.n	80003e6 <__aeabi_fdiv+0x1c6>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d018      	beq.n	80002de <__aeabi_fdiv+0xbe>
 80002ac:	003b      	movs	r3, r7
 80002ae:	337f      	adds	r3, #127	; 0x7f
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	dd69      	ble.n	8000388 <__aeabi_fdiv+0x168>
 80002b4:	076a      	lsls	r2, r5, #29
 80002b6:	d004      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002b8:	220f      	movs	r2, #15
 80002ba:	402a      	ands	r2, r5
 80002bc:	2a04      	cmp	r2, #4
 80002be:	d000      	beq.n	80002c2 <__aeabi_fdiv+0xa2>
 80002c0:	3504      	adds	r5, #4
 80002c2:	012a      	lsls	r2, r5, #4
 80002c4:	d503      	bpl.n	80002ce <__aeabi_fdiv+0xae>
 80002c6:	4b60      	ldr	r3, [pc, #384]	; (8000448 <__aeabi_fdiv+0x228>)
 80002c8:	401d      	ands	r5, r3
 80002ca:	003b      	movs	r3, r7
 80002cc:	3380      	adds	r3, #128	; 0x80
 80002ce:	2bfe      	cmp	r3, #254	; 0xfe
 80002d0:	dd00      	ble.n	80002d4 <__aeabi_fdiv+0xb4>
 80002d2:	e070      	b.n	80003b6 <__aeabi_fdiv+0x196>
 80002d4:	01ad      	lsls	r5, r5, #6
 80002d6:	0a6d      	lsrs	r5, r5, #9
 80002d8:	b2d8      	uxtb	r0, r3
 80002da:	e002      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80002dc:	000e      	movs	r6, r1
 80002de:	2000      	movs	r0, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	05c0      	lsls	r0, r0, #23
 80002e4:	4328      	orrs	r0, r5
 80002e6:	07f6      	lsls	r6, r6, #31
 80002e8:	4330      	orrs	r0, r6
 80002ea:	bce0      	pop	{r5, r6, r7}
 80002ec:	46ba      	mov	sl, r7
 80002ee:	46b1      	mov	r9, r6
 80002f0:	46a8      	mov	r8, r5
 80002f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f4:	4643      	mov	r3, r8
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d13f      	bne.n	800037a <__aeabi_fdiv+0x15a>
 80002fa:	2202      	movs	r2, #2
 80002fc:	3fff      	subs	r7, #255	; 0xff
 80002fe:	e003      	b.n	8000308 <__aeabi_fdiv+0xe8>
 8000300:	4643      	mov	r3, r8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d12d      	bne.n	8000362 <__aeabi_fdiv+0x142>
 8000306:	2201      	movs	r2, #1
 8000308:	0031      	movs	r1, r6
 800030a:	464b      	mov	r3, r9
 800030c:	4061      	eors	r1, r4
 800030e:	b2c9      	uxtb	r1, r1
 8000310:	4313      	orrs	r3, r2
 8000312:	2b0f      	cmp	r3, #15
 8000314:	d834      	bhi.n	8000380 <__aeabi_fdiv+0x160>
 8000316:	484d      	ldr	r0, [pc, #308]	; (800044c <__aeabi_fdiv+0x22c>)
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	58c3      	ldr	r3, [r0, r3]
 800031c:	469f      	mov	pc, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d113      	bne.n	800034a <__aeabi_fdiv+0x12a>
 8000322:	2304      	movs	r3, #4
 8000324:	4699      	mov	r9, r3
 8000326:	3b03      	subs	r3, #3
 8000328:	2700      	movs	r7, #0
 800032a:	469a      	mov	sl, r3
 800032c:	e791      	b.n	8000252 <__aeabi_fdiv+0x32>
 800032e:	2d00      	cmp	r5, #0
 8000330:	d105      	bne.n	800033e <__aeabi_fdiv+0x11e>
 8000332:	2308      	movs	r3, #8
 8000334:	4699      	mov	r9, r3
 8000336:	3b06      	subs	r3, #6
 8000338:	27ff      	movs	r7, #255	; 0xff
 800033a:	469a      	mov	sl, r3
 800033c:	e789      	b.n	8000252 <__aeabi_fdiv+0x32>
 800033e:	230c      	movs	r3, #12
 8000340:	4699      	mov	r9, r3
 8000342:	3b09      	subs	r3, #9
 8000344:	27ff      	movs	r7, #255	; 0xff
 8000346:	469a      	mov	sl, r3
 8000348:	e783      	b.n	8000252 <__aeabi_fdiv+0x32>
 800034a:	0028      	movs	r0, r5
 800034c:	f000 f8c2 	bl	80004d4 <__clzsi2>
 8000350:	2776      	movs	r7, #118	; 0x76
 8000352:	1f43      	subs	r3, r0, #5
 8000354:	409d      	lsls	r5, r3
 8000356:	2300      	movs	r3, #0
 8000358:	427f      	negs	r7, r7
 800035a:	4699      	mov	r9, r3
 800035c:	469a      	mov	sl, r3
 800035e:	1a3f      	subs	r7, r7, r0
 8000360:	e777      	b.n	8000252 <__aeabi_fdiv+0x32>
 8000362:	4640      	mov	r0, r8
 8000364:	f000 f8b6 	bl	80004d4 <__clzsi2>
 8000368:	4642      	mov	r2, r8
 800036a:	1f43      	subs	r3, r0, #5
 800036c:	409a      	lsls	r2, r3
 800036e:	2376      	movs	r3, #118	; 0x76
 8000370:	425b      	negs	r3, r3
 8000372:	4690      	mov	r8, r2
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	2200      	movs	r2, #0
 8000378:	e77d      	b.n	8000276 <__aeabi_fdiv+0x56>
 800037a:	23ff      	movs	r3, #255	; 0xff
 800037c:	2203      	movs	r2, #3
 800037e:	e77a      	b.n	8000276 <__aeabi_fdiv+0x56>
 8000380:	000e      	movs	r6, r1
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	2500      	movs	r5, #0
 8000386:	e7ac      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000388:	2001      	movs	r0, #1
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	281b      	cmp	r0, #27
 800038e:	dca6      	bgt.n	80002de <__aeabi_fdiv+0xbe>
 8000390:	379e      	adds	r7, #158	; 0x9e
 8000392:	002a      	movs	r2, r5
 8000394:	40bd      	lsls	r5, r7
 8000396:	40c2      	lsrs	r2, r0
 8000398:	1e6b      	subs	r3, r5, #1
 800039a:	419d      	sbcs	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	076b      	lsls	r3, r5, #29
 80003a0:	d004      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003a2:	230f      	movs	r3, #15
 80003a4:	402b      	ands	r3, r5
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d000      	beq.n	80003ac <__aeabi_fdiv+0x18c>
 80003aa:	3504      	adds	r5, #4
 80003ac:	016b      	lsls	r3, r5, #5
 80003ae:	d544      	bpl.n	800043a <__aeabi_fdiv+0x21a>
 80003b0:	2001      	movs	r0, #1
 80003b2:	2500      	movs	r5, #0
 80003b4:	e795      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003b6:	20ff      	movs	r0, #255	; 0xff
 80003b8:	2500      	movs	r5, #0
 80003ba:	e792      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003bc:	2580      	movs	r5, #128	; 0x80
 80003be:	2600      	movs	r6, #0
 80003c0:	20ff      	movs	r0, #255	; 0xff
 80003c2:	03ed      	lsls	r5, r5, #15
 80003c4:	e78d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003c6:	2300      	movs	r3, #0
 80003c8:	4698      	mov	r8, r3
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	03c0      	lsls	r0, r0, #15
 80003ce:	4205      	tst	r5, r0
 80003d0:	d009      	beq.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d2:	4643      	mov	r3, r8
 80003d4:	4203      	tst	r3, r0
 80003d6:	d106      	bne.n	80003e6 <__aeabi_fdiv+0x1c6>
 80003d8:	4645      	mov	r5, r8
 80003da:	4305      	orrs	r5, r0
 80003dc:	026d      	lsls	r5, r5, #9
 80003de:	0026      	movs	r6, r4
 80003e0:	20ff      	movs	r0, #255	; 0xff
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	e77d      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003e6:	2080      	movs	r0, #128	; 0x80
 80003e8:	03c0      	lsls	r0, r0, #15
 80003ea:	4305      	orrs	r5, r0
 80003ec:	026d      	lsls	r5, r5, #9
 80003ee:	20ff      	movs	r0, #255	; 0xff
 80003f0:	0a6d      	lsrs	r5, r5, #9
 80003f2:	e776      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 80003f4:	4642      	mov	r2, r8
 80003f6:	016b      	lsls	r3, r5, #5
 80003f8:	0150      	lsls	r0, r2, #5
 80003fa:	4283      	cmp	r3, r0
 80003fc:	d219      	bcs.n	8000432 <__aeabi_fdiv+0x212>
 80003fe:	221b      	movs	r2, #27
 8000400:	2500      	movs	r5, #0
 8000402:	3f01      	subs	r7, #1
 8000404:	2601      	movs	r6, #1
 8000406:	001c      	movs	r4, r3
 8000408:	006d      	lsls	r5, r5, #1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	2c00      	cmp	r4, #0
 800040e:	db01      	blt.n	8000414 <__aeabi_fdiv+0x1f4>
 8000410:	4298      	cmp	r0, r3
 8000412:	d801      	bhi.n	8000418 <__aeabi_fdiv+0x1f8>
 8000414:	1a1b      	subs	r3, r3, r0
 8000416:	4335      	orrs	r5, r6
 8000418:	3a01      	subs	r2, #1
 800041a:	2a00      	cmp	r2, #0
 800041c:	d1f3      	bne.n	8000406 <__aeabi_fdiv+0x1e6>
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4193      	sbcs	r3, r2
 8000422:	431d      	orrs	r5, r3
 8000424:	003b      	movs	r3, r7
 8000426:	337f      	adds	r3, #127	; 0x7f
 8000428:	000e      	movs	r6, r1
 800042a:	2b00      	cmp	r3, #0
 800042c:	dd00      	ble.n	8000430 <__aeabi_fdiv+0x210>
 800042e:	e741      	b.n	80002b4 <__aeabi_fdiv+0x94>
 8000430:	e7aa      	b.n	8000388 <__aeabi_fdiv+0x168>
 8000432:	221a      	movs	r2, #26
 8000434:	2501      	movs	r5, #1
 8000436:	1a1b      	subs	r3, r3, r0
 8000438:	e7e4      	b.n	8000404 <__aeabi_fdiv+0x1e4>
 800043a:	01ad      	lsls	r5, r5, #6
 800043c:	2000      	movs	r0, #0
 800043e:	0a6d      	lsrs	r5, r5, #9
 8000440:	e74f      	b.n	80002e2 <__aeabi_fdiv+0xc2>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	080040bc 	.word	0x080040bc
 8000448:	f7ffffff 	.word	0xf7ffffff
 800044c:	080040fc 	.word	0x080040fc

08000450 <__aeabi_ui2f>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	1e05      	subs	r5, r0, #0
 8000454:	d00e      	beq.n	8000474 <__aeabi_ui2f+0x24>
 8000456:	f000 f83d 	bl	80004d4 <__clzsi2>
 800045a:	239e      	movs	r3, #158	; 0x9e
 800045c:	0004      	movs	r4, r0
 800045e:	1a1b      	subs	r3, r3, r0
 8000460:	2b96      	cmp	r3, #150	; 0x96
 8000462:	dc0c      	bgt.n	800047e <__aeabi_ui2f+0x2e>
 8000464:	2808      	cmp	r0, #8
 8000466:	dd01      	ble.n	800046c <__aeabi_ui2f+0x1c>
 8000468:	3c08      	subs	r4, #8
 800046a:	40a5      	lsls	r5, r4
 800046c:	026d      	lsls	r5, r5, #9
 800046e:	0a6d      	lsrs	r5, r5, #9
 8000470:	b2d8      	uxtb	r0, r3
 8000472:	e001      	b.n	8000478 <__aeabi_ui2f+0x28>
 8000474:	2000      	movs	r0, #0
 8000476:	2500      	movs	r5, #0
 8000478:	05c0      	lsls	r0, r0, #23
 800047a:	4328      	orrs	r0, r5
 800047c:	bd70      	pop	{r4, r5, r6, pc}
 800047e:	2b99      	cmp	r3, #153	; 0x99
 8000480:	dd09      	ble.n	8000496 <__aeabi_ui2f+0x46>
 8000482:	0002      	movs	r2, r0
 8000484:	0029      	movs	r1, r5
 8000486:	321b      	adds	r2, #27
 8000488:	4091      	lsls	r1, r2
 800048a:	1e4a      	subs	r2, r1, #1
 800048c:	4191      	sbcs	r1, r2
 800048e:	2205      	movs	r2, #5
 8000490:	1a12      	subs	r2, r2, r0
 8000492:	40d5      	lsrs	r5, r2
 8000494:	430d      	orrs	r5, r1
 8000496:	2c05      	cmp	r4, #5
 8000498:	dc12      	bgt.n	80004c0 <__aeabi_ui2f+0x70>
 800049a:	0029      	movs	r1, r5
 800049c:	4e0c      	ldr	r6, [pc, #48]	; (80004d0 <__aeabi_ui2f+0x80>)
 800049e:	4031      	ands	r1, r6
 80004a0:	076a      	lsls	r2, r5, #29
 80004a2:	d009      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004a4:	200f      	movs	r0, #15
 80004a6:	4028      	ands	r0, r5
 80004a8:	2804      	cmp	r0, #4
 80004aa:	d005      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004ac:	3104      	adds	r1, #4
 80004ae:	014a      	lsls	r2, r1, #5
 80004b0:	d502      	bpl.n	80004b8 <__aeabi_ui2f+0x68>
 80004b2:	239f      	movs	r3, #159	; 0x9f
 80004b4:	4031      	ands	r1, r6
 80004b6:	1b1b      	subs	r3, r3, r4
 80004b8:	0189      	lsls	r1, r1, #6
 80004ba:	0a4d      	lsrs	r5, r1, #9
 80004bc:	b2d8      	uxtb	r0, r3
 80004be:	e7db      	b.n	8000478 <__aeabi_ui2f+0x28>
 80004c0:	1f62      	subs	r2, r4, #5
 80004c2:	4095      	lsls	r5, r2
 80004c4:	0029      	movs	r1, r5
 80004c6:	4e02      	ldr	r6, [pc, #8]	; (80004d0 <__aeabi_ui2f+0x80>)
 80004c8:	4031      	ands	r1, r6
 80004ca:	076a      	lsls	r2, r5, #29
 80004cc:	d0f4      	beq.n	80004b8 <__aeabi_ui2f+0x68>
 80004ce:	e7e9      	b.n	80004a4 <__aeabi_ui2f+0x54>
 80004d0:	fbffffff 	.word	0xfbffffff

080004d4 <__clzsi2>:
 80004d4:	211c      	movs	r1, #28
 80004d6:	2301      	movs	r3, #1
 80004d8:	041b      	lsls	r3, r3, #16
 80004da:	4298      	cmp	r0, r3
 80004dc:	d301      	bcc.n	80004e2 <__clzsi2+0xe>
 80004de:	0c00      	lsrs	r0, r0, #16
 80004e0:	3910      	subs	r1, #16
 80004e2:	0a1b      	lsrs	r3, r3, #8
 80004e4:	4298      	cmp	r0, r3
 80004e6:	d301      	bcc.n	80004ec <__clzsi2+0x18>
 80004e8:	0a00      	lsrs	r0, r0, #8
 80004ea:	3908      	subs	r1, #8
 80004ec:	091b      	lsrs	r3, r3, #4
 80004ee:	4298      	cmp	r0, r3
 80004f0:	d301      	bcc.n	80004f6 <__clzsi2+0x22>
 80004f2:	0900      	lsrs	r0, r0, #4
 80004f4:	3904      	subs	r1, #4
 80004f6:	a202      	add	r2, pc, #8	; (adr r2, 8000500 <__clzsi2+0x2c>)
 80004f8:	5c10      	ldrb	r0, [r2, r0]
 80004fa:	1840      	adds	r0, r0, r1
 80004fc:	4770      	bx	lr
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	02020304 	.word	0x02020304
 8000504:	01010101 	.word	0x01010101
	...

08000510 <apInit>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  ledInit();
 8000514:	f000 f897 	bl	8000646 <ledInit>
  pwmInit();
 8000518:	f000 f902 	bl	8000720 <pwmInit>
  adcInit();
 800051c:	f000 f844 	bl	80005a8 <adcInit>
  buttonInit();
 8000520:	f000 f88b 	bl	800063a <buttonInit>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <apMain>:
* Inputs        : void
* Outputs       :
* Return        : void
*****************************************************************************/
void apMain(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
    }
    */

    //Non-Blocking & Encapsulation & Modularization
    ledSetDuty(_DEF_CH1, 100);
 8000532:	2164      	movs	r1, #100	; 0x64
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f8d7 	bl	80006e8 <ledSetDuty>

    if (millis() - pre_time >= 500)
 800053a:	f000 f937 	bl	80007ac <millis>
 800053e:	0002      	movs	r2, r0
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	1ad2      	subs	r2, r2, r3
 8000544:	23fa      	movs	r3, #250	; 0xfa
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	429a      	cmp	r2, r3
 800054a:	d306      	bcc.n	800055a <apMain+0x2e>
    {
      pre_time = millis();
 800054c:	f000 f92e 	bl	80007ac <millis>
 8000550:	0003      	movs	r3, r0
 8000552:	607b      	str	r3, [r7, #4]
      ledToggle(_DEF_CH1);
 8000554:	2000      	movs	r0, #0
 8000556:	f000 f8aa 	bl	80006ae <ledToggle>

    }

    adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.0f;
 800055a:	2000      	movs	r0, #0
 800055c:	f000 f852 	bl	8000604 <adcReadVoltage>
 8000560:	0003      	movs	r3, r0
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ff74 	bl	8000450 <__aeabi_ui2f>
 8000568:	1c03      	adds	r3, r0, #0
 800056a:	490c      	ldr	r1, [pc, #48]	; (800059c <apMain+0x70>)
 800056c:	1c18      	adds	r0, r3, #0
 800056e:	f7ff fe57 	bl	8000220 <__aeabi_fdiv>
 8000572:	1c03      	adds	r3, r0, #0
 8000574:	1c1a      	adds	r2, r3, #0
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <apMain+0x74>)
 8000578:	601a      	str	r2, [r3, #0]
    adc_vol_vref = (float)adcReadVoltage(_DEF_CH3) / 100.0f;
 800057a:	2002      	movs	r0, #2
 800057c:	f000 f842 	bl	8000604 <adcReadVoltage>
 8000580:	0003      	movs	r3, r0
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff64 	bl	8000450 <__aeabi_ui2f>
 8000588:	1c03      	adds	r3, r0, #0
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <apMain+0x70>)
 800058c:	1c18      	adds	r0, r3, #0
 800058e:	f7ff fe47 	bl	8000220 <__aeabi_fdiv>
 8000592:	1c03      	adds	r3, r0, #0
 8000594:	1c1a      	adds	r2, r3, #0
 8000596:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <apMain+0x78>)
 8000598:	601a      	str	r2, [r3, #0]
    ledSetDuty(_DEF_CH1, 100);
 800059a:	e7ca      	b.n	8000532 <apMain+0x6>
 800059c:	42c80000 	.word	0x42c80000
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	20000030 	.word	0x20000030

080005a8 <adcInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool adcInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  HAL_ADCEx_Calibration_Start(&hadc1);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <adcInit+0x20>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fc48 	bl	8001e44 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);
 80005b4:	4905      	ldr	r1, [pc, #20]	; (80005cc <adcInit+0x24>)
 80005b6:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <adcInit+0x20>)
 80005b8:	2203      	movs	r2, #3
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 ffe2 	bl	8001584 <HAL_ADC_Start_DMA>
  return true;
 80005c0:	2301      	movs	r3, #1
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000003c 	.word	0x2000003c
 80005cc:	20000034 	.word	0x20000034

080005d0 <adcRead>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint16_t
*****************************************************************************/
uint16_t adcRead(uint8_t ch)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	0002      	movs	r2, r0
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	701a      	strb	r2, [r3, #0]
  uint16_t ret = 0;
 80005dc:	200e      	movs	r0, #14
 80005de:	183b      	adds	r3, r7, r0
 80005e0:	2200      	movs	r2, #0
 80005e2:	801a      	strh	r2, [r3, #0]

  ret = adc_data[ch];
 80005e4:	1dfb      	adds	r3, r7, #7
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	183b      	adds	r3, r7, r0
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <adcRead+0x30>)
 80005ec:	0049      	lsls	r1, r1, #1
 80005ee:	5a8a      	ldrh	r2, [r1, r2]
 80005f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80005f2:	183b      	adds	r3, r7, r0
 80005f4:	881b      	ldrh	r3, [r3, #0]
}
 80005f6:	0018      	movs	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b004      	add	sp, #16
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000034 	.word	0x20000034

08000604 <adcReadVoltage>:
* Inputs        : uint8_t
* Outputs       :
* Return        : uint32_t
*****************************************************************************/
uint32_t adcReadVoltage(uint8_t ch)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	0002      	movs	r2, r0
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	701a      	strb	r2, [r3, #0]
  uint32_t ret;
  uint32_t adc_data;

  adc_data = adcRead(ch);
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ffdb 	bl	80005d0 <adcRead>
 800061a:	0003      	movs	r3, r0
 800061c:	60fb      	str	r3, [r7, #12]
  ret = (330 * adc_data) / 4096;
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	0013      	movs	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	189b      	adds	r3, r3, r2
 8000626:	015a      	lsls	r2, r3, #5
 8000628:	189b      	adds	r3, r3, r2
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	0b1b      	lsrs	r3, r3, #12
 800062e:	60bb      	str	r3, [r7, #8]

  return ret;
 8000630:	68bb      	ldr	r3, [r7, #8]
}
 8000632:	0018      	movs	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	b004      	add	sp, #16
 8000638:	bd80      	pop	{r7, pc}

0800063a <buttonInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool buttonInit(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  return true;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <ledInit>:
* Inputs        : void
* Outputs       : true/false
* Return        : bool
*****************************************************************************/
bool ledInit(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
  return true;
 800064a:	2301      	movs	r3, #1
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <ledOn>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOn(uint8_t ch)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	0002      	movs	r2, r0
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d109      	bne.n	800067c <ledOn+0x28>
  {
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
      pwmWrite(_DEF_CH1, 100 - led_duty[_DEF_CH1]);
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <ledOn+0x30>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b29b      	uxth	r3, r3
 8000672:	0019      	movs	r1, r3
 8000674:	2000      	movs	r0, #0
 8000676:	f000 f861 	bl	800073c <pwmWrite>
      break;
 800067a:	46c0      	nop			; (mov r8, r8)
  }
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000

08000688 <ledOff>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledOff(uint8_t ch)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	0002      	movs	r2, r0
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	701a      	strb	r2, [r3, #0]
  switch(ch)
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d104      	bne.n	80006a6 <ledOff+0x1e>
  {
    case _DEF_CH1:
      //HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
      pwmWrite(_DEF_CH1, 100);
 800069c:	2164      	movs	r1, #100	; 0x64
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f84c 	bl	800073c <pwmWrite>
      break;
 80006a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b002      	add	sp, #8
 80006ac:	bd80      	pop	{r7, pc}

080006ae <ledToggle>:
* Inputs        : ch
* Outputs       :
* Return        : void
*****************************************************************************/
void ledToggle(uint8_t ch)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	0002      	movs	r2, r0
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	701a      	strb	r2, [r3, #0]
  switch(ch)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10d      	bne.n	80006de <ledToggle+0x30>
  {
    case _DEF_CH1:
      //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
      if (pwmRead(_DEF_CH1) == 100)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f854 	bl	8000770 <pwmRead>
 80006c8:	0003      	movs	r3, r0
 80006ca:	2b64      	cmp	r3, #100	; 0x64
 80006cc:	d103      	bne.n	80006d6 <ledToggle+0x28>
      {
        ledOn(_DEF_CH1);
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff ffc0 	bl	8000654 <ledOn>
      }
      else
      {
        ledOff(_DEF_CH1);
      }
      break;
 80006d4:	e002      	b.n	80006dc <ledToggle+0x2e>
        ledOff(_DEF_CH1);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffd6 	bl	8000688 <ledOff>
      break;
 80006dc:	46c0      	nop			; (mov r8, r8)
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ledSetDuty>:
* Inputs        : ch, duty_data
* Outputs       :
* Return        : void
*****************************************************************************/
void ledSetDuty(uint8_t ch, uint16_t duty_data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	1c0a      	adds	r2, r1, #0
 80006f8:	801a      	strh	r2, [r3, #0]
  switch(ch)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d107      	bne.n	8000712 <ledSetDuty+0x2a>
  {
    case _DEF_CH1:
      led_duty[ch] = duty_data;
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <ledSetDuty+0x34>)
 8000708:	0052      	lsls	r2, r2, #1
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	8809      	ldrh	r1, [r1, #0]
 800070e:	52d1      	strh	r1, [r2, r3]
      break;
 8000710:	46c0      	nop			; (mov r8, r8)
  }

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000000 	.word	0x20000000

08000720 <pwmInit>:
* Inputs        : void
* Outputs       : true
* Return        : bool
*****************************************************************************/
bool pwmInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <pwmInit+0x18>)
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f002 fd11 	bl	8003150 <HAL_TIM_PWM_Start>

  return true;
 800072e:	2301      	movs	r3, #1
}
 8000730:	0018      	movs	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	200000fc 	.word	0x200000fc

0800073c <pwmWrite>:
* Inputs        : ch, duty
* Outputs       : -
* Return        : void
*****************************************************************************/
void pwmWrite(uint8_t ch, uint16_t duty)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	1c0a      	adds	r2, r1, #0
 800074c:	801a      	strh	r2, [r3, #0]
  switch(ch)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d105      	bne.n	8000762 <pwmWrite+0x26>
  {
    case _DEF_CH1:
      htim1.Instance->CCR1 = duty;
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <pwmWrite+0x30>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	8812      	ldrh	r2, [r2, #0]
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000760:	46c0      	nop			; (mov r8, r8)
  }
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	200000fc 	.word	0x200000fc

08000770 <pwmRead>:
* Inputs        : ch
* Outputs       : pwm_data
* Return        : uint16_t
*****************************************************************************/
uint16_t pwmRead(uint8_t ch)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	701a      	strb	r2, [r3, #0]
  uint16_t pwm_data = 0;
 800077c:	210e      	movs	r1, #14
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	801a      	strh	r2, [r3, #0]


  switch(ch)
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d105      	bne.n	8000798 <pwmRead+0x28>
  {
    case _DEF_CH1:
      pwm_data = htim1.Instance->CCR1;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <pwmRead+0x38>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	187b      	adds	r3, r7, r1
 8000794:	801a      	strh	r2, [r3, #0]
      break;
 8000796:	46c0      	nop			; (mov r8, r8)
  }

  return pwm_data;
 8000798:	230e      	movs	r3, #14
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	881b      	ldrh	r3, [r3, #0]

}
 800079e:	0018      	movs	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b004      	add	sp, #16
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	200000fc 	.word	0x200000fc

080007ac <millis>:
{
  HAL_Delay(time_ms);
}

uint32_t millis(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80007b0:	f000 fbbe 	bl	8000f30 <HAL_GetTick>
 80007b4:	0003      	movs	r3, r0
}
 80007b6:	0018      	movs	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fb3c 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f80d 	bl	80007e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f9c4 	bl	8000b54 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007cc:	f000 f8e2 	bl	8000994 <MX_TIM1_Init>
  MX_DMA_Init();
 80007d0:	f000 f9aa 	bl	8000b28 <MX_DMA_Init>
  MX_ADC1_Init();
 80007d4:	f000 f848 	bl	8000868 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 80007d8:	f7ff fe9a 	bl	8000510 <apInit>
  apMain();
 80007dc:	f7ff fea6 	bl	800052c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x24>

080007e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e2:	b590      	push	{r4, r7, lr}
 80007e4:	b08d      	sub	sp, #52	; 0x34
 80007e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e8:	2414      	movs	r4, #20
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	231c      	movs	r3, #28
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f003 fc4e 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	003b      	movs	r3, r7
 80007fa:	0018      	movs	r0, r3
 80007fc:	2314      	movs	r3, #20
 80007fe:	001a      	movs	r2, r3
 8000800:	2100      	movs	r1, #0
 8000802:	f003 fc47 	bl	8004094 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2202      	movs	r2, #2
 800080a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	0052      	lsls	r2, r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	193b      	adds	r3, r7, r4
 800081c:	2240      	movs	r2, #64	; 0x40
 800081e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	f001 ffa8 	bl	8002778 <HAL_RCC_OscConfig>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800082c:	f000 f9a8 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	003b      	movs	r3, r7
 8000832:	2207      	movs	r2, #7
 8000834:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000836:	003b      	movs	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	003b      	movs	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000842:	003b      	movs	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000848:	003b      	movs	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800084e:	003b      	movs	r3, r7
 8000850:	2101      	movs	r1, #1
 8000852:	0018      	movs	r0, r3
 8000854:	f002 f98a 	bl	8002b6c <HAL_RCC_ClockConfig>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800085c:	f000 f990 	bl	8000b80 <Error_Handler>
  }
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b00d      	add	sp, #52	; 0x34
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	0018      	movs	r0, r3
 8000872:	230c      	movs	r3, #12
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 fc0c 	bl	8004094 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087c:	4b40      	ldr	r3, [pc, #256]	; (8000980 <MX_ADC1_Init+0x118>)
 800087e:	4a41      	ldr	r2, [pc, #260]	; (8000984 <MX_ADC1_Init+0x11c>)
 8000880:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000882:	4b3f      	ldr	r3, [pc, #252]	; (8000980 <MX_ADC1_Init+0x118>)
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	05d2      	lsls	r2, r2, #23
 8000888:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088a:	4b3d      	ldr	r3, [pc, #244]	; (8000980 <MX_ADC1_Init+0x118>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000890:	4b3b      	ldr	r3, [pc, #236]	; (8000980 <MX_ADC1_Init+0x118>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000896:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <MX_ADC1_Init+0x118>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	0392      	lsls	r2, r2, #14
 800089c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800089e:	4b38      	ldr	r3, [pc, #224]	; (8000980 <MX_ADC1_Init+0x118>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a4:	4b36      	ldr	r3, [pc, #216]	; (8000980 <MX_ADC1_Init+0x118>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008aa:	4b35      	ldr	r3, [pc, #212]	; (8000980 <MX_ADC1_Init+0x118>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b0:	4b33      	ldr	r3, [pc, #204]	; (8000980 <MX_ADC1_Init+0x118>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 80008b6:	4b32      	ldr	r3, [pc, #200]	; (8000980 <MX_ADC1_Init+0x118>)
 80008b8:	2203      	movs	r2, #3
 80008ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <MX_ADC1_Init+0x118>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_ADC1_Init+0x118>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <MX_ADC1_Init+0x118>)
 80008ca:	222c      	movs	r2, #44	; 0x2c
 80008cc:	2101      	movs	r1, #1
 80008ce:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d0:	4b2b      	ldr	r3, [pc, #172]	; (8000980 <MX_ADC1_Init+0x118>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_ADC1_Init+0x118>)
 80008d8:	2207      	movs	r2, #7
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_ADC1_Init+0x118>)
 80008de:	2200      	movs	r2, #0
 80008e0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_ADC1_Init+0x118>)
 80008e4:	223c      	movs	r2, #60	; 0x3c
 80008e6:	2101      	movs	r1, #1
 80008e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_ADC1_Init+0x118>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_ADC1_Init+0x118>)
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <MX_ADC1_Init+0x118>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_ADC1_Init+0x118>)
 80008fe:	2200      	movs	r2, #0
 8000900:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <MX_ADC1_Init+0x118>)
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fc75 	bl	80011f4 <HAL_ADC_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800090e:	f000 f937 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_ADC1_Init+0x120>)
 8000916:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000924:	1d3a      	adds	r2, r7, #4
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <MX_ADC1_Init+0x118>)
 8000928:	0011      	movs	r1, r2
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fed0 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000934:	f000 f924 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4a14      	ldr	r2, [pc, #80]	; (800098c <MX_ADC1_Init+0x124>)
 800093c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2204      	movs	r2, #4
 8000942:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000944:	1d3a      	adds	r2, r7, #4
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_ADC1_Init+0x118>)
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fec0 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000954:	f000 f914 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <MX_ADC1_Init+0x128>)
 800095c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2208      	movs	r2, #8
 8000962:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	1d3a      	adds	r2, r7, #4
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_ADC1_Init+0x118>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f000 feb0 	bl	80016d0 <HAL_ADC_ConfigChannel>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000974:	f000 f904 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b004      	add	sp, #16
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000003c 	.word	0x2000003c
 8000984:	40012400 	.word	0x40012400
 8000988:	10000010 	.word	0x10000010
 800098c:	a4000200 	.word	0xa4000200
 8000990:	a8000400 	.word	0xa8000400

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	; 0x70
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	2360      	movs	r3, #96	; 0x60
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	0018      	movs	r0, r3
 80009a0:	2310      	movs	r3, #16
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f003 fb75 	bl	8004094 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009aa:	2354      	movs	r3, #84	; 0x54
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	230c      	movs	r3, #12
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fb6d 	bl	8004094 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	2338      	movs	r3, #56	; 0x38
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	231c      	movs	r3, #28
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 fb65 	bl	8004094 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2334      	movs	r3, #52	; 0x34
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f003 fb5e 	bl	8004094 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d8:	4b51      	ldr	r3, [pc, #324]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009da:	4a52      	ldr	r2, [pc, #328]	; (8000b24 <MX_TIM1_Init+0x190>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80009de:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009e0:	222f      	movs	r2, #47	; 0x2f
 80009e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80009ea:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009ec:	2263      	movs	r2, #99	; 0x63
 80009ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f6:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b48      	ldr	r3, [pc, #288]	; (8000b20 <MX_TIM1_Init+0x18c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a02:	4b47      	ldr	r3, [pc, #284]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f002 faeb 	bl	8002fe0 <HAL_TIM_Base_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a0e:	f000 f8b7 	bl	8000b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	2160      	movs	r1, #96	; 0x60
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	0152      	lsls	r2, r2, #5
 8000a1a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a1c:	187a      	adds	r2, r7, r1
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000a20:	0011      	movs	r1, r2
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fd6c 	bl	8003500 <HAL_TIM_ConfigClockSource>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a2c:	f000 f8a8 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fb2c 	bl	8003090 <HAL_TIM_PWM_Init>
 8000a38:	1e03      	subs	r3, r0, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a3c:	f000 f8a0 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2154      	movs	r1, #84	; 0x54
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f003 f9ee 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a64:	f000 f88c 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	2138      	movs	r1, #56	; 0x38
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2260      	movs	r2, #96	; 0x60
 8000a6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a94:	1879      	adds	r1, r7, r1
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fc30 	bl	8003300 <HAL_TIM_PWM_ConfigChannel>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000aa4:	f000 f86c 	bl	8000b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0492      	lsls	r2, r2, #18
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afa:	1d3a      	adds	r2, r7, #4
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f003 f9fd 	bl	8003f00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000b0a:	f000 f839 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <MX_TIM1_Init+0x18c>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 f909 	bl	8000d28 <HAL_TIM_MspPostInit>

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b01c      	add	sp, #112	; 0x70
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	200000fc 	.word	0x200000fc
 8000b24:	40012c00 	.word	0x40012c00

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_DMA_Init+0x28>)
 8000b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_DMA_Init+0x28>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_DMA_Init+0x28>)
 8000b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4013      	ands	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40021000 	.word	0x40021000

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_GPIO_Init+0x28>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <MX_GPIO_Init+0x28>)
 8000b60:	2101      	movs	r1, #1
 8000b62:	430a      	orrs	r2, r1
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <MX_GPIO_Init+0x28>)
 8000b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40021000 	.word	0x40021000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	0549      	lsls	r1, r1, #21
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	055b      	lsls	r3, r3, #21
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b091      	sub	sp, #68	; 0x44
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	232c      	movs	r3, #44	; 0x2c
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	0018      	movs	r0, r3
 8000be2:	2314      	movs	r3, #20
 8000be4:	001a      	movs	r2, r3
 8000be6:	2100      	movs	r1, #0
 8000be8:	f003 fa54 	bl	8004094 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	2410      	movs	r4, #16
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	231c      	movs	r3, #28
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f003 fa4c 	bl	8004094 <memset>
  if(hadc->Instance==ADC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a35      	ldr	r2, [pc, #212]	; (8000cd8 <HAL_ADC_MspInit+0x104>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d164      	bne.n	8000cd0 <HAL_ADC_MspInit+0xfc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	01d2      	lsls	r2, r2, #7
 8000c0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 f8f4 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c20:	f7ff ffae 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c28:	4b2c      	ldr	r3, [pc, #176]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	0349      	lsls	r1, r1, #13
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	035b      	lsls	r3, r3, #13
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c44:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_ADC_MspInit+0x108>)
 8000c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c50:	2201      	movs	r2, #1
 8000c52:	4013      	ands	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c58:	212c      	movs	r1, #44	; 0x2c
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2210      	movs	r2, #16
 8000c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2203      	movs	r2, #3
 8000c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	187a      	adds	r2, r7, r1
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 fc0d 	bl	8002494 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0x110>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c82:	2205      	movs	r2, #5
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000caa:	2220      	movs	r2, #32
 8000cac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f001 fa4a 	bl	8002150 <HAL_DMA_Init>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000cc0:	f7ff ff5e 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000cc8:	651a      	str	r2, [r3, #80]	; 0x50
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_ADC_MspInit+0x10c>)
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b011      	add	sp, #68	; 0x44
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40012400 	.word	0x40012400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	200000a0 	.word	0x200000a0
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_TIM_Base_MspInit+0x38>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10d      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0109      	lsls	r1, r1, #4
 8000d04:	430a      	orrs	r2, r1
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_TIM_Base_MspInit+0x3c>)
 8000d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40012c00 	.word	0x40012c00
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	240c      	movs	r4, #12
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	2314      	movs	r3, #20
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f003 f9aa 	bl	8004094 <memset>
  if(htim->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_TIM_MspPostInit+0x70>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d122      	bne.n	8000d90 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_TIM_MspPostInit+0x74>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_TIM_MspPostInit+0x74>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_TIM_MspPostInit+0x74>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA5     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d62:	0021      	movs	r1, r4
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2220      	movs	r2, #32
 8000d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2205      	movs	r2, #5
 8000d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	23a0      	movs	r3, #160	; 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 fb82 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b009      	add	sp, #36	; 0x24
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40012c00 	.word	0x40012c00
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f8a4 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <SystemInit+0x14>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0512      	lsls	r2, r2, #20
 8000dda:	609a      	str	r2, [r3, #8]
#endif
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dee:	e003      	b.n	8000df8 <LoopCopyDataInit>

08000df0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000df2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000df4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000df6:	3104      	adds	r1, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <LoopForever+0xa>)
  ldr r3, =_edata
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <LoopForever+0xe>)
  adds r2, r0, r1
 8000dfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e00:	d3f6      	bcc.n	8000df0 <CopyDataInit>
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopForever+0x12>)
  b LoopFillZerobss
 8000e04:	e002      	b.n	8000e0c <LoopFillZerobss>

08000e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  str  r3, [r2]
 8000e08:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0a:	3204      	adds	r2, #4

08000e0c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <LoopForever+0x16>)
  cmp r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e10:	d3f9      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e12:	f7ff ffdd 	bl	8000dd0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e16:	f003 f919 	bl	800404c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff fccf 	bl	80007bc <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   r0, =_estack
 8000e20:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000e24:	080041d8 	.word	0x080041d8
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e2c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000e30:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000e34:	2000014c 	.word	0x2000014c

08000e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x3c>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Init+0x3c>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0049      	lsls	r1, r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f810 	bl	8000e7c <HAL_InitTick>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	e001      	b.n	8000e6c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e68:	f7ff fe90 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_InitTick+0x88>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02b      	beq.n	8000eec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_InitTick+0x8c>)
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_InitTick+0x88>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	23fa      	movs	r3, #250	; 0xfa
 8000ea0:	0098      	lsls	r0, r3, #2
 8000ea2:	f7ff f931 	bl	8000108 <__udivsi3>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	0020      	movs	r0, r4
 8000eac:	f7ff f92c 	bl	8000108 <__udivsi3>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 f93f 	bl	8002136 <HAL_SYSTICK_Config>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d112      	bne.n	8000ee2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d80a      	bhi.n	8000ed8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 f91e 	bl	800210c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_InitTick+0x90>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	e00d      	b.n	8000ef4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ed8:	230f      	movs	r3, #15
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e008      	b.n	8000ef4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
 8000eea:	e003      	b.n	8000ef4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eec:	230f      	movs	r3, #15
 8000eee:	18fb      	adds	r3, r7, r3
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ef4:	230f      	movs	r3, #15
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	781b      	ldrb	r3, [r3, #0]
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b005      	add	sp, #20
 8000f00:	bd90      	pop	{r4, r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	20000004 	.word	0x20000004
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_IncTick+0x18>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	18d2      	adds	r2, r2, r3
 8000f1e:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_IncTick+0x18>)
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000148 	.word	0x20000148
 8000f2c:	2000000c 	.word	0x2000000c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000148 	.word	0x20000148

08000f44 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f54:	401a      	ands	r2, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	601a      	str	r2, [r3, #0]
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	ff3fffff 	.word	0xff3fffff

08000f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	23c0      	movs	r3, #192	; 0xc0
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	4013      	ands	r3, r2
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	2104      	movs	r1, #4
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	43d2      	mvns	r2, r2
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2104      	movs	r1, #4
 8000faa:	400b      	ands	r3, r1
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4099      	lsls	r1, r3
 8000fb0:	000b      	movs	r3, r1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	2107      	movs	r1, #7
 8000fd6:	4091      	lsls	r1, r2
 8000fd8:	000a      	movs	r2, r1
 8000fda:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2104      	movs	r1, #4
 8000fe0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fe2:	40da      	lsrs	r2, r3
 8000fe4:	0013      	movs	r3, r2
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	23c0      	movs	r3, #192	; 0xc0
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	4013      	ands	r3, r2
 8001000:	d101      	bne.n	8001006 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001006:	2300      	movs	r3, #0
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}

08001010 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	211f      	movs	r1, #31
 8001024:	400a      	ands	r2, r1
 8001026:	210f      	movs	r1, #15
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0e9b      	lsrs	r3, r3, #26
 8001034:	210f      	movs	r1, #15
 8001036:	4019      	ands	r1, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	201f      	movs	r0, #31
 800103c:	4003      	ands	r3, r0
 800103e:	4099      	lsls	r1, r3
 8001040:	000b      	movs	r3, r1
 8001042:	431a      	orrs	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b004      	add	sp, #16
 800104e:	bd80      	pop	{r7, pc}

08001050 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}

08001072 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	0252      	lsls	r2, r2, #9
 8001084:	0a52      	lsrs	r2, r2, #9
 8001086:	43d2      	mvns	r2, r2
 8001088:	401a      	ands	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	0212      	lsls	r2, r2, #8
 80010ac:	43d2      	mvns	r2, r2
 80010ae:	401a      	ands	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	400b      	ands	r3, r1
 80010b8:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80010ba:	400b      	ands	r3, r1
 80010bc:	431a      	orrs	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	7fffff00 	.word	0x7fffff00

080010d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80010de:	4013      	ands	r3, r2
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	0552      	lsls	r2, r2, #21
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	6fffffe8 	.word	0x6fffffe8

080010f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	055b      	lsls	r3, r3, #21
 8001108:	401a      	ands	r2, r3
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	055b      	lsls	r3, r3, #21
 800110e:	429a      	cmp	r2, r3
 8001110:	d101      	bne.n	8001116 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <LL_ADC_Enable+0x20>)
 800112e:	4013      	ands	r3, r2
 8001130:	2201      	movs	r2, #1
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	7fffffe8 	.word	0x7fffffe8

08001144 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <LL_ADC_Disable+0x20>)
 8001152:	4013      	ands	r3, r2
 8001154:	2202      	movs	r2, #2
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	7fffffe8 	.word	0x7fffffe8

08001168 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <LL_ADC_IsEnabled+0x18>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <LL_ADC_IsEnabled+0x1a>
 8001180:	2300      	movs	r3, #0
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}

0800118a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2202      	movs	r2, #2
 8001198:	4013      	ands	r3, r2
 800119a:	2b02      	cmp	r3, #2
 800119c:	d101      	bne.n	80011a2 <LL_ADC_IsDisableOngoing+0x18>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_ADC_IsDisableOngoing+0x1a>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <LL_ADC_REG_StartConversion+0x20>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	2204      	movs	r2, #4
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	7fffffe8 	.word	0x7fffffe8

080011d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2204      	movs	r2, #4
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d101      	bne.n	80011e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	231f      	movs	r3, #31
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e1a0      	b.n	800155c <HAL_ADC_Init+0x368>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10a      	bne.n	8001238 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff fcd5 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2254      	movs	r2, #84	; 0x54
 8001234:	2100      	movs	r1, #0
 8001236:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ff5b 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d114      	bne.n	8001270 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff ff40 	bl	80010d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001250:	4bc4      	ldr	r3, [pc, #784]	; (8001564 <HAL_ADC_Init+0x370>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	49c4      	ldr	r1, [pc, #784]	; (8001568 <HAL_ADC_Init+0x374>)
 8001256:	0018      	movs	r0, r3
 8001258:	f7fe ff56 	bl	8000108 <__udivsi3>
 800125c:	0003      	movs	r3, r0
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001262:	e002      	b.n	800126a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3b01      	subs	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f9      	bne.n	8001264 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ff3f 	bl	80010f8 <LL_ADC_IsInternalRegulatorEnabled>
 800127a:	1e03      	subs	r3, r0, #0
 800127c:	d10f      	bne.n	800129e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	2210      	movs	r2, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128e:	2201      	movs	r2, #1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001296:	231f      	movs	r3, #31
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff ff94 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	d000      	beq.n	80012b8 <HAL_ADC_Init+0xc4>
 80012b6:	e144      	b.n	8001542 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d000      	beq.n	80012c0 <HAL_ADC_Init+0xcc>
 80012be:	e140      	b.n	8001542 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	4aa9      	ldr	r2, [pc, #676]	; (800156c <HAL_ADC_Init+0x378>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	2202      	movs	r2, #2
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff ff47 	bl	8001168 <LL_ADC_IsEnabled>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d000      	beq.n	80012e0 <HAL_ADC_Init+0xec>
 80012de:	e0ad      	b.n	800143c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7e1b      	ldrb	r3, [r3, #24]
 80012e8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80012ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7e5b      	ldrb	r3, [r3, #25]
 80012f0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80012f2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7e9b      	ldrb	r3, [r3, #26]
 80012f8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80012fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_ADC_Init+0x116>
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	e000      	b.n	800130c <HAL_ADC_Init+0x118>
 800130a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800130c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001312:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	da04      	bge.n	8001326 <HAL_ADC_Init+0x132>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	e001      	b.n	800132a <HAL_ADC_Init+0x136>
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800132a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	212c      	movs	r1, #44	; 0x2c
 8001330:	5c5b      	ldrb	r3, [r3, r1]
 8001332:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001334:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2220      	movs	r2, #32
 8001340:	5c9b      	ldrb	r3, [r3, r2]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d115      	bne.n	8001372 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7e9b      	ldrb	r3, [r3, #26]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0252      	lsls	r2, r2, #9
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	e00b      	b.n	8001372 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	2220      	movs	r2, #32
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2201      	movs	r2, #1
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800137e:	23e0      	movs	r3, #224	; 0xe0
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001388:	4313      	orrs	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a76      	ldr	r2, [pc, #472]	; (8001570 <HAL_ADC_Init+0x37c>)
 8001398:	4013      	ands	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	0f9b      	lsrs	r3, r3, #30
 80013ac:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013b2:	4313      	orrs	r3, r2
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	223c      	movs	r2, #60	; 0x3c
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d111      	bne.n	80013e8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	0f9b      	lsrs	r3, r3, #30
 80013ca:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80013d0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80013d6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80013dc:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	2201      	movs	r2, #1
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	4a61      	ldr	r2, [pc, #388]	; (8001574 <HAL_ADC_Init+0x380>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	23c0      	movs	r3, #192	; 0xc0
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	429a      	cmp	r2, r3
 8001408:	d018      	beq.n	800143c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	429a      	cmp	r2, r3
 8001414:	d012      	beq.n	800143c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	429a      	cmp	r2, r3
 8001420:	d00c      	beq.n	800143c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <HAL_ADC_Init+0x384>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a55      	ldr	r2, [pc, #340]	; (800157c <HAL_ADC_Init+0x388>)
 8001428:	4013      	ands	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	23f0      	movs	r3, #240	; 0xf0
 8001432:	039b      	lsls	r3, r3, #14
 8001434:	401a      	ands	r2, r3
 8001436:	4b50      	ldr	r3, [pc, #320]	; (8001578 <HAL_ADC_Init+0x384>)
 8001438:	430a      	orrs	r2, r1
 800143a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	001a      	movs	r2, r3
 8001446:	2100      	movs	r1, #0
 8001448:	f7ff fd9d 	bl	8000f86 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	494a      	ldr	r1, [pc, #296]	; (8001580 <HAL_ADC_Init+0x38c>)
 8001456:	001a      	movs	r2, r3
 8001458:	f7ff fd95 	bl	8000f86 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2110      	movs	r1, #16
 8001470:	4249      	negs	r1, r1
 8001472:	430a      	orrs	r2, r1
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
 8001476:	e03a      	b.n	80014ee <HAL_ADC_Init+0x2fa>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	429a      	cmp	r2, r3
 8001482:	d134      	bne.n	80014ee <HAL_ADC_Init+0x2fa>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e00c      	b.n	80014a4 <HAL_ADC_Init+0x2b0>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	40da      	lsrs	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	220f      	movs	r2, #15
 8001498:	4013      	ands	r3, r2
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d006      	beq.n	80014ac <HAL_ADC_Init+0x2b8>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3301      	adds	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b07      	cmp	r3, #7
 80014a8:	d9ef      	bls.n	800148a <HAL_ADC_Init+0x296>
 80014aa:	e000      	b.n	80014ae <HAL_ADC_Init+0x2ba>
            ADC_CHSELR_SQ1)
        {
          break;
 80014ac:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d109      	bne.n	80014c8 <HAL_ADC_Init+0x2d4>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2110      	movs	r1, #16
 80014c0:	4249      	negs	r1, r1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	629a      	str	r2, [r3, #40]	; 0x28
 80014c6:	e012      	b.n	80014ee <HAL_ADC_Init+0x2fa>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	221c      	movs	r2, #28
 80014d8:	4013      	ands	r3, r2
 80014da:	2210      	movs	r2, #16
 80014dc:	4252      	negs	r2, r2
 80014de:	409a      	lsls	r2, r3
 80014e0:	0011      	movs	r1, r2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2100      	movs	r1, #0
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7ff fd63 	bl	8000fc0 <LL_ADC_GetSamplingTimeCommonChannels>
 80014fa:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001500:	429a      	cmp	r2, r3
 8001502:	d10b      	bne.n	800151c <HAL_ADC_Init+0x328>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	2203      	movs	r2, #3
 8001510:	4393      	bics	r3, r2
 8001512:	2201      	movs	r2, #1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800151a:	e01c      	b.n	8001556 <HAL_ADC_Init+0x362>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	2212      	movs	r2, #18
 8001522:	4393      	bics	r3, r2
 8001524:	2210      	movs	r2, #16
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2201      	movs	r2, #1
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001538:	231f      	movs	r3, #31
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001540:	e009      	b.n	8001556 <HAL_ADC_Init+0x362>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	2210      	movs	r2, #16
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800154e:	231f      	movs	r3, #31
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001556:	231f      	movs	r3, #31
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b008      	add	sp, #32
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000004 	.word	0x20000004
 8001568:	00030d40 	.word	0x00030d40
 800156c:	fffffefd 	.word	0xfffffefd
 8001570:	fffe0201 	.word	0xfffe0201
 8001574:	1ffffc02 	.word	0x1ffffc02
 8001578:	40012708 	.word	0x40012708
 800157c:	ffc3ffff 	.word	0xffc3ffff
 8001580:	7fffff04 	.word	0x7fffff04

08001584 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fe1b 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d16c      	bne.n	8001678 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2254      	movs	r2, #84	; 0x54
 80015a2:	5c9b      	ldrb	r3, [r3, r2]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_ADC_Start_DMA+0x28>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e06c      	b.n	8001686 <HAL_ADC_Start_DMA+0x102>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2254      	movs	r2, #84	; 0x54
 80015b0:	2101      	movs	r1, #1
 80015b2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	d113      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff fdcf 	bl	8001168 <LL_ADC_IsEnabled>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff fdb6 	bl	8001144 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2101      	movs	r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e8:	2517      	movs	r5, #23
 80015ea:	197c      	adds	r4, r7, r5
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 fa44 	bl	8001a7c <ADC_Enable>
 80015f4:	0003      	movs	r3, r0
 80015f6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f8:	002c      	movs	r4, r5
 80015fa:	193b      	adds	r3, r7, r4
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d13e      	bne.n	8001680 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_ADC_Start_DMA+0x10c>)
 8001608:	4013      	ands	r3, r2
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	0052      	lsls	r2, r2, #1
 800160e:	431a      	orrs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <HAL_ADC_Start_DMA+0x110>)
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_ADC_Start_DMA+0x114>)
 8001628:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <HAL_ADC_Start_DMA+0x118>)
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	221c      	movs	r2, #28
 8001638:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2254      	movs	r2, #84	; 0x54
 800163e:	2100      	movs	r1, #0
 8001640:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2110      	movs	r1, #16
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3340      	adds	r3, #64	; 0x40
 800165c:	0019      	movs	r1, r3
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	193c      	adds	r4, r7, r4
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f000 fdfe 	bl	8002264 <HAL_DMA_Start_IT>
 8001668:	0003      	movs	r3, r0
 800166a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fd9b 	bl	80011ac <LL_ADC_REG_StartConversion>
 8001676:	e003      	b.n	8001680 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001678:	2317      	movs	r3, #23
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2202      	movs	r2, #2
 800167e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001680:	2317      	movs	r3, #23
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b006      	add	sp, #24
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	fffff0fe 	.word	0xfffff0fe
 8001694:	08001c29 	.word	0x08001c29
 8001698:	08001cf1 	.word	0x08001cf1
 800169c:	08001d0f 	.word	0x08001d0f

080016a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b002      	add	sp, #8
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016da:	2317      	movs	r3, #23
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2254      	movs	r2, #84	; 0x54
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x24>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e1be      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x3a2>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2254      	movs	r2, #84	; 0x54
 80016f8:	2101      	movs	r1, #1
 80016fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fd65 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d000      	beq.n	800170c <HAL_ADC_ConfigChannel+0x3c>
 800170a:	e1a1      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d100      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x46>
 8001714:	e152      	b.n	80019bc <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	061b      	lsls	r3, r3, #24
 800171e:	429a      	cmp	r2, r3
 8001720:	d004      	beq.n	800172c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001726:	4ac2      	ldr	r2, [pc, #776]	; (8001a30 <HAL_ADC_ConfigChannel+0x360>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f7ff fc8a 	bl	8001050 <LL_ADC_REG_SetSequencerChAdd>
 800173c:	e0ed      	b.n	800191a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	211f      	movs	r1, #31
 8001748:	400b      	ands	r3, r1
 800174a:	210f      	movs	r1, #15
 800174c:	4099      	lsls	r1, r3
 800174e:	000b      	movs	r3, r1
 8001750:	43db      	mvns	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	0019      	movs	r1, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	025b      	lsls	r3, r3, #9
 800175c:	0a5b      	lsrs	r3, r3, #9
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x9c>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	221f      	movs	r2, #31
 8001768:	4013      	ands	r3, r2
 800176a:	e0bc      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d000      	beq.n	8001778 <HAL_ADC_ConfigChannel+0xa8>
 8001776:	e0b5      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x214>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d000      	beq.n	8001784 <HAL_ADC_ConfigChannel+0xb4>
 8001782:	e0ad      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x210>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2204      	movs	r2, #4
 800178a:	4013      	ands	r3, r2
 800178c:	d000      	beq.n	8001790 <HAL_ADC_ConfigChannel+0xc0>
 800178e:	e0a5      	b.n	80018dc <HAL_ADC_ConfigChannel+0x20c>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2208      	movs	r2, #8
 8001796:	4013      	ands	r3, r2
 8001798:	d000      	beq.n	800179c <HAL_ADC_ConfigChannel+0xcc>
 800179a:	e09d      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x208>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2210      	movs	r2, #16
 80017a2:	4013      	ands	r3, r2
 80017a4:	d000      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0xd8>
 80017a6:	e095      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x204>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2220      	movs	r2, #32
 80017ae:	4013      	ands	r3, r2
 80017b0:	d000      	beq.n	80017b4 <HAL_ADC_ConfigChannel+0xe4>
 80017b2:	e08d      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x200>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	4013      	ands	r3, r2
 80017bc:	d000      	beq.n	80017c0 <HAL_ADC_ConfigChannel+0xf0>
 80017be:	e085      	b.n	80018cc <HAL_ADC_ConfigChannel+0x1fc>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	4013      	ands	r3, r2
 80017c8:	d000      	beq.n	80017cc <HAL_ADC_ConfigChannel+0xfc>
 80017ca:	e07d      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x1f8>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	d000      	beq.n	80017da <HAL_ADC_ConfigChannel+0x10a>
 80017d8:	e074      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x1f4>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4013      	ands	r3, r2
 80017e4:	d000      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x118>
 80017e6:	e06b      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x1f0>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	d000      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0x126>
 80017f4:	e062      	b.n	80018bc <HAL_ADC_ConfigChannel+0x1ec>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	d000      	beq.n	8001804 <HAL_ADC_ConfigChannel+0x134>
 8001802:	e059      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x1e8>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4013      	ands	r3, r2
 800180e:	d151      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1e4>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	019b      	lsls	r3, r3, #6
 8001818:	4013      	ands	r3, r2
 800181a:	d149      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1e0>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	01db      	lsls	r3, r3, #7
 8001824:	4013      	ands	r3, r2
 8001826:	d141      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x1dc>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4013      	ands	r3, r2
 8001832:	d139      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1d8>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	4013      	ands	r3, r2
 800183e:	d131      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1d4>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d129      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1d0>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	02db      	lsls	r3, r3, #11
 8001854:	4013      	ands	r3, r2
 8001856:	d121      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1cc>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	4013      	ands	r3, r2
 8001862:	d119      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x1c8>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	; 0x80
 800186a:	035b      	lsls	r3, r3, #13
 800186c:	4013      	ands	r3, r2
 800186e:	d111      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1c4>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	039b      	lsls	r3, r3, #14
 8001878:	4013      	ands	r3, r2
 800187a:	d109      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x1c0>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	03db      	lsls	r3, r3, #15
 8001884:	4013      	ands	r3, r2
 8001886:	d001      	beq.n	800188c <HAL_ADC_ConfigChannel+0x1bc>
 8001888:	2316      	movs	r3, #22
 800188a:	e02c      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 800188c:	2300      	movs	r3, #0
 800188e:	e02a      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 8001890:	2315      	movs	r3, #21
 8001892:	e028      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 8001894:	2314      	movs	r3, #20
 8001896:	e026      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 8001898:	2313      	movs	r3, #19
 800189a:	e024      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 800189c:	2312      	movs	r3, #18
 800189e:	e022      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018a0:	2311      	movs	r3, #17
 80018a2:	e020      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018a4:	2310      	movs	r3, #16
 80018a6:	e01e      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018a8:	230f      	movs	r3, #15
 80018aa:	e01c      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018ac:	230e      	movs	r3, #14
 80018ae:	e01a      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018b0:	230d      	movs	r3, #13
 80018b2:	e018      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018b4:	230c      	movs	r3, #12
 80018b6:	e016      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018b8:	230b      	movs	r3, #11
 80018ba:	e014      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018bc:	230a      	movs	r3, #10
 80018be:	e012      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018c0:	2309      	movs	r3, #9
 80018c2:	e010      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018c4:	2308      	movs	r3, #8
 80018c6:	e00e      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018c8:	2307      	movs	r3, #7
 80018ca:	e00c      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018cc:	2306      	movs	r3, #6
 80018ce:	e00a      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018d0:	2305      	movs	r3, #5
 80018d2:	e008      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e006      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018d8:	2303      	movs	r3, #3
 80018da:	e004      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018dc:	2302      	movs	r3, #2
 80018de:	e002      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x216>
 80018e4:	2300      	movs	r3, #0
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	6852      	ldr	r2, [r2, #4]
 80018ea:	201f      	movs	r0, #31
 80018ec:	4002      	ands	r2, r0
 80018ee:	4093      	lsls	r3, r2
 80018f0:	000a      	movs	r2, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	429a      	cmp	r2, r3
 8001906:	d808      	bhi.n	800191a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	001a      	movs	r2, r3
 8001916:	f7ff fb7b 	bl	8001010 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6819      	ldr	r1, [r3, #0]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	001a      	movs	r2, r3
 8001928:	f7ff fbb6 	bl	8001098 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db00      	blt.n	8001936 <HAL_ADC_ConfigChannel+0x266>
 8001934:	e096      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff fb17 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <HAL_ADC_ConfigChannel+0x368>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d123      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001954:	d11e      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	0412      	lsls	r2, r2, #16
 800195c:	4313      	orrs	r3, r2
 800195e:	4a35      	ldr	r2, [pc, #212]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 8001960:	0019      	movs	r1, r3
 8001962:	0010      	movs	r0, r2
 8001964:	f7ff faee 	bl	8000f44 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_ADC_ConfigChannel+0x36c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4934      	ldr	r1, [pc, #208]	; (8001a40 <HAL_ADC_ConfigChannel+0x370>)
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbca 	bl	8000108 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	001a      	movs	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	189b      	adds	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	3301      	adds	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001984:	e002      	b.n	800198c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3b01      	subs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001992:	e067      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2a      	ldr	r2, [pc, #168]	; (8001a44 <HAL_ADC_ConfigChannel+0x374>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d162      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	03db      	lsls	r3, r3, #15
 80019a4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019a6:	d15d      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	03d2      	lsls	r2, r2, #15
 80019ae:	4313      	orrs	r3, r2
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 80019b2:	0019      	movs	r1, r3
 80019b4:	0010      	movs	r0, r2
 80019b6:	f7ff fac5 	bl	8000f44 <LL_ADC_SetCommonPathInternalCh>
 80019ba:	e053      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	061b      	lsls	r3, r3, #24
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80019cc:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <HAL_ADC_ConfigChannel+0x360>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d107      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0019      	movs	r1, r3
 80019dc:	0010      	movs	r0, r2
 80019de:	f7ff fb48 	bl	8001072 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da3c      	bge.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fabd 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 80019f2:	0003      	movs	r3, r0
 80019f4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_ADC_ConfigChannel+0x368>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d108      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_ADC_ConfigChannel+0x378>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 8001a08:	0019      	movs	r1, r3
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	f7ff fa9a 	bl	8000f44 <LL_ADC_SetCommonPathInternalCh>
 8001a10:	e028      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_ADC_ConfigChannel+0x374>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d123      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_ADC_ConfigChannel+0x37c>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_ADC_ConfigChannel+0x364>)
 8001a24:	0019      	movs	r1, r3
 8001a26:	0010      	movs	r0, r2
 8001a28:	f7ff fa8c 	bl	8000f44 <LL_ADC_SetCommonPathInternalCh>
 8001a2c:	e01a      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x394>
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	80000004 	.word	0x80000004
 8001a34:	40012708 	.word	0x40012708
 8001a38:	a4000200 	.word	0xa4000200
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	00030d40 	.word	0x00030d40
 8001a44:	a8000400 	.word	0xa8000400
 8001a48:	ff7fffff 	.word	0xff7fffff
 8001a4c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	2220      	movs	r2, #32
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a5c:	2317      	movs	r3, #23
 8001a5e:	18fb      	adds	r3, r7, r3
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2254      	movs	r2, #84	; 0x54
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001a6c:	2317      	movs	r3, #23
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	781b      	ldrb	r3, [r3, #0]
}
 8001a72:	0018      	movs	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b006      	add	sp, #24
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)

08001a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7ff fb6b 	bl	8001168 <LL_ADC_IsEnabled>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d162      	bne.n	8001b5c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <ADC_Enable+0xec>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e04f      	b.n	8001b5e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff fb2c 	bl	8001120 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <ADC_Enable+0xf0>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff fa4e 	bl	8000f6c <LL_ADC_GetCommonPathInternalCh>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d00f      	beq.n	8001afa <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <ADC_Enable+0xf4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4925      	ldr	r1, [pc, #148]	; (8001b74 <ADC_Enable+0xf8>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7fe fb11 	bl	8000108 <__udivsi3>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001aec:	e002      	b.n	8001af4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f9      	bne.n	8001aee <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e5b      	ldrb	r3, [r3, #25]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d02c      	beq.n	8001b5c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fa15 	bl	8000f30 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b0a:	e020      	b.n	8001b4e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fb29 	bl	8001168 <LL_ADC_IsEnabled>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d104      	bne.n	8001b24 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff fafe 	bl	8001120 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b24:	f7ff fa04 	bl	8000f30 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d90d      	bls.n	8001b4e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	2210      	movs	r2, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2201      	movs	r2, #1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e007      	b.n	8001b5e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d1d7      	bne.n	8001b0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b004      	add	sp, #16
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	80000017 	.word	0x80000017
 8001b6c:	40012708 	.word	0x40012708
 8001b70:	20000004 	.word	0x20000004
 8001b74:	00030d40 	.word	0x00030d40

08001b78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fb00 	bl	800118a <LL_ADC_IsDisableOngoing>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7ff fae8 	bl	8001168 <LL_ADC_IsEnabled>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d040      	beq.n	8001c1e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13d      	bne.n	8001c1e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d10d      	bne.n	8001bcc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff fac5 	bl	8001144 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc2:	f7ff f9b5 	bl	8000f30 <HAL_GetTick>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001bca:	e022      	b.n	8001c12 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e01b      	b.n	8001c20 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001be8:	f7ff f9a2 	bl	8000f30 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d90d      	bls.n	8001c12 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2201      	movs	r2, #1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e006      	b.n	8001c20 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1e4      	bne.n	8001be8 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b004      	add	sp, #16
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	2250      	movs	r2, #80	; 0x50
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d141      	bne.n	8001cc4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c44:	2280      	movs	r2, #128	; 0x80
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff f9cb 	bl	8000fee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d02e      	beq.n	8001cba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	7e9b      	ldrb	r3, [r3, #26]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d12a      	bne.n	8001cba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d123      	bne.n	8001cba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7ff faaa 	bl	80011d0 <LL_ADC_REG_IsConversionOngoing>
 8001c7c:	1e03      	subs	r3, r0, #0
 8001c7e:	d110      	bne.n	8001ca2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	210c      	movs	r1, #12
 8001c8c:	438a      	bics	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a15      	ldr	r2, [pc, #84]	; (8001cec <ADC_DMAConvCplt+0xc4>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	2201      	movs	r2, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca0:	e00b      	b.n	8001cba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fcef 	bl	80016a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cc2:	e00f      	b.n	8001ce4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	2210      	movs	r2, #16
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d004      	beq.n	8001cd8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fcf5 	bl	80016c0 <HAL_ADC_ErrorCallback>
}
 8001cd6:	e005      	b.n	8001ce4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	4798      	blx	r3
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	fffffefe 	.word	0xfffffefe

08001cf0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f7ff fcd5 	bl	80016b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	431a      	orrs	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff fcc2 	bl	80016c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <LL_ADC_SetCalibrationFactor>:
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	22b4      	movs	r2, #180	; 0xb4
 8001d52:	589b      	ldr	r3, [r3, r2]
 8001d54:	227f      	movs	r2, #127	; 0x7f
 8001d56:	4393      	bics	r3, r2
 8001d58:	001a      	movs	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	21b4      	movs	r1, #180	; 0xb4
 8001d62:	505a      	str	r2, [r3, r1]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <LL_ADC_GetCalibrationFactor>:
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	22b4      	movs	r2, #180	; 0xb4
 8001d78:	589b      	ldr	r3, [r3, r2]
 8001d7a:	227f      	movs	r2, #127	; 0x7f
 8001d7c:	4013      	ands	r3, r2
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <LL_ADC_Enable>:
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <LL_ADC_Enable+0x20>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	2201      	movs	r2, #1
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	7fffffe8 	.word	0x7fffffe8

08001dac <LL_ADC_Disable>:
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <LL_ADC_Disable+0x20>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	7fffffe8 	.word	0x7fffffe8

08001dd0 <LL_ADC_IsEnabled>:
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <LL_ADC_IsEnabled+0x18>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <LL_ADC_IsEnabled+0x1a>
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b002      	add	sp, #8
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <LL_ADC_StartCalibration>:
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <LL_ADC_StartCalibration+0x24>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	0612      	lsls	r2, r2, #24
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	7fffffe8 	.word	0x7fffffe8

08001e1c <LL_ADC_IsCalibrationOnGoing>:
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	0fdb      	lsrs	r3, r3, #31
 8001e2a:	07da      	lsls	r2, r3, #31
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d101      	bne.n	8001e38 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2254      	movs	r2, #84	; 0x54
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADCEx_Calibration_Start+0x1e>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0bb      	b.n	8001fda <HAL_ADCEx_Calibration_Start+0x196>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2254      	movs	r2, #84	; 0x54
 8001e66:	2101      	movs	r1, #1
 8001e68:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001e6a:	2317      	movs	r3, #23
 8001e6c:	18fc      	adds	r4, r7, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff fe81 	bl	8001b78 <ADC_Disable>
 8001e76:	0003      	movs	r3, r0
 8001e78:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7ff ffa6 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d000      	beq.n	8001e8a <HAL_ADCEx_Calibration_Start+0x46>
 8001e88:	e09a      	b.n	8001fc0 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	2202      	movs	r2, #2
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e02e      	b.n	8001f1a <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff97 	bl	8001df4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ec6:	e015      	b.n	8001ef4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	23ae      	movs	r3, #174	; 0xae
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d30d      	bcc.n	8001ef4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	2212      	movs	r2, #18
 8001ede:	4393      	bics	r3, r2
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2254      	movs	r2, #84	; 0x54
 8001eec:	2100      	movs	r1, #0
 8001eee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e072      	b.n	8001fda <HAL_ADCEx_Calibration_Start+0x196>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ff8f 	bl	8001e1c <LL_ADC_IsCalibrationOnGoing>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d1e2      	bne.n	8001ec8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff30 	bl	8001d6c <LL_ADC_GetCalibrationFactor>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	189b      	adds	r3, r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	3301      	adds	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d9cd      	bls.n	8001ebc <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8001f20:	69f9      	ldr	r1, [r7, #28]
 8001f22:	69b8      	ldr	r0, [r7, #24]
 8001f24:	f7fe f8f0 	bl	8000108 <__udivsi3>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff ff29 	bl	8001d88 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7ff ff00 	bl	8001d44 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f7ff ff2f 	bl	8001dac <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f4e:	f7fe ffef 	bl	8000f30 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f56:	e01b      	b.n	8001f90 <HAL_ADCEx_Calibration_Start+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f58:	f7fe ffea 	bl	8000f30 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d914      	bls.n	8001f90 <HAL_ADCEx_Calibration_Start+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff ff30 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001f70:	1e03      	subs	r3, r0, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_ADCEx_Calibration_Start+0x14c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	2210      	movs	r2, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e024      	b.n	8001fda <HAL_ADCEx_Calibration_Start+0x196>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ff1b 	bl	8001dd0 <LL_ADC_IsEnabled>
 8001f9a:	1e03      	subs	r3, r0, #0
 8001f9c:	d1dc      	bne.n	8001f58 <HAL_ADCEx_Calibration_Start+0x114>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	659a      	str	r2, [r3, #88]	; 0x58
 8001fbe:	e005      	b.n	8001fcc <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2254      	movs	r2, #84	; 0x54
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001fd4:	2317      	movs	r3, #23
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b009      	add	sp, #36	; 0x24
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	fffffefd 	.word	0xfffffefd

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8001ffc:	d828      	bhi.n	8002050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <__NVIC_SetPriority+0xd4>)
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	33c0      	adds	r3, #192	; 0xc0
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	589b      	ldr	r3, [r3, r2]
 800200e:	1dfa      	adds	r2, r7, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	0011      	movs	r1, r2
 8002014:	2203      	movs	r2, #3
 8002016:	400a      	ands	r2, r1
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	21ff      	movs	r1, #255	; 0xff
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	22ff      	movs	r2, #255	; 0xff
 800202c:	401a      	ands	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	2303      	movs	r3, #3
 8002036:	4003      	ands	r3, r0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203c:	481f      	ldr	r0, [pc, #124]	; (80020bc <__NVIC_SetPriority+0xd4>)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	430a      	orrs	r2, r1
 8002048:	33c0      	adds	r3, #192	; 0xc0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800204e:	e031      	b.n	80020b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <__NVIC_SetPriority+0xd8>)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0019      	movs	r1, r3
 8002058:	230f      	movs	r3, #15
 800205a:	400b      	ands	r3, r1
 800205c:	3b08      	subs	r3, #8
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3306      	adds	r3, #6
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	3304      	adds	r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	; 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <__NVIC_SetPriority+0xd8>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	001c      	movs	r4, r3
 80020a0:	230f      	movs	r3, #15
 80020a2:	4023      	ands	r3, r4
 80020a4:	3b08      	subs	r3, #8
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	430a      	orrs	r2, r1
 80020aa:	3306      	adds	r3, #6
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	18c3      	adds	r3, r0, r3
 80020b0:	3304      	adds	r3, #4
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b003      	add	sp, #12
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	045b      	lsls	r3, r3, #17
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d301      	bcc.n	80020dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d8:	2301      	movs	r3, #1
 80020da:	e010      	b.n	80020fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <SysTick_Config+0x44>)
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	3a01      	subs	r2, #1
 80020e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e4:	2301      	movs	r3, #1
 80020e6:	425b      	negs	r3, r3
 80020e8:	2103      	movs	r1, #3
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff ff7c 	bl	8001fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <SysTick_Config+0x44>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <SysTick_Config+0x44>)
 80020f8:	2207      	movs	r2, #7
 80020fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	e000e010 	.word	0xe000e010

0800210c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	210f      	movs	r1, #15
 8002118:	187b      	adds	r3, r7, r1
 800211a:	1c02      	adds	r2, r0, #0
 800211c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	187b      	adds	r3, r7, r1
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <__NVIC_SetPriority>
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ffbf 	bl	80020c4 <SysTick_Config>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e077      	b.n	8002252 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3d      	ldr	r2, [pc, #244]	; (800225c <HAL_DMA_Init+0x10c>)
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	2114      	movs	r1, #20
 800216e:	0018      	movs	r0, r3
 8002170:	f7fd ffca 	bl	8000108 <__udivsi3>
 8002174:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002176:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2225      	movs	r2, #37	; 0x25
 8002180:	2102      	movs	r1, #2
 8002182:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4934      	ldr	r1, [pc, #208]	; (8002260 <HAL_DMA_Init+0x110>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 f911 	bl	80023f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	01db      	lsls	r3, r3, #7
 80021da:	429a      	cmp	r2, r3
 80021dc:	d102      	bne.n	80021e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	21ff      	movs	r1, #255	; 0xff
 80021ee:	400a      	ands	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d011      	beq.n	8002228 <HAL_DMA_Init+0xd8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d80d      	bhi.n	8002228 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	0018      	movs	r0, r3
 8002210:	f000 f91c 	bl	800244c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e008      	b.n	800223a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2225      	movs	r2, #37	; 0x25
 8002244:	2101      	movs	r1, #1
 8002246:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b002      	add	sp, #8
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	bffdfff8 	.word	0xbffdfff8
 8002260:	ffff800f 	.word	0xffff800f

08002264 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2224      	movs	r2, #36	; 0x24
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_DMA_Start_IT+0x24>
 8002284:	2302      	movs	r3, #2
 8002286:	e070      	b.n	800236a <HAL_DMA_Start_IT+0x106>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2225      	movs	r2, #37	; 0x25
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d157      	bne.n	800234c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2225      	movs	r2, #37	; 0x25
 80022a0:	2102      	movs	r1, #2
 80022a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2101      	movs	r1, #1
 80022b6:	438a      	bics	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 f857 	bl	8002374 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	210e      	movs	r1, #14
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00f      	b.n	8002300 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2104      	movs	r1, #4
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	210a      	movs	r1, #10
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	025b      	lsls	r3, r3, #9
 800230a:	4013      	ands	r3, r2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0049      	lsls	r1, r1, #1
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	0049      	lsls	r1, r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	2100      	movs	r1, #0
 8002352:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002354:	2317      	movs	r3, #23
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	2100      	movs	r1, #0
 8002362:	5499      	strb	r1, [r3, r2]

  return status;
 8002364:	2317      	movs	r3, #23
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
}
 800236a:	0018      	movs	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	b006      	add	sp, #24
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800238a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800239c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <DMA_SetConfig+0x7c>)
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	221c      	movs	r2, #28
 80023a8:	4013      	ands	r3, r2
 80023aa:	2201      	movs	r2, #1
 80023ac:	409a      	lsls	r2, r3
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <DMA_SetConfig+0x7c>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d108      	bne.n	80023d6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023d4:	e007      	b.n	80023e6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	60da      	str	r2, [r3, #12]
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40020000 	.word	0x40020000

080023f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	001a      	movs	r2, r3
 8002402:	23ff      	movs	r3, #255	; 0xff
 8002404:	4013      	ands	r3, r2
 8002406:	3b08      	subs	r3, #8
 8002408:	2114      	movs	r1, #20
 800240a:	0018      	movs	r0, r3
 800240c:	f7fd fe7c 	bl	8000108 <__udivsi3>
 8002410:	0003      	movs	r3, r0
 8002412:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800241c:	4694      	mov	ip, r2
 800241e:	4463      	add	r3, ip
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	001a      	movs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800242c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	221c      	movs	r2, #28
 8002432:	4013      	ands	r3, r2
 8002434:	2201      	movs	r2, #1
 8002436:	409a      	lsls	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800243c:	46c0      	nop			; (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b004      	add	sp, #16
 8002442:	bd80      	pop	{r7, pc}
 8002444:	10008200 	.word	0x10008200
 8002448:	40020880 	.word	0x40020880

0800244c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	4013      	ands	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	001a      	movs	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	651a      	str	r2, [r3, #80]	; 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002472:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3b01      	subs	r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	4013      	ands	r3, r2
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b004      	add	sp, #16
 800248a:	bd80      	pop	{r7, pc}
 800248c:	1000823f 	.word	0x1000823f
 8002490:	40020940 	.word	0x40020940

08002494 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024a2:	e153      	b.n	800274c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2101      	movs	r1, #1
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4091      	lsls	r1, r2
 80024ae:	000a      	movs	r2, r1
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d100      	bne.n	80024bc <HAL_GPIO_Init+0x28>
 80024ba:	e144      	b.n	8002746 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x38>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b12      	cmp	r3, #18
 80024ca:	d125      	bne.n	8002518 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	0092      	lsls	r2, r2, #2
 80024d6:	58d3      	ldr	r3, [r2, r3]
 80024d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2207      	movs	r2, #7
 80024de:	4013      	ands	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	220f      	movs	r2, #15
 80024e4:	409a      	lsls	r2, r3
 80024e6:	0013      	movs	r3, r2
 80024e8:	43da      	mvns	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	220f      	movs	r2, #15
 80024f6:	401a      	ands	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	2107      	movs	r1, #7
 80024fc:	400b      	ands	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	409a      	lsls	r2, r3
 8002502:	0013      	movs	r3, r2
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	08da      	lsrs	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3208      	adds	r2, #8
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	43da      	mvns	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	401a      	ands	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	409a      	lsls	r2, r3
 800253e:	0013      	movs	r3, r2
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d00b      	beq.n	800256c <HAL_GPIO_Init+0xd8>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d007      	beq.n	800256c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	2b11      	cmp	r3, #17
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b12      	cmp	r3, #18
 800256a:	d130      	bne.n	80025ce <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	409a      	lsls	r2, r3
 800257a:	0013      	movs	r3, r2
 800257c:	43da      	mvns	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	409a      	lsls	r2, r3
 800258e:	0013      	movs	r3, r2
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025a2:	2201      	movs	r2, #1
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	409a      	lsls	r2, r3
 80025a8:	0013      	movs	r3, r2
 80025aa:	43da      	mvns	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4013      	ands	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	091b      	lsrs	r3, r3, #4
 80025b8:	2201      	movs	r2, #1
 80025ba:	401a      	ands	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d017      	beq.n	8002606 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	409a      	lsls	r2, r3
 80025e4:	0013      	movs	r3, r2
 80025e6:	43da      	mvns	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4013      	ands	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	055b      	lsls	r3, r3, #21
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_GPIO_Init+0x180>
 8002612:	e098      	b.n	8002746 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002614:	4a53      	ldr	r2, [pc, #332]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3318      	adds	r3, #24
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	589b      	ldr	r3, [r3, r2]
 8002620:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2203      	movs	r2, #3
 8002626:	4013      	ands	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	220f      	movs	r2, #15
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	43da      	mvns	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	23a0      	movs	r3, #160	; 0xa0
 800263c:	05db      	lsls	r3, r3, #23
 800263e:	429a      	cmp	r2, r3
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x1e2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a48      	ldr	r2, [pc, #288]	; (8002768 <HAL_GPIO_Init+0x2d4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x1de>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a47      	ldr	r2, [pc, #284]	; (800276c <HAL_GPIO_Init+0x2d8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x1da>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a46      	ldr	r2, [pc, #280]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x1d6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a45      	ldr	r2, [pc, #276]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x1d2>
 8002662:	2304      	movs	r3, #4
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x1e4>
 8002666:	2305      	movs	r3, #5
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x1e4>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x1e4>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x1e4>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x1e4>
 8002676:	2300      	movs	r3, #0
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	2103      	movs	r1, #3
 800267c:	400a      	ands	r2, r1
 800267e:	00d2      	lsls	r2, r2, #3
 8002680:	4093      	lsls	r3, r2
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002688:	4936      	ldr	r1, [pc, #216]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3318      	adds	r3, #24
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002696:	4a33      	ldr	r2, [pc, #204]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	58d3      	ldr	r3, [r2, r3]
 800269c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	025b      	lsls	r3, r3, #9
 80026b0:	4013      	ands	r3, r2
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80026bc:	4929      	ldr	r1, [pc, #164]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80026c6:	2384      	movs	r3, #132	; 0x84
 80026c8:	58d3      	ldr	r3, [r2, r3]
 80026ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4013      	ands	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	029b      	lsls	r3, r3, #10
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80026ea:	491e      	ldr	r1, [pc, #120]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80026ec:	2284      	movs	r2, #132	; 0x84
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43da      	mvns	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	035b      	lsls	r3, r3, #13
 800270a:	4013      	ands	r3, r2
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43da      	mvns	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	039b      	lsls	r3, r3, #14
 8002734:	4013      	ands	r3, r2
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	3301      	adds	r3, #1
 800274a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	40da      	lsrs	r2, r3
 8002754:	1e13      	subs	r3, r2, #0
 8002756:	d000      	beq.n	800275a <HAL_GPIO_Init+0x2c6>
 8002758:	e6a4      	b.n	80024a4 <HAL_GPIO_Init+0x10>
  }
}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021800 	.word	0x40021800
 8002768:	50000400 	.word	0x50000400
 800276c:	50000800 	.word	0x50000800
 8002770:	50000c00 	.word	0x50000c00
 8002774:	50001400 	.word	0x50001400

08002778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e1e5      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x1e>
 8002794:	e06f      	b.n	8002876 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	4bc4      	ldr	r3, [pc, #784]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2238      	movs	r2, #56	; 0x38
 800279c:	4013      	ands	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d10b      	bne.n	80027be <HAL_RCC_OscConfig+0x46>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a6:	4bc0      	ldr	r3, [pc, #768]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d061      	beq.n	8002876 <HAL_RCC_OscConfig+0xfe>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d15d      	bne.n	8002876 <HAL_RCC_OscConfig+0xfe>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1cb      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	025b      	lsls	r3, r3, #9
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d107      	bne.n	80027da <HAL_RCC_OscConfig+0x62>
 80027ca:	4bb7      	ldr	r3, [pc, #732]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4bb6      	ldr	r3, [pc, #728]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0249      	lsls	r1, r1, #9
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e020      	b.n	800281c <HAL_RCC_OscConfig+0xa4>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	23a0      	movs	r3, #160	; 0xa0
 80027e0:	02db      	lsls	r3, r3, #11
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10e      	bne.n	8002804 <HAL_RCC_OscConfig+0x8c>
 80027e6:	4bb0      	ldr	r3, [pc, #704]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	02c9      	lsls	r1, r1, #11
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	4bac      	ldr	r3, [pc, #688]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4bab      	ldr	r3, [pc, #684]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80027fa:	2180      	movs	r1, #128	; 0x80
 80027fc:	0249      	lsls	r1, r1, #9
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xa4>
 8002804:	4ba8      	ldr	r3, [pc, #672]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4ba7      	ldr	r3, [pc, #668]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800280a:	49a8      	ldr	r1, [pc, #672]	; (8002aac <HAL_RCC_OscConfig+0x334>)
 800280c:	400a      	ands	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	4ba5      	ldr	r3, [pc, #660]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4ba4      	ldr	r3, [pc, #656]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002816:	49a6      	ldr	r1, [pc, #664]	; (8002ab0 <HAL_RCC_OscConfig+0x338>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d014      	beq.n	800284e <HAL_RCC_OscConfig+0xd6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fb84 	bl	8000f30 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0xc8>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282e:	f7fe fb7f 	bl	8000f30 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	; 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0xc8>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e18a      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002840:	4b99      	ldr	r3, [pc, #612]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0xb6>
 800284c:	e013      	b.n	8002876 <HAL_RCC_OscConfig+0xfe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fb6f 	bl	8000f30 <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7fe fb6a 	bl	8000f30 <HAL_GetTick>
 800285c:	0002      	movs	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	; 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e175      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800286a:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d100      	bne.n	8002882 <HAL_RCC_OscConfig+0x10a>
 8002880:	e08c      	b.n	800299c <HAL_RCC_OscConfig+0x224>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2238      	movs	r2, #56	; 0x38
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d135      	bne.n	80028fe <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002892:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4013      	ands	r3, r2
 800289c:	d005      	beq.n	80028aa <HAL_RCC_OscConfig+0x132>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e155      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4a81      	ldr	r2, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x33c>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d112      	bne.n	80028ec <HAL_RCC_OscConfig+0x174>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028c6:	4b78      	ldr	r3, [pc, #480]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7b      	ldr	r2, [pc, #492]	; (8002ab8 <HAL_RCC_OscConfig+0x340>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691a      	ldr	r2, [r3, #16]
 80028d4:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80028da:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0adb      	lsrs	r3, r3, #11
 80028e0:	2207      	movs	r2, #7
 80028e2:	4013      	ands	r3, r2
 80028e4:	4a75      	ldr	r2, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x344>)
 80028e6:	40da      	lsrs	r2, r3
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x348>)
 80028ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028ec:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x34c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7fe fac3 	bl	8000e7c <HAL_InitTick>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d050      	beq.n	800299c <HAL_RCC_OscConfig+0x224>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e12b      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d030      	beq.n	8002968 <HAL_RCC_OscConfig+0x1f0>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002906:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6b      	ldr	r2, [pc, #428]	; (8002ab8 <HAL_RCC_OscConfig+0x340>)
 800290c:	4013      	ands	r3, r2
 800290e:	0019      	movs	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	4b64      	ldr	r3, [pc, #400]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	0049      	lsls	r1, r1, #1
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fb02 	bl	8000f30 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002932:	f7fe fafd 	bl	8000f30 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e108      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002944:	4b58      	ldr	r3, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4013      	ands	r3, r2
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x1ba>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002950:	4b55      	ldr	r3, [pc, #340]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x33c>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	021a      	lsls	r2, r3, #8
 8002960:	4b51      	ldr	r3, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e019      	b.n	800299c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 800296e:	4956      	ldr	r1, [pc, #344]	; (8002ac8 <HAL_RCC_OscConfig+0x350>)
 8002970:	400a      	ands	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fadc 	bl	8000f30 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x218>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297e:	f7fe fad7 	bl	8000f30 <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x218>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0e2      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	4b45      	ldr	r3, [pc, #276]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4013      	ands	r3, r2
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x206>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	4013      	ands	r3, r2
 80029a4:	d047      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80029a6:	4b40      	ldr	r3, [pc, #256]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2238      	movs	r2, #56	; 0x38
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b18      	cmp	r3, #24
 80029b0:	d10a      	bne.n	80029c8 <HAL_RCC_OscConfig+0x250>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR2) & RCC_CSR2_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x2be>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d138      	bne.n	8002a36 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0c6      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d019      	beq.n	8002a04 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80029d0:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	430a      	orrs	r2, r1
 80029da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe faa8 	bl	8000f30 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7fe faa3 	bl	8000f30 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0ae      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80029f8:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	2202      	movs	r2, #2
 80029fe:	4013      	ands	r3, r2
 8002a00:	d0f1      	beq.n	80029e6 <HAL_RCC_OscConfig+0x26e>
 8002a02:	e018      	b.n	8002a36 <HAL_RCC_OscConfig+0x2be>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a04:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a08:	4b27      	ldr	r3, [pc, #156]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	438a      	bics	r2, r1
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fa8e 	bl	8000f30 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fa89 	bl	8000f30 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e094      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a30:	2202      	movs	r2, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d1f1      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2ca>
 8002a40:	e088      	b.n	8002b54 <HAL_RCC_OscConfig+0x3dc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	230f      	movs	r3, #15
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2238      	movs	r2, #56	; 0x38
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2f8>
    {
      if ((((RCC->CSR1) & RCC_CSR1_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_RCC_OscConfig+0x2ea>
 8002a60:	e078      	b.n	8002b54 <HAL_RCC_OscConfig+0x3dc>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d000      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2f4>
 8002a6a:	e073      	b.n	8002b54 <HAL_RCC_OscConfig+0x3dc>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e072      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x30e>
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	430a      	orrs	r2, r1
 8002a82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a84:	e02e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d11e      	bne.n	8002acc <HAL_RCC_OscConfig+0x354>
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a94:	2104      	movs	r1, #4
 8002a96:	430a      	orrs	r2, r1
 8002a98:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a9a:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002a9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a9e:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <HAL_RCC_OscConfig+0x330>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x36c>
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	fffeffff 	.word	0xfffeffff
 8002ab0:	fffbffff 	.word	0xfffbffff
 8002ab4:	ffff80ff 	.word	0xffff80ff
 8002ab8:	ffffc7ff 	.word	0xffffc7ff
 8002abc:	02dc6c00 	.word	0x02dc6c00
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	20000008 	.word	0x20000008
 8002ac8:	fffffeff 	.word	0xfffffeff
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002ada:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002ade:	2104      	movs	r1, #4
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d014      	beq.n	8002b16 <HAL_RCC_OscConfig+0x39e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fa20 	bl	8000f30 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af6:	f7fe fa1b 	bl	8000f30 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_RCC_OscConfig+0x3ec>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e025      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x37e>
 8002b14:	e013      	b.n	8002b3e <HAL_RCC_OscConfig+0x3c6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b16:	f7fe fa0b 	bl	8000f30 <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b1e:	e009      	b.n	8002b34 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe fa06 	bl	8000f30 <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_RCC_OscConfig+0x3ec>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e010      	b.n	8002b56 <HAL_RCC_OscConfig+0x3de>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x3a8>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b3e:	230f      	movs	r3, #15
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x3dc>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCC_OscConfig+0x3e8>)
 8002b4e:	4906      	ldr	r1, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x3f0>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b006      	add	sp, #24
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	40021000 	.word	0x40021000
 8002b64:	00001388 	.word	0x00001388
 8002b68:	efffffff 	.word	0xefffffff

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0e9      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2207      	movs	r2, #7
 8002b86:	4013      	ands	r3, r2
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d91e      	bls.n	8002bcc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2207      	movs	r2, #7
 8002b94:	4393      	bics	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f9c6 	bl	8000f30 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ba8:	e009      	b.n	8002bbe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002baa:	f7fe f9c1 	bl	8000f30 <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0ca      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bbe:	4b67      	ldr	r3, [pc, #412]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002be0:	4b60      	ldr	r3, [pc, #384]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a60      	ldr	r2, [pc, #384]	; (8002d68 <HAL_RCC_ClockConfig+0x1fc>)
 8002be6:	401a      	ands	r2, r3
 8002be8:	4b5e      	ldr	r3, [pc, #376]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002bea:	21b0      	movs	r1, #176	; 0xb0
 8002bec:	0109      	lsls	r1, r1, #4
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf2:	4b5c      	ldr	r3, [pc, #368]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4a5d      	ldr	r2, [pc, #372]	; (8002d6c <HAL_RCC_ClockConfig+0x200>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d055      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	221c      	movs	r2, #28
 8002c16:	4393      	bics	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d107      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	029b      	lsls	r3, r3, #10
 8002c34:	4013      	ands	r3, r2
 8002c36:	d11f      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e08b      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c44:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d113      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e07f      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c5c:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d108      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e074      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c6a:	4b3e      	ldr	r3, [pc, #248]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e06d      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	4393      	bics	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f950 	bl	8000f30 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	e009      	b.n	8002caa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c96:	f7fe f94b 	bl	8000f30 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_RCC_ClockConfig+0x1f4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e054      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2238      	movs	r2, #56	; 0x38
 8002cb0:	401a      	ands	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1ec      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d21e      	bcs.n	8002d08 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2207      	movs	r2, #7
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe f928 	bl	8000f30 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce4:	e009      	b.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce6:	f7fe f923 	bl	8000f30 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <HAL_RCC_ClockConfig+0x1f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e02c      	b.n	8002d54 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cfa:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1ee      	bne.n	8002ce6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_RCC_ClockConfig+0x204>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d26:	f000 f82b 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d2a:	0001      	movs	r1, r0
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	220f      	movs	r2, #15
 8002d34:	401a      	ands	r2, r3
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_RCC_ClockConfig+0x208>)
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	58d3      	ldr	r3, [r2, r3]
 8002d3c:	221f      	movs	r2, #31
 8002d3e:	4013      	ands	r3, r2
 8002d40:	000a      	movs	r2, r1
 8002d42:	40da      	lsrs	r2, r3
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_ClockConfig+0x20c>)
 8002d46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_RCC_ClockConfig+0x210>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7fe f895 	bl	8000e7c <HAL_InitTick>
 8002d52:	0003      	movs	r3, r0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	00001388 	.word	0x00001388
 8002d64:	40021000 	.word	0x40021000
 8002d68:	ffff84ff 	.word	0xffff84ff
 8002d6c:	fffff0ff 	.word	0xfffff0ff
 8002d70:	ffff8fff 	.word	0xffff8fff
 8002d74:	0800413c 	.word	0x0800413c
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	20000008 	.word	0x20000008

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2238      	movs	r2, #56	; 0x38
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d10f      	bne.n	8002db0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0adb      	lsrs	r3, r3, #11
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0013      	movs	r3, r2
 8002da0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	4815      	ldr	r0, [pc, #84]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x7c>)
 8002da6:	f7fd f9af 	bl	8000108 <__udivsi3>
 8002daa:	0003      	movs	r3, r0
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	e01e      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2238      	movs	r2, #56	; 0x38
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x80>)
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	e015      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2238      	movs	r2, #56	; 0x38
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d103      	bne.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	607b      	str	r3, [r7, #4]
 8002dd4:	e00b      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2238      	movs	r2, #56	; 0x38
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	d103      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002de2:	23fa      	movs	r3, #250	; 0xfa
 8002de4:	01db      	lsls	r3, r3, #7
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	e001      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002dee:	687b      	ldr	r3, [r7, #4]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	02dc6c00 	.word	0x02dc6c00
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e0c:	2313      	movs	r3, #19
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e14:	2312      	movs	r3, #18
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	029b      	lsls	r3, r3, #10
 8002e24:	4013      	ands	r3, r2
 8002e26:	d100      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002e28:	e079      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2011      	movs	r0, #17
 8002e2c:	183b      	adds	r3, r7, r0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	055b      	lsls	r3, r3, #21
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d110      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e42:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	0549      	lsls	r1, r1, #21
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e4c:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	055b      	lsls	r3, r3, #21
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e64:	23c0      	movs	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4013      	ands	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d019      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d014      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	4a51      	ldr	r2, [pc, #324]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e8a:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0249      	lsls	r1, r1, #9
 8002e90:	430a      	orrs	r2, r1
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e98:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9a:	494c      	ldr	r1, [pc, #304]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002ea0:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d016      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe f83f 	bl	8000f30 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002eb6:	e00c      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f83a 	bl	8000f30 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d904      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002ec8:	2313      	movs	r3, #19
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	2203      	movs	r2, #3
 8002ece:	701a      	strb	r2, [r3, #0]
          break;
 8002ed0:	e004      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d0ed      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002edc:	2313      	movs	r3, #19
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002efa:	e005      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efc:	2312      	movs	r3, #18
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2213      	movs	r2, #19
 8002f02:	18ba      	adds	r2, r7, r2
 8002f04:	7812      	ldrb	r2, [r2, #0]
 8002f06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f08:	2311      	movs	r3, #17
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f18:	492e      	ldr	r1, [pc, #184]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f28:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	4393      	bics	r3, r2
 8002f30:	0019      	movs	r1, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2240      	movs	r2, #64	; 0x40
 8002f42:	4013      	ands	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	01db      	lsls	r3, r3, #7
 8002f62:	4013      	ands	r3, r2
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	0899      	lsrs	r1, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f74:	430a      	orrs	r2, r1
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	4013      	ands	r3, r2
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	da09      	bge.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	22e0      	movs	r2, #224	; 0xe0
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002fb4:	2312      	movs	r3, #18
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	fffffcff 	.word	0xfffffcff
 8002fcc:	fffeffff 	.word	0xfffeffff
 8002fd0:	00001388 	.word	0x00001388
 8002fd4:	efffffff 	.word	0xefffffff
 8002fd8:	ffffcfff 	.word	0xffffcfff
 8002fdc:	ffff3fff 	.word	0xffff3fff

08002fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e04a      	b.n	8003088 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	223d      	movs	r2, #61	; 0x3d
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d107      	bne.n	800300e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	223c      	movs	r2, #60	; 0x3c
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd fe6d 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	223d      	movs	r2, #61	; 0x3d
 8003012:	2102      	movs	r1, #2
 8003014:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	0019      	movs	r1, r3
 8003020:	0010      	movs	r0, r2
 8003022:	f000 fb43 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2248      	movs	r2, #72	; 0x48
 800302a:	2101      	movs	r1, #1
 800302c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	223e      	movs	r2, #62	; 0x3e
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	223f      	movs	r2, #63	; 0x3f
 800303a:	2101      	movs	r1, #1
 800303c:	5499      	strb	r1, [r3, r2]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2240      	movs	r2, #64	; 0x40
 8003042:	2101      	movs	r1, #1
 8003044:	5499      	strb	r1, [r3, r2]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2241      	movs	r2, #65	; 0x41
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2242      	movs	r2, #66	; 0x42
 8003052:	2101      	movs	r1, #1
 8003054:	5499      	strb	r1, [r3, r2]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2243      	movs	r2, #67	; 0x43
 800305a:	2101      	movs	r1, #1
 800305c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2244      	movs	r2, #68	; 0x44
 8003062:	2101      	movs	r1, #1
 8003064:	5499      	strb	r1, [r3, r2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2245      	movs	r2, #69	; 0x45
 800306a:	2101      	movs	r1, #1
 800306c:	5499      	strb	r1, [r3, r2]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2246      	movs	r2, #70	; 0x46
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2247      	movs	r2, #71	; 0x47
 800307a:	2101      	movs	r1, #1
 800307c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	223d      	movs	r2, #61	; 0x3d
 8003082:	2101      	movs	r1, #1
 8003084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b002      	add	sp, #8
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e04a      	b.n	8003138 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	223d      	movs	r2, #61	; 0x3d
 80030a6:	5c9b      	ldrb	r3, [r3, r2]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d107      	bne.n	80030be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223c      	movs	r2, #60	; 0x3c
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f841 	bl	8003140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	223d      	movs	r2, #61	; 0x3d
 80030c2:	2102      	movs	r1, #2
 80030c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	0019      	movs	r1, r3
 80030d0:	0010      	movs	r0, r2
 80030d2:	f000 faeb 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2248      	movs	r2, #72	; 0x48
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	223e      	movs	r2, #62	; 0x3e
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	223f      	movs	r2, #63	; 0x3f
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2241      	movs	r2, #65	; 0x41
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2242      	movs	r2, #66	; 0x42
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2243      	movs	r2, #67	; 0x43
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2244      	movs	r2, #68	; 0x44
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2245      	movs	r2, #69	; 0x45
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2246      	movs	r2, #70	; 0x46
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2247      	movs	r2, #71	; 0x47
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	223d      	movs	r2, #61	; 0x3d
 8003132:	2101      	movs	r1, #1
 8003134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <HAL_TIM_PWM_Start+0x22>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223e      	movs	r2, #62	; 0x3e
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	4193      	sbcs	r3, r2
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e037      	b.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d108      	bne.n	800318a <HAL_TIM_PWM_Start+0x3a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	223f      	movs	r2, #63	; 0x3f
 800317c:	5c9b      	ldrb	r3, [r3, r2]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	1e5a      	subs	r2, r3, #1
 8003184:	4193      	sbcs	r3, r2
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e02b      	b.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d108      	bne.n	80031a2 <HAL_TIM_PWM_Start+0x52>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	5c9b      	ldrb	r3, [r3, r2]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	4193      	sbcs	r3, r2
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e01f      	b.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d108      	bne.n	80031ba <HAL_TIM_PWM_Start+0x6a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2241      	movs	r2, #65	; 0x41
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	4193      	sbcs	r3, r2
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e013      	b.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d108      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x82>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2242      	movs	r2, #66	; 0x42
 80031c4:	5c9b      	ldrb	r3, [r3, r2]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	4193      	sbcs	r3, r2
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e007      	b.n	80031e2 <HAL_TIM_PWM_Start+0x92>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2243      	movs	r2, #67	; 0x43
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	4193      	sbcs	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07b      	b.n	80032e2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0xaa>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	223e      	movs	r2, #62	; 0x3e
 80031f4:	2102      	movs	r1, #2
 80031f6:	5499      	strb	r1, [r3, r2]
 80031f8:	e023      	b.n	8003242 <HAL_TIM_PWM_Start+0xf2>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0xba>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	223f      	movs	r2, #63	; 0x3f
 8003204:	2102      	movs	r1, #2
 8003206:	5499      	strb	r1, [r3, r2]
 8003208:	e01b      	b.n	8003242 <HAL_TIM_PWM_Start+0xf2>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xca>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2240      	movs	r2, #64	; 0x40
 8003214:	2102      	movs	r1, #2
 8003216:	5499      	strb	r1, [r3, r2]
 8003218:	e013      	b.n	8003242 <HAL_TIM_PWM_Start+0xf2>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d104      	bne.n	800322a <HAL_TIM_PWM_Start+0xda>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2241      	movs	r2, #65	; 0x41
 8003224:	2102      	movs	r1, #2
 8003226:	5499      	strb	r1, [r3, r2]
 8003228:	e00b      	b.n	8003242 <HAL_TIM_PWM_Start+0xf2>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b10      	cmp	r3, #16
 800322e:	d104      	bne.n	800323a <HAL_TIM_PWM_Start+0xea>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2242      	movs	r2, #66	; 0x42
 8003234:	2102      	movs	r1, #2
 8003236:	5499      	strb	r1, [r3, r2]
 8003238:	e003      	b.n	8003242 <HAL_TIM_PWM_Start+0xf2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2243      	movs	r2, #67	; 0x43
 800323e:	2102      	movs	r1, #2
 8003240:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6839      	ldr	r1, [r7, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fdd2 	bl	8003df4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a25      	ldr	r2, [pc, #148]	; (80032ec <HAL_TIM_PWM_Start+0x19c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIM_PWM_Start+0x11e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <HAL_TIM_PWM_Start+0x1a0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_PWM_Start+0x11e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_TIM_PWM_Start+0x1a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_TIM_PWM_Start+0x122>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_TIM_PWM_Start+0x124>
 8003272:	2300      	movs	r3, #0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0209      	lsls	r1, r1, #8
 8003286:	430a      	orrs	r2, r1
 8003288:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_TIM_PWM_Start+0x19c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_TIM_PWM_Start+0x14e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_TIM_PWM_Start+0x1a8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d116      	bne.n	80032cc <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a15      	ldr	r2, [pc, #84]	; (80032fc <HAL_TIM_PWM_Start+0x1ac>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d016      	beq.n	80032de <HAL_TIM_PWM_Start+0x18e>
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	025b      	lsls	r3, r3, #9
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d011      	beq.n	80032de <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	e008      	b.n	80032de <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2101      	movs	r1, #1
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e000      	b.n	80032e0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	40000400 	.word	0x40000400
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2317      	movs	r3, #23
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	223c      	movs	r2, #60	; 0x3c
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_TIM_PWM_ConfigChannel+0x22>
 800331e:	2302      	movs	r3, #2
 8003320:	e0e5      	b.n	80034ee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	223c      	movs	r2, #60	; 0x3c
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b14      	cmp	r3, #20
 800332e:	d900      	bls.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003330:	e0d1      	b.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	009a      	lsls	r2, r3, #2
 8003336:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003338:	18d3      	adds	r3, r2, r3
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f000 fa1c 	bl	8003784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2108      	movs	r1, #8
 8003358:	430a      	orrs	r2, r1
 800335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2104      	movs	r1, #4
 8003368:	438a      	bics	r2, r1
 800336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
      break;
 800337e:	e0af      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	0011      	movs	r1, r2
 8003388:	0018      	movs	r0, r3
 800338a:	f000 fa7b 	bl	8003884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0109      	lsls	r1, r1, #4
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4954      	ldr	r1, [pc, #336]	; (80034fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6999      	ldr	r1, [r3, #24]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	021a      	lsls	r2, r3, #8
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	619a      	str	r2, [r3, #24]
      break;
 80033c4:	e08c      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0011      	movs	r1, r2
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 fad6 	bl	8003980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2108      	movs	r1, #8
 80033e0:	430a      	orrs	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2104      	movs	r1, #4
 80033f0:	438a      	bics	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69d9      	ldr	r1, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	61da      	str	r2, [r3, #28]
      break;
 8003406:	e06b      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	0011      	movs	r1, r2
 8003410:	0018      	movs	r0, r3
 8003412:	f000 fb37 	bl	8003a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2180      	movs	r1, #128	; 0x80
 8003422:	0109      	lsls	r1, r1, #4
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4932      	ldr	r1, [pc, #200]	; (80034fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003434:	400a      	ands	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69d9      	ldr	r1, [r3, #28]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]
      break;
 800344c:	e048      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f000 fb78 	bl	8003b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2108      	movs	r1, #8
 8003468:	430a      	orrs	r2, r1
 800346a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2104      	movs	r1, #4
 8003478:	438a      	bics	r2, r1
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800348e:	e027      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	0011      	movs	r1, r2
 8003498:	0018      	movs	r0, r3
 800349a:	f000 fbb1 	bl	8003c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	0109      	lsls	r1, r1, #4
 80034ac:	430a      	orrs	r2, r1
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4910      	ldr	r1, [pc, #64]	; (80034fc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034bc:	400a      	ands	r2, r1
 80034be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034d4:	e004      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80034d6:	2317      	movs	r3, #23
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
      break;
 80034de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

  return status;
 80034e8:	2317      	movs	r3, #23
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	781b      	ldrb	r3, [r3, #0]
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b006      	add	sp, #24
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	0800417c 	.word	0x0800417c
 80034fc:	fffffbff 	.word	0xfffffbff

08003500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	230f      	movs	r3, #15
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	; 0x3c
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIM_ConfigClockSource+0x20>
 800351c:	2302      	movs	r3, #2
 800351e:	e0bc      	b.n	800369a <HAL_TIM_ConfigClockSource+0x19a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	223c      	movs	r2, #60	; 0x3c
 8003524:	2101      	movs	r1, #1
 8003526:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223d      	movs	r2, #61	; 0x3d
 800352c:	2102      	movs	r1, #2
 800352e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800353c:	4013      	ands	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4a59      	ldr	r2, [pc, #356]	; (80036a8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2280      	movs	r2, #128	; 0x80
 8003556:	0192      	lsls	r2, r2, #6
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_TIM_ConfigClockSource+0xde>
 800355c:	2280      	movs	r2, #128	; 0x80
 800355e:	0192      	lsls	r2, r2, #6
 8003560:	4293      	cmp	r3, r2
 8003562:	d900      	bls.n	8003566 <HAL_TIM_ConfigClockSource+0x66>
 8003564:	e088      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	0152      	lsls	r2, r2, #5
 800356a:	4293      	cmp	r3, r2
 800356c:	d100      	bne.n	8003570 <HAL_TIM_ConfigClockSource+0x70>
 800356e:	e088      	b.n	8003682 <HAL_TIM_ConfigClockSource+0x182>
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	0152      	lsls	r2, r2, #5
 8003574:	4293      	cmp	r3, r2
 8003576:	d900      	bls.n	800357a <HAL_TIM_ConfigClockSource+0x7a>
 8003578:	e07e      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 800357a:	2b70      	cmp	r3, #112	; 0x70
 800357c:	d018      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0xb0>
 800357e:	d900      	bls.n	8003582 <HAL_TIM_ConfigClockSource+0x82>
 8003580:	e07a      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 8003582:	2b60      	cmp	r3, #96	; 0x60
 8003584:	d04f      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x126>
 8003586:	d900      	bls.n	800358a <HAL_TIM_ConfigClockSource+0x8a>
 8003588:	e076      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 800358a:	2b50      	cmp	r3, #80	; 0x50
 800358c:	d03b      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x106>
 800358e:	d900      	bls.n	8003592 <HAL_TIM_ConfigClockSource+0x92>
 8003590:	e072      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 8003592:	2b40      	cmp	r3, #64	; 0x40
 8003594:	d057      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0x146>
 8003596:	d900      	bls.n	800359a <HAL_TIM_ConfigClockSource+0x9a>
 8003598:	e06e      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 800359a:	2b30      	cmp	r3, #48	; 0x30
 800359c:	d063      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x166>
 800359e:	d86b      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d060      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x166>
 80035a4:	d868      	bhi.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d05d      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x166>
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d05b      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x166>
 80035ae:	e063      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6899      	ldr	r1, [r3, #8]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f000 fbf8 	bl	8003db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2277      	movs	r2, #119	; 0x77
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
      break;
 80035dc:	e052      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f000 fbe1 	bl	8003db4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2180      	movs	r1, #128	; 0x80
 80035fe:	01c9      	lsls	r1, r1, #7
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]
      break;
 8003604:	e03e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	001a      	movs	r2, r3
 8003614:	f000 fb52 	bl	8003cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2150      	movs	r1, #80	; 0x50
 800361e:	0018      	movs	r0, r3
 8003620:	f000 fbac 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 8003624:	e02e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	001a      	movs	r2, r3
 8003634:	f000 fb70 	bl	8003d18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2160      	movs	r1, #96	; 0x60
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fb9c 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 8003644:	e01e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	001a      	movs	r2, r3
 8003654:	f000 fb32 	bl	8003cbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2140      	movs	r1, #64	; 0x40
 800365e:	0018      	movs	r0, r3
 8003660:	f000 fb8c 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 8003664:	e00e      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	0019      	movs	r1, r3
 8003670:	0010      	movs	r0, r2
 8003672:	f000 fb83 	bl	8003d7c <TIM_ITRx_SetConfig>
      break;
 8003676:	e005      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003678:	230f      	movs	r3, #15
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
      break;
 8003680:	e000      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003682:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	223d      	movs	r2, #61	; 0x3d
 8003688:	2101      	movs	r1, #1
 800368a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	223c      	movs	r2, #60	; 0x3c
 8003690:	2100      	movs	r1, #0
 8003692:	5499      	strb	r1, [r3, r2]

  return status;
 8003694:	230f      	movs	r3, #15
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b004      	add	sp, #16
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	ffceff88 	.word	0xffceff88
 80036a8:	ffff00ff 	.word	0xffff00ff

080036ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <TIM_Base_SetConfig+0xc0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x20>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <TIM_Base_SetConfig+0xc4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2270      	movs	r2, #112	; 0x70
 80036d0:	4393      	bics	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a22      	ldr	r2, [pc, #136]	; (800376c <TIM_Base_SetConfig+0xc0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00f      	beq.n	8003706 <TIM_Base_SetConfig+0x5a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a21      	ldr	r2, [pc, #132]	; (8003770 <TIM_Base_SetConfig+0xc4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00b      	beq.n	8003706 <TIM_Base_SetConfig+0x5a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <TIM_Base_SetConfig+0xc8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x5a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <TIM_Base_SetConfig+0xcc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x5a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <TIM_Base_SetConfig+0xd0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <TIM_Base_SetConfig+0xd4>)
 800370a:	4013      	ands	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	4393      	bics	r3, r2
 800371e:	001a      	movs	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a0a      	ldr	r2, [pc, #40]	; (800376c <TIM_Base_SetConfig+0xc0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d007      	beq.n	8003756 <TIM_Base_SetConfig+0xaa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <TIM_Base_SetConfig+0xcc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d003      	beq.n	8003756 <TIM_Base_SetConfig+0xaa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a0a      	ldr	r2, [pc, #40]	; (800377c <TIM_Base_SetConfig+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d103      	bne.n	800375e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	615a      	str	r2, [r3, #20]
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40000400 	.word	0x40000400
 8003774:	40002000 	.word	0x40002000
 8003778:	40014400 	.word	0x40014400
 800377c:	40014800 	.word	0x40014800
 8003780:	fffffcff 	.word	0xfffffcff

08003784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	2201      	movs	r2, #1
 8003794:	4393      	bics	r3, r2
 8003796:	001a      	movs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <TIM_OC1_SetConfig+0xe8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2203      	movs	r2, #3
 80037ba:	4393      	bics	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2202      	movs	r2, #2
 80037cc:	4393      	bics	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a24      	ldr	r2, [pc, #144]	; (8003870 <TIM_OC1_SetConfig+0xec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_OC1_SetConfig+0x6e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a23      	ldr	r2, [pc, #140]	; (8003874 <TIM_OC1_SetConfig+0xf0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_OC1_SetConfig+0x6e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <TIM_OC1_SetConfig+0xf4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10c      	bne.n	800380c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2208      	movs	r2, #8
 80037f6:	4393      	bics	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2204      	movs	r2, #4
 8003808:	4393      	bics	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a18      	ldr	r2, [pc, #96]	; (8003870 <TIM_OC1_SetConfig+0xec>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_OC1_SetConfig+0xa0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_OC1_SetConfig+0xf0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_OC1_SetConfig+0xa0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM_OC1_SetConfig+0xf4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <TIM_OC1_SetConfig+0xf8>)
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4a14      	ldr	r2, [pc, #80]	; (8003880 <TIM_OC1_SetConfig+0xfc>)
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b006      	add	sp, #24
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	fffeff8f 	.word	0xfffeff8f
 8003870:	40012c00 	.word	0x40012c00
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800
 800387c:	fffffeff 	.word	0xfffffeff
 8003880:	fffffdff 	.word	0xfffffdff

08003884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	2210      	movs	r2, #16
 8003894:	4393      	bics	r3, r2
 8003896:	001a      	movs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	; (8003964 <TIM_OC2_SetConfig+0xe0>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a2b      	ldr	r2, [pc, #172]	; (8003968 <TIM_OC2_SetConfig+0xe4>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4393      	bics	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <TIM_OC2_SetConfig+0xe8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10d      	bne.n	8003902 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	4393      	bics	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2240      	movs	r2, #64	; 0x40
 80038fe:	4393      	bics	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <TIM_OC2_SetConfig+0xe8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_OC2_SetConfig+0x96>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <TIM_OC2_SetConfig+0xec>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_OC2_SetConfig+0x96>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_OC2_SetConfig+0xf0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d113      	bne.n	8003942 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a16      	ldr	r2, [pc, #88]	; (8003978 <TIM_OC2_SetConfig+0xf4>)
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <TIM_OC2_SetConfig+0xf8>)
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	621a      	str	r2, [r3, #32]
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b006      	add	sp, #24
 8003962:	bd80      	pop	{r7, pc}
 8003964:	feff8fff 	.word	0xfeff8fff
 8003968:	fffffcff 	.word	0xfffffcff
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	fffffbff 	.word	0xfffffbff
 800397c:	fffff7ff 	.word	0xfffff7ff

08003980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <TIM_OC3_SetConfig+0xdc>)
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <TIM_OC3_SetConfig+0xe0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2203      	movs	r2, #3
 80039b4:	4393      	bics	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <TIM_OC3_SetConfig+0xe4>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <TIM_OC3_SetConfig+0xe8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d10d      	bne.n	80039fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <TIM_OC3_SetConfig+0xec>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <TIM_OC3_SetConfig+0xf0>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	; (8003a68 <TIM_OC3_SetConfig+0xe8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_OC3_SetConfig+0x92>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <TIM_OC3_SetConfig+0xf4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_OC3_SetConfig+0x92>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	; (8003a78 <TIM_OC3_SetConfig+0xf8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <TIM_OC3_SetConfig+0xfc>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <TIM_OC3_SetConfig+0x100>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b006      	add	sp, #24
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fffffeff 	.word	0xfffffeff
 8003a60:	fffeff8f 	.word	0xfffeff8f
 8003a64:	fffffdff 	.word	0xfffffdff
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	fffff7ff 	.word	0xfffff7ff
 8003a70:	fffffbff 	.word	0xfffffbff
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	ffffefff 	.word	0xffffefff
 8003a80:	ffffdfff 	.word	0xffffdfff

08003a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a26      	ldr	r2, [pc, #152]	; (8003b2c <TIM_OC4_SetConfig+0xa8>)
 8003a94:	401a      	ands	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a20      	ldr	r2, [pc, #128]	; (8003b30 <TIM_OC4_SetConfig+0xac>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <TIM_OC4_SetConfig+0xb0>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <TIM_OC4_SetConfig+0xb4>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	031b      	lsls	r3, r3, #12
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a17      	ldr	r2, [pc, #92]	; (8003b3c <TIM_OC4_SetConfig+0xb8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_OC4_SetConfig+0x70>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <TIM_OC4_SetConfig+0xbc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_OC4_SetConfig+0x70>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <TIM_OC4_SetConfig+0xc0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d109      	bne.n	8003b08 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <TIM_OC4_SetConfig+0xc4>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	019b      	lsls	r3, r3, #6
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b006      	add	sp, #24
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	ffffefff 	.word	0xffffefff
 8003b30:	feff8fff 	.word	0xfeff8fff
 8003b34:	fffffcff 	.word	0xfffffcff
 8003b38:	ffffdfff 	.word	0xffffdfff
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800
 8003b48:	ffffbfff 	.word	0xffffbfff

08003b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <TIM_OC5_SetConfig+0x9c>)
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <TIM_OC5_SetConfig+0xa0>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <TIM_OC5_SetConfig+0xa4>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <TIM_OC5_SetConfig+0xa8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d007      	beq.n	8003bb2 <TIM_OC5_SetConfig+0x66>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <TIM_OC5_SetConfig+0xac>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_OC5_SetConfig+0x66>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <TIM_OC5_SetConfig+0xb0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d109      	bne.n	8003bc6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a0c      	ldr	r2, [pc, #48]	; (8003be8 <TIM_OC5_SetConfig+0x9c>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fffeffff 	.word	0xfffeffff
 8003bec:	fffeff8f 	.word	0xfffeff8f
 8003bf0:	fffdffff 	.word	0xfffdffff
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <TIM_OC6_SetConfig+0xa0>)
 8003c10:	401a      	ands	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <TIM_OC6_SetConfig+0xa4>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <TIM_OC6_SetConfig+0xa8>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	051b      	lsls	r3, r3, #20
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <TIM_OC6_SetConfig+0xac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_OC6_SetConfig+0x68>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <TIM_OC6_SetConfig+0xb0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC6_SetConfig+0x68>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <TIM_OC6_SetConfig+0xb4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d109      	bne.n	8003c7c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <TIM_OC6_SetConfig+0xb8>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b006      	add	sp, #24
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	ffefffff 	.word	0xffefffff
 8003ca4:	feff8fff 	.word	0xfeff8fff
 8003ca8:	ffdfffff 	.word	0xffdfffff
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	fffbffff 	.word	0xfffbffff

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4393      	bics	r3, r2
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	22f0      	movs	r2, #240	; 0xf0
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	4393      	bics	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	621a      	str	r2, [r3, #32]
}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b006      	add	sp, #24
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	2210      	movs	r2, #16
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <TIM_TI2_ConfigInputStage+0x60>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	031b      	lsls	r3, r3, #12
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	22a0      	movs	r2, #160	; 0xa0
 8003d54:	4393      	bics	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b006      	add	sp, #24
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	ffff0fff 	.word	0xffff0fff

08003d7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <TIM_ITRx_SetConfig+0x34>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b004      	add	sp, #16
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	ffcfff8f 	.word	0xffcfff8f

08003db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <TIM_ETR_SetConfig+0x3c>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b006      	add	sp, #24
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	ffff00ff 	.word	0xffff00ff

08003df4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	221f      	movs	r2, #31
 8003e04:	4013      	ands	r3, r2
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	43d2      	mvns	r2, r2
 8003e16:	401a      	ands	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	211f      	movs	r1, #31
 8003e24:	400b      	ands	r3, r1
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4099      	lsls	r1, r3
 8003e2a:	000b      	movs	r3, r1
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b006      	add	sp, #24
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	223c      	movs	r2, #60	; 0x3c
 8003e4a:	5c9b      	ldrb	r3, [r3, r2]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e04a      	b.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	223c      	movs	r2, #60	; 0x3c
 8003e58:	2101      	movs	r1, #1
 8003e5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	223d      	movs	r2, #61	; 0x3d
 8003e60:	2102      	movs	r1, #2
 8003e62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2270      	movs	r2, #112	; 0x70
 8003e94:	4393      	bics	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	4393      	bics	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	223d      	movs	r2, #61	; 0x3d
 8003edc:	2101      	movs	r1, #1
 8003ede:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	223c      	movs	r2, #60	; 0x3c
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b004      	add	sp, #16
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	ff0fffff 	.word	0xff0fffff
 8003efc:	40000400 	.word	0x40000400

08003f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	223c      	movs	r2, #60	; 0x3c
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e079      	b.n	8004010 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223c      	movs	r2, #60	; 0x3c
 8003f20:	2101      	movs	r1, #1
 8003f22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	22ff      	movs	r2, #255	; 0xff
 8003f28:	4393      	bics	r3, r2
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a38      	ldr	r2, [pc, #224]	; (8004018 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003f38:	401a      	ands	r2, r3
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4a35      	ldr	r2, [pc, #212]	; (800401c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003f46:	401a      	ands	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a33      	ldr	r2, [pc, #204]	; (8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f54:	401a      	ands	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a30      	ldr	r2, [pc, #192]	; (8004024 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f62:	401a      	ands	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f70:	401a      	ands	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f7e:	401a      	ands	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a29      	ldr	r2, [pc, #164]	; (8004030 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a24      	ldr	r2, [pc, #144]	; (8004038 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d121      	bne.n	8003ffe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	; (800403c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003fbe:	401a      	ands	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003fce:	401a      	ands	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a1a      	ldr	r2, [pc, #104]	; (8004044 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003fdc:	401a      	ands	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d106      	bne.n	8003ffe <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	223c      	movs	r2, #60	; 0x3c
 800400a:	2100      	movs	r1, #0
 800400c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	b004      	add	sp, #16
 8004016:	bd80      	pop	{r7, pc}
 8004018:	fffffcff 	.word	0xfffffcff
 800401c:	fffffbff 	.word	0xfffffbff
 8004020:	fffff7ff 	.word	0xfffff7ff
 8004024:	ffffefff 	.word	0xffffefff
 8004028:	ffffdfff 	.word	0xffffdfff
 800402c:	ffffbfff 	.word	0xffffbfff
 8004030:	fff0ffff 	.word	0xfff0ffff
 8004034:	40012c00 	.word	0x40012c00
 8004038:	efffffff 	.word	0xefffffff
 800403c:	ff0fffff 	.word	0xff0fffff
 8004040:	feffffff 	.word	0xfeffffff
 8004044:	fdffffff 	.word	0xfdffffff
 8004048:	dfffffff 	.word	0xdfffffff

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	2600      	movs	r6, #0
 8004050:	4d0c      	ldr	r5, [pc, #48]	; (8004084 <__libc_init_array+0x38>)
 8004052:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004054:	1b64      	subs	r4, r4, r5
 8004056:	10a4      	asrs	r4, r4, #2
 8004058:	42a6      	cmp	r6, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	2600      	movs	r6, #0
 800405e:	f000 f821 	bl	80040a4 <_init>
 8004062:	4d0a      	ldr	r5, [pc, #40]	; (800408c <__libc_init_array+0x40>)
 8004064:	4c0a      	ldr	r4, [pc, #40]	; (8004090 <__libc_init_array+0x44>)
 8004066:	1b64      	subs	r4, r4, r5
 8004068:	10a4      	asrs	r4, r4, #2
 800406a:	42a6      	cmp	r6, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	00b3      	lsls	r3, r6, #2
 8004072:	58eb      	ldr	r3, [r5, r3]
 8004074:	4798      	blx	r3
 8004076:	3601      	adds	r6, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	00b3      	lsls	r3, r6, #2
 800407c:	58eb      	ldr	r3, [r5, r3]
 800407e:	4798      	blx	r3
 8004080:	3601      	adds	r6, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	080041d0 	.word	0x080041d0
 8004088:	080041d0 	.word	0x080041d0
 800408c:	080041d0 	.word	0x080041d0
 8004090:	080041d4 	.word	0x080041d4

08004094 <memset>:
 8004094:	0003      	movs	r3, r0
 8004096:	1882      	adds	r2, r0, r2
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	7019      	strb	r1, [r3, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
